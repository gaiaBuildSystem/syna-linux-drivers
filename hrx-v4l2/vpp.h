//////
/// don't edit! auto-generated by docc: vpp.h
////////////////////////////////////////////////////////////
#ifndef vpp_h
#define vpp_h (){}


#include "ctypes.h"

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

#ifndef _DOCC_H_BITOPS_
#define _DOCC_H_BITOPS_ (){}

    #define _bSETMASK_(b)                                      ((b)<32 ? (1<<((b)&31)) : 0)
    #define _NSETMASK_(msb,lsb)                                (_bSETMASK_((msb)+1)-_bSETMASK_(lsb))
    #define _bCLRMASK_(b)                                      (~_bSETMASK_(b))
    #define _NCLRMASK_(msb,lsb)                                (~_NSETMASK_(msb,lsb))
    #define _BFGET_(r,msb,lsb)                                 (_NSETMASK_((msb)-(lsb),0)&((r)>>(lsb)))
    #define _BFSET_(r,msb,lsb,v)                               do{ (r)&=_NCLRMASK_(msb,lsb); (r)|=_NSETMASK_(msb,lsb)&((v)<<(lsb)); }while(0)

#endif



//////
/// 
/// $INTERFACE TG_PL                                    (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 X                    (P)
///               %unsigned 13 start                     0x0
///               %unsigned 13 end                       0x0
///               %%        6          # Stuffing bits...
///     @ 0x00004 Y                    (P)
///               %unsigned 12 start                     0x0
///               %unsigned 12 end                       0x0
///                                    ###
///                                    * Horizontal and Vertical Start and End values for a plane
///                                    ###
///               %%        8          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      50b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_TG_PL
#define h_TG_PL (){}

    #define     RA_TG_PL_X                                     0x0000

    #define     BA_TG_PL_X_start                               0x0000
    #define     B16TG_PL_X_start                               0x0000
    #define   LSb32TG_PL_X_start                                  0
    #define   LSb16TG_PL_X_start                                  0
    #define       bTG_PL_X_start                               13
    #define   MSK32TG_PL_X_start                                  0x00001FFF

    #define     BA_TG_PL_X_end                                 0x0001
    #define     B16TG_PL_X_end                                 0x0000
    #define   LSb32TG_PL_X_end                                    13
    #define   LSb16TG_PL_X_end                                    13
    #define       bTG_PL_X_end                                 13
    #define   MSK32TG_PL_X_end                                    0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PL_Y                                     0x0004

    #define     BA_TG_PL_Y_start                               0x0004
    #define     B16TG_PL_Y_start                               0x0004
    #define   LSb32TG_PL_Y_start                                  0
    #define   LSb16TG_PL_Y_start                                  0
    #define       bTG_PL_Y_start                               12
    #define   MSK32TG_PL_Y_start                                  0x00000FFF

    #define     BA_TG_PL_Y_end                                 0x0005
    #define     B16TG_PL_Y_end                                 0x0004
    #define   LSb32TG_PL_Y_end                                    12
    #define   LSb16TG_PL_Y_end                                    12
    #define       bTG_PL_Y_end                                 12
    #define   MSK32TG_PL_Y_end                                    0x00FFF000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_TG_PL {
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PL_X_start(r32)                          _BFGET_(r32,12, 0)
    #define   SET32TG_PL_X_start(r32,v)                        _BFSET_(r32,12, 0,v)
    #define   GET16TG_PL_X_start(r16)                          _BFGET_(r16,12, 0)
    #define   SET16TG_PL_X_start(r16,v)                        _BFSET_(r16,12, 0,v)

    #define   GET32TG_PL_X_end(r32)                            _BFGET_(r32,25,13)
    #define   SET32TG_PL_X_end(r32,v)                          _BFSET_(r32,25,13,v)

    #define     w32TG_PL_X                                     {\
            UNSG32 uX_start                                    : 13;\
            UNSG32 uX_end                                      : 13;\
            UNSG32 RSVDx0_b26                                  :  6;\
          }
    union { UNSG32 u32TG_PL_X;
            struct w32TG_PL_X;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PL_Y_start(r32)                          _BFGET_(r32,11, 0)
    #define   SET32TG_PL_Y_start(r32,v)                        _BFSET_(r32,11, 0,v)
    #define   GET16TG_PL_Y_start(r16)                          _BFGET_(r16,11, 0)
    #define   SET16TG_PL_Y_start(r16,v)                        _BFSET_(r16,11, 0,v)

    #define   GET32TG_PL_Y_end(r32)                            _BFGET_(r32,23,12)
    #define   SET32TG_PL_Y_end(r32,v)                          _BFSET_(r32,23,12,v)

    #define     w32TG_PL_Y                                     {\
            UNSG32 uY_start                                    : 12;\
            UNSG32 uY_end                                      : 12;\
            UNSG32 RSVDx4_b24                                  :  8;\
          }
    union { UNSG32 u32TG_PL_Y;
            struct w32TG_PL_Y;
          };
    ///////////////////////////////////////////////////////////
    } SIE_TG_PL;

    typedef union  T32TG_PL_X
          { UNSG32 u32;
            struct w32TG_PL_X;
                 } T32TG_PL_X;
    typedef union  T32TG_PL_Y
          { UNSG32 u32;
            struct w32TG_PL_Y;
                 } T32TG_PL_Y;
    ///////////////////////////////////////////////////////////

    typedef union  TTG_PL_X
          { UNSG32 u32[1];
            struct {
            struct w32TG_PL_X;
                   };
                 } TTG_PL_X;
    typedef union  TTG_PL_Y
          { UNSG32 u32[1];
            struct {
            struct w32TG_PL_Y;
                   };
                 } TTG_PL_Y;

    ///////////////////////////////////////////////////////////
     SIGN32 TG_PL_drvrd(SIE_TG_PL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 TG_PL_drvwr(SIE_TG_PL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void TG_PL_reset(SIE_TG_PL *p);
     SIGN32 TG_PL_cmp  (SIE_TG_PL *p, SIE_TG_PL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define TG_PL_check(p,pie,pfx,hLOG) TG_PL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define TG_PL_print(p,    pfx,hLOG) TG_PL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: TG_PL
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE TG_PRG                                   (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               %unsigned 2  mode                      0x2
///                                    ###
///                                    * Generates the hcnt and vcnt with the sref. The different modes programmable are : 0 = free running mode, 1 = sync mode, 2= Semi sync mode
///                                    ###
///               %unsigned 8  lwin                      0xF
///                                    ###
///                                    * Used in generation of lock sync and lock active for resetting hcnt and vcnt in TG
///                                    ###
///               %unsigned 12 frst                      0x0
///                                    ###
///                                    * Position during vertical blanking time at which frame reset is generated
///                                    ###
///               %unsigned 10 freeze                    0x0
///                                    ###
///                                    * Freeze controls for TG; this register should be used by SW when it wants to modify the plane position/size registers so that HW does not pick-up the intermediate values written.
///                                    ###
///     @ 0x00004 CTRL1                (P)
///               %unsigned 2  sync_ctrl                 0x0
///                                    ###
///                                    * To provide low latency for pass-through where the latency requirement is less than one frame
///                                    * [0] : Enable Bit. For low latency pass-through, enable this bit to 1’b1. Default it is zero.
///                                    * [1] : The SW will get active video start event from Cypress and then it will program SYNC bit SYNC_CTRL[1] to 1’b1 in VPP for low latency graphics (RGB) pass through.
///                                    ###
///               %unsigned 9  res_change_en             0x0
///                                    ###
///                                    * Enable bits for dynamic resolution change of registers used for generating timing signals
///                                    * [0] – enable bit for Htotal/Vtotal programmable register
///                                    * [1] - enable bit for VX programmable register
///                                    * [2] - enable bit for Hsync (start & end) programmable register
///                                    * [3] - enable bit for Vsync (startY & endY) programmable register
///                                    * [4] - enable bit for Plane0 (startX & endX) programmable register
///                                    * [5] - enable bit for Plane0 (startY & endY) programmable register
///                                    * [6] - enable bit for Field (startX & endX) programmable register
///                                    * [7] - enable bit for Field (startY & endY) programmable register
///                                    * [8] - enable bit for Vsync (startX & endX) programmable register
///                                    ###
///               %%        21         # Stuffing bits...
///     @ 0x00008 Total                (P)
///               %unsigned 12 vertical                  0x0
///                                    ###
///                                    * Vertical Total values (in lines).
///                                    ###
///               %unsigned 13 horizontal                0x0
///                                    ###
///                                    * Horizontal Total values (in pixels)
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x0000C Initial              (P)
///               %unsigned 13 xi                        0x0
///                                    ###
///                                    * Initial Horizontal position value
///                                    ###
///               %unsigned 12 yi                        0x0
///                                    ###
///                                    * Initial Vertical position value
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00010 HSYNC                (P)
///               %unsigned 13 h_start                   0x0
///                                    ###
///                                    * Horizontal Start value indicated for Hsync position
///                                    ###
///               %unsigned 13 h_end                     0x0
///                                    ###
///                                    * Horizontal End value indicated for Hsync position
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00014 VSYNC                (P)
///               %unsigned 12 v_start                   0x0
///                                    ###
///                                    * Vertical Start value indicated for Vsync position
///                                    ###
///               %unsigned 12 v_end                     0x0
///                                    ###
///                                    * Vertical End value indicated for Vsync position
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00018 VS                   (P)
///               %unsigned 13 h_start                   0x0
///                                    ###
///                                    * Horizontal Start value indicated for Vsync position
///                                    ###
///               %unsigned 13 h_end                     0x0
///                                    ###
///                                    * Horizontal End value indicated for Vsync position
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0001C FT                   (P)
///               %unsigned 8  frame                     0x0
///                                    ###
///                                    * Frame total value
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00020 VX                   (P)
///               %unsigned 13 vx                        0x0
///                                    ###
///                                    * Horizontal positions at which vertical active data
///                                    ###
///               %%        19         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      36B, bits:     190b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_TG_PRG
#define h_TG_PRG (){}

    #define     RA_TG_PRG_CTRL                                 0x0000

    #define     BA_TG_PRG_CTRL_mode                            0x0000
    #define     B16TG_PRG_CTRL_mode                            0x0000
    #define   LSb32TG_PRG_CTRL_mode                               0
    #define   LSb16TG_PRG_CTRL_mode                               0
    #define       bTG_PRG_CTRL_mode                            2
    #define   MSK32TG_PRG_CTRL_mode                               0x00000003

    #define     BA_TG_PRG_CTRL_lwin                            0x0000
    #define     B16TG_PRG_CTRL_lwin                            0x0000
    #define   LSb32TG_PRG_CTRL_lwin                               2
    #define   LSb16TG_PRG_CTRL_lwin                               2
    #define       bTG_PRG_CTRL_lwin                            8
    #define   MSK32TG_PRG_CTRL_lwin                               0x000003FC

    #define     BA_TG_PRG_CTRL_frst                            0x0001
    #define     B16TG_PRG_CTRL_frst                            0x0000
    #define   LSb32TG_PRG_CTRL_frst                               10
    #define   LSb16TG_PRG_CTRL_frst                               10
    #define       bTG_PRG_CTRL_frst                            12
    #define   MSK32TG_PRG_CTRL_frst                               0x003FFC00

    #define     BA_TG_PRG_CTRL_freeze                          0x0002
    #define     B16TG_PRG_CTRL_freeze                          0x0002
    #define   LSb32TG_PRG_CTRL_freeze                             22
    #define   LSb16TG_PRG_CTRL_freeze                             6
    #define       bTG_PRG_CTRL_freeze                          10
    #define   MSK32TG_PRG_CTRL_freeze                             0xFFC00000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_CTRL1                                0x0004

    #define     BA_TG_PRG_CTRL1_sync_ctrl                      0x0004
    #define     B16TG_PRG_CTRL1_sync_ctrl                      0x0004
    #define   LSb32TG_PRG_CTRL1_sync_ctrl                         0
    #define   LSb16TG_PRG_CTRL1_sync_ctrl                         0
    #define       bTG_PRG_CTRL1_sync_ctrl                      2
    #define   MSK32TG_PRG_CTRL1_sync_ctrl                         0x00000003

    #define     BA_TG_PRG_CTRL1_res_change_en                  0x0004
    #define     B16TG_PRG_CTRL1_res_change_en                  0x0004
    #define   LSb32TG_PRG_CTRL1_res_change_en                     2
    #define   LSb16TG_PRG_CTRL1_res_change_en                     2
    #define       bTG_PRG_CTRL1_res_change_en                  9
    #define   MSK32TG_PRG_CTRL1_res_change_en                     0x000007FC
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_Total                                0x0008

    #define     BA_TG_PRG_Total_vertical                       0x0008
    #define     B16TG_PRG_Total_vertical                       0x0008
    #define   LSb32TG_PRG_Total_vertical                          0
    #define   LSb16TG_PRG_Total_vertical                          0
    #define       bTG_PRG_Total_vertical                       12
    #define   MSK32TG_PRG_Total_vertical                          0x00000FFF

    #define     BA_TG_PRG_Total_horizontal                     0x0009
    #define     B16TG_PRG_Total_horizontal                     0x0008
    #define   LSb32TG_PRG_Total_horizontal                        12
    #define   LSb16TG_PRG_Total_horizontal                        12
    #define       bTG_PRG_Total_horizontal                     13
    #define   MSK32TG_PRG_Total_horizontal                        0x01FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_Initial                              0x000C

    #define     BA_TG_PRG_Initial_xi                           0x000C
    #define     B16TG_PRG_Initial_xi                           0x000C
    #define   LSb32TG_PRG_Initial_xi                              0
    #define   LSb16TG_PRG_Initial_xi                              0
    #define       bTG_PRG_Initial_xi                           13
    #define   MSK32TG_PRG_Initial_xi                              0x00001FFF

    #define     BA_TG_PRG_Initial_yi                           0x000D
    #define     B16TG_PRG_Initial_yi                           0x000C
    #define   LSb32TG_PRG_Initial_yi                              13
    #define   LSb16TG_PRG_Initial_yi                              13
    #define       bTG_PRG_Initial_yi                           12
    #define   MSK32TG_PRG_Initial_yi                              0x01FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_HSYNC                                0x0010

    #define     BA_TG_PRG_HSYNC_h_start                        0x0010
    #define     B16TG_PRG_HSYNC_h_start                        0x0010
    #define   LSb32TG_PRG_HSYNC_h_start                           0
    #define   LSb16TG_PRG_HSYNC_h_start                           0
    #define       bTG_PRG_HSYNC_h_start                        13
    #define   MSK32TG_PRG_HSYNC_h_start                           0x00001FFF

    #define     BA_TG_PRG_HSYNC_h_end                          0x0011
    #define     B16TG_PRG_HSYNC_h_end                          0x0010
    #define   LSb32TG_PRG_HSYNC_h_end                             13
    #define   LSb16TG_PRG_HSYNC_h_end                             13
    #define       bTG_PRG_HSYNC_h_end                          13
    #define   MSK32TG_PRG_HSYNC_h_end                             0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_VSYNC                                0x0014

    #define     BA_TG_PRG_VSYNC_v_start                        0x0014
    #define     B16TG_PRG_VSYNC_v_start                        0x0014
    #define   LSb32TG_PRG_VSYNC_v_start                           0
    #define   LSb16TG_PRG_VSYNC_v_start                           0
    #define       bTG_PRG_VSYNC_v_start                        12
    #define   MSK32TG_PRG_VSYNC_v_start                           0x00000FFF

    #define     BA_TG_PRG_VSYNC_v_end                          0x0015
    #define     B16TG_PRG_VSYNC_v_end                          0x0014
    #define   LSb32TG_PRG_VSYNC_v_end                             12
    #define   LSb16TG_PRG_VSYNC_v_end                             12
    #define       bTG_PRG_VSYNC_v_end                          12
    #define   MSK32TG_PRG_VSYNC_v_end                             0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_VS                                   0x0018

    #define     BA_TG_PRG_VS_h_start                           0x0018
    #define     B16TG_PRG_VS_h_start                           0x0018
    #define   LSb32TG_PRG_VS_h_start                              0
    #define   LSb16TG_PRG_VS_h_start                              0
    #define       bTG_PRG_VS_h_start                           13
    #define   MSK32TG_PRG_VS_h_start                              0x00001FFF

    #define     BA_TG_PRG_VS_h_end                             0x0019
    #define     B16TG_PRG_VS_h_end                             0x0018
    #define   LSb32TG_PRG_VS_h_end                                13
    #define   LSb16TG_PRG_VS_h_end                                13
    #define       bTG_PRG_VS_h_end                             13
    #define   MSK32TG_PRG_VS_h_end                                0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_FT                                   0x001C

    #define     BA_TG_PRG_FT_frame                             0x001C
    #define     B16TG_PRG_FT_frame                             0x001C
    #define   LSb32TG_PRG_FT_frame                                0
    #define   LSb16TG_PRG_FT_frame                                0
    #define       bTG_PRG_FT_frame                             8
    #define   MSK32TG_PRG_FT_frame                                0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_TG_PRG_VX                                   0x0020

    #define     BA_TG_PRG_VX_vx                                0x0020
    #define     B16TG_PRG_VX_vx                                0x0020
    #define   LSb32TG_PRG_VX_vx                                   0
    #define   LSb16TG_PRG_VX_vx                                   0
    #define       bTG_PRG_VX_vx                                13
    #define   MSK32TG_PRG_VX_vx                                   0x00001FFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_TG_PRG {
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_CTRL_mode(r32)                       _BFGET_(r32, 1, 0)
    #define   SET32TG_PRG_CTRL_mode(r32,v)                     _BFSET_(r32, 1, 0,v)
    #define   GET16TG_PRG_CTRL_mode(r16)                       _BFGET_(r16, 1, 0)
    #define   SET16TG_PRG_CTRL_mode(r16,v)                     _BFSET_(r16, 1, 0,v)

    #define   GET32TG_PRG_CTRL_lwin(r32)                       _BFGET_(r32, 9, 2)
    #define   SET32TG_PRG_CTRL_lwin(r32,v)                     _BFSET_(r32, 9, 2,v)
    #define   GET16TG_PRG_CTRL_lwin(r16)                       _BFGET_(r16, 9, 2)
    #define   SET16TG_PRG_CTRL_lwin(r16,v)                     _BFSET_(r16, 9, 2,v)

    #define   GET32TG_PRG_CTRL_frst(r32)                       _BFGET_(r32,21,10)
    #define   SET32TG_PRG_CTRL_frst(r32,v)                     _BFSET_(r32,21,10,v)

    #define   GET32TG_PRG_CTRL_freeze(r32)                     _BFGET_(r32,31,22)
    #define   SET32TG_PRG_CTRL_freeze(r32,v)                   _BFSET_(r32,31,22,v)
    #define   GET16TG_PRG_CTRL_freeze(r16)                     _BFGET_(r16,15, 6)
    #define   SET16TG_PRG_CTRL_freeze(r16,v)                   _BFSET_(r16,15, 6,v)

    #define     w32TG_PRG_CTRL                                 {\
            UNSG32 uCTRL_mode                                  :  2;\
            UNSG32 uCTRL_lwin                                  :  8;\
            UNSG32 uCTRL_frst                                  : 12;\
            UNSG32 uCTRL_freeze                                : 10;\
          }
    union { UNSG32 u32TG_PRG_CTRL;
            struct w32TG_PRG_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_CTRL1_sync_ctrl(r32)                 _BFGET_(r32, 1, 0)
    #define   SET32TG_PRG_CTRL1_sync_ctrl(r32,v)               _BFSET_(r32, 1, 0,v)
    #define   GET16TG_PRG_CTRL1_sync_ctrl(r16)                 _BFGET_(r16, 1, 0)
    #define   SET16TG_PRG_CTRL1_sync_ctrl(r16,v)               _BFSET_(r16, 1, 0,v)

    #define   GET32TG_PRG_CTRL1_res_change_en(r32)             _BFGET_(r32,10, 2)
    #define   SET32TG_PRG_CTRL1_res_change_en(r32,v)           _BFSET_(r32,10, 2,v)
    #define   GET16TG_PRG_CTRL1_res_change_en(r16)             _BFGET_(r16,10, 2)
    #define   SET16TG_PRG_CTRL1_res_change_en(r16,v)           _BFSET_(r16,10, 2,v)

    #define     w32TG_PRG_CTRL1                                {\
            UNSG32 uCTRL1_sync_ctrl                            :  2;\
            UNSG32 uCTRL1_res_change_en                        :  9;\
            UNSG32 RSVDx4_b11                                  : 21;\
          }
    union { UNSG32 u32TG_PRG_CTRL1;
            struct w32TG_PRG_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_Total_vertical(r32)                  _BFGET_(r32,11, 0)
    #define   SET32TG_PRG_Total_vertical(r32,v)                _BFSET_(r32,11, 0,v)
    #define   GET16TG_PRG_Total_vertical(r16)                  _BFGET_(r16,11, 0)
    #define   SET16TG_PRG_Total_vertical(r16,v)                _BFSET_(r16,11, 0,v)

    #define   GET32TG_PRG_Total_horizontal(r32)                _BFGET_(r32,24,12)
    #define   SET32TG_PRG_Total_horizontal(r32,v)              _BFSET_(r32,24,12,v)

    #define     w32TG_PRG_Total                                {\
            UNSG32 uTotal_vertical                             : 12;\
            UNSG32 uTotal_horizontal                           : 13;\
            UNSG32 RSVDx8_b25                                  :  7;\
          }
    union { UNSG32 u32TG_PRG_Total;
            struct w32TG_PRG_Total;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_Initial_xi(r32)                      _BFGET_(r32,12, 0)
    #define   SET32TG_PRG_Initial_xi(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16TG_PRG_Initial_xi(r16)                      _BFGET_(r16,12, 0)
    #define   SET16TG_PRG_Initial_xi(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32TG_PRG_Initial_yi(r32)                      _BFGET_(r32,24,13)
    #define   SET32TG_PRG_Initial_yi(r32,v)                    _BFSET_(r32,24,13,v)

    #define     w32TG_PRG_Initial                              {\
            UNSG32 uInitial_xi                                 : 13;\
            UNSG32 uInitial_yi                                 : 12;\
            UNSG32 RSVDxC_b25                                  :  7;\
          }
    union { UNSG32 u32TG_PRG_Initial;
            struct w32TG_PRG_Initial;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_HSYNC_h_start(r32)                   _BFGET_(r32,12, 0)
    #define   SET32TG_PRG_HSYNC_h_start(r32,v)                 _BFSET_(r32,12, 0,v)
    #define   GET16TG_PRG_HSYNC_h_start(r16)                   _BFGET_(r16,12, 0)
    #define   SET16TG_PRG_HSYNC_h_start(r16,v)                 _BFSET_(r16,12, 0,v)

    #define   GET32TG_PRG_HSYNC_h_end(r32)                     _BFGET_(r32,25,13)
    #define   SET32TG_PRG_HSYNC_h_end(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32TG_PRG_HSYNC                                {\
            UNSG32 uHSYNC_h_start                              : 13;\
            UNSG32 uHSYNC_h_end                                : 13;\
            UNSG32 RSVDx10_b26                                 :  6;\
          }
    union { UNSG32 u32TG_PRG_HSYNC;
            struct w32TG_PRG_HSYNC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_VSYNC_v_start(r32)                   _BFGET_(r32,11, 0)
    #define   SET32TG_PRG_VSYNC_v_start(r32,v)                 _BFSET_(r32,11, 0,v)
    #define   GET16TG_PRG_VSYNC_v_start(r16)                   _BFGET_(r16,11, 0)
    #define   SET16TG_PRG_VSYNC_v_start(r16,v)                 _BFSET_(r16,11, 0,v)

    #define   GET32TG_PRG_VSYNC_v_end(r32)                     _BFGET_(r32,23,12)
    #define   SET32TG_PRG_VSYNC_v_end(r32,v)                   _BFSET_(r32,23,12,v)

    #define     w32TG_PRG_VSYNC                                {\
            UNSG32 uVSYNC_v_start                              : 12;\
            UNSG32 uVSYNC_v_end                                : 12;\
            UNSG32 RSVDx14_b24                                 :  8;\
          }
    union { UNSG32 u32TG_PRG_VSYNC;
            struct w32TG_PRG_VSYNC;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_VS_h_start(r32)                      _BFGET_(r32,12, 0)
    #define   SET32TG_PRG_VS_h_start(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16TG_PRG_VS_h_start(r16)                      _BFGET_(r16,12, 0)
    #define   SET16TG_PRG_VS_h_start(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32TG_PRG_VS_h_end(r32)                        _BFGET_(r32,25,13)
    #define   SET32TG_PRG_VS_h_end(r32,v)                      _BFSET_(r32,25,13,v)

    #define     w32TG_PRG_VS                                   {\
            UNSG32 uVS_h_start                                 : 13;\
            UNSG32 uVS_h_end                                   : 13;\
            UNSG32 RSVDx18_b26                                 :  6;\
          }
    union { UNSG32 u32TG_PRG_VS;
            struct w32TG_PRG_VS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_FT_frame(r32)                        _BFGET_(r32, 7, 0)
    #define   SET32TG_PRG_FT_frame(r32,v)                      _BFSET_(r32, 7, 0,v)
    #define   GET16TG_PRG_FT_frame(r16)                        _BFGET_(r16, 7, 0)
    #define   SET16TG_PRG_FT_frame(r16,v)                      _BFSET_(r16, 7, 0,v)

    #define     w32TG_PRG_FT                                   {\
            UNSG32 uFT_frame                                   :  8;\
            UNSG32 RSVDx1C_b8                                  : 24;\
          }
    union { UNSG32 u32TG_PRG_FT;
            struct w32TG_PRG_FT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_PRG_VX_vx(r32)                           _BFGET_(r32,12, 0)
    #define   SET32TG_PRG_VX_vx(r32,v)                         _BFSET_(r32,12, 0,v)
    #define   GET16TG_PRG_VX_vx(r16)                           _BFGET_(r16,12, 0)
    #define   SET16TG_PRG_VX_vx(r16,v)                         _BFSET_(r16,12, 0,v)

    #define     w32TG_PRG_VX                                   {\
            UNSG32 uVX_vx                                      : 13;\
            UNSG32 RSVDx20_b13                                 : 19;\
          }
    union { UNSG32 u32TG_PRG_VX;
            struct w32TG_PRG_VX;
          };
    ///////////////////////////////////////////////////////////
    } SIE_TG_PRG;

    typedef union  T32TG_PRG_CTRL
          { UNSG32 u32;
            struct w32TG_PRG_CTRL;
                 } T32TG_PRG_CTRL;
    typedef union  T32TG_PRG_CTRL1
          { UNSG32 u32;
            struct w32TG_PRG_CTRL1;
                 } T32TG_PRG_CTRL1;
    typedef union  T32TG_PRG_Total
          { UNSG32 u32;
            struct w32TG_PRG_Total;
                 } T32TG_PRG_Total;
    typedef union  T32TG_PRG_Initial
          { UNSG32 u32;
            struct w32TG_PRG_Initial;
                 } T32TG_PRG_Initial;
    typedef union  T32TG_PRG_HSYNC
          { UNSG32 u32;
            struct w32TG_PRG_HSYNC;
                 } T32TG_PRG_HSYNC;
    typedef union  T32TG_PRG_VSYNC
          { UNSG32 u32;
            struct w32TG_PRG_VSYNC;
                 } T32TG_PRG_VSYNC;
    typedef union  T32TG_PRG_VS
          { UNSG32 u32;
            struct w32TG_PRG_VS;
                 } T32TG_PRG_VS;
    typedef union  T32TG_PRG_FT
          { UNSG32 u32;
            struct w32TG_PRG_FT;
                 } T32TG_PRG_FT;
    typedef union  T32TG_PRG_VX
          { UNSG32 u32;
            struct w32TG_PRG_VX;
                 } T32TG_PRG_VX;
    ///////////////////////////////////////////////////////////

    typedef union  TTG_PRG_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_CTRL;
                   };
                 } TTG_PRG_CTRL;
    typedef union  TTG_PRG_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_CTRL1;
                   };
                 } TTG_PRG_CTRL1;
    typedef union  TTG_PRG_Total
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_Total;
                   };
                 } TTG_PRG_Total;
    typedef union  TTG_PRG_Initial
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_Initial;
                   };
                 } TTG_PRG_Initial;
    typedef union  TTG_PRG_HSYNC
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_HSYNC;
                   };
                 } TTG_PRG_HSYNC;
    typedef union  TTG_PRG_VSYNC
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_VSYNC;
                   };
                 } TTG_PRG_VSYNC;
    typedef union  TTG_PRG_VS
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_VS;
                   };
                 } TTG_PRG_VS;
    typedef union  TTG_PRG_FT
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_FT;
                   };
                 } TTG_PRG_FT;
    typedef union  TTG_PRG_VX
          { UNSG32 u32[1];
            struct {
            struct w32TG_PRG_VX;
                   };
                 } TTG_PRG_VX;

    ///////////////////////////////////////////////////////////
     SIGN32 TG_PRG_drvrd(SIE_TG_PRG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 TG_PRG_drvwr(SIE_TG_PRG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void TG_PRG_reset(SIE_TG_PRG *p);
     SIGN32 TG_PRG_cmp  (SIE_TG_PRG *p, SIE_TG_PRG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define TG_PRG_check(p,pie,pfx,hLOG) TG_PRG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define TG_PRG_print(p,    pfx,hLOG) TG_PRG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: TG_PRG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE TG                      biu              (4,4)
///     ###
///     * Register specification of interface Timing Generator
///     * There are two counters in the timing generator module. hCntr (from 1 to SIZE_X) and vCntr (from 1 to SIZE_Y).
///     * When start, the initial value will be loaded to the xCnt and yCnt
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 INIT                 (P)
///               %unsigned 16 Y                         0x1
///                                    ###
///                                    * Initial Y value which will be used to load Y counter when tg is enabled.
///                                    ###
///               %unsigned 16 X                         0x1
///                                    ###
///                                    * Initial X value which will be used to load X counter when tg is enabled.
///                                    * A whole frame scan size.
///                                    ###
///     @ 0x00004 SIZE                 (P)
///               %unsigned 16 Y                         0x465
///                                    ###
///                                    * Total scan lines per frame.
///                                    ###
///               %unsigned 16 X                         0x898
///                                    ###
///                                    * Total scan clock cycles per line.
///                                    * Hsync
///                                    ###
///     @ 0x00008 HS                   (P)
///               %unsigned 16 FE                        0x1
///                                    ###
///                                    * Hsync front edge. The first pixel position of hsync pulse.
///                                    ###
///               %unsigned 16 BE                        0x2C
///                                    ###
///                                    * Hsync back edge. The last pixel position of hsync pulse.
///                                    * HS = hCntr>=FE & hCntr<=BE
///                                    * HBlanking
///                                    ###
///     @ 0x0000C HB                   (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * HB = hCntr>=FE || hCntr<=BE.
///                                    ###
///     @ 0x00010 HB_CR                (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * HB_CR = hCntr>=FE || hCntr<=BE.
///                                    ###
///     @ 0x00014 HB_CR2               (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    * Note : to be programmed with different value (only when cropping is required). Else to be programmed same as HB FE (above register)
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * Note : to be programmed with different value (only when cropping is required). Else to be programmed same as HB BE (above register)
///                                    * HB = hCntr>=FE || hCntr<=BE.
///                                    * VS0 defines the first first pixel position of the first VSYNC (progressive or interlace mode) pulse.
///                                    * For example
///                                    * 1080i60, the VTP is the last pixel of the last line. So set both VLCNT0 and VPCNT0 to 0.
///                                    ###
///     @ 0x00018 VS0                  (P)
///               %unsigned 16 FE                        0x1
///                                    ###
///                                    * Vsync pulse front edge.
///                                    * Vsync will be asserted at the beginning of this line.
///                                    ###
///               %unsigned 16 BE                        0x5
///                                    ###
///                                    * Vsync pulse back edge.
///                                    * Vsycn pulse will be de-asserted after the end of this line.
///                                    * Vsync = (vCntr>=FE & vCntr<=BE)
///                                    * Vsync pulse 1
///                                    * defines the first pixel position of the second vSync pulse. For example
///                                    * 1080i60, the VTP is pixel 1100 of line 563. So set both VLCNT2=563. and VPCNT2 to 1100.
///                                    ###
///     @ 0x0001C VS1                  (P)
///               %unsigned 16 FE                        0x233
///                                    ###
///                                    * Vsync pulse 1 front edge line position.
///                                    * Vsync pulse 1 will be asserted at the middle of this line.
///                                    ###
///               %unsigned 16 BE                        0x238
///                                    ###
///                                    * Vsync pulse 1 back edge line position.
///                                    * Vsync pulse 1 will be de-asserted at the middle of this line.
///                                    * Vsync1 = (vCntr>=FE & hCntr>SIZEX/2) & (vCntr<=BE & hCntr<=SIZEX/2)
///                                    * Vertical blanking.
///                                    * VB0 parameter definietion
///                                    ###
///     @ 0x00020 VB0                  (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * Vblank0 = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x00024 VB0_CR               (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * Vblank0_CR = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x00028 VB0_CR2              (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    * Note : to be programmed with different value only when cropping is required. Else to be programmed same as VB0 FE (above register)
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * Note : to be programmed with different value only when cropping is required. Else to be programmed same as VB0 BE (above register)
///                                    * Vblank0 = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x0002C VB1                  (P)
///               %unsigned 16 FE                        0x231
///                                    ###
///                                    * Vblank front edge line postion
///                                    * The first line number of VB1.
///                                    ###
///               %unsigned 16 BE                        0x247
///                                    ###
///                                    * Vblank back edge line postion
///                                    * the last line numer of VB1.
///                                    * VB1 = (vCntr>=FE & vCntr<=BE)
///                                    * SCAN mode
///                                    ###
///     @ 0x00030 SCAN                 (P)
///               %unsigned 1  MODE                      0x0
///                                    : PROG                      0x0
///                                    : INTER                     0x1
///                                                 ###
///                                                 * Frame done interrupt position
///                                                 ###
///               %%        31         # Stuffing bits...
///     @ 0x00034 INTPOS               (P)
///               %unsigned 16 FRAME                     0x465
///                                    ###
///                                    * Frame interrupt status will be set at the end of this line.
///                                    * Program 0 to this register will disable frame interrupt.
///                                    ###
///               %unsigned 16 FIELD                     0x233
///                                    ###
///                                    * Field interrupt status will be set at the end of this line.
///                                    * Program 0 to this register will disable field interrupt.
///                                    * MODE
///                                    ###
///     @ 0x00038 MODE                 (P)
///               %unsigned 1  EN                        0x0
///                                    : MASTER                    0x0
///                                    : SLAVE                     0x1
///                                                 ###
///                                                 * In master mode, TG drive the control signal.
///                                                 * In slave mode, TG take the external hsync and vsync, it generate the internal sync and blank signal based on the programmed register and external hsync and vsync.
///                                                 * HREF input for slave mode.
///                                                 ###
///               %%        31         # Stuffing bits...
///     @ 0x0003C HVREF                (P)
///               %unsigned 1  SEL                       0x0
///                                    : SYNC                      0x0
///                                    : BLANK                     0x1
///                                                 ###
///                                                 * In slave mode, tg will sync to the external tg generated HREF/VREF which could be HSYBC/VSYNC or HBLANK/VBLANK. Currently only HSYNC/VSYNC is supported.
///                                                 * HSYNC and VSYNC have to be come in pair.
///                                                 ###
///               %unsigned 1  POL                       0x0
///                                    : NEG_PULSE                 0x0
///                                    : POS_PULSE                 0x1
///                                                 ###
///                                                 * 0 : indicate the input HREF/VREF are negative pulses
///                                                 * 1: indicate the input HREF/VREFare positive pulses.
///                                                 * HREF and VREF have to be the same polarity.
///                                                 * End of TG register group
///                                                 ###
///               %%        30         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      64B, bits:     420b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_TG
#define h_TG (){}

    #define     RA_TG_INIT                                     0x0000

    #define     BA_TG_INIT_Y                                   0x0000
    #define     B16TG_INIT_Y                                   0x0000
    #define   LSb32TG_INIT_Y                                      0
    #define   LSb16TG_INIT_Y                                      0
    #define       bTG_INIT_Y                                   16
    #define   MSK32TG_INIT_Y                                      0x0000FFFF

    #define     BA_TG_INIT_X                                   0x0002
    #define     B16TG_INIT_X                                   0x0002
    #define   LSb32TG_INIT_X                                      16
    #define   LSb16TG_INIT_X                                      0
    #define       bTG_INIT_X                                   16
    #define   MSK32TG_INIT_X                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_SIZE                                     0x0004

    #define     BA_TG_SIZE_Y                                   0x0004
    #define     B16TG_SIZE_Y                                   0x0004
    #define   LSb32TG_SIZE_Y                                      0
    #define   LSb16TG_SIZE_Y                                      0
    #define       bTG_SIZE_Y                                   16
    #define   MSK32TG_SIZE_Y                                      0x0000FFFF

    #define     BA_TG_SIZE_X                                   0x0006
    #define     B16TG_SIZE_X                                   0x0006
    #define   LSb32TG_SIZE_X                                      16
    #define   LSb16TG_SIZE_X                                      0
    #define       bTG_SIZE_X                                   16
    #define   MSK32TG_SIZE_X                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_HS                                       0x0008

    #define     BA_TG_HS_FE                                    0x0008
    #define     B16TG_HS_FE                                    0x0008
    #define   LSb32TG_HS_FE                                       0
    #define   LSb16TG_HS_FE                                       0
    #define       bTG_HS_FE                                    16
    #define   MSK32TG_HS_FE                                       0x0000FFFF

    #define     BA_TG_HS_BE                                    0x000A
    #define     B16TG_HS_BE                                    0x000A
    #define   LSb32TG_HS_BE                                       16
    #define   LSb16TG_HS_BE                                       0
    #define       bTG_HS_BE                                    16
    #define   MSK32TG_HS_BE                                       0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_HB                                       0x000C

    #define     BA_TG_HB_FE                                    0x000C
    #define     B16TG_HB_FE                                    0x000C
    #define   LSb32TG_HB_FE                                       0
    #define   LSb16TG_HB_FE                                       0
    #define       bTG_HB_FE                                    16
    #define   MSK32TG_HB_FE                                       0x0000FFFF

    #define     BA_TG_HB_BE                                    0x000E
    #define     B16TG_HB_BE                                    0x000E
    #define   LSb32TG_HB_BE                                       16
    #define   LSb16TG_HB_BE                                       0
    #define       bTG_HB_BE                                    16
    #define   MSK32TG_HB_BE                                       0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_HB_CR                                    0x0010

    #define     BA_TG_HB_CR_FE                                 0x0010
    #define     B16TG_HB_CR_FE                                 0x0010
    #define   LSb32TG_HB_CR_FE                                    0
    #define   LSb16TG_HB_CR_FE                                    0
    #define       bTG_HB_CR_FE                                 16
    #define   MSK32TG_HB_CR_FE                                    0x0000FFFF

    #define     BA_TG_HB_CR_BE                                 0x0012
    #define     B16TG_HB_CR_BE                                 0x0012
    #define   LSb32TG_HB_CR_BE                                    16
    #define   LSb16TG_HB_CR_BE                                    0
    #define       bTG_HB_CR_BE                                 16
    #define   MSK32TG_HB_CR_BE                                    0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_HB_CR2                                   0x0014

    #define     BA_TG_HB_CR2_FE                                0x0014
    #define     B16TG_HB_CR2_FE                                0x0014
    #define   LSb32TG_HB_CR2_FE                                   0
    #define   LSb16TG_HB_CR2_FE                                   0
    #define       bTG_HB_CR2_FE                                16
    #define   MSK32TG_HB_CR2_FE                                   0x0000FFFF

    #define     BA_TG_HB_CR2_BE                                0x0016
    #define     B16TG_HB_CR2_BE                                0x0016
    #define   LSb32TG_HB_CR2_BE                                   16
    #define   LSb16TG_HB_CR2_BE                                   0
    #define       bTG_HB_CR2_BE                                16
    #define   MSK32TG_HB_CR2_BE                                   0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VS0                                      0x0018

    #define     BA_TG_VS0_FE                                   0x0018
    #define     B16TG_VS0_FE                                   0x0018
    #define   LSb32TG_VS0_FE                                      0
    #define   LSb16TG_VS0_FE                                      0
    #define       bTG_VS0_FE                                   16
    #define   MSK32TG_VS0_FE                                      0x0000FFFF

    #define     BA_TG_VS0_BE                                   0x001A
    #define     B16TG_VS0_BE                                   0x001A
    #define   LSb32TG_VS0_BE                                      16
    #define   LSb16TG_VS0_BE                                      0
    #define       bTG_VS0_BE                                   16
    #define   MSK32TG_VS0_BE                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VS1                                      0x001C

    #define     BA_TG_VS1_FE                                   0x001C
    #define     B16TG_VS1_FE                                   0x001C
    #define   LSb32TG_VS1_FE                                      0
    #define   LSb16TG_VS1_FE                                      0
    #define       bTG_VS1_FE                                   16
    #define   MSK32TG_VS1_FE                                      0x0000FFFF

    #define     BA_TG_VS1_BE                                   0x001E
    #define     B16TG_VS1_BE                                   0x001E
    #define   LSb32TG_VS1_BE                                      16
    #define   LSb16TG_VS1_BE                                      0
    #define       bTG_VS1_BE                                   16
    #define   MSK32TG_VS1_BE                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VB0                                      0x0020

    #define     BA_TG_VB0_FE                                   0x0020
    #define     B16TG_VB0_FE                                   0x0020
    #define   LSb32TG_VB0_FE                                      0
    #define   LSb16TG_VB0_FE                                      0
    #define       bTG_VB0_FE                                   16
    #define   MSK32TG_VB0_FE                                      0x0000FFFF

    #define     BA_TG_VB0_BE                                   0x0022
    #define     B16TG_VB0_BE                                   0x0022
    #define   LSb32TG_VB0_BE                                      16
    #define   LSb16TG_VB0_BE                                      0
    #define       bTG_VB0_BE                                   16
    #define   MSK32TG_VB0_BE                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VB0_CR                                   0x0024

    #define     BA_TG_VB0_CR_FE                                0x0024
    #define     B16TG_VB0_CR_FE                                0x0024
    #define   LSb32TG_VB0_CR_FE                                   0
    #define   LSb16TG_VB0_CR_FE                                   0
    #define       bTG_VB0_CR_FE                                16
    #define   MSK32TG_VB0_CR_FE                                   0x0000FFFF

    #define     BA_TG_VB0_CR_BE                                0x0026
    #define     B16TG_VB0_CR_BE                                0x0026
    #define   LSb32TG_VB0_CR_BE                                   16
    #define   LSb16TG_VB0_CR_BE                                   0
    #define       bTG_VB0_CR_BE                                16
    #define   MSK32TG_VB0_CR_BE                                   0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VB0_CR2                                  0x0028

    #define     BA_TG_VB0_CR2_FE                               0x0028
    #define     B16TG_VB0_CR2_FE                               0x0028
    #define   LSb32TG_VB0_CR2_FE                                  0
    #define   LSb16TG_VB0_CR2_FE                                  0
    #define       bTG_VB0_CR2_FE                               16
    #define   MSK32TG_VB0_CR2_FE                                  0x0000FFFF

    #define     BA_TG_VB0_CR2_BE                               0x002A
    #define     B16TG_VB0_CR2_BE                               0x002A
    #define   LSb32TG_VB0_CR2_BE                                  16
    #define   LSb16TG_VB0_CR2_BE                                  0
    #define       bTG_VB0_CR2_BE                               16
    #define   MSK32TG_VB0_CR2_BE                                  0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_VB1                                      0x002C

    #define     BA_TG_VB1_FE                                   0x002C
    #define     B16TG_VB1_FE                                   0x002C
    #define   LSb32TG_VB1_FE                                      0
    #define   LSb16TG_VB1_FE                                      0
    #define       bTG_VB1_FE                                   16
    #define   MSK32TG_VB1_FE                                      0x0000FFFF

    #define     BA_TG_VB1_BE                                   0x002E
    #define     B16TG_VB1_BE                                   0x002E
    #define   LSb32TG_VB1_BE                                      16
    #define   LSb16TG_VB1_BE                                      0
    #define       bTG_VB1_BE                                   16
    #define   MSK32TG_VB1_BE                                      0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_SCAN                                     0x0030

    #define     BA_TG_SCAN_MODE                                0x0030
    #define     B16TG_SCAN_MODE                                0x0030
    #define   LSb32TG_SCAN_MODE                                   0
    #define   LSb16TG_SCAN_MODE                                   0
    #define       bTG_SCAN_MODE                                1
    #define   MSK32TG_SCAN_MODE                                   0x00000001
    #define        TG_SCAN_MODE_PROG                                        0x0
    #define        TG_SCAN_MODE_INTER                                       0x1
    ///////////////////////////////////////////////////////////
    #define     RA_TG_INTPOS                                   0x0034

    #define     BA_TG_INTPOS_FRAME                             0x0034
    #define     B16TG_INTPOS_FRAME                             0x0034
    #define   LSb32TG_INTPOS_FRAME                                0
    #define   LSb16TG_INTPOS_FRAME                                0
    #define       bTG_INTPOS_FRAME                             16
    #define   MSK32TG_INTPOS_FRAME                                0x0000FFFF

    #define     BA_TG_INTPOS_FIELD                             0x0036
    #define     B16TG_INTPOS_FIELD                             0x0036
    #define   LSb32TG_INTPOS_FIELD                                16
    #define   LSb16TG_INTPOS_FIELD                                0
    #define       bTG_INTPOS_FIELD                             16
    #define   MSK32TG_INTPOS_FIELD                                0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MODE                                     0x0038

    #define     BA_TG_MODE_EN                                  0x0038
    #define     B16TG_MODE_EN                                  0x0038
    #define   LSb32TG_MODE_EN                                     0
    #define   LSb16TG_MODE_EN                                     0
    #define       bTG_MODE_EN                                  1
    #define   MSK32TG_MODE_EN                                     0x00000001
    #define        TG_MODE_EN_MASTER                                        0x0
    #define        TG_MODE_EN_SLAVE                                         0x1
    ///////////////////////////////////////////////////////////
    #define     RA_TG_HVREF                                    0x003C

    #define     BA_TG_HVREF_SEL                                0x003C
    #define     B16TG_HVREF_SEL                                0x003C
    #define   LSb32TG_HVREF_SEL                                   0
    #define   LSb16TG_HVREF_SEL                                   0
    #define       bTG_HVREF_SEL                                1
    #define   MSK32TG_HVREF_SEL                                   0x00000001
    #define        TG_HVREF_SEL_SYNC                                        0x0
    #define        TG_HVREF_SEL_BLANK                                       0x1

    #define     BA_TG_HVREF_POL                                0x003C
    #define     B16TG_HVREF_POL                                0x003C
    #define   LSb32TG_HVREF_POL                                   1
    #define   LSb16TG_HVREF_POL                                   1
    #define       bTG_HVREF_POL                                1
    #define   MSK32TG_HVREF_POL                                   0x00000002
    #define        TG_HVREF_POL_NEG_PULSE                                   0x0
    #define        TG_HVREF_POL_POS_PULSE                                   0x1
    ///////////////////////////////////////////////////////////

    typedef struct SIE_TG {
    ///////////////////////////////////////////////////////////
    #define   GET32TG_INIT_Y(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_INIT_Y(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_INIT_Y(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_INIT_Y(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_INIT_X(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_INIT_X(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_INIT_X(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_INIT_X(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_INIT                                     {\
            UNSG32 uINIT_Y                                     : 16;\
            UNSG32 uINIT_X                                     : 16;\
          }
    union { UNSG32 u32TG_INIT;
            struct w32TG_INIT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_SIZE_Y(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_SIZE_Y(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_SIZE_Y(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_SIZE_Y(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_SIZE_X(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_SIZE_X(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_SIZE_X(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_SIZE_X(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_SIZE                                     {\
            UNSG32 uSIZE_Y                                     : 16;\
            UNSG32 uSIZE_X                                     : 16;\
          }
    union { UNSG32 u32TG_SIZE;
            struct w32TG_SIZE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_HS_FE(r32)                               _BFGET_(r32,15, 0)
    #define   SET32TG_HS_FE(r32,v)                             _BFSET_(r32,15, 0,v)
    #define   GET16TG_HS_FE(r16)                               _BFGET_(r16,15, 0)
    #define   SET16TG_HS_FE(r16,v)                             _BFSET_(r16,15, 0,v)

    #define   GET32TG_HS_BE(r32)                               _BFGET_(r32,31,16)
    #define   SET32TG_HS_BE(r32,v)                             _BFSET_(r32,31,16,v)
    #define   GET16TG_HS_BE(r16)                               _BFGET_(r16,15, 0)
    #define   SET16TG_HS_BE(r16,v)                             _BFSET_(r16,15, 0,v)

    #define     w32TG_HS                                       {\
            UNSG32 uHS_FE                                      : 16;\
            UNSG32 uHS_BE                                      : 16;\
          }
    union { UNSG32 u32TG_HS;
            struct w32TG_HS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_HB_FE(r32)                               _BFGET_(r32,15, 0)
    #define   SET32TG_HB_FE(r32,v)                             _BFSET_(r32,15, 0,v)
    #define   GET16TG_HB_FE(r16)                               _BFGET_(r16,15, 0)
    #define   SET16TG_HB_FE(r16,v)                             _BFSET_(r16,15, 0,v)

    #define   GET32TG_HB_BE(r32)                               _BFGET_(r32,31,16)
    #define   SET32TG_HB_BE(r32,v)                             _BFSET_(r32,31,16,v)
    #define   GET16TG_HB_BE(r16)                               _BFGET_(r16,15, 0)
    #define   SET16TG_HB_BE(r16,v)                             _BFSET_(r16,15, 0,v)

    #define     w32TG_HB                                       {\
            UNSG32 uHB_FE                                      : 16;\
            UNSG32 uHB_BE                                      : 16;\
          }
    union { UNSG32 u32TG_HB;
            struct w32TG_HB;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_HB_CR_FE(r32)                            _BFGET_(r32,15, 0)
    #define   SET32TG_HB_CR_FE(r32,v)                          _BFSET_(r32,15, 0,v)
    #define   GET16TG_HB_CR_FE(r16)                            _BFGET_(r16,15, 0)
    #define   SET16TG_HB_CR_FE(r16,v)                          _BFSET_(r16,15, 0,v)

    #define   GET32TG_HB_CR_BE(r32)                            _BFGET_(r32,31,16)
    #define   SET32TG_HB_CR_BE(r32,v)                          _BFSET_(r32,31,16,v)
    #define   GET16TG_HB_CR_BE(r16)                            _BFGET_(r16,15, 0)
    #define   SET16TG_HB_CR_BE(r16,v)                          _BFSET_(r16,15, 0,v)

    #define     w32TG_HB_CR                                    {\
            UNSG32 uHB_CR_FE                                   : 16;\
            UNSG32 uHB_CR_BE                                   : 16;\
          }
    union { UNSG32 u32TG_HB_CR;
            struct w32TG_HB_CR;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_HB_CR2_FE(r32)                           _BFGET_(r32,15, 0)
    #define   SET32TG_HB_CR2_FE(r32,v)                         _BFSET_(r32,15, 0,v)
    #define   GET16TG_HB_CR2_FE(r16)                           _BFGET_(r16,15, 0)
    #define   SET16TG_HB_CR2_FE(r16,v)                         _BFSET_(r16,15, 0,v)

    #define   GET32TG_HB_CR2_BE(r32)                           _BFGET_(r32,31,16)
    #define   SET32TG_HB_CR2_BE(r32,v)                         _BFSET_(r32,31,16,v)
    #define   GET16TG_HB_CR2_BE(r16)                           _BFGET_(r16,15, 0)
    #define   SET16TG_HB_CR2_BE(r16,v)                         _BFSET_(r16,15, 0,v)

    #define     w32TG_HB_CR2                                   {\
            UNSG32 uHB_CR2_FE                                  : 16;\
            UNSG32 uHB_CR2_BE                                  : 16;\
          }
    union { UNSG32 u32TG_HB_CR2;
            struct w32TG_HB_CR2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VS0_FE(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_VS0_FE(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_VS0_FE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VS0_FE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_VS0_BE(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_VS0_BE(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_VS0_BE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VS0_BE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_VS0                                      {\
            UNSG32 uVS0_FE                                     : 16;\
            UNSG32 uVS0_BE                                     : 16;\
          }
    union { UNSG32 u32TG_VS0;
            struct w32TG_VS0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VS1_FE(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_VS1_FE(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_VS1_FE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VS1_FE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_VS1_BE(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_VS1_BE(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_VS1_BE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VS1_BE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_VS1                                      {\
            UNSG32 uVS1_FE                                     : 16;\
            UNSG32 uVS1_BE                                     : 16;\
          }
    union { UNSG32 u32TG_VS1;
            struct w32TG_VS1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VB0_FE(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_VB0_FE(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_VB0_FE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_FE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_VB0_BE(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_VB0_BE(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_VB0_BE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_BE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_VB0                                      {\
            UNSG32 uVB0_FE                                     : 16;\
            UNSG32 uVB0_BE                                     : 16;\
          }
    union { UNSG32 u32TG_VB0;
            struct w32TG_VB0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VB0_CR_FE(r32)                           _BFGET_(r32,15, 0)
    #define   SET32TG_VB0_CR_FE(r32,v)                         _BFSET_(r32,15, 0,v)
    #define   GET16TG_VB0_CR_FE(r16)                           _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_CR_FE(r16,v)                         _BFSET_(r16,15, 0,v)

    #define   GET32TG_VB0_CR_BE(r32)                           _BFGET_(r32,31,16)
    #define   SET32TG_VB0_CR_BE(r32,v)                         _BFSET_(r32,31,16,v)
    #define   GET16TG_VB0_CR_BE(r16)                           _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_CR_BE(r16,v)                         _BFSET_(r16,15, 0,v)

    #define     w32TG_VB0_CR                                   {\
            UNSG32 uVB0_CR_FE                                  : 16;\
            UNSG32 uVB0_CR_BE                                  : 16;\
          }
    union { UNSG32 u32TG_VB0_CR;
            struct w32TG_VB0_CR;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VB0_CR2_FE(r32)                          _BFGET_(r32,15, 0)
    #define   SET32TG_VB0_CR2_FE(r32,v)                        _BFSET_(r32,15, 0,v)
    #define   GET16TG_VB0_CR2_FE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_CR2_FE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define   GET32TG_VB0_CR2_BE(r32)                          _BFGET_(r32,31,16)
    #define   SET32TG_VB0_CR2_BE(r32,v)                        _BFSET_(r32,31,16,v)
    #define   GET16TG_VB0_CR2_BE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_VB0_CR2_BE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define     w32TG_VB0_CR2                                  {\
            UNSG32 uVB0_CR2_FE                                 : 16;\
            UNSG32 uVB0_CR2_BE                                 : 16;\
          }
    union { UNSG32 u32TG_VB0_CR2;
            struct w32TG_VB0_CR2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_VB1_FE(r32)                              _BFGET_(r32,15, 0)
    #define   SET32TG_VB1_FE(r32,v)                            _BFSET_(r32,15, 0,v)
    #define   GET16TG_VB1_FE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VB1_FE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define   GET32TG_VB1_BE(r32)                              _BFGET_(r32,31,16)
    #define   SET32TG_VB1_BE(r32,v)                            _BFSET_(r32,31,16,v)
    #define   GET16TG_VB1_BE(r16)                              _BFGET_(r16,15, 0)
    #define   SET16TG_VB1_BE(r16,v)                            _BFSET_(r16,15, 0,v)

    #define     w32TG_VB1                                      {\
            UNSG32 uVB1_FE                                     : 16;\
            UNSG32 uVB1_BE                                     : 16;\
          }
    union { UNSG32 u32TG_VB1;
            struct w32TG_VB1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_SCAN_MODE(r32)                           _BFGET_(r32, 0, 0)
    #define   SET32TG_SCAN_MODE(r32,v)                         _BFSET_(r32, 0, 0,v)
    #define   GET16TG_SCAN_MODE(r16)                           _BFGET_(r16, 0, 0)
    #define   SET16TG_SCAN_MODE(r16,v)                         _BFSET_(r16, 0, 0,v)

    #define     w32TG_SCAN                                     {\
            UNSG32 uSCAN_MODE                                  :  1;\
            UNSG32 RSVDx30_b1                                  : 31;\
          }
    union { UNSG32 u32TG_SCAN;
            struct w32TG_SCAN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_INTPOS_FRAME(r32)                        _BFGET_(r32,15, 0)
    #define   SET32TG_INTPOS_FRAME(r32,v)                      _BFSET_(r32,15, 0,v)
    #define   GET16TG_INTPOS_FRAME(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_INTPOS_FRAME(r16,v)                      _BFSET_(r16,15, 0,v)

    #define   GET32TG_INTPOS_FIELD(r32)                        _BFGET_(r32,31,16)
    #define   SET32TG_INTPOS_FIELD(r32,v)                      _BFSET_(r32,31,16,v)
    #define   GET16TG_INTPOS_FIELD(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_INTPOS_FIELD(r16,v)                      _BFSET_(r16,15, 0,v)

    #define     w32TG_INTPOS                                   {\
            UNSG32 uINTPOS_FRAME                               : 16;\
            UNSG32 uINTPOS_FIELD                               : 16;\
          }
    union { UNSG32 u32TG_INTPOS;
            struct w32TG_INTPOS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MODE_EN(r32)                             _BFGET_(r32, 0, 0)
    #define   SET32TG_MODE_EN(r32,v)                           _BFSET_(r32, 0, 0,v)
    #define   GET16TG_MODE_EN(r16)                             _BFGET_(r16, 0, 0)
    #define   SET16TG_MODE_EN(r16,v)                           _BFSET_(r16, 0, 0,v)

    #define     w32TG_MODE                                     {\
            UNSG32 uMODE_EN                                    :  1;\
            UNSG32 RSVDx38_b1                                  : 31;\
          }
    union { UNSG32 u32TG_MODE;
            struct w32TG_MODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_HVREF_SEL(r32)                           _BFGET_(r32, 0, 0)
    #define   SET32TG_HVREF_SEL(r32,v)                         _BFSET_(r32, 0, 0,v)
    #define   GET16TG_HVREF_SEL(r16)                           _BFGET_(r16, 0, 0)
    #define   SET16TG_HVREF_SEL(r16,v)                         _BFSET_(r16, 0, 0,v)

    #define   GET32TG_HVREF_POL(r32)                           _BFGET_(r32, 1, 1)
    #define   SET32TG_HVREF_POL(r32,v)                         _BFSET_(r32, 1, 1,v)
    #define   GET16TG_HVREF_POL(r16)                           _BFGET_(r16, 1, 1)
    #define   SET16TG_HVREF_POL(r16,v)                         _BFSET_(r16, 1, 1,v)

    #define     w32TG_HVREF                                    {\
            UNSG32 uHVREF_SEL                                  :  1;\
            UNSG32 uHVREF_POL                                  :  1;\
            UNSG32 RSVDx3C_b2                                  : 30;\
          }
    union { UNSG32 u32TG_HVREF;
            struct w32TG_HVREF;
          };
    ///////////////////////////////////////////////////////////
    } SIE_TG;

    typedef union  T32TG_INIT
          { UNSG32 u32;
            struct w32TG_INIT;
                 } T32TG_INIT;
    typedef union  T32TG_SIZE
          { UNSG32 u32;
            struct w32TG_SIZE;
                 } T32TG_SIZE;
    typedef union  T32TG_HS
          { UNSG32 u32;
            struct w32TG_HS;
                 } T32TG_HS;
    typedef union  T32TG_HB
          { UNSG32 u32;
            struct w32TG_HB;
                 } T32TG_HB;
    typedef union  T32TG_HB_CR
          { UNSG32 u32;
            struct w32TG_HB_CR;
                 } T32TG_HB_CR;
    typedef union  T32TG_HB_CR2
          { UNSG32 u32;
            struct w32TG_HB_CR2;
                 } T32TG_HB_CR2;
    typedef union  T32TG_VS0
          { UNSG32 u32;
            struct w32TG_VS0;
                 } T32TG_VS0;
    typedef union  T32TG_VS1
          { UNSG32 u32;
            struct w32TG_VS1;
                 } T32TG_VS1;
    typedef union  T32TG_VB0
          { UNSG32 u32;
            struct w32TG_VB0;
                 } T32TG_VB0;
    typedef union  T32TG_VB0_CR
          { UNSG32 u32;
            struct w32TG_VB0_CR;
                 } T32TG_VB0_CR;
    typedef union  T32TG_VB0_CR2
          { UNSG32 u32;
            struct w32TG_VB0_CR2;
                 } T32TG_VB0_CR2;
    typedef union  T32TG_VB1
          { UNSG32 u32;
            struct w32TG_VB1;
                 } T32TG_VB1;
    typedef union  T32TG_SCAN
          { UNSG32 u32;
            struct w32TG_SCAN;
                 } T32TG_SCAN;
    typedef union  T32TG_INTPOS
          { UNSG32 u32;
            struct w32TG_INTPOS;
                 } T32TG_INTPOS;
    typedef union  T32TG_MODE
          { UNSG32 u32;
            struct w32TG_MODE;
                 } T32TG_MODE;
    typedef union  T32TG_HVREF
          { UNSG32 u32;
            struct w32TG_HVREF;
                 } T32TG_HVREF;
    ///////////////////////////////////////////////////////////

    typedef union  TTG_INIT
          { UNSG32 u32[1];
            struct {
            struct w32TG_INIT;
                   };
                 } TTG_INIT;
    typedef union  TTG_SIZE
          { UNSG32 u32[1];
            struct {
            struct w32TG_SIZE;
                   };
                 } TTG_SIZE;
    typedef union  TTG_HS
          { UNSG32 u32[1];
            struct {
            struct w32TG_HS;
                   };
                 } TTG_HS;
    typedef union  TTG_HB
          { UNSG32 u32[1];
            struct {
            struct w32TG_HB;
                   };
                 } TTG_HB;
    typedef union  TTG_HB_CR
          { UNSG32 u32[1];
            struct {
            struct w32TG_HB_CR;
                   };
                 } TTG_HB_CR;
    typedef union  TTG_HB_CR2
          { UNSG32 u32[1];
            struct {
            struct w32TG_HB_CR2;
                   };
                 } TTG_HB_CR2;
    typedef union  TTG_VS0
          { UNSG32 u32[1];
            struct {
            struct w32TG_VS0;
                   };
                 } TTG_VS0;
    typedef union  TTG_VS1
          { UNSG32 u32[1];
            struct {
            struct w32TG_VS1;
                   };
                 } TTG_VS1;
    typedef union  TTG_VB0
          { UNSG32 u32[1];
            struct {
            struct w32TG_VB0;
                   };
                 } TTG_VB0;
    typedef union  TTG_VB0_CR
          { UNSG32 u32[1];
            struct {
            struct w32TG_VB0_CR;
                   };
                 } TTG_VB0_CR;
    typedef union  TTG_VB0_CR2
          { UNSG32 u32[1];
            struct {
            struct w32TG_VB0_CR2;
                   };
                 } TTG_VB0_CR2;
    typedef union  TTG_VB1
          { UNSG32 u32[1];
            struct {
            struct w32TG_VB1;
                   };
                 } TTG_VB1;
    typedef union  TTG_SCAN
          { UNSG32 u32[1];
            struct {
            struct w32TG_SCAN;
                   };
                 } TTG_SCAN;
    typedef union  TTG_INTPOS
          { UNSG32 u32[1];
            struct {
            struct w32TG_INTPOS;
                   };
                 } TTG_INTPOS;
    typedef union  TTG_MODE
          { UNSG32 u32[1];
            struct {
            struct w32TG_MODE;
                   };
                 } TTG_MODE;
    typedef union  TTG_HVREF
          { UNSG32 u32[1];
            struct {
            struct w32TG_HVREF;
                   };
                 } TTG_HVREF;

    ///////////////////////////////////////////////////////////
     SIGN32 TG_drvrd(SIE_TG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 TG_drvwr(SIE_TG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void TG_reset(SIE_TG *p);
     SIGN32 TG_cmp  (SIE_TG *p, SIE_TG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define TG_check(p,pie,pfx,hLOG) TG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define TG_print(p,    pfx,hLOG) TG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: TG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE TG_MAIN                 biu              (4,4)
///     ###
///     * Register specification of interface Timing Generator used in Main Video Plane (BL and EL)
///     * There are two counters in the timing generator module. hCntr (from 1 to SIZE_X) and vCntr (from 1 to SIZE_Y).
///     * When start, the initial value will be loaded to the xCnt and yCnt
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 INIT                 (P)
///               %unsigned 16 Y                         0x1
///                                    ###
///                                    * Initial Y value which will be used to load Y counter when tg is enabled.
///                                    ###
///               %unsigned 16 X                         0x1
///                                    ###
///                                    * Initial X value which will be used to load X counter when tg is enabled.
///                                    * A whole frame scan size.
///                                    ###
///     @ 0x00004 SIZE                 (P)
///               %unsigned 16 Y                         0x465
///                                    ###
///                                    * Total scan lines per frame.
///                                    ###
///               %unsigned 16 X                         0x898
///                                    ###
///                                    * Total scan clock cycles per line.
///                                    * Hsync
///                                    ###
///     @ 0x00008 HS                   (P)
///               %unsigned 16 FE                        0x1
///                                    ###
///                                    * Hsync front edge. The first pixel position of hsync pulse.
///                                    ###
///               %unsigned 16 BE                        0x2C
///                                    ###
///                                    * Hsync back edge. The last pixel position of hsync pulse.
///                                    * HS = hCntr>=FE & hCntr<=BE
///                                    * HBlanking
///                                    ###
///     @ 0x0000C HB                   (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    * [Used for Base Plane]
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * [Used for Base Plane]
///                                    * HB = hCntr>=FE || hCntr<=BE.
///                                    ###
///     @ 0x00010 HB_Y                 (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    * [Used for Luma Input Crop Plane]
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * [Used for Luma Input Crop Plane]
///                                    * HB_Y = hCntr>=FE || hCntr<=BE.
///                                    ###
///     @ 0x00014 HB_C                 (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    * [Used for Croma Input Crop Plane]
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * [Used for Croma Input Crop Plane]
///                                    * HB_C = hCntr>=FE || hCntr<=BE.
///                                    ###
///     @ 0x00018 HB_OUT               (P)
///               %unsigned 16 FE                        0x841
///                                    ###
///                                    * Hblank front edge. The first pixel position of the hBlank pulse. SIZEX-HFP = 2200-88+1
///                                    * [Used for DETILE-UPS420 Output, downstream logic will work on this DE]
///                                    ###
///               %unsigned 16 BE                        0xC0
///                                    ###
///                                    * Hblank back edge. The last pixel position of the hBlank pulse. HPW + HBP = 44+148
///                                    * [Used for DETILE-UPS420 Output, downstream logic will work on this DE]
///                                    * HB_OUT = hCntr>=FE || hCntr<=BE.
///                                    * VS0 defines the first first pixel position of the first VSYNC (progressive or interlace mode) pulse.
///                                    * For example
///                                    * 1080i60, the VTP is the last pixel of the last line. So set both VLCNT0 and VPCNT0 to 0.
///                                    ###
///     @ 0x0001C VS0                  (P)
///               %unsigned 16 FE                        0x1
///                                    ###
///                                    * Vsync pulse front edge.
///                                    * Vsync will be asserted at the beginning of this line.
///                                    ###
///               %unsigned 16 BE                        0x5
///                                    ###
///                                    * Vsync pulse back edge.
///                                    * Vsycn pulse will be de-asserted after the end of this line.
///                                    * Vsync = (vCntr>=FE & vCntr<=BE)
///                                    * Vsync pulse 1
///                                    * defines the first pixel position of the second vSync pulse. For example
///                                    * 1080i60, the VTP is pixel 1100 of line 563. So set both VLCNT2=563. and VPCNT2 to 1100.
///                                    ###
///     @ 0x00020 VS1                  (P)
///               %unsigned 16 FE                        0x233
///                                    ###
///                                    * Vsync pulse 1 front edge line position.
///                                    * Vsync pulse 1 will be asserted at the middle of this line.
///                                    ###
///               %unsigned 16 BE                        0x238
///                                    ###
///                                    * Vsync pulse 1 back edge line position.
///                                    * Vsync pulse 1 will be de-asserted at the middle of this line.
///                                    * Vsync1 = (vCntr>=FE & hCntr>SIZEX/2) & (vCntr<=BE & hCntr<=SIZEX/2)
///                                    * Vertical blanking.
///                                    * VB0 parameter definietion
///                                    ###
///     @ 0x00024 VB0                  (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    * [Used for Base Plane]
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * [Used for Base Plane]
///                                    * Vblank0 = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x00028 VB0_Y                (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    * [Used for Luma Input Crop Plane]
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * [Used for Croma Input Crop Plane]
///                                    * Vblank0_CR = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x0002C VB0_C                (P)
///               %unsigned 16 FE                        0x462
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * [Used for Croma Input Crop Plane]
///                                    * Vblank0 = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x00030 VB0_OUT              (P)
///               %unsigned 16 FE                        0x462
///                                    ###
///                                    * Vblank front edge line position
///                                    * The first line of the vertical blanking.
///                                    * [Used for DETILE-UPS420 Output, downstream logic will work on this DE]
///                                    ###
///               %unsigned 16 BE                        0x29
///                                    ###
///                                    * Vblank back edge line position
///                                    * the last line number of the vertical blanking
///                                    * The default value is used for 1080p case.
///                                    * [Used for DETILE-UPS420 Output, downstream logic will work on this DE]
///                                    * Vblank0 = vCntr>=FE || vCntr<=BE
///                                    ###
///     @ 0x00034 VB1                  (P)
///               %unsigned 16 FE                        0x231
///                                    ###
///                                    * Vblank front edge line postion
///                                    * The first line number of VB1.
///                                    ###
///               %unsigned 16 BE                        0x247
///                                    ###
///                                    * Vblank back edge line postion
///                                    * the last line numer of VB1.
///                                    * VB1 = (vCntr>=FE & vCntr<=BE)
///                                    * SCAN mode
///                                    ###
///     @ 0x00038 SCAN                 (P)
///               %unsigned 1  MODE                      0x0
///                                    : PROG                      0x0
///                                    : INTER                     0x1
///                                                 ###
///                                                 * Frame done interrupt position
///                                                 ###
///               %%        31         # Stuffing bits...
///     @ 0x0003C INTPOS               (P)
///               %unsigned 16 FRAME                     0x465
///                                    ###
///                                    * Frame interrupt status will be set at the end of this line.
///                                    * Program 0 to this register will disable frame interrupt.
///                                    ###
///               %unsigned 16 FIELD                     0x233
///                                    ###
///                                    * Field interrupt status will be set at the end of this line.
///                                    * Program 0 to this register will disable field interrupt.
///                                    * MODE
///                                    ###
///     @ 0x00040 MODE                 (P)
///               %unsigned 1  EN                        0x0
///                                    : MASTER                    0x0
///                                    : SLAVE                     0x1
///                                                 ###
///                                                 * In master mode, TG drive the control signal.
///                                                 * In slave mode, TG take the external hsync and vsync, it generate the internal sync and blank signal based on the programmed register and external hsync and vsync.
///                                                 * HREF input for slave mode.
///                                                 ###
///               %%        31         # Stuffing bits...
///     @ 0x00044 HVREF                (P)
///               %unsigned 1  SEL                       0x0
///                                    : SYNC                      0x0
///                                    : BLANK                     0x1
///                                                 ###
///                                                 * In slave mode, tg will sync to the external tg generated HREF/VREF which could be HSYBC/VSYNC or HBLANK/VBLANK. Currently only HSYNC/VSYNC is supported.
///                                                 * HSYNC and VSYNC have to be come in pair.
///                                                 ###
///               %unsigned 1  POL                       0x0
///                                    : NEG_PULSE                 0x0
///                                    : POS_PULSE                 0x1
///                                                 ###
///                                                 * 0 : indicate the input HREF/VREF are negative pulses
///                                                 * 1: indicate the input HREF/VREFare positive pulses.
///                                                 * HREF and VREF have to be the same polarity.
///                                                 * End of TG register group
///                                                 ###
///               %%        30         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      72B, bits:     484b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_TG_MAIN
#define h_TG_MAIN (){}

    #define     RA_TG_MAIN_INIT                                0x0000

    #define     BA_TG_MAIN_INIT_Y                              0x0000
    #define     B16TG_MAIN_INIT_Y                              0x0000
    #define   LSb32TG_MAIN_INIT_Y                                 0
    #define   LSb16TG_MAIN_INIT_Y                                 0
    #define       bTG_MAIN_INIT_Y                              16
    #define   MSK32TG_MAIN_INIT_Y                                 0x0000FFFF

    #define     BA_TG_MAIN_INIT_X                              0x0002
    #define     B16TG_MAIN_INIT_X                              0x0002
    #define   LSb32TG_MAIN_INIT_X                                 16
    #define   LSb16TG_MAIN_INIT_X                                 0
    #define       bTG_MAIN_INIT_X                              16
    #define   MSK32TG_MAIN_INIT_X                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_SIZE                                0x0004

    #define     BA_TG_MAIN_SIZE_Y                              0x0004
    #define     B16TG_MAIN_SIZE_Y                              0x0004
    #define   LSb32TG_MAIN_SIZE_Y                                 0
    #define   LSb16TG_MAIN_SIZE_Y                                 0
    #define       bTG_MAIN_SIZE_Y                              16
    #define   MSK32TG_MAIN_SIZE_Y                                 0x0000FFFF

    #define     BA_TG_MAIN_SIZE_X                              0x0006
    #define     B16TG_MAIN_SIZE_X                              0x0006
    #define   LSb32TG_MAIN_SIZE_X                                 16
    #define   LSb16TG_MAIN_SIZE_X                                 0
    #define       bTG_MAIN_SIZE_X                              16
    #define   MSK32TG_MAIN_SIZE_X                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HS                                  0x0008

    #define     BA_TG_MAIN_HS_FE                               0x0008
    #define     B16TG_MAIN_HS_FE                               0x0008
    #define   LSb32TG_MAIN_HS_FE                                  0
    #define   LSb16TG_MAIN_HS_FE                                  0
    #define       bTG_MAIN_HS_FE                               16
    #define   MSK32TG_MAIN_HS_FE                                  0x0000FFFF

    #define     BA_TG_MAIN_HS_BE                               0x000A
    #define     B16TG_MAIN_HS_BE                               0x000A
    #define   LSb32TG_MAIN_HS_BE                                  16
    #define   LSb16TG_MAIN_HS_BE                                  0
    #define       bTG_MAIN_HS_BE                               16
    #define   MSK32TG_MAIN_HS_BE                                  0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HB                                  0x000C

    #define     BA_TG_MAIN_HB_FE                               0x000C
    #define     B16TG_MAIN_HB_FE                               0x000C
    #define   LSb32TG_MAIN_HB_FE                                  0
    #define   LSb16TG_MAIN_HB_FE                                  0
    #define       bTG_MAIN_HB_FE                               16
    #define   MSK32TG_MAIN_HB_FE                                  0x0000FFFF

    #define     BA_TG_MAIN_HB_BE                               0x000E
    #define     B16TG_MAIN_HB_BE                               0x000E
    #define   LSb32TG_MAIN_HB_BE                                  16
    #define   LSb16TG_MAIN_HB_BE                                  0
    #define       bTG_MAIN_HB_BE                               16
    #define   MSK32TG_MAIN_HB_BE                                  0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HB_Y                                0x0010

    #define     BA_TG_MAIN_HB_Y_FE                             0x0010
    #define     B16TG_MAIN_HB_Y_FE                             0x0010
    #define   LSb32TG_MAIN_HB_Y_FE                                0
    #define   LSb16TG_MAIN_HB_Y_FE                                0
    #define       bTG_MAIN_HB_Y_FE                             16
    #define   MSK32TG_MAIN_HB_Y_FE                                0x0000FFFF

    #define     BA_TG_MAIN_HB_Y_BE                             0x0012
    #define     B16TG_MAIN_HB_Y_BE                             0x0012
    #define   LSb32TG_MAIN_HB_Y_BE                                16
    #define   LSb16TG_MAIN_HB_Y_BE                                0
    #define       bTG_MAIN_HB_Y_BE                             16
    #define   MSK32TG_MAIN_HB_Y_BE                                0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HB_C                                0x0014

    #define     BA_TG_MAIN_HB_C_FE                             0x0014
    #define     B16TG_MAIN_HB_C_FE                             0x0014
    #define   LSb32TG_MAIN_HB_C_FE                                0
    #define   LSb16TG_MAIN_HB_C_FE                                0
    #define       bTG_MAIN_HB_C_FE                             16
    #define   MSK32TG_MAIN_HB_C_FE                                0x0000FFFF

    #define     BA_TG_MAIN_HB_C_BE                             0x0016
    #define     B16TG_MAIN_HB_C_BE                             0x0016
    #define   LSb32TG_MAIN_HB_C_BE                                16
    #define   LSb16TG_MAIN_HB_C_BE                                0
    #define       bTG_MAIN_HB_C_BE                             16
    #define   MSK32TG_MAIN_HB_C_BE                                0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HB_OUT                              0x0018

    #define     BA_TG_MAIN_HB_OUT_FE                           0x0018
    #define     B16TG_MAIN_HB_OUT_FE                           0x0018
    #define   LSb32TG_MAIN_HB_OUT_FE                              0
    #define   LSb16TG_MAIN_HB_OUT_FE                              0
    #define       bTG_MAIN_HB_OUT_FE                           16
    #define   MSK32TG_MAIN_HB_OUT_FE                              0x0000FFFF

    #define     BA_TG_MAIN_HB_OUT_BE                           0x001A
    #define     B16TG_MAIN_HB_OUT_BE                           0x001A
    #define   LSb32TG_MAIN_HB_OUT_BE                              16
    #define   LSb16TG_MAIN_HB_OUT_BE                              0
    #define       bTG_MAIN_HB_OUT_BE                           16
    #define   MSK32TG_MAIN_HB_OUT_BE                              0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VS0                                 0x001C

    #define     BA_TG_MAIN_VS0_FE                              0x001C
    #define     B16TG_MAIN_VS0_FE                              0x001C
    #define   LSb32TG_MAIN_VS0_FE                                 0
    #define   LSb16TG_MAIN_VS0_FE                                 0
    #define       bTG_MAIN_VS0_FE                              16
    #define   MSK32TG_MAIN_VS0_FE                                 0x0000FFFF

    #define     BA_TG_MAIN_VS0_BE                              0x001E
    #define     B16TG_MAIN_VS0_BE                              0x001E
    #define   LSb32TG_MAIN_VS0_BE                                 16
    #define   LSb16TG_MAIN_VS0_BE                                 0
    #define       bTG_MAIN_VS0_BE                              16
    #define   MSK32TG_MAIN_VS0_BE                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VS1                                 0x0020

    #define     BA_TG_MAIN_VS1_FE                              0x0020
    #define     B16TG_MAIN_VS1_FE                              0x0020
    #define   LSb32TG_MAIN_VS1_FE                                 0
    #define   LSb16TG_MAIN_VS1_FE                                 0
    #define       bTG_MAIN_VS1_FE                              16
    #define   MSK32TG_MAIN_VS1_FE                                 0x0000FFFF

    #define     BA_TG_MAIN_VS1_BE                              0x0022
    #define     B16TG_MAIN_VS1_BE                              0x0022
    #define   LSb32TG_MAIN_VS1_BE                                 16
    #define   LSb16TG_MAIN_VS1_BE                                 0
    #define       bTG_MAIN_VS1_BE                              16
    #define   MSK32TG_MAIN_VS1_BE                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VB0                                 0x0024

    #define     BA_TG_MAIN_VB0_FE                              0x0024
    #define     B16TG_MAIN_VB0_FE                              0x0024
    #define   LSb32TG_MAIN_VB0_FE                                 0
    #define   LSb16TG_MAIN_VB0_FE                                 0
    #define       bTG_MAIN_VB0_FE                              16
    #define   MSK32TG_MAIN_VB0_FE                                 0x0000FFFF

    #define     BA_TG_MAIN_VB0_BE                              0x0026
    #define     B16TG_MAIN_VB0_BE                              0x0026
    #define   LSb32TG_MAIN_VB0_BE                                 16
    #define   LSb16TG_MAIN_VB0_BE                                 0
    #define       bTG_MAIN_VB0_BE                              16
    #define   MSK32TG_MAIN_VB0_BE                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VB0_Y                               0x0028

    #define     BA_TG_MAIN_VB0_Y_FE                            0x0028
    #define     B16TG_MAIN_VB0_Y_FE                            0x0028
    #define   LSb32TG_MAIN_VB0_Y_FE                               0
    #define   LSb16TG_MAIN_VB0_Y_FE                               0
    #define       bTG_MAIN_VB0_Y_FE                            16
    #define   MSK32TG_MAIN_VB0_Y_FE                               0x0000FFFF

    #define     BA_TG_MAIN_VB0_Y_BE                            0x002A
    #define     B16TG_MAIN_VB0_Y_BE                            0x002A
    #define   LSb32TG_MAIN_VB0_Y_BE                               16
    #define   LSb16TG_MAIN_VB0_Y_BE                               0
    #define       bTG_MAIN_VB0_Y_BE                            16
    #define   MSK32TG_MAIN_VB0_Y_BE                               0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VB0_C                               0x002C

    #define     BA_TG_MAIN_VB0_C_FE                            0x002C
    #define     B16TG_MAIN_VB0_C_FE                            0x002C
    #define   LSb32TG_MAIN_VB0_C_FE                               0
    #define   LSb16TG_MAIN_VB0_C_FE                               0
    #define       bTG_MAIN_VB0_C_FE                            16
    #define   MSK32TG_MAIN_VB0_C_FE                               0x0000FFFF

    #define     BA_TG_MAIN_VB0_C_BE                            0x002E
    #define     B16TG_MAIN_VB0_C_BE                            0x002E
    #define   LSb32TG_MAIN_VB0_C_BE                               16
    #define   LSb16TG_MAIN_VB0_C_BE                               0
    #define       bTG_MAIN_VB0_C_BE                            16
    #define   MSK32TG_MAIN_VB0_C_BE                               0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VB0_OUT                             0x0030

    #define     BA_TG_MAIN_VB0_OUT_FE                          0x0030
    #define     B16TG_MAIN_VB0_OUT_FE                          0x0030
    #define   LSb32TG_MAIN_VB0_OUT_FE                             0
    #define   LSb16TG_MAIN_VB0_OUT_FE                             0
    #define       bTG_MAIN_VB0_OUT_FE                          16
    #define   MSK32TG_MAIN_VB0_OUT_FE                             0x0000FFFF

    #define     BA_TG_MAIN_VB0_OUT_BE                          0x0032
    #define     B16TG_MAIN_VB0_OUT_BE                          0x0032
    #define   LSb32TG_MAIN_VB0_OUT_BE                             16
    #define   LSb16TG_MAIN_VB0_OUT_BE                             0
    #define       bTG_MAIN_VB0_OUT_BE                          16
    #define   MSK32TG_MAIN_VB0_OUT_BE                             0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_VB1                                 0x0034

    #define     BA_TG_MAIN_VB1_FE                              0x0034
    #define     B16TG_MAIN_VB1_FE                              0x0034
    #define   LSb32TG_MAIN_VB1_FE                                 0
    #define   LSb16TG_MAIN_VB1_FE                                 0
    #define       bTG_MAIN_VB1_FE                              16
    #define   MSK32TG_MAIN_VB1_FE                                 0x0000FFFF

    #define     BA_TG_MAIN_VB1_BE                              0x0036
    #define     B16TG_MAIN_VB1_BE                              0x0036
    #define   LSb32TG_MAIN_VB1_BE                                 16
    #define   LSb16TG_MAIN_VB1_BE                                 0
    #define       bTG_MAIN_VB1_BE                              16
    #define   MSK32TG_MAIN_VB1_BE                                 0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_SCAN                                0x0038

    #define     BA_TG_MAIN_SCAN_MODE                           0x0038
    #define     B16TG_MAIN_SCAN_MODE                           0x0038
    #define   LSb32TG_MAIN_SCAN_MODE                              0
    #define   LSb16TG_MAIN_SCAN_MODE                              0
    #define       bTG_MAIN_SCAN_MODE                           1
    #define   MSK32TG_MAIN_SCAN_MODE                              0x00000001
    #define        TG_MAIN_SCAN_MODE_PROG                                   0x0
    #define        TG_MAIN_SCAN_MODE_INTER                                  0x1
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_INTPOS                              0x003C

    #define     BA_TG_MAIN_INTPOS_FRAME                        0x003C
    #define     B16TG_MAIN_INTPOS_FRAME                        0x003C
    #define   LSb32TG_MAIN_INTPOS_FRAME                           0
    #define   LSb16TG_MAIN_INTPOS_FRAME                           0
    #define       bTG_MAIN_INTPOS_FRAME                        16
    #define   MSK32TG_MAIN_INTPOS_FRAME                           0x0000FFFF

    #define     BA_TG_MAIN_INTPOS_FIELD                        0x003E
    #define     B16TG_MAIN_INTPOS_FIELD                        0x003E
    #define   LSb32TG_MAIN_INTPOS_FIELD                           16
    #define   LSb16TG_MAIN_INTPOS_FIELD                           0
    #define       bTG_MAIN_INTPOS_FIELD                        16
    #define   MSK32TG_MAIN_INTPOS_FIELD                           0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_MODE                                0x0040

    #define     BA_TG_MAIN_MODE_EN                             0x0040
    #define     B16TG_MAIN_MODE_EN                             0x0040
    #define   LSb32TG_MAIN_MODE_EN                                0
    #define   LSb16TG_MAIN_MODE_EN                                0
    #define       bTG_MAIN_MODE_EN                             1
    #define   MSK32TG_MAIN_MODE_EN                                0x00000001
    #define        TG_MAIN_MODE_EN_MASTER                                   0x0
    #define        TG_MAIN_MODE_EN_SLAVE                                    0x1
    ///////////////////////////////////////////////////////////
    #define     RA_TG_MAIN_HVREF                               0x0044

    #define     BA_TG_MAIN_HVREF_SEL                           0x0044
    #define     B16TG_MAIN_HVREF_SEL                           0x0044
    #define   LSb32TG_MAIN_HVREF_SEL                              0
    #define   LSb16TG_MAIN_HVREF_SEL                              0
    #define       bTG_MAIN_HVREF_SEL                           1
    #define   MSK32TG_MAIN_HVREF_SEL                              0x00000001
    #define        TG_MAIN_HVREF_SEL_SYNC                                   0x0
    #define        TG_MAIN_HVREF_SEL_BLANK                                  0x1

    #define     BA_TG_MAIN_HVREF_POL                           0x0044
    #define     B16TG_MAIN_HVREF_POL                           0x0044
    #define   LSb32TG_MAIN_HVREF_POL                              1
    #define   LSb16TG_MAIN_HVREF_POL                              1
    #define       bTG_MAIN_HVREF_POL                           1
    #define   MSK32TG_MAIN_HVREF_POL                              0x00000002
    #define        TG_MAIN_HVREF_POL_NEG_PULSE                              0x0
    #define        TG_MAIN_HVREF_POL_POS_PULSE                              0x1
    ///////////////////////////////////////////////////////////

    typedef struct SIE_TG_MAIN {
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_INIT_Y(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_INIT_Y(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_INIT_Y(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_INIT_Y(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_INIT_X(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_INIT_X(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_INIT_X(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_INIT_X(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_INIT                                {\
            UNSG32 uINIT_Y                                     : 16;\
            UNSG32 uINIT_X                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_INIT;
            struct w32TG_MAIN_INIT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_SIZE_Y(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_SIZE_Y(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_SIZE_Y(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_SIZE_Y(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_SIZE_X(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_SIZE_X(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_SIZE_X(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_SIZE_X(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_SIZE                                {\
            UNSG32 uSIZE_Y                                     : 16;\
            UNSG32 uSIZE_X                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_SIZE;
            struct w32TG_MAIN_SIZE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HS_FE(r32)                          _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_HS_FE(r32,v)                        _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_HS_FE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HS_FE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_HS_BE(r32)                          _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_HS_BE(r32,v)                        _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_HS_BE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HS_BE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_HS                                  {\
            UNSG32 uHS_FE                                      : 16;\
            UNSG32 uHS_BE                                      : 16;\
          }
    union { UNSG32 u32TG_MAIN_HS;
            struct w32TG_MAIN_HS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HB_FE(r32)                          _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_HB_FE(r32,v)                        _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_HB_FE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_FE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_HB_BE(r32)                          _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_HB_BE(r32,v)                        _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_HB_BE(r16)                          _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_BE(r16,v)                        _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_HB                                  {\
            UNSG32 uHB_FE                                      : 16;\
            UNSG32 uHB_BE                                      : 16;\
          }
    union { UNSG32 u32TG_MAIN_HB;
            struct w32TG_MAIN_HB;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HB_Y_FE(r32)                        _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_HB_Y_FE(r32,v)                      _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_HB_Y_FE(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_Y_FE(r16,v)                      _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_HB_Y_BE(r32)                        _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_HB_Y_BE(r32,v)                      _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_HB_Y_BE(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_Y_BE(r16,v)                      _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_HB_Y                                {\
            UNSG32 uHB_Y_FE                                    : 16;\
            UNSG32 uHB_Y_BE                                    : 16;\
          }
    union { UNSG32 u32TG_MAIN_HB_Y;
            struct w32TG_MAIN_HB_Y;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HB_C_FE(r32)                        _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_HB_C_FE(r32,v)                      _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_HB_C_FE(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_C_FE(r16,v)                      _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_HB_C_BE(r32)                        _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_HB_C_BE(r32,v)                      _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_HB_C_BE(r16)                        _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_C_BE(r16,v)                      _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_HB_C                                {\
            UNSG32 uHB_C_FE                                    : 16;\
            UNSG32 uHB_C_BE                                    : 16;\
          }
    union { UNSG32 u32TG_MAIN_HB_C;
            struct w32TG_MAIN_HB_C;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HB_OUT_FE(r32)                      _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_HB_OUT_FE(r32,v)                    _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_HB_OUT_FE(r16)                      _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_OUT_FE(r16,v)                    _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_HB_OUT_BE(r32)                      _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_HB_OUT_BE(r32,v)                    _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_HB_OUT_BE(r16)                      _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_HB_OUT_BE(r16,v)                    _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_HB_OUT                              {\
            UNSG32 uHB_OUT_FE                                  : 16;\
            UNSG32 uHB_OUT_BE                                  : 16;\
          }
    union { UNSG32 u32TG_MAIN_HB_OUT;
            struct w32TG_MAIN_HB_OUT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VS0_FE(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VS0_FE(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VS0_FE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VS0_FE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VS0_BE(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VS0_BE(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VS0_BE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VS0_BE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VS0                                 {\
            UNSG32 uVS0_FE                                     : 16;\
            UNSG32 uVS0_BE                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_VS0;
            struct w32TG_MAIN_VS0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VS1_FE(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VS1_FE(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VS1_FE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VS1_FE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VS1_BE(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VS1_BE(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VS1_BE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VS1_BE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VS1                                 {\
            UNSG32 uVS1_FE                                     : 16;\
            UNSG32 uVS1_BE                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_VS1;
            struct w32TG_MAIN_VS1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VB0_FE(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VB0_FE(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VB0_FE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_FE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VB0_BE(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VB0_BE(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VB0_BE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_BE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VB0                                 {\
            UNSG32 uVB0_FE                                     : 16;\
            UNSG32 uVB0_BE                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_VB0;
            struct w32TG_MAIN_VB0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VB0_Y_FE(r32)                       _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VB0_Y_FE(r32,v)                     _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VB0_Y_FE(r16)                       _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_Y_FE(r16,v)                     _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VB0_Y_BE(r32)                       _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VB0_Y_BE(r32,v)                     _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VB0_Y_BE(r16)                       _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_Y_BE(r16,v)                     _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VB0_Y                               {\
            UNSG32 uVB0_Y_FE                                   : 16;\
            UNSG32 uVB0_Y_BE                                   : 16;\
          }
    union { UNSG32 u32TG_MAIN_VB0_Y;
            struct w32TG_MAIN_VB0_Y;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VB0_C_FE(r32)                       _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VB0_C_FE(r32,v)                     _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VB0_C_FE(r16)                       _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_C_FE(r16,v)                     _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VB0_C_BE(r32)                       _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VB0_C_BE(r32,v)                     _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VB0_C_BE(r16)                       _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_C_BE(r16,v)                     _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VB0_C                               {\
            UNSG32 uVB0_C_FE                                   : 16;\
            UNSG32 uVB0_C_BE                                   : 16;\
          }
    union { UNSG32 u32TG_MAIN_VB0_C;
            struct w32TG_MAIN_VB0_C;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VB0_OUT_FE(r32)                     _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VB0_OUT_FE(r32,v)                   _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VB0_OUT_FE(r16)                     _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_OUT_FE(r16,v)                   _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VB0_OUT_BE(r32)                     _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VB0_OUT_BE(r32,v)                   _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VB0_OUT_BE(r16)                     _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB0_OUT_BE(r16,v)                   _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VB0_OUT                             {\
            UNSG32 uVB0_OUT_FE                                 : 16;\
            UNSG32 uVB0_OUT_BE                                 : 16;\
          }
    union { UNSG32 u32TG_MAIN_VB0_OUT;
            struct w32TG_MAIN_VB0_OUT;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_VB1_FE(r32)                         _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_VB1_FE(r32,v)                       _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_VB1_FE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB1_FE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_VB1_BE(r32)                         _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_VB1_BE(r32,v)                       _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_VB1_BE(r16)                         _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_VB1_BE(r16,v)                       _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_VB1                                 {\
            UNSG32 uVB1_FE                                     : 16;\
            UNSG32 uVB1_BE                                     : 16;\
          }
    union { UNSG32 u32TG_MAIN_VB1;
            struct w32TG_MAIN_VB1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_SCAN_MODE(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32TG_MAIN_SCAN_MODE(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16TG_MAIN_SCAN_MODE(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16TG_MAIN_SCAN_MODE(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define     w32TG_MAIN_SCAN                                {\
            UNSG32 uSCAN_MODE                                  :  1;\
            UNSG32 RSVDx38_b1                                  : 31;\
          }
    union { UNSG32 u32TG_MAIN_SCAN;
            struct w32TG_MAIN_SCAN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_INTPOS_FRAME(r32)                   _BFGET_(r32,15, 0)
    #define   SET32TG_MAIN_INTPOS_FRAME(r32,v)                 _BFSET_(r32,15, 0,v)
    #define   GET16TG_MAIN_INTPOS_FRAME(r16)                   _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_INTPOS_FRAME(r16,v)                 _BFSET_(r16,15, 0,v)

    #define   GET32TG_MAIN_INTPOS_FIELD(r32)                   _BFGET_(r32,31,16)
    #define   SET32TG_MAIN_INTPOS_FIELD(r32,v)                 _BFSET_(r32,31,16,v)
    #define   GET16TG_MAIN_INTPOS_FIELD(r16)                   _BFGET_(r16,15, 0)
    #define   SET16TG_MAIN_INTPOS_FIELD(r16,v)                 _BFSET_(r16,15, 0,v)

    #define     w32TG_MAIN_INTPOS                              {\
            UNSG32 uINTPOS_FRAME                               : 16;\
            UNSG32 uINTPOS_FIELD                               : 16;\
          }
    union { UNSG32 u32TG_MAIN_INTPOS;
            struct w32TG_MAIN_INTPOS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_MODE_EN(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32TG_MAIN_MODE_EN(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16TG_MAIN_MODE_EN(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16TG_MAIN_MODE_EN(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define     w32TG_MAIN_MODE                                {\
            UNSG32 uMODE_EN                                    :  1;\
            UNSG32 RSVDx40_b1                                  : 31;\
          }
    union { UNSG32 u32TG_MAIN_MODE;
            struct w32TG_MAIN_MODE;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32TG_MAIN_HVREF_SEL(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32TG_MAIN_HVREF_SEL(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16TG_MAIN_HVREF_SEL(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16TG_MAIN_HVREF_SEL(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32TG_MAIN_HVREF_POL(r32)                      _BFGET_(r32, 1, 1)
    #define   SET32TG_MAIN_HVREF_POL(r32,v)                    _BFSET_(r32, 1, 1,v)
    #define   GET16TG_MAIN_HVREF_POL(r16)                      _BFGET_(r16, 1, 1)
    #define   SET16TG_MAIN_HVREF_POL(r16,v)                    _BFSET_(r16, 1, 1,v)

    #define     w32TG_MAIN_HVREF                               {\
            UNSG32 uHVREF_SEL                                  :  1;\
            UNSG32 uHVREF_POL                                  :  1;\
            UNSG32 RSVDx44_b2                                  : 30;\
          }
    union { UNSG32 u32TG_MAIN_HVREF;
            struct w32TG_MAIN_HVREF;
          };
    ///////////////////////////////////////////////////////////
    } SIE_TG_MAIN;

    typedef union  T32TG_MAIN_INIT
          { UNSG32 u32;
            struct w32TG_MAIN_INIT;
                 } T32TG_MAIN_INIT;
    typedef union  T32TG_MAIN_SIZE
          { UNSG32 u32;
            struct w32TG_MAIN_SIZE;
                 } T32TG_MAIN_SIZE;
    typedef union  T32TG_MAIN_HS
          { UNSG32 u32;
            struct w32TG_MAIN_HS;
                 } T32TG_MAIN_HS;
    typedef union  T32TG_MAIN_HB
          { UNSG32 u32;
            struct w32TG_MAIN_HB;
                 } T32TG_MAIN_HB;
    typedef union  T32TG_MAIN_HB_Y
          { UNSG32 u32;
            struct w32TG_MAIN_HB_Y;
                 } T32TG_MAIN_HB_Y;
    typedef union  T32TG_MAIN_HB_C
          { UNSG32 u32;
            struct w32TG_MAIN_HB_C;
                 } T32TG_MAIN_HB_C;
    typedef union  T32TG_MAIN_HB_OUT
          { UNSG32 u32;
            struct w32TG_MAIN_HB_OUT;
                 } T32TG_MAIN_HB_OUT;
    typedef union  T32TG_MAIN_VS0
          { UNSG32 u32;
            struct w32TG_MAIN_VS0;
                 } T32TG_MAIN_VS0;
    typedef union  T32TG_MAIN_VS1
          { UNSG32 u32;
            struct w32TG_MAIN_VS1;
                 } T32TG_MAIN_VS1;
    typedef union  T32TG_MAIN_VB0
          { UNSG32 u32;
            struct w32TG_MAIN_VB0;
                 } T32TG_MAIN_VB0;
    typedef union  T32TG_MAIN_VB0_Y
          { UNSG32 u32;
            struct w32TG_MAIN_VB0_Y;
                 } T32TG_MAIN_VB0_Y;
    typedef union  T32TG_MAIN_VB0_C
          { UNSG32 u32;
            struct w32TG_MAIN_VB0_C;
                 } T32TG_MAIN_VB0_C;
    typedef union  T32TG_MAIN_VB0_OUT
          { UNSG32 u32;
            struct w32TG_MAIN_VB0_OUT;
                 } T32TG_MAIN_VB0_OUT;
    typedef union  T32TG_MAIN_VB1
          { UNSG32 u32;
            struct w32TG_MAIN_VB1;
                 } T32TG_MAIN_VB1;
    typedef union  T32TG_MAIN_SCAN
          { UNSG32 u32;
            struct w32TG_MAIN_SCAN;
                 } T32TG_MAIN_SCAN;
    typedef union  T32TG_MAIN_INTPOS
          { UNSG32 u32;
            struct w32TG_MAIN_INTPOS;
                 } T32TG_MAIN_INTPOS;
    typedef union  T32TG_MAIN_MODE
          { UNSG32 u32;
            struct w32TG_MAIN_MODE;
                 } T32TG_MAIN_MODE;
    typedef union  T32TG_MAIN_HVREF
          { UNSG32 u32;
            struct w32TG_MAIN_HVREF;
                 } T32TG_MAIN_HVREF;
    ///////////////////////////////////////////////////////////

    typedef union  TTG_MAIN_INIT
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_INIT;
                   };
                 } TTG_MAIN_INIT;
    typedef union  TTG_MAIN_SIZE
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_SIZE;
                   };
                 } TTG_MAIN_SIZE;
    typedef union  TTG_MAIN_HS
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HS;
                   };
                 } TTG_MAIN_HS;
    typedef union  TTG_MAIN_HB
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HB;
                   };
                 } TTG_MAIN_HB;
    typedef union  TTG_MAIN_HB_Y
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HB_Y;
                   };
                 } TTG_MAIN_HB_Y;
    typedef union  TTG_MAIN_HB_C
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HB_C;
                   };
                 } TTG_MAIN_HB_C;
    typedef union  TTG_MAIN_HB_OUT
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HB_OUT;
                   };
                 } TTG_MAIN_HB_OUT;
    typedef union  TTG_MAIN_VS0
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VS0;
                   };
                 } TTG_MAIN_VS0;
    typedef union  TTG_MAIN_VS1
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VS1;
                   };
                 } TTG_MAIN_VS1;
    typedef union  TTG_MAIN_VB0
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VB0;
                   };
                 } TTG_MAIN_VB0;
    typedef union  TTG_MAIN_VB0_Y
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VB0_Y;
                   };
                 } TTG_MAIN_VB0_Y;
    typedef union  TTG_MAIN_VB0_C
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VB0_C;
                   };
                 } TTG_MAIN_VB0_C;
    typedef union  TTG_MAIN_VB0_OUT
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VB0_OUT;
                   };
                 } TTG_MAIN_VB0_OUT;
    typedef union  TTG_MAIN_VB1
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_VB1;
                   };
                 } TTG_MAIN_VB1;
    typedef union  TTG_MAIN_SCAN
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_SCAN;
                   };
                 } TTG_MAIN_SCAN;
    typedef union  TTG_MAIN_INTPOS
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_INTPOS;
                   };
                 } TTG_MAIN_INTPOS;
    typedef union  TTG_MAIN_MODE
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_MODE;
                   };
                 } TTG_MAIN_MODE;
    typedef union  TTG_MAIN_HVREF
          { UNSG32 u32[1];
            struct {
            struct w32TG_MAIN_HVREF;
                   };
                 } TTG_MAIN_HVREF;

    ///////////////////////////////////////////////////////////
     SIGN32 TG_MAIN_drvrd(SIE_TG_MAIN *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 TG_MAIN_drvwr(SIE_TG_MAIN *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void TG_MAIN_reset(SIE_TG_MAIN *p);
     SIGN32 TG_MAIN_cmp  (SIE_TG_MAIN *p, SIE_TG_MAIN *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define TG_MAIN_check(p,pie,pfx,hLOG) TG_MAIN_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define TG_MAIN_print(p,    pfx,hLOG) TG_MAIN_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: TG_MAIN
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE BITMAP40                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SEL                  (P)
///               %unsigned 6  BIT_POS0                  0x0
///               %unsigned 6  BIT_POS1                  0x1
///               %unsigned 6  BIT_POS2                  0x2
///               %unsigned 6  BIT_POS3                  0x3
///               %unsigned 6  BIT_POS4                  0x4
///               %%        2          # Stuffing bits...
///     # 0x00004 SEL1                 
///               %unsigned 6  BIT_POS5                  0x5
///               %unsigned 6  BIT_POS6                  0x6
///               %unsigned 6  BIT_POS7                  0x7
///               %unsigned 6  BIT_POS8                  0x8
///               %unsigned 6  BIT_POS9                  0x9
///               %%        2          # Stuffing bits...
///     # 0x00008 SEL2                 
///               %unsigned 6  BIT_POS10                 0xA
///               %unsigned 6  BIT_POS11                 0xB
///               %unsigned 6  BIT_POS12                 0xC
///               %unsigned 6  BIT_POS13                 0xD
///               %unsigned 6  BIT_POS14                 0xE
///               %%        2          # Stuffing bits...
///     # 0x0000C SEL3                 
///               %unsigned 6  BIT_POS15                 0xF
///               %unsigned 6  BIT_POS16                 0x10
///               %unsigned 6  BIT_POS17                 0x11
///               %unsigned 6  BIT_POS18                 0x12
///               %unsigned 6  BIT_POS19                 0x13
///               %%        2          # Stuffing bits...
///     # 0x00010 SEL4                 
///               %unsigned 6  BIT_POS20                 0x14
///               %unsigned 6  BIT_POS21                 0x15
///               %unsigned 6  BIT_POS22                 0x16
///               %unsigned 6  BIT_POS23                 0x17
///               %unsigned 6  BIT_POS24                 0x18
///               %%        2          # Stuffing bits...
///     # 0x00014 SEL5                 
///               %unsigned 6  BIT_POS25                 0x19
///               %unsigned 6  BIT_POS26                 0x1A
///               %unsigned 6  BIT_POS27                 0x1B
///               %unsigned 6  BIT_POS28                 0x1C
///               %unsigned 6  BIT_POS29                 0x1D
///               %%        2          # Stuffing bits...
///     # 0x00018 SEL6                 
///               %unsigned 6  BIT_POS30                 0x1E
///               %unsigned 6  BIT_POS31                 0x1F
///               %unsigned 6  BIT_POS32                 0x20
///               %unsigned 6  BIT_POS33                 0x21
///               %unsigned 6  BIT_POS34                 0x22
///               %%        2          # Stuffing bits...
///     # 0x0001C SEL7                 
///               %unsigned 6  BIT_POS35                 0x23
///               %unsigned 6  BIT_POS36                 0x24
///               %unsigned 6  BIT_POS37                 0x25
///               %unsigned 6  BIT_POS38                 0x26
///               %unsigned 6  BIT_POS39                 0x27
///                                    ###
///                                    * Specifies mapping of new bit locations within 40 bit data from Read Client which need to be used to form pixels for Inverse Scan mode.
///                                    * Normal dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in LSB
///                                    * Inverse Scan dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in MSB
///                                    * Following different data orders can be generated to be presented to first UPS in the pipe.
///                                    ###
///               %%        2          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      32B, bits:     240b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BITMAP40
#define h_BITMAP40 (){}

    #define     RA_BITMAP40_SEL                                0x0000

    #define     BA_BITMAP40_SEL_BIT_POS0                       0x0000
    #define     B16BITMAP40_SEL_BIT_POS0                       0x0000
    #define   LSb32BITMAP40_SEL_BIT_POS0                          0
    #define   LSb16BITMAP40_SEL_BIT_POS0                          0
    #define       bBITMAP40_SEL_BIT_POS0                       6
    #define   MSK32BITMAP40_SEL_BIT_POS0                          0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS1                       0x0000
    #define     B16BITMAP40_SEL_BIT_POS1                       0x0000
    #define   LSb32BITMAP40_SEL_BIT_POS1                          6
    #define   LSb16BITMAP40_SEL_BIT_POS1                          6
    #define       bBITMAP40_SEL_BIT_POS1                       6
    #define   MSK32BITMAP40_SEL_BIT_POS1                          0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS2                       0x0001
    #define     B16BITMAP40_SEL_BIT_POS2                       0x0000
    #define   LSb32BITMAP40_SEL_BIT_POS2                          12
    #define   LSb16BITMAP40_SEL_BIT_POS2                          12
    #define       bBITMAP40_SEL_BIT_POS2                       6
    #define   MSK32BITMAP40_SEL_BIT_POS2                          0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS3                       0x0002
    #define     B16BITMAP40_SEL_BIT_POS3                       0x0002
    #define   LSb32BITMAP40_SEL_BIT_POS3                          18
    #define   LSb16BITMAP40_SEL_BIT_POS3                          2
    #define       bBITMAP40_SEL_BIT_POS3                       6
    #define   MSK32BITMAP40_SEL_BIT_POS3                          0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS4                       0x0003
    #define     B16BITMAP40_SEL_BIT_POS4                       0x0002
    #define   LSb32BITMAP40_SEL_BIT_POS4                          24
    #define   LSb16BITMAP40_SEL_BIT_POS4                          8
    #define       bBITMAP40_SEL_BIT_POS4                       6
    #define   MSK32BITMAP40_SEL_BIT_POS4                          0x3F000000

    #define     RA_BITMAP40_SEL1                               0x0004

    #define     BA_BITMAP40_SEL_BIT_POS5                       0x0004
    #define     B16BITMAP40_SEL_BIT_POS5                       0x0004
    #define   LSb32BITMAP40_SEL_BIT_POS5                          0
    #define   LSb16BITMAP40_SEL_BIT_POS5                          0
    #define       bBITMAP40_SEL_BIT_POS5                       6
    #define   MSK32BITMAP40_SEL_BIT_POS5                          0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS6                       0x0004
    #define     B16BITMAP40_SEL_BIT_POS6                       0x0004
    #define   LSb32BITMAP40_SEL_BIT_POS6                          6
    #define   LSb16BITMAP40_SEL_BIT_POS6                          6
    #define       bBITMAP40_SEL_BIT_POS6                       6
    #define   MSK32BITMAP40_SEL_BIT_POS6                          0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS7                       0x0005
    #define     B16BITMAP40_SEL_BIT_POS7                       0x0004
    #define   LSb32BITMAP40_SEL_BIT_POS7                          12
    #define   LSb16BITMAP40_SEL_BIT_POS7                          12
    #define       bBITMAP40_SEL_BIT_POS7                       6
    #define   MSK32BITMAP40_SEL_BIT_POS7                          0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS8                       0x0006
    #define     B16BITMAP40_SEL_BIT_POS8                       0x0006
    #define   LSb32BITMAP40_SEL_BIT_POS8                          18
    #define   LSb16BITMAP40_SEL_BIT_POS8                          2
    #define       bBITMAP40_SEL_BIT_POS8                       6
    #define   MSK32BITMAP40_SEL_BIT_POS8                          0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS9                       0x0007
    #define     B16BITMAP40_SEL_BIT_POS9                       0x0006
    #define   LSb32BITMAP40_SEL_BIT_POS9                          24
    #define   LSb16BITMAP40_SEL_BIT_POS9                          8
    #define       bBITMAP40_SEL_BIT_POS9                       6
    #define   MSK32BITMAP40_SEL_BIT_POS9                          0x3F000000

    #define     RA_BITMAP40_SEL2                               0x0008

    #define     BA_BITMAP40_SEL_BIT_POS10                      0x0008
    #define     B16BITMAP40_SEL_BIT_POS10                      0x0008
    #define   LSb32BITMAP40_SEL_BIT_POS10                         0
    #define   LSb16BITMAP40_SEL_BIT_POS10                         0
    #define       bBITMAP40_SEL_BIT_POS10                      6
    #define   MSK32BITMAP40_SEL_BIT_POS10                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS11                      0x0008
    #define     B16BITMAP40_SEL_BIT_POS11                      0x0008
    #define   LSb32BITMAP40_SEL_BIT_POS11                         6
    #define   LSb16BITMAP40_SEL_BIT_POS11                         6
    #define       bBITMAP40_SEL_BIT_POS11                      6
    #define   MSK32BITMAP40_SEL_BIT_POS11                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS12                      0x0009
    #define     B16BITMAP40_SEL_BIT_POS12                      0x0008
    #define   LSb32BITMAP40_SEL_BIT_POS12                         12
    #define   LSb16BITMAP40_SEL_BIT_POS12                         12
    #define       bBITMAP40_SEL_BIT_POS12                      6
    #define   MSK32BITMAP40_SEL_BIT_POS12                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS13                      0x000A
    #define     B16BITMAP40_SEL_BIT_POS13                      0x000A
    #define   LSb32BITMAP40_SEL_BIT_POS13                         18
    #define   LSb16BITMAP40_SEL_BIT_POS13                         2
    #define       bBITMAP40_SEL_BIT_POS13                      6
    #define   MSK32BITMAP40_SEL_BIT_POS13                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS14                      0x000B
    #define     B16BITMAP40_SEL_BIT_POS14                      0x000A
    #define   LSb32BITMAP40_SEL_BIT_POS14                         24
    #define   LSb16BITMAP40_SEL_BIT_POS14                         8
    #define       bBITMAP40_SEL_BIT_POS14                      6
    #define   MSK32BITMAP40_SEL_BIT_POS14                         0x3F000000

    #define     RA_BITMAP40_SEL3                               0x000C

    #define     BA_BITMAP40_SEL_BIT_POS15                      0x000C
    #define     B16BITMAP40_SEL_BIT_POS15                      0x000C
    #define   LSb32BITMAP40_SEL_BIT_POS15                         0
    #define   LSb16BITMAP40_SEL_BIT_POS15                         0
    #define       bBITMAP40_SEL_BIT_POS15                      6
    #define   MSK32BITMAP40_SEL_BIT_POS15                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS16                      0x000C
    #define     B16BITMAP40_SEL_BIT_POS16                      0x000C
    #define   LSb32BITMAP40_SEL_BIT_POS16                         6
    #define   LSb16BITMAP40_SEL_BIT_POS16                         6
    #define       bBITMAP40_SEL_BIT_POS16                      6
    #define   MSK32BITMAP40_SEL_BIT_POS16                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS17                      0x000D
    #define     B16BITMAP40_SEL_BIT_POS17                      0x000C
    #define   LSb32BITMAP40_SEL_BIT_POS17                         12
    #define   LSb16BITMAP40_SEL_BIT_POS17                         12
    #define       bBITMAP40_SEL_BIT_POS17                      6
    #define   MSK32BITMAP40_SEL_BIT_POS17                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS18                      0x000E
    #define     B16BITMAP40_SEL_BIT_POS18                      0x000E
    #define   LSb32BITMAP40_SEL_BIT_POS18                         18
    #define   LSb16BITMAP40_SEL_BIT_POS18                         2
    #define       bBITMAP40_SEL_BIT_POS18                      6
    #define   MSK32BITMAP40_SEL_BIT_POS18                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS19                      0x000F
    #define     B16BITMAP40_SEL_BIT_POS19                      0x000E
    #define   LSb32BITMAP40_SEL_BIT_POS19                         24
    #define   LSb16BITMAP40_SEL_BIT_POS19                         8
    #define       bBITMAP40_SEL_BIT_POS19                      6
    #define   MSK32BITMAP40_SEL_BIT_POS19                         0x3F000000

    #define     RA_BITMAP40_SEL4                               0x0010

    #define     BA_BITMAP40_SEL_BIT_POS20                      0x0010
    #define     B16BITMAP40_SEL_BIT_POS20                      0x0010
    #define   LSb32BITMAP40_SEL_BIT_POS20                         0
    #define   LSb16BITMAP40_SEL_BIT_POS20                         0
    #define       bBITMAP40_SEL_BIT_POS20                      6
    #define   MSK32BITMAP40_SEL_BIT_POS20                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS21                      0x0010
    #define     B16BITMAP40_SEL_BIT_POS21                      0x0010
    #define   LSb32BITMAP40_SEL_BIT_POS21                         6
    #define   LSb16BITMAP40_SEL_BIT_POS21                         6
    #define       bBITMAP40_SEL_BIT_POS21                      6
    #define   MSK32BITMAP40_SEL_BIT_POS21                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS22                      0x0011
    #define     B16BITMAP40_SEL_BIT_POS22                      0x0010
    #define   LSb32BITMAP40_SEL_BIT_POS22                         12
    #define   LSb16BITMAP40_SEL_BIT_POS22                         12
    #define       bBITMAP40_SEL_BIT_POS22                      6
    #define   MSK32BITMAP40_SEL_BIT_POS22                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS23                      0x0012
    #define     B16BITMAP40_SEL_BIT_POS23                      0x0012
    #define   LSb32BITMAP40_SEL_BIT_POS23                         18
    #define   LSb16BITMAP40_SEL_BIT_POS23                         2
    #define       bBITMAP40_SEL_BIT_POS23                      6
    #define   MSK32BITMAP40_SEL_BIT_POS23                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS24                      0x0013
    #define     B16BITMAP40_SEL_BIT_POS24                      0x0012
    #define   LSb32BITMAP40_SEL_BIT_POS24                         24
    #define   LSb16BITMAP40_SEL_BIT_POS24                         8
    #define       bBITMAP40_SEL_BIT_POS24                      6
    #define   MSK32BITMAP40_SEL_BIT_POS24                         0x3F000000

    #define     RA_BITMAP40_SEL5                               0x0014

    #define     BA_BITMAP40_SEL_BIT_POS25                      0x0014
    #define     B16BITMAP40_SEL_BIT_POS25                      0x0014
    #define   LSb32BITMAP40_SEL_BIT_POS25                         0
    #define   LSb16BITMAP40_SEL_BIT_POS25                         0
    #define       bBITMAP40_SEL_BIT_POS25                      6
    #define   MSK32BITMAP40_SEL_BIT_POS25                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS26                      0x0014
    #define     B16BITMAP40_SEL_BIT_POS26                      0x0014
    #define   LSb32BITMAP40_SEL_BIT_POS26                         6
    #define   LSb16BITMAP40_SEL_BIT_POS26                         6
    #define       bBITMAP40_SEL_BIT_POS26                      6
    #define   MSK32BITMAP40_SEL_BIT_POS26                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS27                      0x0015
    #define     B16BITMAP40_SEL_BIT_POS27                      0x0014
    #define   LSb32BITMAP40_SEL_BIT_POS27                         12
    #define   LSb16BITMAP40_SEL_BIT_POS27                         12
    #define       bBITMAP40_SEL_BIT_POS27                      6
    #define   MSK32BITMAP40_SEL_BIT_POS27                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS28                      0x0016
    #define     B16BITMAP40_SEL_BIT_POS28                      0x0016
    #define   LSb32BITMAP40_SEL_BIT_POS28                         18
    #define   LSb16BITMAP40_SEL_BIT_POS28                         2
    #define       bBITMAP40_SEL_BIT_POS28                      6
    #define   MSK32BITMAP40_SEL_BIT_POS28                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS29                      0x0017
    #define     B16BITMAP40_SEL_BIT_POS29                      0x0016
    #define   LSb32BITMAP40_SEL_BIT_POS29                         24
    #define   LSb16BITMAP40_SEL_BIT_POS29                         8
    #define       bBITMAP40_SEL_BIT_POS29                      6
    #define   MSK32BITMAP40_SEL_BIT_POS29                         0x3F000000

    #define     RA_BITMAP40_SEL6                               0x0018

    #define     BA_BITMAP40_SEL_BIT_POS30                      0x0018
    #define     B16BITMAP40_SEL_BIT_POS30                      0x0018
    #define   LSb32BITMAP40_SEL_BIT_POS30                         0
    #define   LSb16BITMAP40_SEL_BIT_POS30                         0
    #define       bBITMAP40_SEL_BIT_POS30                      6
    #define   MSK32BITMAP40_SEL_BIT_POS30                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS31                      0x0018
    #define     B16BITMAP40_SEL_BIT_POS31                      0x0018
    #define   LSb32BITMAP40_SEL_BIT_POS31                         6
    #define   LSb16BITMAP40_SEL_BIT_POS31                         6
    #define       bBITMAP40_SEL_BIT_POS31                      6
    #define   MSK32BITMAP40_SEL_BIT_POS31                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS32                      0x0019
    #define     B16BITMAP40_SEL_BIT_POS32                      0x0018
    #define   LSb32BITMAP40_SEL_BIT_POS32                         12
    #define   LSb16BITMAP40_SEL_BIT_POS32                         12
    #define       bBITMAP40_SEL_BIT_POS32                      6
    #define   MSK32BITMAP40_SEL_BIT_POS32                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS33                      0x001A
    #define     B16BITMAP40_SEL_BIT_POS33                      0x001A
    #define   LSb32BITMAP40_SEL_BIT_POS33                         18
    #define   LSb16BITMAP40_SEL_BIT_POS33                         2
    #define       bBITMAP40_SEL_BIT_POS33                      6
    #define   MSK32BITMAP40_SEL_BIT_POS33                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS34                      0x001B
    #define     B16BITMAP40_SEL_BIT_POS34                      0x001A
    #define   LSb32BITMAP40_SEL_BIT_POS34                         24
    #define   LSb16BITMAP40_SEL_BIT_POS34                         8
    #define       bBITMAP40_SEL_BIT_POS34                      6
    #define   MSK32BITMAP40_SEL_BIT_POS34                         0x3F000000

    #define     RA_BITMAP40_SEL7                               0x001C

    #define     BA_BITMAP40_SEL_BIT_POS35                      0x001C
    #define     B16BITMAP40_SEL_BIT_POS35                      0x001C
    #define   LSb32BITMAP40_SEL_BIT_POS35                         0
    #define   LSb16BITMAP40_SEL_BIT_POS35                         0
    #define       bBITMAP40_SEL_BIT_POS35                      6
    #define   MSK32BITMAP40_SEL_BIT_POS35                         0x0000003F

    #define     BA_BITMAP40_SEL_BIT_POS36                      0x001C
    #define     B16BITMAP40_SEL_BIT_POS36                      0x001C
    #define   LSb32BITMAP40_SEL_BIT_POS36                         6
    #define   LSb16BITMAP40_SEL_BIT_POS36                         6
    #define       bBITMAP40_SEL_BIT_POS36                      6
    #define   MSK32BITMAP40_SEL_BIT_POS36                         0x00000FC0

    #define     BA_BITMAP40_SEL_BIT_POS37                      0x001D
    #define     B16BITMAP40_SEL_BIT_POS37                      0x001C
    #define   LSb32BITMAP40_SEL_BIT_POS37                         12
    #define   LSb16BITMAP40_SEL_BIT_POS37                         12
    #define       bBITMAP40_SEL_BIT_POS37                      6
    #define   MSK32BITMAP40_SEL_BIT_POS37                         0x0003F000

    #define     BA_BITMAP40_SEL_BIT_POS38                      0x001E
    #define     B16BITMAP40_SEL_BIT_POS38                      0x001E
    #define   LSb32BITMAP40_SEL_BIT_POS38                         18
    #define   LSb16BITMAP40_SEL_BIT_POS38                         2
    #define       bBITMAP40_SEL_BIT_POS38                      6
    #define   MSK32BITMAP40_SEL_BIT_POS38                         0x00FC0000

    #define     BA_BITMAP40_SEL_BIT_POS39                      0x001F
    #define     B16BITMAP40_SEL_BIT_POS39                      0x001E
    #define   LSb32BITMAP40_SEL_BIT_POS39                         24
    #define   LSb16BITMAP40_SEL_BIT_POS39                         8
    #define       bBITMAP40_SEL_BIT_POS39                      6
    #define   MSK32BITMAP40_SEL_BIT_POS39                         0x3F000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BITMAP40 {
    ///////////////////////////////////////////////////////////
    #define   GET32BITMAP40_SEL_BIT_POS0(r32)                  _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS0(r32,v)                _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS0(r16)                  _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS0(r16,v)                _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS1(r32)                  _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS1(r32,v)                _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS1(r16)                  _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS1(r16,v)                _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS2(r32)                  _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS2(r32,v)                _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS3(r32)                  _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS3(r32,v)                _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS3(r16)                  _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS3(r16,v)                _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS4(r32)                  _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS4(r32,v)                _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS4(r16)                  _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS4(r16,v)                _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL                                {\
            UNSG32 uSEL_BIT_POS0                               :  6;\
            UNSG32 uSEL_BIT_POS1                               :  6;\
            UNSG32 uSEL_BIT_POS2                               :  6;\
            UNSG32 uSEL_BIT_POS3                               :  6;\
            UNSG32 uSEL_BIT_POS4                               :  6;\
            UNSG32 RSVDx0_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL;
            struct w32BITMAP40_SEL;
          };
    #define   GET32BITMAP40_SEL_BIT_POS5(r32)                  _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS5(r32,v)                _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS5(r16)                  _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS5(r16,v)                _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS6(r32)                  _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS6(r32,v)                _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS6(r16)                  _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS6(r16,v)                _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS7(r32)                  _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS7(r32,v)                _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS8(r32)                  _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS8(r32,v)                _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS8(r16)                  _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS8(r16,v)                _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS9(r32)                  _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS9(r32,v)                _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS9(r16)                  _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS9(r16,v)                _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL1                               {\
            UNSG32 uSEL_BIT_POS5                               :  6;\
            UNSG32 uSEL_BIT_POS6                               :  6;\
            UNSG32 uSEL_BIT_POS7                               :  6;\
            UNSG32 uSEL_BIT_POS8                               :  6;\
            UNSG32 uSEL_BIT_POS9                               :  6;\
            UNSG32 RSVDx4_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL1;
            struct w32BITMAP40_SEL1;
          };
    #define   GET32BITMAP40_SEL_BIT_POS10(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS10(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS10(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS10(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS11(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS11(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS11(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS11(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS12(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS12(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS13(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS13(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS13(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS13(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS14(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS14(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS14(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS14(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL2                               {\
            UNSG32 uSEL_BIT_POS10                              :  6;\
            UNSG32 uSEL_BIT_POS11                              :  6;\
            UNSG32 uSEL_BIT_POS12                              :  6;\
            UNSG32 uSEL_BIT_POS13                              :  6;\
            UNSG32 uSEL_BIT_POS14                              :  6;\
            UNSG32 RSVDx8_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL2;
            struct w32BITMAP40_SEL2;
          };
    #define   GET32BITMAP40_SEL_BIT_POS15(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS15(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS15(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS15(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS16(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS16(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS16(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS16(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS17(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS17(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS18(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS18(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS18(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS18(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS19(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS19(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS19(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS19(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL3                               {\
            UNSG32 uSEL_BIT_POS15                              :  6;\
            UNSG32 uSEL_BIT_POS16                              :  6;\
            UNSG32 uSEL_BIT_POS17                              :  6;\
            UNSG32 uSEL_BIT_POS18                              :  6;\
            UNSG32 uSEL_BIT_POS19                              :  6;\
            UNSG32 RSVDxC_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL3;
            struct w32BITMAP40_SEL3;
          };
    #define   GET32BITMAP40_SEL_BIT_POS20(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS20(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS20(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS20(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS21(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS21(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS21(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS21(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS22(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS22(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS23(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS23(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS23(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS23(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS24(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS24(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS24(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS24(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL4                               {\
            UNSG32 uSEL_BIT_POS20                              :  6;\
            UNSG32 uSEL_BIT_POS21                              :  6;\
            UNSG32 uSEL_BIT_POS22                              :  6;\
            UNSG32 uSEL_BIT_POS23                              :  6;\
            UNSG32 uSEL_BIT_POS24                              :  6;\
            UNSG32 RSVDx10_b30                                 :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL4;
            struct w32BITMAP40_SEL4;
          };
    #define   GET32BITMAP40_SEL_BIT_POS25(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS25(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS25(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS25(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS26(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS26(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS26(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS26(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS27(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS27(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS28(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS28(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS28(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS28(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS29(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS29(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS29(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS29(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL5                               {\
            UNSG32 uSEL_BIT_POS25                              :  6;\
            UNSG32 uSEL_BIT_POS26                              :  6;\
            UNSG32 uSEL_BIT_POS27                              :  6;\
            UNSG32 uSEL_BIT_POS28                              :  6;\
            UNSG32 uSEL_BIT_POS29                              :  6;\
            UNSG32 RSVDx14_b30                                 :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL5;
            struct w32BITMAP40_SEL5;
          };
    #define   GET32BITMAP40_SEL_BIT_POS30(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS30(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS30(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS30(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS31(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS31(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS31(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS31(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS32(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS32(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS33(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS33(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS33(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS33(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS34(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS34(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS34(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS34(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL6                               {\
            UNSG32 uSEL_BIT_POS30                              :  6;\
            UNSG32 uSEL_BIT_POS31                              :  6;\
            UNSG32 uSEL_BIT_POS32                              :  6;\
            UNSG32 uSEL_BIT_POS33                              :  6;\
            UNSG32 uSEL_BIT_POS34                              :  6;\
            UNSG32 RSVDx18_b30                                 :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL6;
            struct w32BITMAP40_SEL6;
          };
    #define   GET32BITMAP40_SEL_BIT_POS35(r32)                 _BFGET_(r32, 5, 0)
    #define   SET32BITMAP40_SEL_BIT_POS35(r32,v)               _BFSET_(r32, 5, 0,v)
    #define   GET16BITMAP40_SEL_BIT_POS35(r16)                 _BFGET_(r16, 5, 0)
    #define   SET16BITMAP40_SEL_BIT_POS35(r16,v)               _BFSET_(r16, 5, 0,v)

    #define   GET32BITMAP40_SEL_BIT_POS36(r32)                 _BFGET_(r32,11, 6)
    #define   SET32BITMAP40_SEL_BIT_POS36(r32,v)               _BFSET_(r32,11, 6,v)
    #define   GET16BITMAP40_SEL_BIT_POS36(r16)                 _BFGET_(r16,11, 6)
    #define   SET16BITMAP40_SEL_BIT_POS36(r16,v)               _BFSET_(r16,11, 6,v)

    #define   GET32BITMAP40_SEL_BIT_POS37(r32)                 _BFGET_(r32,17,12)
    #define   SET32BITMAP40_SEL_BIT_POS37(r32,v)               _BFSET_(r32,17,12,v)

    #define   GET32BITMAP40_SEL_BIT_POS38(r32)                 _BFGET_(r32,23,18)
    #define   SET32BITMAP40_SEL_BIT_POS38(r32,v)               _BFSET_(r32,23,18,v)
    #define   GET16BITMAP40_SEL_BIT_POS38(r16)                 _BFGET_(r16, 7, 2)
    #define   SET16BITMAP40_SEL_BIT_POS38(r16,v)               _BFSET_(r16, 7, 2,v)

    #define   GET32BITMAP40_SEL_BIT_POS39(r32)                 _BFGET_(r32,29,24)
    #define   SET32BITMAP40_SEL_BIT_POS39(r32,v)               _BFSET_(r32,29,24,v)
    #define   GET16BITMAP40_SEL_BIT_POS39(r16)                 _BFGET_(r16,13, 8)
    #define   SET16BITMAP40_SEL_BIT_POS39(r16,v)               _BFSET_(r16,13, 8,v)

    #define     w32BITMAP40_SEL7                               {\
            UNSG32 uSEL_BIT_POS35                              :  6;\
            UNSG32 uSEL_BIT_POS36                              :  6;\
            UNSG32 uSEL_BIT_POS37                              :  6;\
            UNSG32 uSEL_BIT_POS38                              :  6;\
            UNSG32 uSEL_BIT_POS39                              :  6;\
            UNSG32 RSVDx1C_b30                                 :  2;\
          }
    union { UNSG32 u32BITMAP40_SEL7;
            struct w32BITMAP40_SEL7;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BITMAP40;

    typedef union  T32BITMAP40_SEL
          { UNSG32 u32;
            struct w32BITMAP40_SEL;
                 } T32BITMAP40_SEL;
    typedef union  T32BITMAP40_SEL1
          { UNSG32 u32;
            struct w32BITMAP40_SEL1;
                 } T32BITMAP40_SEL1;
    typedef union  T32BITMAP40_SEL2
          { UNSG32 u32;
            struct w32BITMAP40_SEL2;
                 } T32BITMAP40_SEL2;
    typedef union  T32BITMAP40_SEL3
          { UNSG32 u32;
            struct w32BITMAP40_SEL3;
                 } T32BITMAP40_SEL3;
    typedef union  T32BITMAP40_SEL4
          { UNSG32 u32;
            struct w32BITMAP40_SEL4;
                 } T32BITMAP40_SEL4;
    typedef union  T32BITMAP40_SEL5
          { UNSG32 u32;
            struct w32BITMAP40_SEL5;
                 } T32BITMAP40_SEL5;
    typedef union  T32BITMAP40_SEL6
          { UNSG32 u32;
            struct w32BITMAP40_SEL6;
                 } T32BITMAP40_SEL6;
    typedef union  T32BITMAP40_SEL7
          { UNSG32 u32;
            struct w32BITMAP40_SEL7;
                 } T32BITMAP40_SEL7;
    ///////////////////////////////////////////////////////////

    typedef union  TBITMAP40_SEL
          { UNSG32 u32[8];
            struct {
            struct w32BITMAP40_SEL;
            struct w32BITMAP40_SEL1;
            struct w32BITMAP40_SEL2;
            struct w32BITMAP40_SEL3;
            struct w32BITMAP40_SEL4;
            struct w32BITMAP40_SEL5;
            struct w32BITMAP40_SEL6;
            struct w32BITMAP40_SEL7;
                   };
                 } TBITMAP40_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 BITMAP40_drvrd(SIE_BITMAP40 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BITMAP40_drvwr(SIE_BITMAP40 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BITMAP40_reset(SIE_BITMAP40 *p);
     SIGN32 BITMAP40_cmp  (SIE_BITMAP40 *p, SIE_BITMAP40 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BITMAP40_check(p,pie,pfx,hLOG) BITMAP40_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BITMAP40_print(p,    pfx,hLOG) BITMAP40_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BITMAP40
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE BITMAP20                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SEL                  (P)
///               %unsigned 5  BIT_POS0                  0x0
///               %unsigned 5  BIT_POS1                  0x1
///               %unsigned 5  BIT_POS2                  0x2
///               %unsigned 5  BIT_POS3                  0x3
///               %unsigned 5  BIT_POS4                  0x4
///               %unsigned 5  BIT_POS5                  0x5
///               %%        2          # Stuffing bits...
///     # 0x00004 SEL1                 
///               %unsigned 5  BIT_POS6                  0x6
///               %unsigned 5  BIT_POS7                  0x7
///               %unsigned 5  BIT_POS8                  0x8
///               %unsigned 5  BIT_POS9                  0x9
///               %unsigned 5  BIT_POS10                 0xA
///               %unsigned 5  BIT_POS11                 0xB
///               %%        2          # Stuffing bits...
///     # 0x00008 SEL2                 
///               %unsigned 5  BIT_POS12                 0xC
///               %unsigned 5  BIT_POS13                 0xD
///               %unsigned 5  BIT_POS14                 0xE
///               %unsigned 5  BIT_POS15                 0xF
///               %unsigned 5  BIT_POS16                 0x10
///               %unsigned 5  BIT_POS17                 0x11
///               %%        2          # Stuffing bits...
///     # 0x0000C SEL3                 
///               %unsigned 5  BIT_POS18                 0x12
///               %unsigned 5  BIT_POS19                 0x13
///                                    ###
///                                    * Specifies mapping of new bit locations within 20 bit data from Read Client which need to be used to form pixels for Inverse Scan mode.
///                                    * Normal dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in LSB
///                                    * Inverse Scan dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in MSB
///                                    * Following different data orders can be generated to be presented to first UPS in the pipe.
///                                    ###
///               %%        22         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:     100b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BITMAP20
#define h_BITMAP20 (){}

    #define     RA_BITMAP20_SEL                                0x0000

    #define     BA_BITMAP20_SEL_BIT_POS0                       0x0000
    #define     B16BITMAP20_SEL_BIT_POS0                       0x0000
    #define   LSb32BITMAP20_SEL_BIT_POS0                          0
    #define   LSb16BITMAP20_SEL_BIT_POS0                          0
    #define       bBITMAP20_SEL_BIT_POS0                       5
    #define   MSK32BITMAP20_SEL_BIT_POS0                          0x0000001F

    #define     BA_BITMAP20_SEL_BIT_POS1                       0x0000
    #define     B16BITMAP20_SEL_BIT_POS1                       0x0000
    #define   LSb32BITMAP20_SEL_BIT_POS1                          5
    #define   LSb16BITMAP20_SEL_BIT_POS1                          5
    #define       bBITMAP20_SEL_BIT_POS1                       5
    #define   MSK32BITMAP20_SEL_BIT_POS1                          0x000003E0

    #define     BA_BITMAP20_SEL_BIT_POS2                       0x0001
    #define     B16BITMAP20_SEL_BIT_POS2                       0x0000
    #define   LSb32BITMAP20_SEL_BIT_POS2                          10
    #define   LSb16BITMAP20_SEL_BIT_POS2                          10
    #define       bBITMAP20_SEL_BIT_POS2                       5
    #define   MSK32BITMAP20_SEL_BIT_POS2                          0x00007C00

    #define     BA_BITMAP20_SEL_BIT_POS3                       0x0001
    #define     B16BITMAP20_SEL_BIT_POS3                       0x0000
    #define   LSb32BITMAP20_SEL_BIT_POS3                          15
    #define   LSb16BITMAP20_SEL_BIT_POS3                          15
    #define       bBITMAP20_SEL_BIT_POS3                       5
    #define   MSK32BITMAP20_SEL_BIT_POS3                          0x000F8000

    #define     BA_BITMAP20_SEL_BIT_POS4                       0x0002
    #define     B16BITMAP20_SEL_BIT_POS4                       0x0002
    #define   LSb32BITMAP20_SEL_BIT_POS4                          20
    #define   LSb16BITMAP20_SEL_BIT_POS4                          4
    #define       bBITMAP20_SEL_BIT_POS4                       5
    #define   MSK32BITMAP20_SEL_BIT_POS4                          0x01F00000

    #define     BA_BITMAP20_SEL_BIT_POS5                       0x0003
    #define     B16BITMAP20_SEL_BIT_POS5                       0x0002
    #define   LSb32BITMAP20_SEL_BIT_POS5                          25
    #define   LSb16BITMAP20_SEL_BIT_POS5                          9
    #define       bBITMAP20_SEL_BIT_POS5                       5
    #define   MSK32BITMAP20_SEL_BIT_POS5                          0x3E000000

    #define     RA_BITMAP20_SEL1                               0x0004

    #define     BA_BITMAP20_SEL_BIT_POS6                       0x0004
    #define     B16BITMAP20_SEL_BIT_POS6                       0x0004
    #define   LSb32BITMAP20_SEL_BIT_POS6                          0
    #define   LSb16BITMAP20_SEL_BIT_POS6                          0
    #define       bBITMAP20_SEL_BIT_POS6                       5
    #define   MSK32BITMAP20_SEL_BIT_POS6                          0x0000001F

    #define     BA_BITMAP20_SEL_BIT_POS7                       0x0004
    #define     B16BITMAP20_SEL_BIT_POS7                       0x0004
    #define   LSb32BITMAP20_SEL_BIT_POS7                          5
    #define   LSb16BITMAP20_SEL_BIT_POS7                          5
    #define       bBITMAP20_SEL_BIT_POS7                       5
    #define   MSK32BITMAP20_SEL_BIT_POS7                          0x000003E0

    #define     BA_BITMAP20_SEL_BIT_POS8                       0x0005
    #define     B16BITMAP20_SEL_BIT_POS8                       0x0004
    #define   LSb32BITMAP20_SEL_BIT_POS8                          10
    #define   LSb16BITMAP20_SEL_BIT_POS8                          10
    #define       bBITMAP20_SEL_BIT_POS8                       5
    #define   MSK32BITMAP20_SEL_BIT_POS8                          0x00007C00

    #define     BA_BITMAP20_SEL_BIT_POS9                       0x0005
    #define     B16BITMAP20_SEL_BIT_POS9                       0x0004
    #define   LSb32BITMAP20_SEL_BIT_POS9                          15
    #define   LSb16BITMAP20_SEL_BIT_POS9                          15
    #define       bBITMAP20_SEL_BIT_POS9                       5
    #define   MSK32BITMAP20_SEL_BIT_POS9                          0x000F8000

    #define     BA_BITMAP20_SEL_BIT_POS10                      0x0006
    #define     B16BITMAP20_SEL_BIT_POS10                      0x0006
    #define   LSb32BITMAP20_SEL_BIT_POS10                         20
    #define   LSb16BITMAP20_SEL_BIT_POS10                         4
    #define       bBITMAP20_SEL_BIT_POS10                      5
    #define   MSK32BITMAP20_SEL_BIT_POS10                         0x01F00000

    #define     BA_BITMAP20_SEL_BIT_POS11                      0x0007
    #define     B16BITMAP20_SEL_BIT_POS11                      0x0006
    #define   LSb32BITMAP20_SEL_BIT_POS11                         25
    #define   LSb16BITMAP20_SEL_BIT_POS11                         9
    #define       bBITMAP20_SEL_BIT_POS11                      5
    #define   MSK32BITMAP20_SEL_BIT_POS11                         0x3E000000

    #define     RA_BITMAP20_SEL2                               0x0008

    #define     BA_BITMAP20_SEL_BIT_POS12                      0x0008
    #define     B16BITMAP20_SEL_BIT_POS12                      0x0008
    #define   LSb32BITMAP20_SEL_BIT_POS12                         0
    #define   LSb16BITMAP20_SEL_BIT_POS12                         0
    #define       bBITMAP20_SEL_BIT_POS12                      5
    #define   MSK32BITMAP20_SEL_BIT_POS12                         0x0000001F

    #define     BA_BITMAP20_SEL_BIT_POS13                      0x0008
    #define     B16BITMAP20_SEL_BIT_POS13                      0x0008
    #define   LSb32BITMAP20_SEL_BIT_POS13                         5
    #define   LSb16BITMAP20_SEL_BIT_POS13                         5
    #define       bBITMAP20_SEL_BIT_POS13                      5
    #define   MSK32BITMAP20_SEL_BIT_POS13                         0x000003E0

    #define     BA_BITMAP20_SEL_BIT_POS14                      0x0009
    #define     B16BITMAP20_SEL_BIT_POS14                      0x0008
    #define   LSb32BITMAP20_SEL_BIT_POS14                         10
    #define   LSb16BITMAP20_SEL_BIT_POS14                         10
    #define       bBITMAP20_SEL_BIT_POS14                      5
    #define   MSK32BITMAP20_SEL_BIT_POS14                         0x00007C00

    #define     BA_BITMAP20_SEL_BIT_POS15                      0x0009
    #define     B16BITMAP20_SEL_BIT_POS15                      0x0008
    #define   LSb32BITMAP20_SEL_BIT_POS15                         15
    #define   LSb16BITMAP20_SEL_BIT_POS15                         15
    #define       bBITMAP20_SEL_BIT_POS15                      5
    #define   MSK32BITMAP20_SEL_BIT_POS15                         0x000F8000

    #define     BA_BITMAP20_SEL_BIT_POS16                      0x000A
    #define     B16BITMAP20_SEL_BIT_POS16                      0x000A
    #define   LSb32BITMAP20_SEL_BIT_POS16                         20
    #define   LSb16BITMAP20_SEL_BIT_POS16                         4
    #define       bBITMAP20_SEL_BIT_POS16                      5
    #define   MSK32BITMAP20_SEL_BIT_POS16                         0x01F00000

    #define     BA_BITMAP20_SEL_BIT_POS17                      0x000B
    #define     B16BITMAP20_SEL_BIT_POS17                      0x000A
    #define   LSb32BITMAP20_SEL_BIT_POS17                         25
    #define   LSb16BITMAP20_SEL_BIT_POS17                         9
    #define       bBITMAP20_SEL_BIT_POS17                      5
    #define   MSK32BITMAP20_SEL_BIT_POS17                         0x3E000000

    #define     RA_BITMAP20_SEL3                               0x000C

    #define     BA_BITMAP20_SEL_BIT_POS18                      0x000C
    #define     B16BITMAP20_SEL_BIT_POS18                      0x000C
    #define   LSb32BITMAP20_SEL_BIT_POS18                         0
    #define   LSb16BITMAP20_SEL_BIT_POS18                         0
    #define       bBITMAP20_SEL_BIT_POS18                      5
    #define   MSK32BITMAP20_SEL_BIT_POS18                         0x0000001F

    #define     BA_BITMAP20_SEL_BIT_POS19                      0x000C
    #define     B16BITMAP20_SEL_BIT_POS19                      0x000C
    #define   LSb32BITMAP20_SEL_BIT_POS19                         5
    #define   LSb16BITMAP20_SEL_BIT_POS19                         5
    #define       bBITMAP20_SEL_BIT_POS19                      5
    #define   MSK32BITMAP20_SEL_BIT_POS19                         0x000003E0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BITMAP20 {
    ///////////////////////////////////////////////////////////
    #define   GET32BITMAP20_SEL_BIT_POS0(r32)                  _BFGET_(r32, 4, 0)
    #define   SET32BITMAP20_SEL_BIT_POS0(r32,v)                _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP20_SEL_BIT_POS0(r16)                  _BFGET_(r16, 4, 0)
    #define   SET16BITMAP20_SEL_BIT_POS0(r16,v)                _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP20_SEL_BIT_POS1(r32)                  _BFGET_(r32, 9, 5)
    #define   SET32BITMAP20_SEL_BIT_POS1(r32,v)                _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP20_SEL_BIT_POS1(r16)                  _BFGET_(r16, 9, 5)
    #define   SET16BITMAP20_SEL_BIT_POS1(r16,v)                _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP20_SEL_BIT_POS2(r32)                  _BFGET_(r32,14,10)
    #define   SET32BITMAP20_SEL_BIT_POS2(r32,v)                _BFSET_(r32,14,10,v)
    #define   GET16BITMAP20_SEL_BIT_POS2(r16)                  _BFGET_(r16,14,10)
    #define   SET16BITMAP20_SEL_BIT_POS2(r16,v)                _BFSET_(r16,14,10,v)

    #define   GET32BITMAP20_SEL_BIT_POS3(r32)                  _BFGET_(r32,19,15)
    #define   SET32BITMAP20_SEL_BIT_POS3(r32,v)                _BFSET_(r32,19,15,v)

    #define   GET32BITMAP20_SEL_BIT_POS4(r32)                  _BFGET_(r32,24,20)
    #define   SET32BITMAP20_SEL_BIT_POS4(r32,v)                _BFSET_(r32,24,20,v)
    #define   GET16BITMAP20_SEL_BIT_POS4(r16)                  _BFGET_(r16, 8, 4)
    #define   SET16BITMAP20_SEL_BIT_POS4(r16,v)                _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP20_SEL_BIT_POS5(r32)                  _BFGET_(r32,29,25)
    #define   SET32BITMAP20_SEL_BIT_POS5(r32,v)                _BFSET_(r32,29,25,v)
    #define   GET16BITMAP20_SEL_BIT_POS5(r16)                  _BFGET_(r16,13, 9)
    #define   SET16BITMAP20_SEL_BIT_POS5(r16,v)                _BFSET_(r16,13, 9,v)

    #define     w32BITMAP20_SEL                                {\
            UNSG32 uSEL_BIT_POS0                               :  5;\
            UNSG32 uSEL_BIT_POS1                               :  5;\
            UNSG32 uSEL_BIT_POS2                               :  5;\
            UNSG32 uSEL_BIT_POS3                               :  5;\
            UNSG32 uSEL_BIT_POS4                               :  5;\
            UNSG32 uSEL_BIT_POS5                               :  5;\
            UNSG32 RSVDx0_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP20_SEL;
            struct w32BITMAP20_SEL;
          };
    #define   GET32BITMAP20_SEL_BIT_POS6(r32)                  _BFGET_(r32, 4, 0)
    #define   SET32BITMAP20_SEL_BIT_POS6(r32,v)                _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP20_SEL_BIT_POS6(r16)                  _BFGET_(r16, 4, 0)
    #define   SET16BITMAP20_SEL_BIT_POS6(r16,v)                _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP20_SEL_BIT_POS7(r32)                  _BFGET_(r32, 9, 5)
    #define   SET32BITMAP20_SEL_BIT_POS7(r32,v)                _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP20_SEL_BIT_POS7(r16)                  _BFGET_(r16, 9, 5)
    #define   SET16BITMAP20_SEL_BIT_POS7(r16,v)                _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP20_SEL_BIT_POS8(r32)                  _BFGET_(r32,14,10)
    #define   SET32BITMAP20_SEL_BIT_POS8(r32,v)                _BFSET_(r32,14,10,v)
    #define   GET16BITMAP20_SEL_BIT_POS8(r16)                  _BFGET_(r16,14,10)
    #define   SET16BITMAP20_SEL_BIT_POS8(r16,v)                _BFSET_(r16,14,10,v)

    #define   GET32BITMAP20_SEL_BIT_POS9(r32)                  _BFGET_(r32,19,15)
    #define   SET32BITMAP20_SEL_BIT_POS9(r32,v)                _BFSET_(r32,19,15,v)

    #define   GET32BITMAP20_SEL_BIT_POS10(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP20_SEL_BIT_POS10(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP20_SEL_BIT_POS10(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP20_SEL_BIT_POS10(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP20_SEL_BIT_POS11(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP20_SEL_BIT_POS11(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP20_SEL_BIT_POS11(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP20_SEL_BIT_POS11(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP20_SEL1                               {\
            UNSG32 uSEL_BIT_POS6                               :  5;\
            UNSG32 uSEL_BIT_POS7                               :  5;\
            UNSG32 uSEL_BIT_POS8                               :  5;\
            UNSG32 uSEL_BIT_POS9                               :  5;\
            UNSG32 uSEL_BIT_POS10                              :  5;\
            UNSG32 uSEL_BIT_POS11                              :  5;\
            UNSG32 RSVDx4_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP20_SEL1;
            struct w32BITMAP20_SEL1;
          };
    #define   GET32BITMAP20_SEL_BIT_POS12(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP20_SEL_BIT_POS12(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP20_SEL_BIT_POS12(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP20_SEL_BIT_POS12(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP20_SEL_BIT_POS13(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP20_SEL_BIT_POS13(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP20_SEL_BIT_POS13(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP20_SEL_BIT_POS13(r16,v)               _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP20_SEL_BIT_POS14(r32)                 _BFGET_(r32,14,10)
    #define   SET32BITMAP20_SEL_BIT_POS14(r32,v)               _BFSET_(r32,14,10,v)
    #define   GET16BITMAP20_SEL_BIT_POS14(r16)                 _BFGET_(r16,14,10)
    #define   SET16BITMAP20_SEL_BIT_POS14(r16,v)               _BFSET_(r16,14,10,v)

    #define   GET32BITMAP20_SEL_BIT_POS15(r32)                 _BFGET_(r32,19,15)
    #define   SET32BITMAP20_SEL_BIT_POS15(r32,v)               _BFSET_(r32,19,15,v)

    #define   GET32BITMAP20_SEL_BIT_POS16(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP20_SEL_BIT_POS16(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP20_SEL_BIT_POS16(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP20_SEL_BIT_POS16(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP20_SEL_BIT_POS17(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP20_SEL_BIT_POS17(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP20_SEL_BIT_POS17(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP20_SEL_BIT_POS17(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP20_SEL2                               {\
            UNSG32 uSEL_BIT_POS12                              :  5;\
            UNSG32 uSEL_BIT_POS13                              :  5;\
            UNSG32 uSEL_BIT_POS14                              :  5;\
            UNSG32 uSEL_BIT_POS15                              :  5;\
            UNSG32 uSEL_BIT_POS16                              :  5;\
            UNSG32 uSEL_BIT_POS17                              :  5;\
            UNSG32 RSVDx8_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP20_SEL2;
            struct w32BITMAP20_SEL2;
          };
    #define   GET32BITMAP20_SEL_BIT_POS18(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP20_SEL_BIT_POS18(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP20_SEL_BIT_POS18(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP20_SEL_BIT_POS18(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP20_SEL_BIT_POS19(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP20_SEL_BIT_POS19(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP20_SEL_BIT_POS19(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP20_SEL_BIT_POS19(r16,v)               _BFSET_(r16, 9, 5,v)

    #define     w32BITMAP20_SEL3                               {\
            UNSG32 uSEL_BIT_POS18                              :  5;\
            UNSG32 uSEL_BIT_POS19                              :  5;\
            UNSG32 RSVDxC_b10                                  : 22;\
          }
    union { UNSG32 u32BITMAP20_SEL3;
            struct w32BITMAP20_SEL3;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BITMAP20;

    typedef union  T32BITMAP20_SEL
          { UNSG32 u32;
            struct w32BITMAP20_SEL;
                 } T32BITMAP20_SEL;
    typedef union  T32BITMAP20_SEL1
          { UNSG32 u32;
            struct w32BITMAP20_SEL1;
                 } T32BITMAP20_SEL1;
    typedef union  T32BITMAP20_SEL2
          { UNSG32 u32;
            struct w32BITMAP20_SEL2;
                 } T32BITMAP20_SEL2;
    typedef union  T32BITMAP20_SEL3
          { UNSG32 u32;
            struct w32BITMAP20_SEL3;
                 } T32BITMAP20_SEL3;
    ///////////////////////////////////////////////////////////

    typedef union  TBITMAP20_SEL
          { UNSG32 u32[4];
            struct {
            struct w32BITMAP20_SEL;
            struct w32BITMAP20_SEL1;
            struct w32BITMAP20_SEL2;
            struct w32BITMAP20_SEL3;
                   };
                 } TBITMAP20_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 BITMAP20_drvrd(SIE_BITMAP20 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BITMAP20_drvwr(SIE_BITMAP20 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BITMAP20_reset(SIE_BITMAP20 *p);
     SIGN32 BITMAP20_cmp  (SIE_BITMAP20 *p, SIE_BITMAP20 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BITMAP20_check(p,pie,pfx,hLOG) BITMAP20_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BITMAP20_print(p,    pfx,hLOG) BITMAP20_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BITMAP20
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE BITMAP32                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SEL                  (P)
///               %unsigned 5  BIT_POS0                  0x0
///               %unsigned 5  BIT_POS1                  0x1
///               %unsigned 5  BIT_POS2                  0x2
///               %unsigned 5  BIT_POS3                  0x3
///               %unsigned 5  BIT_POS4                  0x4
///               %unsigned 5  BIT_POS5                  0x5
///               %%        2          # Stuffing bits...
///     # 0x00004 SEL1                 
///               %unsigned 5  BIT_POS6                  0x6
///               %unsigned 5  BIT_POS7                  0x7
///               %unsigned 5  BIT_POS8                  0x8
///               %unsigned 5  BIT_POS9                  0x9
///               %unsigned 5  BIT_POS10                 0xA
///               %unsigned 5  BIT_POS11                 0xB
///               %%        2          # Stuffing bits...
///     # 0x00008 SEL2                 
///               %unsigned 5  BIT_POS12                 0xC
///               %unsigned 5  BIT_POS13                 0xD
///               %unsigned 5  BIT_POS14                 0xE
///               %unsigned 5  BIT_POS15                 0xF
///               %unsigned 5  BIT_POS16                 0x10
///               %unsigned 5  BIT_POS17                 0x11
///               %%        2          # Stuffing bits...
///     # 0x0000C SEL3                 
///               %unsigned 5  BIT_POS18                 0x12
///               %unsigned 5  BIT_POS19                 0x13
///               %unsigned 5  BIT_POS20                 0x14
///               %unsigned 5  BIT_POS21                 0x15
///               %unsigned 5  BIT_POS22                 0x16
///               %unsigned 5  BIT_POS23                 0x17
///               %%        2          # Stuffing bits...
///     # 0x00010 SEL4                 
///               %unsigned 5  BIT_POS24                 0x18
///               %unsigned 5  BIT_POS25                 0x19
///               %unsigned 5  BIT_POS26                 0x1A
///               %unsigned 5  BIT_POS27                 0x1B
///               %unsigned 5  BIT_POS28                 0x1C
///               %unsigned 5  BIT_POS29                 0x1D
///               %%        2          # Stuffing bits...
///     # 0x00014 SEL5                 
///               %unsigned 5  BIT_POS30                 0x1E
///               %unsigned 5  BIT_POS31                 0x1F
///                                    ###
///                                    * Specifies mapping of 32 bit data from Read Client which need to be used to form pixels for Inverse Scan mode.
///                                    ###
///               %%        22         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      24B, bits:     160b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BITMAP32
#define h_BITMAP32 (){}

    #define     RA_BITMAP32_SEL                                0x0000

    #define     BA_BITMAP32_SEL_BIT_POS0                       0x0000
    #define     B16BITMAP32_SEL_BIT_POS0                       0x0000
    #define   LSb32BITMAP32_SEL_BIT_POS0                          0
    #define   LSb16BITMAP32_SEL_BIT_POS0                          0
    #define       bBITMAP32_SEL_BIT_POS0                       5
    #define   MSK32BITMAP32_SEL_BIT_POS0                          0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS1                       0x0000
    #define     B16BITMAP32_SEL_BIT_POS1                       0x0000
    #define   LSb32BITMAP32_SEL_BIT_POS1                          5
    #define   LSb16BITMAP32_SEL_BIT_POS1                          5
    #define       bBITMAP32_SEL_BIT_POS1                       5
    #define   MSK32BITMAP32_SEL_BIT_POS1                          0x000003E0

    #define     BA_BITMAP32_SEL_BIT_POS2                       0x0001
    #define     B16BITMAP32_SEL_BIT_POS2                       0x0000
    #define   LSb32BITMAP32_SEL_BIT_POS2                          10
    #define   LSb16BITMAP32_SEL_BIT_POS2                          10
    #define       bBITMAP32_SEL_BIT_POS2                       5
    #define   MSK32BITMAP32_SEL_BIT_POS2                          0x00007C00

    #define     BA_BITMAP32_SEL_BIT_POS3                       0x0001
    #define     B16BITMAP32_SEL_BIT_POS3                       0x0000
    #define   LSb32BITMAP32_SEL_BIT_POS3                          15
    #define   LSb16BITMAP32_SEL_BIT_POS3                          15
    #define       bBITMAP32_SEL_BIT_POS3                       5
    #define   MSK32BITMAP32_SEL_BIT_POS3                          0x000F8000

    #define     BA_BITMAP32_SEL_BIT_POS4                       0x0002
    #define     B16BITMAP32_SEL_BIT_POS4                       0x0002
    #define   LSb32BITMAP32_SEL_BIT_POS4                          20
    #define   LSb16BITMAP32_SEL_BIT_POS4                          4
    #define       bBITMAP32_SEL_BIT_POS4                       5
    #define   MSK32BITMAP32_SEL_BIT_POS4                          0x01F00000

    #define     BA_BITMAP32_SEL_BIT_POS5                       0x0003
    #define     B16BITMAP32_SEL_BIT_POS5                       0x0002
    #define   LSb32BITMAP32_SEL_BIT_POS5                          25
    #define   LSb16BITMAP32_SEL_BIT_POS5                          9
    #define       bBITMAP32_SEL_BIT_POS5                       5
    #define   MSK32BITMAP32_SEL_BIT_POS5                          0x3E000000

    #define     RA_BITMAP32_SEL1                               0x0004

    #define     BA_BITMAP32_SEL_BIT_POS6                       0x0004
    #define     B16BITMAP32_SEL_BIT_POS6                       0x0004
    #define   LSb32BITMAP32_SEL_BIT_POS6                          0
    #define   LSb16BITMAP32_SEL_BIT_POS6                          0
    #define       bBITMAP32_SEL_BIT_POS6                       5
    #define   MSK32BITMAP32_SEL_BIT_POS6                          0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS7                       0x0004
    #define     B16BITMAP32_SEL_BIT_POS7                       0x0004
    #define   LSb32BITMAP32_SEL_BIT_POS7                          5
    #define   LSb16BITMAP32_SEL_BIT_POS7                          5
    #define       bBITMAP32_SEL_BIT_POS7                       5
    #define   MSK32BITMAP32_SEL_BIT_POS7                          0x000003E0

    #define     BA_BITMAP32_SEL_BIT_POS8                       0x0005
    #define     B16BITMAP32_SEL_BIT_POS8                       0x0004
    #define   LSb32BITMAP32_SEL_BIT_POS8                          10
    #define   LSb16BITMAP32_SEL_BIT_POS8                          10
    #define       bBITMAP32_SEL_BIT_POS8                       5
    #define   MSK32BITMAP32_SEL_BIT_POS8                          0x00007C00

    #define     BA_BITMAP32_SEL_BIT_POS9                       0x0005
    #define     B16BITMAP32_SEL_BIT_POS9                       0x0004
    #define   LSb32BITMAP32_SEL_BIT_POS9                          15
    #define   LSb16BITMAP32_SEL_BIT_POS9                          15
    #define       bBITMAP32_SEL_BIT_POS9                       5
    #define   MSK32BITMAP32_SEL_BIT_POS9                          0x000F8000

    #define     BA_BITMAP32_SEL_BIT_POS10                      0x0006
    #define     B16BITMAP32_SEL_BIT_POS10                      0x0006
    #define   LSb32BITMAP32_SEL_BIT_POS10                         20
    #define   LSb16BITMAP32_SEL_BIT_POS10                         4
    #define       bBITMAP32_SEL_BIT_POS10                      5
    #define   MSK32BITMAP32_SEL_BIT_POS10                         0x01F00000

    #define     BA_BITMAP32_SEL_BIT_POS11                      0x0007
    #define     B16BITMAP32_SEL_BIT_POS11                      0x0006
    #define   LSb32BITMAP32_SEL_BIT_POS11                         25
    #define   LSb16BITMAP32_SEL_BIT_POS11                         9
    #define       bBITMAP32_SEL_BIT_POS11                      5
    #define   MSK32BITMAP32_SEL_BIT_POS11                         0x3E000000

    #define     RA_BITMAP32_SEL2                               0x0008

    #define     BA_BITMAP32_SEL_BIT_POS12                      0x0008
    #define     B16BITMAP32_SEL_BIT_POS12                      0x0008
    #define   LSb32BITMAP32_SEL_BIT_POS12                         0
    #define   LSb16BITMAP32_SEL_BIT_POS12                         0
    #define       bBITMAP32_SEL_BIT_POS12                      5
    #define   MSK32BITMAP32_SEL_BIT_POS12                         0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS13                      0x0008
    #define     B16BITMAP32_SEL_BIT_POS13                      0x0008
    #define   LSb32BITMAP32_SEL_BIT_POS13                         5
    #define   LSb16BITMAP32_SEL_BIT_POS13                         5
    #define       bBITMAP32_SEL_BIT_POS13                      5
    #define   MSK32BITMAP32_SEL_BIT_POS13                         0x000003E0

    #define     BA_BITMAP32_SEL_BIT_POS14                      0x0009
    #define     B16BITMAP32_SEL_BIT_POS14                      0x0008
    #define   LSb32BITMAP32_SEL_BIT_POS14                         10
    #define   LSb16BITMAP32_SEL_BIT_POS14                         10
    #define       bBITMAP32_SEL_BIT_POS14                      5
    #define   MSK32BITMAP32_SEL_BIT_POS14                         0x00007C00

    #define     BA_BITMAP32_SEL_BIT_POS15                      0x0009
    #define     B16BITMAP32_SEL_BIT_POS15                      0x0008
    #define   LSb32BITMAP32_SEL_BIT_POS15                         15
    #define   LSb16BITMAP32_SEL_BIT_POS15                         15
    #define       bBITMAP32_SEL_BIT_POS15                      5
    #define   MSK32BITMAP32_SEL_BIT_POS15                         0x000F8000

    #define     BA_BITMAP32_SEL_BIT_POS16                      0x000A
    #define     B16BITMAP32_SEL_BIT_POS16                      0x000A
    #define   LSb32BITMAP32_SEL_BIT_POS16                         20
    #define   LSb16BITMAP32_SEL_BIT_POS16                         4
    #define       bBITMAP32_SEL_BIT_POS16                      5
    #define   MSK32BITMAP32_SEL_BIT_POS16                         0x01F00000

    #define     BA_BITMAP32_SEL_BIT_POS17                      0x000B
    #define     B16BITMAP32_SEL_BIT_POS17                      0x000A
    #define   LSb32BITMAP32_SEL_BIT_POS17                         25
    #define   LSb16BITMAP32_SEL_BIT_POS17                         9
    #define       bBITMAP32_SEL_BIT_POS17                      5
    #define   MSK32BITMAP32_SEL_BIT_POS17                         0x3E000000

    #define     RA_BITMAP32_SEL3                               0x000C

    #define     BA_BITMAP32_SEL_BIT_POS18                      0x000C
    #define     B16BITMAP32_SEL_BIT_POS18                      0x000C
    #define   LSb32BITMAP32_SEL_BIT_POS18                         0
    #define   LSb16BITMAP32_SEL_BIT_POS18                         0
    #define       bBITMAP32_SEL_BIT_POS18                      5
    #define   MSK32BITMAP32_SEL_BIT_POS18                         0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS19                      0x000C
    #define     B16BITMAP32_SEL_BIT_POS19                      0x000C
    #define   LSb32BITMAP32_SEL_BIT_POS19                         5
    #define   LSb16BITMAP32_SEL_BIT_POS19                         5
    #define       bBITMAP32_SEL_BIT_POS19                      5
    #define   MSK32BITMAP32_SEL_BIT_POS19                         0x000003E0

    #define     BA_BITMAP32_SEL_BIT_POS20                      0x000D
    #define     B16BITMAP32_SEL_BIT_POS20                      0x000C
    #define   LSb32BITMAP32_SEL_BIT_POS20                         10
    #define   LSb16BITMAP32_SEL_BIT_POS20                         10
    #define       bBITMAP32_SEL_BIT_POS20                      5
    #define   MSK32BITMAP32_SEL_BIT_POS20                         0x00007C00

    #define     BA_BITMAP32_SEL_BIT_POS21                      0x000D
    #define     B16BITMAP32_SEL_BIT_POS21                      0x000C
    #define   LSb32BITMAP32_SEL_BIT_POS21                         15
    #define   LSb16BITMAP32_SEL_BIT_POS21                         15
    #define       bBITMAP32_SEL_BIT_POS21                      5
    #define   MSK32BITMAP32_SEL_BIT_POS21                         0x000F8000

    #define     BA_BITMAP32_SEL_BIT_POS22                      0x000E
    #define     B16BITMAP32_SEL_BIT_POS22                      0x000E
    #define   LSb32BITMAP32_SEL_BIT_POS22                         20
    #define   LSb16BITMAP32_SEL_BIT_POS22                         4
    #define       bBITMAP32_SEL_BIT_POS22                      5
    #define   MSK32BITMAP32_SEL_BIT_POS22                         0x01F00000

    #define     BA_BITMAP32_SEL_BIT_POS23                      0x000F
    #define     B16BITMAP32_SEL_BIT_POS23                      0x000E
    #define   LSb32BITMAP32_SEL_BIT_POS23                         25
    #define   LSb16BITMAP32_SEL_BIT_POS23                         9
    #define       bBITMAP32_SEL_BIT_POS23                      5
    #define   MSK32BITMAP32_SEL_BIT_POS23                         0x3E000000

    #define     RA_BITMAP32_SEL4                               0x0010

    #define     BA_BITMAP32_SEL_BIT_POS24                      0x0010
    #define     B16BITMAP32_SEL_BIT_POS24                      0x0010
    #define   LSb32BITMAP32_SEL_BIT_POS24                         0
    #define   LSb16BITMAP32_SEL_BIT_POS24                         0
    #define       bBITMAP32_SEL_BIT_POS24                      5
    #define   MSK32BITMAP32_SEL_BIT_POS24                         0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS25                      0x0010
    #define     B16BITMAP32_SEL_BIT_POS25                      0x0010
    #define   LSb32BITMAP32_SEL_BIT_POS25                         5
    #define   LSb16BITMAP32_SEL_BIT_POS25                         5
    #define       bBITMAP32_SEL_BIT_POS25                      5
    #define   MSK32BITMAP32_SEL_BIT_POS25                         0x000003E0

    #define     BA_BITMAP32_SEL_BIT_POS26                      0x0011
    #define     B16BITMAP32_SEL_BIT_POS26                      0x0010
    #define   LSb32BITMAP32_SEL_BIT_POS26                         10
    #define   LSb16BITMAP32_SEL_BIT_POS26                         10
    #define       bBITMAP32_SEL_BIT_POS26                      5
    #define   MSK32BITMAP32_SEL_BIT_POS26                         0x00007C00

    #define     BA_BITMAP32_SEL_BIT_POS27                      0x0011
    #define     B16BITMAP32_SEL_BIT_POS27                      0x0010
    #define   LSb32BITMAP32_SEL_BIT_POS27                         15
    #define   LSb16BITMAP32_SEL_BIT_POS27                         15
    #define       bBITMAP32_SEL_BIT_POS27                      5
    #define   MSK32BITMAP32_SEL_BIT_POS27                         0x000F8000

    #define     BA_BITMAP32_SEL_BIT_POS28                      0x0012
    #define     B16BITMAP32_SEL_BIT_POS28                      0x0012
    #define   LSb32BITMAP32_SEL_BIT_POS28                         20
    #define   LSb16BITMAP32_SEL_BIT_POS28                         4
    #define       bBITMAP32_SEL_BIT_POS28                      5
    #define   MSK32BITMAP32_SEL_BIT_POS28                         0x01F00000

    #define     BA_BITMAP32_SEL_BIT_POS29                      0x0013
    #define     B16BITMAP32_SEL_BIT_POS29                      0x0012
    #define   LSb32BITMAP32_SEL_BIT_POS29                         25
    #define   LSb16BITMAP32_SEL_BIT_POS29                         9
    #define       bBITMAP32_SEL_BIT_POS29                      5
    #define   MSK32BITMAP32_SEL_BIT_POS29                         0x3E000000

    #define     RA_BITMAP32_SEL5                               0x0014

    #define     BA_BITMAP32_SEL_BIT_POS30                      0x0014
    #define     B16BITMAP32_SEL_BIT_POS30                      0x0014
    #define   LSb32BITMAP32_SEL_BIT_POS30                         0
    #define   LSb16BITMAP32_SEL_BIT_POS30                         0
    #define       bBITMAP32_SEL_BIT_POS30                      5
    #define   MSK32BITMAP32_SEL_BIT_POS30                         0x0000001F

    #define     BA_BITMAP32_SEL_BIT_POS31                      0x0014
    #define     B16BITMAP32_SEL_BIT_POS31                      0x0014
    #define   LSb32BITMAP32_SEL_BIT_POS31                         5
    #define   LSb16BITMAP32_SEL_BIT_POS31                         5
    #define       bBITMAP32_SEL_BIT_POS31                      5
    #define   MSK32BITMAP32_SEL_BIT_POS31                         0x000003E0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BITMAP32 {
    ///////////////////////////////////////////////////////////
    #define   GET32BITMAP32_SEL_BIT_POS0(r32)                  _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS0(r32,v)                _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS0(r16)                  _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS0(r16,v)                _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS1(r32)                  _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS1(r32,v)                _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS1(r16)                  _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS1(r16,v)                _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP32_SEL_BIT_POS2(r32)                  _BFGET_(r32,14,10)
    #define   SET32BITMAP32_SEL_BIT_POS2(r32,v)                _BFSET_(r32,14,10,v)
    #define   GET16BITMAP32_SEL_BIT_POS2(r16)                  _BFGET_(r16,14,10)
    #define   SET16BITMAP32_SEL_BIT_POS2(r16,v)                _BFSET_(r16,14,10,v)

    #define   GET32BITMAP32_SEL_BIT_POS3(r32)                  _BFGET_(r32,19,15)
    #define   SET32BITMAP32_SEL_BIT_POS3(r32,v)                _BFSET_(r32,19,15,v)

    #define   GET32BITMAP32_SEL_BIT_POS4(r32)                  _BFGET_(r32,24,20)
    #define   SET32BITMAP32_SEL_BIT_POS4(r32,v)                _BFSET_(r32,24,20,v)
    #define   GET16BITMAP32_SEL_BIT_POS4(r16)                  _BFGET_(r16, 8, 4)
    #define   SET16BITMAP32_SEL_BIT_POS4(r16,v)                _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP32_SEL_BIT_POS5(r32)                  _BFGET_(r32,29,25)
    #define   SET32BITMAP32_SEL_BIT_POS5(r32,v)                _BFSET_(r32,29,25,v)
    #define   GET16BITMAP32_SEL_BIT_POS5(r16)                  _BFGET_(r16,13, 9)
    #define   SET16BITMAP32_SEL_BIT_POS5(r16,v)                _BFSET_(r16,13, 9,v)

    #define     w32BITMAP32_SEL                                {\
            UNSG32 uSEL_BIT_POS0                               :  5;\
            UNSG32 uSEL_BIT_POS1                               :  5;\
            UNSG32 uSEL_BIT_POS2                               :  5;\
            UNSG32 uSEL_BIT_POS3                               :  5;\
            UNSG32 uSEL_BIT_POS4                               :  5;\
            UNSG32 uSEL_BIT_POS5                               :  5;\
            UNSG32 RSVDx0_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP32_SEL;
            struct w32BITMAP32_SEL;
          };
    #define   GET32BITMAP32_SEL_BIT_POS6(r32)                  _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS6(r32,v)                _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS6(r16)                  _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS6(r16,v)                _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS7(r32)                  _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS7(r32,v)                _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS7(r16)                  _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS7(r16,v)                _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP32_SEL_BIT_POS8(r32)                  _BFGET_(r32,14,10)
    #define   SET32BITMAP32_SEL_BIT_POS8(r32,v)                _BFSET_(r32,14,10,v)
    #define   GET16BITMAP32_SEL_BIT_POS8(r16)                  _BFGET_(r16,14,10)
    #define   SET16BITMAP32_SEL_BIT_POS8(r16,v)                _BFSET_(r16,14,10,v)

    #define   GET32BITMAP32_SEL_BIT_POS9(r32)                  _BFGET_(r32,19,15)
    #define   SET32BITMAP32_SEL_BIT_POS9(r32,v)                _BFSET_(r32,19,15,v)

    #define   GET32BITMAP32_SEL_BIT_POS10(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP32_SEL_BIT_POS10(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP32_SEL_BIT_POS10(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP32_SEL_BIT_POS10(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP32_SEL_BIT_POS11(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP32_SEL_BIT_POS11(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP32_SEL_BIT_POS11(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP32_SEL_BIT_POS11(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP32_SEL1                               {\
            UNSG32 uSEL_BIT_POS6                               :  5;\
            UNSG32 uSEL_BIT_POS7                               :  5;\
            UNSG32 uSEL_BIT_POS8                               :  5;\
            UNSG32 uSEL_BIT_POS9                               :  5;\
            UNSG32 uSEL_BIT_POS10                              :  5;\
            UNSG32 uSEL_BIT_POS11                              :  5;\
            UNSG32 RSVDx4_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP32_SEL1;
            struct w32BITMAP32_SEL1;
          };
    #define   GET32BITMAP32_SEL_BIT_POS12(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS12(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS12(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS12(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS13(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS13(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS13(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS13(r16,v)               _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP32_SEL_BIT_POS14(r32)                 _BFGET_(r32,14,10)
    #define   SET32BITMAP32_SEL_BIT_POS14(r32,v)               _BFSET_(r32,14,10,v)
    #define   GET16BITMAP32_SEL_BIT_POS14(r16)                 _BFGET_(r16,14,10)
    #define   SET16BITMAP32_SEL_BIT_POS14(r16,v)               _BFSET_(r16,14,10,v)

    #define   GET32BITMAP32_SEL_BIT_POS15(r32)                 _BFGET_(r32,19,15)
    #define   SET32BITMAP32_SEL_BIT_POS15(r32,v)               _BFSET_(r32,19,15,v)

    #define   GET32BITMAP32_SEL_BIT_POS16(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP32_SEL_BIT_POS16(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP32_SEL_BIT_POS16(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP32_SEL_BIT_POS16(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP32_SEL_BIT_POS17(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP32_SEL_BIT_POS17(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP32_SEL_BIT_POS17(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP32_SEL_BIT_POS17(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP32_SEL2                               {\
            UNSG32 uSEL_BIT_POS12                              :  5;\
            UNSG32 uSEL_BIT_POS13                              :  5;\
            UNSG32 uSEL_BIT_POS14                              :  5;\
            UNSG32 uSEL_BIT_POS15                              :  5;\
            UNSG32 uSEL_BIT_POS16                              :  5;\
            UNSG32 uSEL_BIT_POS17                              :  5;\
            UNSG32 RSVDx8_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP32_SEL2;
            struct w32BITMAP32_SEL2;
          };
    #define   GET32BITMAP32_SEL_BIT_POS18(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS18(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS18(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS18(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS19(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS19(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS19(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS19(r16,v)               _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP32_SEL_BIT_POS20(r32)                 _BFGET_(r32,14,10)
    #define   SET32BITMAP32_SEL_BIT_POS20(r32,v)               _BFSET_(r32,14,10,v)
    #define   GET16BITMAP32_SEL_BIT_POS20(r16)                 _BFGET_(r16,14,10)
    #define   SET16BITMAP32_SEL_BIT_POS20(r16,v)               _BFSET_(r16,14,10,v)

    #define   GET32BITMAP32_SEL_BIT_POS21(r32)                 _BFGET_(r32,19,15)
    #define   SET32BITMAP32_SEL_BIT_POS21(r32,v)               _BFSET_(r32,19,15,v)

    #define   GET32BITMAP32_SEL_BIT_POS22(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP32_SEL_BIT_POS22(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP32_SEL_BIT_POS22(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP32_SEL_BIT_POS22(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP32_SEL_BIT_POS23(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP32_SEL_BIT_POS23(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP32_SEL_BIT_POS23(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP32_SEL_BIT_POS23(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP32_SEL3                               {\
            UNSG32 uSEL_BIT_POS18                              :  5;\
            UNSG32 uSEL_BIT_POS19                              :  5;\
            UNSG32 uSEL_BIT_POS20                              :  5;\
            UNSG32 uSEL_BIT_POS21                              :  5;\
            UNSG32 uSEL_BIT_POS22                              :  5;\
            UNSG32 uSEL_BIT_POS23                              :  5;\
            UNSG32 RSVDxC_b30                                  :  2;\
          }
    union { UNSG32 u32BITMAP32_SEL3;
            struct w32BITMAP32_SEL3;
          };
    #define   GET32BITMAP32_SEL_BIT_POS24(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS24(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS24(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS24(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS25(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS25(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS25(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS25(r16,v)               _BFSET_(r16, 9, 5,v)

    #define   GET32BITMAP32_SEL_BIT_POS26(r32)                 _BFGET_(r32,14,10)
    #define   SET32BITMAP32_SEL_BIT_POS26(r32,v)               _BFSET_(r32,14,10,v)
    #define   GET16BITMAP32_SEL_BIT_POS26(r16)                 _BFGET_(r16,14,10)
    #define   SET16BITMAP32_SEL_BIT_POS26(r16,v)               _BFSET_(r16,14,10,v)

    #define   GET32BITMAP32_SEL_BIT_POS27(r32)                 _BFGET_(r32,19,15)
    #define   SET32BITMAP32_SEL_BIT_POS27(r32,v)               _BFSET_(r32,19,15,v)

    #define   GET32BITMAP32_SEL_BIT_POS28(r32)                 _BFGET_(r32,24,20)
    #define   SET32BITMAP32_SEL_BIT_POS28(r32,v)               _BFSET_(r32,24,20,v)
    #define   GET16BITMAP32_SEL_BIT_POS28(r16)                 _BFGET_(r16, 8, 4)
    #define   SET16BITMAP32_SEL_BIT_POS28(r16,v)               _BFSET_(r16, 8, 4,v)

    #define   GET32BITMAP32_SEL_BIT_POS29(r32)                 _BFGET_(r32,29,25)
    #define   SET32BITMAP32_SEL_BIT_POS29(r32,v)               _BFSET_(r32,29,25,v)
    #define   GET16BITMAP32_SEL_BIT_POS29(r16)                 _BFGET_(r16,13, 9)
    #define   SET16BITMAP32_SEL_BIT_POS29(r16,v)               _BFSET_(r16,13, 9,v)

    #define     w32BITMAP32_SEL4                               {\
            UNSG32 uSEL_BIT_POS24                              :  5;\
            UNSG32 uSEL_BIT_POS25                              :  5;\
            UNSG32 uSEL_BIT_POS26                              :  5;\
            UNSG32 uSEL_BIT_POS27                              :  5;\
            UNSG32 uSEL_BIT_POS28                              :  5;\
            UNSG32 uSEL_BIT_POS29                              :  5;\
            UNSG32 RSVDx10_b30                                 :  2;\
          }
    union { UNSG32 u32BITMAP32_SEL4;
            struct w32BITMAP32_SEL4;
          };
    #define   GET32BITMAP32_SEL_BIT_POS30(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32BITMAP32_SEL_BIT_POS30(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16BITMAP32_SEL_BIT_POS30(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16BITMAP32_SEL_BIT_POS30(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32BITMAP32_SEL_BIT_POS31(r32)                 _BFGET_(r32, 9, 5)
    #define   SET32BITMAP32_SEL_BIT_POS31(r32,v)               _BFSET_(r32, 9, 5,v)
    #define   GET16BITMAP32_SEL_BIT_POS31(r16)                 _BFGET_(r16, 9, 5)
    #define   SET16BITMAP32_SEL_BIT_POS31(r16,v)               _BFSET_(r16, 9, 5,v)

    #define     w32BITMAP32_SEL5                               {\
            UNSG32 uSEL_BIT_POS30                              :  5;\
            UNSG32 uSEL_BIT_POS31                              :  5;\
            UNSG32 RSVDx14_b10                                 : 22;\
          }
    union { UNSG32 u32BITMAP32_SEL5;
            struct w32BITMAP32_SEL5;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BITMAP32;

    typedef union  T32BITMAP32_SEL
          { UNSG32 u32;
            struct w32BITMAP32_SEL;
                 } T32BITMAP32_SEL;
    typedef union  T32BITMAP32_SEL1
          { UNSG32 u32;
            struct w32BITMAP32_SEL1;
                 } T32BITMAP32_SEL1;
    typedef union  T32BITMAP32_SEL2
          { UNSG32 u32;
            struct w32BITMAP32_SEL2;
                 } T32BITMAP32_SEL2;
    typedef union  T32BITMAP32_SEL3
          { UNSG32 u32;
            struct w32BITMAP32_SEL3;
                 } T32BITMAP32_SEL3;
    typedef union  T32BITMAP32_SEL4
          { UNSG32 u32;
            struct w32BITMAP32_SEL4;
                 } T32BITMAP32_SEL4;
    typedef union  T32BITMAP32_SEL5
          { UNSG32 u32;
            struct w32BITMAP32_SEL5;
                 } T32BITMAP32_SEL5;
    ///////////////////////////////////////////////////////////

    typedef union  TBITMAP32_SEL
          { UNSG32 u32[6];
            struct {
            struct w32BITMAP32_SEL;
            struct w32BITMAP32_SEL1;
            struct w32BITMAP32_SEL2;
            struct w32BITMAP32_SEL3;
            struct w32BITMAP32_SEL4;
            struct w32BITMAP32_SEL5;
                   };
                 } TBITMAP32_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 BITMAP32_drvrd(SIE_BITMAP32 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BITMAP32_drvwr(SIE_BITMAP32 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BITMAP32_reset(SIE_BITMAP32 *p);
     SIGN32 BITMAP32_cmp  (SIE_BITMAP32 *p, SIE_BITMAP32 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BITMAP32_check(p,pie,pfx,hLOG) BITMAP32_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BITMAP32_print(p,    pfx,hLOG) BITMAP32_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BITMAP32
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE BITMAP16                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SEL                  (P)
///               %unsigned 4  BIT_POS0                  0x0
///               %unsigned 4  BIT_POS1                  0x1
///               %unsigned 4  BIT_POS2                  0x2
///               %unsigned 4  BIT_POS3                  0x3
///               %unsigned 4  BIT_POS4                  0x4
///               %unsigned 4  BIT_POS5                  0x5
///               %unsigned 4  BIT_POS6                  0x6
///               %unsigned 4  BIT_POS7                  0x7
///     # 0x00004 SEL1                 
///               %unsigned 4  BIT_POS8                  0x8
///               %unsigned 4  BIT_POS9                  0x9
///               %unsigned 4  BIT_POS10                 0xA
///               %unsigned 4  BIT_POS11                 0xB
///               %unsigned 4  BIT_POS12                 0xC
///               %unsigned 4  BIT_POS13                 0xD
///               %unsigned 4  BIT_POS14                 0xE
///               %unsigned 4  BIT_POS15                 0xF
///                                    ###
///                                    * Specifies mapping of new bit locations within 16 bit data from Read Client which need to be used to form pixels for Inverse Scan mode.
///                                    * Normal dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in LSB
///                                    * Inverse Scan dHub data order:
///                                    * {Y3,Cr2,Y2,Cb2,Y1,Cr0,Y0,Cb0} First pixel in MSB
///                                    * Following different data orders can be generated to be presented to first UPS in the pipe.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      64b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BITMAP16
#define h_BITMAP16 (){}

    #define     RA_BITMAP16_SEL                                0x0000

    #define     BA_BITMAP16_SEL_BIT_POS0                       0x0000
    #define     B16BITMAP16_SEL_BIT_POS0                       0x0000
    #define   LSb32BITMAP16_SEL_BIT_POS0                          0
    #define   LSb16BITMAP16_SEL_BIT_POS0                          0
    #define       bBITMAP16_SEL_BIT_POS0                       4
    #define   MSK32BITMAP16_SEL_BIT_POS0                          0x0000000F

    #define     BA_BITMAP16_SEL_BIT_POS1                       0x0000
    #define     B16BITMAP16_SEL_BIT_POS1                       0x0000
    #define   LSb32BITMAP16_SEL_BIT_POS1                          4
    #define   LSb16BITMAP16_SEL_BIT_POS1                          4
    #define       bBITMAP16_SEL_BIT_POS1                       4
    #define   MSK32BITMAP16_SEL_BIT_POS1                          0x000000F0

    #define     BA_BITMAP16_SEL_BIT_POS2                       0x0001
    #define     B16BITMAP16_SEL_BIT_POS2                       0x0000
    #define   LSb32BITMAP16_SEL_BIT_POS2                          8
    #define   LSb16BITMAP16_SEL_BIT_POS2                          8
    #define       bBITMAP16_SEL_BIT_POS2                       4
    #define   MSK32BITMAP16_SEL_BIT_POS2                          0x00000F00

    #define     BA_BITMAP16_SEL_BIT_POS3                       0x0001
    #define     B16BITMAP16_SEL_BIT_POS3                       0x0000
    #define   LSb32BITMAP16_SEL_BIT_POS3                          12
    #define   LSb16BITMAP16_SEL_BIT_POS3                          12
    #define       bBITMAP16_SEL_BIT_POS3                       4
    #define   MSK32BITMAP16_SEL_BIT_POS3                          0x0000F000

    #define     BA_BITMAP16_SEL_BIT_POS4                       0x0002
    #define     B16BITMAP16_SEL_BIT_POS4                       0x0002
    #define   LSb32BITMAP16_SEL_BIT_POS4                          16
    #define   LSb16BITMAP16_SEL_BIT_POS4                          0
    #define       bBITMAP16_SEL_BIT_POS4                       4
    #define   MSK32BITMAP16_SEL_BIT_POS4                          0x000F0000

    #define     BA_BITMAP16_SEL_BIT_POS5                       0x0002
    #define     B16BITMAP16_SEL_BIT_POS5                       0x0002
    #define   LSb32BITMAP16_SEL_BIT_POS5                          20
    #define   LSb16BITMAP16_SEL_BIT_POS5                          4
    #define       bBITMAP16_SEL_BIT_POS5                       4
    #define   MSK32BITMAP16_SEL_BIT_POS5                          0x00F00000

    #define     BA_BITMAP16_SEL_BIT_POS6                       0x0003
    #define     B16BITMAP16_SEL_BIT_POS6                       0x0002
    #define   LSb32BITMAP16_SEL_BIT_POS6                          24
    #define   LSb16BITMAP16_SEL_BIT_POS6                          8
    #define       bBITMAP16_SEL_BIT_POS6                       4
    #define   MSK32BITMAP16_SEL_BIT_POS6                          0x0F000000

    #define     BA_BITMAP16_SEL_BIT_POS7                       0x0003
    #define     B16BITMAP16_SEL_BIT_POS7                       0x0002
    #define   LSb32BITMAP16_SEL_BIT_POS7                          28
    #define   LSb16BITMAP16_SEL_BIT_POS7                          12
    #define       bBITMAP16_SEL_BIT_POS7                       4
    #define   MSK32BITMAP16_SEL_BIT_POS7                          0xF0000000

    #define     RA_BITMAP16_SEL1                               0x0004

    #define     BA_BITMAP16_SEL_BIT_POS8                       0x0004
    #define     B16BITMAP16_SEL_BIT_POS8                       0x0004
    #define   LSb32BITMAP16_SEL_BIT_POS8                          0
    #define   LSb16BITMAP16_SEL_BIT_POS8                          0
    #define       bBITMAP16_SEL_BIT_POS8                       4
    #define   MSK32BITMAP16_SEL_BIT_POS8                          0x0000000F

    #define     BA_BITMAP16_SEL_BIT_POS9                       0x0004
    #define     B16BITMAP16_SEL_BIT_POS9                       0x0004
    #define   LSb32BITMAP16_SEL_BIT_POS9                          4
    #define   LSb16BITMAP16_SEL_BIT_POS9                          4
    #define       bBITMAP16_SEL_BIT_POS9                       4
    #define   MSK32BITMAP16_SEL_BIT_POS9                          0x000000F0

    #define     BA_BITMAP16_SEL_BIT_POS10                      0x0005
    #define     B16BITMAP16_SEL_BIT_POS10                      0x0004
    #define   LSb32BITMAP16_SEL_BIT_POS10                         8
    #define   LSb16BITMAP16_SEL_BIT_POS10                         8
    #define       bBITMAP16_SEL_BIT_POS10                      4
    #define   MSK32BITMAP16_SEL_BIT_POS10                         0x00000F00

    #define     BA_BITMAP16_SEL_BIT_POS11                      0x0005
    #define     B16BITMAP16_SEL_BIT_POS11                      0x0004
    #define   LSb32BITMAP16_SEL_BIT_POS11                         12
    #define   LSb16BITMAP16_SEL_BIT_POS11                         12
    #define       bBITMAP16_SEL_BIT_POS11                      4
    #define   MSK32BITMAP16_SEL_BIT_POS11                         0x0000F000

    #define     BA_BITMAP16_SEL_BIT_POS12                      0x0006
    #define     B16BITMAP16_SEL_BIT_POS12                      0x0006
    #define   LSb32BITMAP16_SEL_BIT_POS12                         16
    #define   LSb16BITMAP16_SEL_BIT_POS12                         0
    #define       bBITMAP16_SEL_BIT_POS12                      4
    #define   MSK32BITMAP16_SEL_BIT_POS12                         0x000F0000

    #define     BA_BITMAP16_SEL_BIT_POS13                      0x0006
    #define     B16BITMAP16_SEL_BIT_POS13                      0x0006
    #define   LSb32BITMAP16_SEL_BIT_POS13                         20
    #define   LSb16BITMAP16_SEL_BIT_POS13                         4
    #define       bBITMAP16_SEL_BIT_POS13                      4
    #define   MSK32BITMAP16_SEL_BIT_POS13                         0x00F00000

    #define     BA_BITMAP16_SEL_BIT_POS14                      0x0007
    #define     B16BITMAP16_SEL_BIT_POS14                      0x0006
    #define   LSb32BITMAP16_SEL_BIT_POS14                         24
    #define   LSb16BITMAP16_SEL_BIT_POS14                         8
    #define       bBITMAP16_SEL_BIT_POS14                      4
    #define   MSK32BITMAP16_SEL_BIT_POS14                         0x0F000000

    #define     BA_BITMAP16_SEL_BIT_POS15                      0x0007
    #define     B16BITMAP16_SEL_BIT_POS15                      0x0006
    #define   LSb32BITMAP16_SEL_BIT_POS15                         28
    #define   LSb16BITMAP16_SEL_BIT_POS15                         12
    #define       bBITMAP16_SEL_BIT_POS15                      4
    #define   MSK32BITMAP16_SEL_BIT_POS15                         0xF0000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BITMAP16 {
    ///////////////////////////////////////////////////////////
    #define   GET32BITMAP16_SEL_BIT_POS0(r32)                  _BFGET_(r32, 3, 0)
    #define   SET32BITMAP16_SEL_BIT_POS0(r32,v)                _BFSET_(r32, 3, 0,v)
    #define   GET16BITMAP16_SEL_BIT_POS0(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP16_SEL_BIT_POS0(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP16_SEL_BIT_POS1(r32)                  _BFGET_(r32, 7, 4)
    #define   SET32BITMAP16_SEL_BIT_POS1(r32,v)                _BFSET_(r32, 7, 4,v)
    #define   GET16BITMAP16_SEL_BIT_POS1(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP16_SEL_BIT_POS1(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP16_SEL_BIT_POS2(r32)                  _BFGET_(r32,11, 8)
    #define   SET32BITMAP16_SEL_BIT_POS2(r32,v)                _BFSET_(r32,11, 8,v)
    #define   GET16BITMAP16_SEL_BIT_POS2(r16)                  _BFGET_(r16,11, 8)
    #define   SET16BITMAP16_SEL_BIT_POS2(r16,v)                _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP16_SEL_BIT_POS3(r32)                  _BFGET_(r32,15,12)
    #define   SET32BITMAP16_SEL_BIT_POS3(r32,v)                _BFSET_(r32,15,12,v)
    #define   GET16BITMAP16_SEL_BIT_POS3(r16)                  _BFGET_(r16,15,12)
    #define   SET16BITMAP16_SEL_BIT_POS3(r16,v)                _BFSET_(r16,15,12,v)

    #define   GET32BITMAP16_SEL_BIT_POS4(r32)                  _BFGET_(r32,19,16)
    #define   SET32BITMAP16_SEL_BIT_POS4(r32,v)                _BFSET_(r32,19,16,v)
    #define   GET16BITMAP16_SEL_BIT_POS4(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP16_SEL_BIT_POS4(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP16_SEL_BIT_POS5(r32)                  _BFGET_(r32,23,20)
    #define   SET32BITMAP16_SEL_BIT_POS5(r32,v)                _BFSET_(r32,23,20,v)
    #define   GET16BITMAP16_SEL_BIT_POS5(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP16_SEL_BIT_POS5(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP16_SEL_BIT_POS6(r32)                  _BFGET_(r32,27,24)
    #define   SET32BITMAP16_SEL_BIT_POS6(r32,v)                _BFSET_(r32,27,24,v)
    #define   GET16BITMAP16_SEL_BIT_POS6(r16)                  _BFGET_(r16,11, 8)
    #define   SET16BITMAP16_SEL_BIT_POS6(r16,v)                _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP16_SEL_BIT_POS7(r32)                  _BFGET_(r32,31,28)
    #define   SET32BITMAP16_SEL_BIT_POS7(r32,v)                _BFSET_(r32,31,28,v)
    #define   GET16BITMAP16_SEL_BIT_POS7(r16)                  _BFGET_(r16,15,12)
    #define   SET16BITMAP16_SEL_BIT_POS7(r16,v)                _BFSET_(r16,15,12,v)

    #define     w32BITMAP16_SEL                                {\
            UNSG32 uSEL_BIT_POS0                               :  4;\
            UNSG32 uSEL_BIT_POS1                               :  4;\
            UNSG32 uSEL_BIT_POS2                               :  4;\
            UNSG32 uSEL_BIT_POS3                               :  4;\
            UNSG32 uSEL_BIT_POS4                               :  4;\
            UNSG32 uSEL_BIT_POS5                               :  4;\
            UNSG32 uSEL_BIT_POS6                               :  4;\
            UNSG32 uSEL_BIT_POS7                               :  4;\
          }
    union { UNSG32 u32BITMAP16_SEL;
            struct w32BITMAP16_SEL;
          };
    #define   GET32BITMAP16_SEL_BIT_POS8(r32)                  _BFGET_(r32, 3, 0)
    #define   SET32BITMAP16_SEL_BIT_POS8(r32,v)                _BFSET_(r32, 3, 0,v)
    #define   GET16BITMAP16_SEL_BIT_POS8(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP16_SEL_BIT_POS8(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP16_SEL_BIT_POS9(r32)                  _BFGET_(r32, 7, 4)
    #define   SET32BITMAP16_SEL_BIT_POS9(r32,v)                _BFSET_(r32, 7, 4,v)
    #define   GET16BITMAP16_SEL_BIT_POS9(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP16_SEL_BIT_POS9(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP16_SEL_BIT_POS10(r32)                 _BFGET_(r32,11, 8)
    #define   SET32BITMAP16_SEL_BIT_POS10(r32,v)               _BFSET_(r32,11, 8,v)
    #define   GET16BITMAP16_SEL_BIT_POS10(r16)                 _BFGET_(r16,11, 8)
    #define   SET16BITMAP16_SEL_BIT_POS10(r16,v)               _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP16_SEL_BIT_POS11(r32)                 _BFGET_(r32,15,12)
    #define   SET32BITMAP16_SEL_BIT_POS11(r32,v)               _BFSET_(r32,15,12,v)
    #define   GET16BITMAP16_SEL_BIT_POS11(r16)                 _BFGET_(r16,15,12)
    #define   SET16BITMAP16_SEL_BIT_POS11(r16,v)               _BFSET_(r16,15,12,v)

    #define   GET32BITMAP16_SEL_BIT_POS12(r32)                 _BFGET_(r32,19,16)
    #define   SET32BITMAP16_SEL_BIT_POS12(r32,v)               _BFSET_(r32,19,16,v)
    #define   GET16BITMAP16_SEL_BIT_POS12(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16BITMAP16_SEL_BIT_POS12(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP16_SEL_BIT_POS13(r32)                 _BFGET_(r32,23,20)
    #define   SET32BITMAP16_SEL_BIT_POS13(r32,v)               _BFSET_(r32,23,20,v)
    #define   GET16BITMAP16_SEL_BIT_POS13(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16BITMAP16_SEL_BIT_POS13(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP16_SEL_BIT_POS14(r32)                 _BFGET_(r32,27,24)
    #define   SET32BITMAP16_SEL_BIT_POS14(r32,v)               _BFSET_(r32,27,24,v)
    #define   GET16BITMAP16_SEL_BIT_POS14(r16)                 _BFGET_(r16,11, 8)
    #define   SET16BITMAP16_SEL_BIT_POS14(r16,v)               _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP16_SEL_BIT_POS15(r32)                 _BFGET_(r32,31,28)
    #define   SET32BITMAP16_SEL_BIT_POS15(r32,v)               _BFSET_(r32,31,28,v)
    #define   GET16BITMAP16_SEL_BIT_POS15(r16)                 _BFGET_(r16,15,12)
    #define   SET16BITMAP16_SEL_BIT_POS15(r16,v)               _BFSET_(r16,15,12,v)

    #define     w32BITMAP16_SEL1                               {\
            UNSG32 uSEL_BIT_POS8                               :  4;\
            UNSG32 uSEL_BIT_POS9                               :  4;\
            UNSG32 uSEL_BIT_POS10                              :  4;\
            UNSG32 uSEL_BIT_POS11                              :  4;\
            UNSG32 uSEL_BIT_POS12                              :  4;\
            UNSG32 uSEL_BIT_POS13                              :  4;\
            UNSG32 uSEL_BIT_POS14                              :  4;\
            UNSG32 uSEL_BIT_POS15                              :  4;\
          }
    union { UNSG32 u32BITMAP16_SEL1;
            struct w32BITMAP16_SEL1;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BITMAP16;

    typedef union  T32BITMAP16_SEL
          { UNSG32 u32;
            struct w32BITMAP16_SEL;
                 } T32BITMAP16_SEL;
    typedef union  T32BITMAP16_SEL1
          { UNSG32 u32;
            struct w32BITMAP16_SEL1;
                 } T32BITMAP16_SEL1;
    ///////////////////////////////////////////////////////////

    typedef union  TBITMAP16_SEL
          { UNSG32 u32[2];
            struct {
            struct w32BITMAP16_SEL;
            struct w32BITMAP16_SEL1;
                   };
                 } TBITMAP16_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 BITMAP16_drvrd(SIE_BITMAP16 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BITMAP16_drvwr(SIE_BITMAP16 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BITMAP16_reset(SIE_BITMAP16 *p);
     SIGN32 BITMAP16_cmp  (SIE_BITMAP16 *p, SIE_BITMAP16 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BITMAP16_check(p,pie,pfx,hLOG) BITMAP16_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BITMAP16_print(p,    pfx,hLOG) BITMAP16_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BITMAP16
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE BITMAP12                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SEL                  (P)
///               %unsigned 4  BIT_POS0                  0x0
///               %unsigned 4  BIT_POS1                  0x1
///               %unsigned 4  BIT_POS2                  0x2
///               %unsigned 4  BIT_POS3                  0x3
///               %unsigned 4  BIT_POS4                  0x4
///               %unsigned 4  BIT_POS5                  0x5
///               %unsigned 4  BIT_POS6                  0x6
///               %unsigned 4  BIT_POS7                  0x7
///     # 0x00004 SEL1                 
///               %unsigned 4  BIT_POS8                  0x8
///               %unsigned 4  BIT_POS9                  0x9
///               %unsigned 4  BIT_POS10                 0xA
///               %unsigned 4  BIT_POS11                 0xB
///                                    ###
///                                    * Specifies mapping of new bit locations within 12 bit data from Read Client which need to be used to form pixels for Inverse Scan mode.
///                                    ###
///               %%        16         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       8B, bits:      48b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BITMAP12
#define h_BITMAP12 (){}

    #define     RA_BITMAP12_SEL                                0x0000

    #define     BA_BITMAP12_SEL_BIT_POS0                       0x0000
    #define     B16BITMAP12_SEL_BIT_POS0                       0x0000
    #define   LSb32BITMAP12_SEL_BIT_POS0                          0
    #define   LSb16BITMAP12_SEL_BIT_POS0                          0
    #define       bBITMAP12_SEL_BIT_POS0                       4
    #define   MSK32BITMAP12_SEL_BIT_POS0                          0x0000000F

    #define     BA_BITMAP12_SEL_BIT_POS1                       0x0000
    #define     B16BITMAP12_SEL_BIT_POS1                       0x0000
    #define   LSb32BITMAP12_SEL_BIT_POS1                          4
    #define   LSb16BITMAP12_SEL_BIT_POS1                          4
    #define       bBITMAP12_SEL_BIT_POS1                       4
    #define   MSK32BITMAP12_SEL_BIT_POS1                          0x000000F0

    #define     BA_BITMAP12_SEL_BIT_POS2                       0x0001
    #define     B16BITMAP12_SEL_BIT_POS2                       0x0000
    #define   LSb32BITMAP12_SEL_BIT_POS2                          8
    #define   LSb16BITMAP12_SEL_BIT_POS2                          8
    #define       bBITMAP12_SEL_BIT_POS2                       4
    #define   MSK32BITMAP12_SEL_BIT_POS2                          0x00000F00

    #define     BA_BITMAP12_SEL_BIT_POS3                       0x0001
    #define     B16BITMAP12_SEL_BIT_POS3                       0x0000
    #define   LSb32BITMAP12_SEL_BIT_POS3                          12
    #define   LSb16BITMAP12_SEL_BIT_POS3                          12
    #define       bBITMAP12_SEL_BIT_POS3                       4
    #define   MSK32BITMAP12_SEL_BIT_POS3                          0x0000F000

    #define     BA_BITMAP12_SEL_BIT_POS4                       0x0002
    #define     B16BITMAP12_SEL_BIT_POS4                       0x0002
    #define   LSb32BITMAP12_SEL_BIT_POS4                          16
    #define   LSb16BITMAP12_SEL_BIT_POS4                          0
    #define       bBITMAP12_SEL_BIT_POS4                       4
    #define   MSK32BITMAP12_SEL_BIT_POS4                          0x000F0000

    #define     BA_BITMAP12_SEL_BIT_POS5                       0x0002
    #define     B16BITMAP12_SEL_BIT_POS5                       0x0002
    #define   LSb32BITMAP12_SEL_BIT_POS5                          20
    #define   LSb16BITMAP12_SEL_BIT_POS5                          4
    #define       bBITMAP12_SEL_BIT_POS5                       4
    #define   MSK32BITMAP12_SEL_BIT_POS5                          0x00F00000

    #define     BA_BITMAP12_SEL_BIT_POS6                       0x0003
    #define     B16BITMAP12_SEL_BIT_POS6                       0x0002
    #define   LSb32BITMAP12_SEL_BIT_POS6                          24
    #define   LSb16BITMAP12_SEL_BIT_POS6                          8
    #define       bBITMAP12_SEL_BIT_POS6                       4
    #define   MSK32BITMAP12_SEL_BIT_POS6                          0x0F000000

    #define     BA_BITMAP12_SEL_BIT_POS7                       0x0003
    #define     B16BITMAP12_SEL_BIT_POS7                       0x0002
    #define   LSb32BITMAP12_SEL_BIT_POS7                          28
    #define   LSb16BITMAP12_SEL_BIT_POS7                          12
    #define       bBITMAP12_SEL_BIT_POS7                       4
    #define   MSK32BITMAP12_SEL_BIT_POS7                          0xF0000000

    #define     RA_BITMAP12_SEL1                               0x0004

    #define     BA_BITMAP12_SEL_BIT_POS8                       0x0004
    #define     B16BITMAP12_SEL_BIT_POS8                       0x0004
    #define   LSb32BITMAP12_SEL_BIT_POS8                          0
    #define   LSb16BITMAP12_SEL_BIT_POS8                          0
    #define       bBITMAP12_SEL_BIT_POS8                       4
    #define   MSK32BITMAP12_SEL_BIT_POS8                          0x0000000F

    #define     BA_BITMAP12_SEL_BIT_POS9                       0x0004
    #define     B16BITMAP12_SEL_BIT_POS9                       0x0004
    #define   LSb32BITMAP12_SEL_BIT_POS9                          4
    #define   LSb16BITMAP12_SEL_BIT_POS9                          4
    #define       bBITMAP12_SEL_BIT_POS9                       4
    #define   MSK32BITMAP12_SEL_BIT_POS9                          0x000000F0

    #define     BA_BITMAP12_SEL_BIT_POS10                      0x0005
    #define     B16BITMAP12_SEL_BIT_POS10                      0x0004
    #define   LSb32BITMAP12_SEL_BIT_POS10                         8
    #define   LSb16BITMAP12_SEL_BIT_POS10                         8
    #define       bBITMAP12_SEL_BIT_POS10                      4
    #define   MSK32BITMAP12_SEL_BIT_POS10                         0x00000F00

    #define     BA_BITMAP12_SEL_BIT_POS11                      0x0005
    #define     B16BITMAP12_SEL_BIT_POS11                      0x0004
    #define   LSb32BITMAP12_SEL_BIT_POS11                         12
    #define   LSb16BITMAP12_SEL_BIT_POS11                         12
    #define       bBITMAP12_SEL_BIT_POS11                      4
    #define   MSK32BITMAP12_SEL_BIT_POS11                         0x0000F000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BITMAP12 {
    ///////////////////////////////////////////////////////////
    #define   GET32BITMAP12_SEL_BIT_POS0(r32)                  _BFGET_(r32, 3, 0)
    #define   SET32BITMAP12_SEL_BIT_POS0(r32,v)                _BFSET_(r32, 3, 0,v)
    #define   GET16BITMAP12_SEL_BIT_POS0(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP12_SEL_BIT_POS0(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP12_SEL_BIT_POS1(r32)                  _BFGET_(r32, 7, 4)
    #define   SET32BITMAP12_SEL_BIT_POS1(r32,v)                _BFSET_(r32, 7, 4,v)
    #define   GET16BITMAP12_SEL_BIT_POS1(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP12_SEL_BIT_POS1(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP12_SEL_BIT_POS2(r32)                  _BFGET_(r32,11, 8)
    #define   SET32BITMAP12_SEL_BIT_POS2(r32,v)                _BFSET_(r32,11, 8,v)
    #define   GET16BITMAP12_SEL_BIT_POS2(r16)                  _BFGET_(r16,11, 8)
    #define   SET16BITMAP12_SEL_BIT_POS2(r16,v)                _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP12_SEL_BIT_POS3(r32)                  _BFGET_(r32,15,12)
    #define   SET32BITMAP12_SEL_BIT_POS3(r32,v)                _BFSET_(r32,15,12,v)
    #define   GET16BITMAP12_SEL_BIT_POS3(r16)                  _BFGET_(r16,15,12)
    #define   SET16BITMAP12_SEL_BIT_POS3(r16,v)                _BFSET_(r16,15,12,v)

    #define   GET32BITMAP12_SEL_BIT_POS4(r32)                  _BFGET_(r32,19,16)
    #define   SET32BITMAP12_SEL_BIT_POS4(r32,v)                _BFSET_(r32,19,16,v)
    #define   GET16BITMAP12_SEL_BIT_POS4(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP12_SEL_BIT_POS4(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP12_SEL_BIT_POS5(r32)                  _BFGET_(r32,23,20)
    #define   SET32BITMAP12_SEL_BIT_POS5(r32,v)                _BFSET_(r32,23,20,v)
    #define   GET16BITMAP12_SEL_BIT_POS5(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP12_SEL_BIT_POS5(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP12_SEL_BIT_POS6(r32)                  _BFGET_(r32,27,24)
    #define   SET32BITMAP12_SEL_BIT_POS6(r32,v)                _BFSET_(r32,27,24,v)
    #define   GET16BITMAP12_SEL_BIT_POS6(r16)                  _BFGET_(r16,11, 8)
    #define   SET16BITMAP12_SEL_BIT_POS6(r16,v)                _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP12_SEL_BIT_POS7(r32)                  _BFGET_(r32,31,28)
    #define   SET32BITMAP12_SEL_BIT_POS7(r32,v)                _BFSET_(r32,31,28,v)
    #define   GET16BITMAP12_SEL_BIT_POS7(r16)                  _BFGET_(r16,15,12)
    #define   SET16BITMAP12_SEL_BIT_POS7(r16,v)                _BFSET_(r16,15,12,v)

    #define     w32BITMAP12_SEL                                {\
            UNSG32 uSEL_BIT_POS0                               :  4;\
            UNSG32 uSEL_BIT_POS1                               :  4;\
            UNSG32 uSEL_BIT_POS2                               :  4;\
            UNSG32 uSEL_BIT_POS3                               :  4;\
            UNSG32 uSEL_BIT_POS4                               :  4;\
            UNSG32 uSEL_BIT_POS5                               :  4;\
            UNSG32 uSEL_BIT_POS6                               :  4;\
            UNSG32 uSEL_BIT_POS7                               :  4;\
          }
    union { UNSG32 u32BITMAP12_SEL;
            struct w32BITMAP12_SEL;
          };
    #define   GET32BITMAP12_SEL_BIT_POS8(r32)                  _BFGET_(r32, 3, 0)
    #define   SET32BITMAP12_SEL_BIT_POS8(r32,v)                _BFSET_(r32, 3, 0,v)
    #define   GET16BITMAP12_SEL_BIT_POS8(r16)                  _BFGET_(r16, 3, 0)
    #define   SET16BITMAP12_SEL_BIT_POS8(r16,v)                _BFSET_(r16, 3, 0,v)

    #define   GET32BITMAP12_SEL_BIT_POS9(r32)                  _BFGET_(r32, 7, 4)
    #define   SET32BITMAP12_SEL_BIT_POS9(r32,v)                _BFSET_(r32, 7, 4,v)
    #define   GET16BITMAP12_SEL_BIT_POS9(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16BITMAP12_SEL_BIT_POS9(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32BITMAP12_SEL_BIT_POS10(r32)                 _BFGET_(r32,11, 8)
    #define   SET32BITMAP12_SEL_BIT_POS10(r32,v)               _BFSET_(r32,11, 8,v)
    #define   GET16BITMAP12_SEL_BIT_POS10(r16)                 _BFGET_(r16,11, 8)
    #define   SET16BITMAP12_SEL_BIT_POS10(r16,v)               _BFSET_(r16,11, 8,v)

    #define   GET32BITMAP12_SEL_BIT_POS11(r32)                 _BFGET_(r32,15,12)
    #define   SET32BITMAP12_SEL_BIT_POS11(r32,v)               _BFSET_(r32,15,12,v)
    #define   GET16BITMAP12_SEL_BIT_POS11(r16)                 _BFGET_(r16,15,12)
    #define   SET16BITMAP12_SEL_BIT_POS11(r16,v)               _BFSET_(r16,15,12,v)

    #define     w32BITMAP12_SEL1                               {\
            UNSG32 uSEL_BIT_POS8                               :  4;\
            UNSG32 uSEL_BIT_POS9                               :  4;\
            UNSG32 uSEL_BIT_POS10                              :  4;\
            UNSG32 uSEL_BIT_POS11                              :  4;\
            UNSG32 RSVDx4_b16                                  : 16;\
          }
    union { UNSG32 u32BITMAP12_SEL1;
            struct w32BITMAP12_SEL1;
          };
    ///////////////////////////////////////////////////////////
    } SIE_BITMAP12;

    typedef union  T32BITMAP12_SEL
          { UNSG32 u32;
            struct w32BITMAP12_SEL;
                 } T32BITMAP12_SEL;
    typedef union  T32BITMAP12_SEL1
          { UNSG32 u32;
            struct w32BITMAP12_SEL1;
                 } T32BITMAP12_SEL1;
    ///////////////////////////////////////////////////////////

    typedef union  TBITMAP12_SEL
          { UNSG32 u32[2];
            struct {
            struct w32BITMAP12_SEL;
            struct w32BITMAP12_SEL1;
                   };
                 } TBITMAP12_SEL;

    ///////////////////////////////////////////////////////////
     SIGN32 BITMAP12_drvrd(SIE_BITMAP12 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BITMAP12_drvwr(SIE_BITMAP12 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BITMAP12_reset(SIE_BITMAP12 *p);
     SIGN32 BITMAP12_cmp  (SIE_BITMAP12 *p, SIE_BITMAP12 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BITMAP12_check(p,pie,pfx,hLOG) BITMAP12_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BITMAP12_print(p,    pfx,hLOG) BITMAP12_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BITMAP12
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ReadClient              biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 Rd                   (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * Start bit for the respective clients.
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  clear                     0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear the asynchronous FIFO between the respective client and dHub.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 Word                 (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for read Client. Should be programmed as:
///                                    * ceil( ohres*ovres*16 / 128 )
///                                    * Note : In case of resolution which is not integer multiple of 128, word total should be programmed as follows :
///                                    * For eg if ohres = 116, then (ohres*24/128) = 21.75. Then word total should be (22*ovres)
///                                    ###
///     @ 0x00008 NonStdRes            (P)
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * Enable for Read Client when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot                0x64
///                                    ###
///                                    * Total number of pixels in a line (for Read Client)
///                                    ###
///               %unsigned 4  flushCnt                  0x5
///                                    ###
///                                    * Counter to determine the ready status of Read Client after end of line (only used when NonStdRes_enable = 1)
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x0000C pack                 (P)
///               %unsigned 4  Sel                       0x0
///                                    ###
///                                    * PackSel values for following Read Client's
///                                    * [A] DEINT Read Client0
///                                    * [0000] : 20 bit unpacking
///                                    * [0001] : 8 bit unpacking
///                                    * [0010] : 10 bit unpacking
///                                    * [0011] : 10 bit unpacking [for V4H6 format]
///                                    * [remaining] : unused/invalid
///                                    * [B] DEINT Read Client1
///                                    * [0000] : 20 bit unpacking
///                                    * [0001] : 8 bit unpacking
///                                    * [0010] : 10 bit unpacking
///                                    * [0011] : 10 bit unpacking [for V4H6 format]
///                                    * [remaining] : unused/invalid
///                                    * [C] PIP/GFX0 Read Client 1 (for Croma channel)
///                                    * [0000] : 8 bit unpacking
///                                    * [0001] : 10 bit unpacking
///                                    * [0010] : 10 bit unpacking [for V4H6 format]
///                                    * [remaining] : unused/invalid
///                                    * Note : based on above (A, B or C) program packSel accordingly
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      56b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ReadClient
#define h_ReadClient (){}

    #define     RA_ReadClient_Rd                               0x0000

    #define     BA_ReadClient_Rd_start                         0x0000
    #define     B16ReadClient_Rd_start                         0x0000
    #define   LSb32ReadClient_Rd_start                            0
    #define   LSb16ReadClient_Rd_start                            0
    #define       bReadClient_Rd_start                         1
    #define   MSK32ReadClient_Rd_start                            0x00000001

    #define     BA_ReadClient_Rd_clear                         0x0000
    #define     B16ReadClient_Rd_clear                         0x0000
    #define   LSb32ReadClient_Rd_clear                            1
    #define   LSb16ReadClient_Rd_clear                            1
    #define       bReadClient_Rd_clear                         1
    #define   MSK32ReadClient_Rd_clear                            0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_ReadClient_Word                             0x0004

    #define     BA_ReadClient_Word_tot                         0x0004
    #define     B16ReadClient_Word_tot                         0x0004
    #define   LSb32ReadClient_Word_tot                            0
    #define   LSb16ReadClient_Word_tot                            0
    #define       bReadClient_Word_tot                         32
    #define   MSK32ReadClient_Word_tot                            0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_ReadClient_NonStdRes                        0x0008

    #define     BA_ReadClient_NonStdRes_enable                 0x0008
    #define     B16ReadClient_NonStdRes_enable                 0x0008
    #define   LSb32ReadClient_NonStdRes_enable                    0
    #define   LSb16ReadClient_NonStdRes_enable                    0
    #define       bReadClient_NonStdRes_enable                 1
    #define   MSK32ReadClient_NonStdRes_enable                    0x00000001

    #define     BA_ReadClient_NonStdRes_pixlineTot             0x0008
    #define     B16ReadClient_NonStdRes_pixlineTot             0x0008
    #define   LSb32ReadClient_NonStdRes_pixlineTot                1
    #define   LSb16ReadClient_NonStdRes_pixlineTot                1
    #define       bReadClient_NonStdRes_pixlineTot             13
    #define   MSK32ReadClient_NonStdRes_pixlineTot                0x00003FFE

    #define     BA_ReadClient_NonStdRes_flushCnt               0x0009
    #define     B16ReadClient_NonStdRes_flushCnt               0x0008
    #define   LSb32ReadClient_NonStdRes_flushCnt                  14
    #define   LSb16ReadClient_NonStdRes_flushCnt                  14
    #define       bReadClient_NonStdRes_flushCnt               4
    #define   MSK32ReadClient_NonStdRes_flushCnt                  0x0003C000
    ///////////////////////////////////////////////////////////
    #define     RA_ReadClient_pack                             0x000C

    #define     BA_ReadClient_pack_Sel                         0x000C
    #define     B16ReadClient_pack_Sel                         0x000C
    #define   LSb32ReadClient_pack_Sel                            0
    #define   LSb16ReadClient_pack_Sel                            0
    #define       bReadClient_pack_Sel                         4
    #define   MSK32ReadClient_pack_Sel                            0x0000000F
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ReadClient {
    ///////////////////////////////////////////////////////////
    #define   GET32ReadClient_Rd_start(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32ReadClient_Rd_start(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16ReadClient_Rd_start(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16ReadClient_Rd_start(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32ReadClient_Rd_clear(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32ReadClient_Rd_clear(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16ReadClient_Rd_clear(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16ReadClient_Rd_clear(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define     w32ReadClient_Rd                               {\
            UNSG32 uRd_start                                   :  1;\
            UNSG32 uRd_clear                                   :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32ReadClient_Rd;
            struct w32ReadClient_Rd;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ReadClient_Word_tot(r32)                    _BFGET_(r32,31, 0)
    #define   SET32ReadClient_Word_tot(r32,v)                  _BFSET_(r32,31, 0,v)

    #define     w32ReadClient_Word                             {\
            UNSG32 uWord_tot                                   : 32;\
          }
    union { UNSG32 u32ReadClient_Word;
            struct w32ReadClient_Word;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ReadClient_NonStdRes_enable(r32)            _BFGET_(r32, 0, 0)
    #define   SET32ReadClient_NonStdRes_enable(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16ReadClient_NonStdRes_enable(r16)            _BFGET_(r16, 0, 0)
    #define   SET16ReadClient_NonStdRes_enable(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32ReadClient_NonStdRes_pixlineTot(r32)        _BFGET_(r32,13, 1)
    #define   SET32ReadClient_NonStdRes_pixlineTot(r32,v)      _BFSET_(r32,13, 1,v)
    #define   GET16ReadClient_NonStdRes_pixlineTot(r16)        _BFGET_(r16,13, 1)
    #define   SET16ReadClient_NonStdRes_pixlineTot(r16,v)      _BFSET_(r16,13, 1,v)

    #define   GET32ReadClient_NonStdRes_flushCnt(r32)          _BFGET_(r32,17,14)
    #define   SET32ReadClient_NonStdRes_flushCnt(r32,v)        _BFSET_(r32,17,14,v)

    #define     w32ReadClient_NonStdRes                        {\
            UNSG32 uNonStdRes_enable                           :  1;\
            UNSG32 uNonStdRes_pixlineTot                       : 13;\
            UNSG32 uNonStdRes_flushCnt                         :  4;\
            UNSG32 RSVDx8_b18                                  : 14;\
          }
    union { UNSG32 u32ReadClient_NonStdRes;
            struct w32ReadClient_NonStdRes;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ReadClient_pack_Sel(r32)                    _BFGET_(r32, 3, 0)
    #define   SET32ReadClient_pack_Sel(r32,v)                  _BFSET_(r32, 3, 0,v)
    #define   GET16ReadClient_pack_Sel(r16)                    _BFGET_(r16, 3, 0)
    #define   SET16ReadClient_pack_Sel(r16,v)                  _BFSET_(r16, 3, 0,v)

    #define     w32ReadClient_pack                             {\
            UNSG32 upack_Sel                                   :  4;\
            UNSG32 RSVDxC_b4                                   : 28;\
          }
    union { UNSG32 u32ReadClient_pack;
            struct w32ReadClient_pack;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ReadClient;

    typedef union  T32ReadClient_Rd
          { UNSG32 u32;
            struct w32ReadClient_Rd;
                 } T32ReadClient_Rd;
    typedef union  T32ReadClient_Word
          { UNSG32 u32;
            struct w32ReadClient_Word;
                 } T32ReadClient_Word;
    typedef union  T32ReadClient_NonStdRes
          { UNSG32 u32;
            struct w32ReadClient_NonStdRes;
                 } T32ReadClient_NonStdRes;
    typedef union  T32ReadClient_pack
          { UNSG32 u32;
            struct w32ReadClient_pack;
                 } T32ReadClient_pack;
    ///////////////////////////////////////////////////////////

    typedef union  TReadClient_Rd
          { UNSG32 u32[1];
            struct {
            struct w32ReadClient_Rd;
                   };
                 } TReadClient_Rd;
    typedef union  TReadClient_Word
          { UNSG32 u32[1];
            struct {
            struct w32ReadClient_Word;
                   };
                 } TReadClient_Word;
    typedef union  TReadClient_NonStdRes
          { UNSG32 u32[1];
            struct {
            struct w32ReadClient_NonStdRes;
                   };
                 } TReadClient_NonStdRes;
    typedef union  TReadClient_pack
          { UNSG32 u32[1];
            struct {
            struct w32ReadClient_pack;
                   };
                 } TReadClient_pack;

    ///////////////////////////////////////////////////////////
     SIGN32 ReadClient_drvrd(SIE_ReadClient *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ReadClient_drvwr(SIE_ReadClient *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ReadClient_reset(SIE_ReadClient *p);
     SIGN32 ReadClient_cmp  (SIE_ReadClient *p, SIE_ReadClient *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ReadClient_check(p,pie,pfx,hLOG) ReadClient_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ReadClient_print(p,    pfx,hLOG) ReadClient_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ReadClient
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE WriteClient             biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 Wr                   (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * Start bit for the respective clients.
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  clear                     0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear the asynchronous FIFO between the respective client and dHub.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 pix                  (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of pixels expected from input to write client. This is used to generate flush in Write client to write the partially formed 128-bit data (if any) to DDR.
///                                    * Should be programmed with (ovres*ohres).
///                                    ###
///     @ 0x00008 NonStdRes            (P)
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * Enable for Read Client when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot                0x64
///                                    ###
///                                    * Total number of pixels in a line (for Write Client)
///                                    ###
///               %%        18         # Stuffing bits...
///     @ 0x0000C pack                 (P)
///               %unsigned 4  Sel                       0x0
///                                    ###
///                                    * PackSel for Write Client
///                                    * [0000] : 8 bit packing
///                                    * [0001] : 10 bit packing
///                                    * [0010] : 12 bit packing
///                                    * [0011] : 15 bit packing
///                                    * [0100] : 16 bit packing
///                                    * [0101] : 20 bit packing
///                                    * [0110] : 24 bit packing
///                                    * [0111] : 30 bit packing
///                                    * [1000] : 32 bit packing
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      52b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_WriteClient
#define h_WriteClient (){}

    #define     RA_WriteClient_Wr                              0x0000

    #define     BA_WriteClient_Wr_start                        0x0000
    #define     B16WriteClient_Wr_start                        0x0000
    #define   LSb32WriteClient_Wr_start                           0
    #define   LSb16WriteClient_Wr_start                           0
    #define       bWriteClient_Wr_start                        1
    #define   MSK32WriteClient_Wr_start                           0x00000001

    #define     BA_WriteClient_Wr_clear                        0x0000
    #define     B16WriteClient_Wr_clear                        0x0000
    #define   LSb32WriteClient_Wr_clear                           1
    #define   LSb16WriteClient_Wr_clear                           1
    #define       bWriteClient_Wr_clear                        1
    #define   MSK32WriteClient_Wr_clear                           0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_WriteClient_pix                             0x0004

    #define     BA_WriteClient_pix_tot                         0x0004
    #define     B16WriteClient_pix_tot                         0x0004
    #define   LSb32WriteClient_pix_tot                            0
    #define   LSb16WriteClient_pix_tot                            0
    #define       bWriteClient_pix_tot                         32
    #define   MSK32WriteClient_pix_tot                            0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_WriteClient_NonStdRes                       0x0008

    #define     BA_WriteClient_NonStdRes_enable                0x0008
    #define     B16WriteClient_NonStdRes_enable                0x0008
    #define   LSb32WriteClient_NonStdRes_enable                   0
    #define   LSb16WriteClient_NonStdRes_enable                   0
    #define       bWriteClient_NonStdRes_enable                1
    #define   MSK32WriteClient_NonStdRes_enable                   0x00000001

    #define     BA_WriteClient_NonStdRes_pixlineTot            0x0008
    #define     B16WriteClient_NonStdRes_pixlineTot            0x0008
    #define   LSb32WriteClient_NonStdRes_pixlineTot               1
    #define   LSb16WriteClient_NonStdRes_pixlineTot               1
    #define       bWriteClient_NonStdRes_pixlineTot            13
    #define   MSK32WriteClient_NonStdRes_pixlineTot               0x00003FFE
    ///////////////////////////////////////////////////////////
    #define     RA_WriteClient_pack                            0x000C

    #define     BA_WriteClient_pack_Sel                        0x000C
    #define     B16WriteClient_pack_Sel                        0x000C
    #define   LSb32WriteClient_pack_Sel                           0
    #define   LSb16WriteClient_pack_Sel                           0
    #define       bWriteClient_pack_Sel                        4
    #define   MSK32WriteClient_pack_Sel                           0x0000000F
    ///////////////////////////////////////////////////////////

    typedef struct SIE_WriteClient {
    ///////////////////////////////////////////////////////////
    #define   GET32WriteClient_Wr_start(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32WriteClient_Wr_start(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16WriteClient_Wr_start(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16WriteClient_Wr_start(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32WriteClient_Wr_clear(r32)                   _BFGET_(r32, 1, 1)
    #define   SET32WriteClient_Wr_clear(r32,v)                 _BFSET_(r32, 1, 1,v)
    #define   GET16WriteClient_Wr_clear(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16WriteClient_Wr_clear(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define     w32WriteClient_Wr                              {\
            UNSG32 uWr_start                                   :  1;\
            UNSG32 uWr_clear                                   :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32WriteClient_Wr;
            struct w32WriteClient_Wr;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32WriteClient_pix_tot(r32)                    _BFGET_(r32,31, 0)
    #define   SET32WriteClient_pix_tot(r32,v)                  _BFSET_(r32,31, 0,v)

    #define     w32WriteClient_pix                             {\
            UNSG32 upix_tot                                    : 32;\
          }
    union { UNSG32 u32WriteClient_pix;
            struct w32WriteClient_pix;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32WriteClient_NonStdRes_enable(r32)           _BFGET_(r32, 0, 0)
    #define   SET32WriteClient_NonStdRes_enable(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16WriteClient_NonStdRes_enable(r16)           _BFGET_(r16, 0, 0)
    #define   SET16WriteClient_NonStdRes_enable(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32WriteClient_NonStdRes_pixlineTot(r32)       _BFGET_(r32,13, 1)
    #define   SET32WriteClient_NonStdRes_pixlineTot(r32,v)     _BFSET_(r32,13, 1,v)
    #define   GET16WriteClient_NonStdRes_pixlineTot(r16)       _BFGET_(r16,13, 1)
    #define   SET16WriteClient_NonStdRes_pixlineTot(r16,v)     _BFSET_(r16,13, 1,v)

    #define     w32WriteClient_NonStdRes                       {\
            UNSG32 uNonStdRes_enable                           :  1;\
            UNSG32 uNonStdRes_pixlineTot                       : 13;\
            UNSG32 RSVDx8_b14                                  : 18;\
          }
    union { UNSG32 u32WriteClient_NonStdRes;
            struct w32WriteClient_NonStdRes;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32WriteClient_pack_Sel(r32)                   _BFGET_(r32, 3, 0)
    #define   SET32WriteClient_pack_Sel(r32,v)                 _BFSET_(r32, 3, 0,v)
    #define   GET16WriteClient_pack_Sel(r16)                   _BFGET_(r16, 3, 0)
    #define   SET16WriteClient_pack_Sel(r16,v)                 _BFSET_(r16, 3, 0,v)

    #define     w32WriteClient_pack                            {\
            UNSG32 upack_Sel                                   :  4;\
            UNSG32 RSVDxC_b4                                   : 28;\
          }
    union { UNSG32 u32WriteClient_pack;
            struct w32WriteClient_pack;
          };
    ///////////////////////////////////////////////////////////
    } SIE_WriteClient;

    typedef union  T32WriteClient_Wr
          { UNSG32 u32;
            struct w32WriteClient_Wr;
                 } T32WriteClient_Wr;
    typedef union  T32WriteClient_pix
          { UNSG32 u32;
            struct w32WriteClient_pix;
                 } T32WriteClient_pix;
    typedef union  T32WriteClient_NonStdRes
          { UNSG32 u32;
            struct w32WriteClient_NonStdRes;
                 } T32WriteClient_NonStdRes;
    typedef union  T32WriteClient_pack
          { UNSG32 u32;
            struct w32WriteClient_pack;
                 } T32WriteClient_pack;
    ///////////////////////////////////////////////////////////

    typedef union  TWriteClient_Wr
          { UNSG32 u32[1];
            struct {
            struct w32WriteClient_Wr;
                   };
                 } TWriteClient_Wr;
    typedef union  TWriteClient_pix
          { UNSG32 u32[1];
            struct {
            struct w32WriteClient_pix;
                   };
                 } TWriteClient_pix;
    typedef union  TWriteClient_NonStdRes
          { UNSG32 u32[1];
            struct {
            struct w32WriteClient_NonStdRes;
                   };
                 } TWriteClient_NonStdRes;
    typedef union  TWriteClient_pack
          { UNSG32 u32[1];
            struct {
            struct w32WriteClient_pack;
                   };
                 } TWriteClient_pack;

    ///////////////////////////////////////////////////////////
     SIGN32 WriteClient_drvrd(SIE_WriteClient *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 WriteClient_drvwr(SIE_WriteClient *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void WriteClient_reset(SIE_WriteClient *p);
     SIGN32 WriteClient_cmp  (SIE_WriteClient *p, SIE_WriteClient *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define WriteClient_check(p,pie,pfx,hLOG) WriteClient_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define WriteClient_print(p,    pfx,hLOG) WriteClient_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: WriteClient
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ClientIF                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 MR0                  (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * Start bit for the respective clients.
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  clear                     0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear the asynchronous FIFO between the respective client and dHub.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 MR0_word             (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for R0 read Client. Should be programmed as:
///                                    * ceil( ohres*ovres*16 / 128 )
///                                    * Note0 : In case of resolution which is not integer multiple of 128, word total should be programmed as follows :
///                                    * For eg if ohres = 116, then (ohres*24/128) = 21.75. Then word total should be (22*ovres). Where '24' = no of bits in a pixel
///                                    * Note1 : In case of DETILE UPS420 10Bit Mode 0, word total should be programmed as
///                                    * (ihres*ivres*NoB*16/15)/128 where NoB = 10
///                                    ###
///     @ 0x00008 MR1                  (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * Start bit for the respective clients.
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  clear                     0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear the asynchronous FIFO between the respective client and dHub.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x0000C MR1_word             (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for R1 read Client. Should be programmed as:
///                                    * ceil( ohres*ovres*16 / 128 )
///                                    * Note : In case of resolution which is not integer multiple of 128, word total should be programmed as follows :
///                                    * For eg if ohres = 116, then (ohres*24/128) = 21.75. Then word total should be (22*ovres). Where '24' = no of bits in a pixel
///                                    * Note1 : In case of DETILE UPS420 10Bit Mode 0, word total should be programmed as
///                                    * (ihres*ivres*NoB*16/15)/(128*2) where NoB = 10
///                                    ###
///     @ 0x00010 CTRL0                (P)
///               %unsigned 1  CLKEN_Main0               0x0
///                                    ###
///                                    * 1: Take care of rdy from MainR0 while generating clken for mainPl
///                                    * 0 : don't consider rdy from MainR0
///                                    * Make this bit 1 whenever read client of MainR0 is turned-on. Otherwise, make it zero.
///                                    ###
///               %unsigned 1  CLKEN_Main1               0x0
///                                    ###
///                                    * 1: Take care of rdy from MainR1 while generating clken for mainPl
///                                    * 0 : don't consider rdy from MainR1
///                                    * Make this bit 1 whenever read client of MainR1 is turned-on. Otherwise, make it zero.
///                                    ###
///               %unsigned 1  rdmain_initval0           0x0
///                                    ###
///                                    * Initiallization value for read Mask for Main RdClient1 (420SP)
///                                    ###
///               %unsigned 1  rdmain_initval1           0x1
///                                    ###
///                                    * Initiallization value for read Mask for Main RdClient1 (420SP)
///                                    ###
///               %unsigned 1  rdm_mask_sftrst           0x0
///                                    ###
///                                    * Soft reset to initialize read mask. Write 1 to initialize read mask with rdMainMaskInitVal0
///                                    ###
///               %unsigned 4  packSel_MR0               0x0
///                                    ###
///                                    * PackSel for Main Read Client (R0)
///                                    * [0000] : 8 bit unpacking
///                                    * [0001] : 10 bit unpacking
///                                    * [0010] : 16 bit unpacking
///                                    * [0011]: 10 bit unpacking [for Tile Format 10Bit V4H6]
///                                    * [0100] : 20 Bit unpacking [for YUV422 10bpc]
///                                    * [0101] : 32 Bit unpacking [for YUV_444_10b DWA, ARGB32, and ARGB2101010 formats]
///                                    * [0110] : 24 Bit unpacking[for YUV444 8bpc]
///                                    * [0111] : 30 Bit unpacking[for YUV444 10bpc]
///                                    ###
///               %unsigned 2  packSel_MR1               0x0
///                                    ###
///                                    * PackSel for Main Read Client (R1)
///                                    * [00] : 8 bit unpacking
///                                    * [01] : 10 bit unpacking
///                                    * [10] : 10 bit unpacking [for Tile Format 10Bit V4H6]
///                                    * [11] : 16 bit unpacking
///                                    ###
///               %unsigned 1  ups420_idataSelM          0x0
///                                    ###
///                                    * Input Data Select for UPS 420-422. Default it is 16bit YC from Read Client R0 – for MAIN Plane
///                                    ###
///               %unsigned 1  read_sel_420SP            0x0
///                                    ###
///                                    * Read select from read client (R1) for 420 SP format case
///                                    ###
///               %unsigned 3  ups420_idat_ctrl          0x0
///                                    ###
///                                    * Data control enable for ups420_422
///                                    * [000] : Input data is 10 bpc (YUV420, YUV422SP, YUV444,    RGB101010)
///                                    * [001] : Input data is 8bpc (YUV420, YUV422SP, YUV444,    RGB888)
///                                    * [010] : For DV TEST path (8bpc)
///                                    * [011] : For DV TEST path (10bpc)
///                                    * [100] : Input data is YUV 422 Pack 8bpc
///                                    * [101] : Input data is YUV 422 Pack 10bpc
///                                    * [110] : Not Used
///                                    * [111] : Input data is ARGB2101010 /ARGB8888/ YUV444 DWA
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00014 DUMMY                (P)
///               %unsigned 32 dummy                     0x0
///                                    ###
///                                    * Can be used for ECO (left intentionally) to match register space with BG4CT-VPP
///                                    ###
///     @ 0x00018 CTRL2                (P)
///               %unsigned 1  nonStdResEn_MR0           0x0
///                                    ###
///                                    * Enable for Main Read Client 0 when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot_MR0            0x64
///                                    ###
///                                    * Total number of pixels in a line (for Main Read Client 0)
///                                    ###
///               %unsigned 4  flushCnt_MR0              0x5
///                                    ###
///                                    * Counter to determine the ready status of Main Read Client 0 after end of line (only used when nonStdResEn_MR0 = 1)
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x0001C CTRL3                (P)
///               %unsigned 1  nonStdResEn_MR1           0x0
///                                    ###
///                                    * Enable for Main Read Client 1 when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot_MR1            0x64
///                                    ###
///                                    * Total number of pixels in a line (for Main Read Client 1)
///                                    ###
///               %unsigned 4  flushCnt_MR1              0x5
///                                    ###
///                                    * Counter to determine the ready status of Main Read Client 1 after end of line (only used when nonStdResEn_MR1 = 1)
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x00020                      (P)
///     # 0x00020 RdClientVmxVm        
///               $ReadClient          RdClientVmxVm     REG          
///                                    ###
///                                    * Read Client for VmxVm DMA I/F registers
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      48B, bits:     208b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ClientIF
#define h_ClientIF (){}

    #define     RA_ClientIF_MR0                                0x0000

    #define     BA_ClientIF_MR0_start                          0x0000
    #define     B16ClientIF_MR0_start                          0x0000
    #define   LSb32ClientIF_MR0_start                             0
    #define   LSb16ClientIF_MR0_start                             0
    #define       bClientIF_MR0_start                          1
    #define   MSK32ClientIF_MR0_start                             0x00000001

    #define     BA_ClientIF_MR0_clear                          0x0000
    #define     B16ClientIF_MR0_clear                          0x0000
    #define   LSb32ClientIF_MR0_clear                             1
    #define   LSb16ClientIF_MR0_clear                             1
    #define       bClientIF_MR0_clear                          1
    #define   MSK32ClientIF_MR0_clear                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_MR0_word                           0x0004

    #define     BA_ClientIF_MR0_word_tot                       0x0004
    #define     B16ClientIF_MR0_word_tot                       0x0004
    #define   LSb32ClientIF_MR0_word_tot                          0
    #define   LSb16ClientIF_MR0_word_tot                          0
    #define       bClientIF_MR0_word_tot                       32
    #define   MSK32ClientIF_MR0_word_tot                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_MR1                                0x0008

    #define     BA_ClientIF_MR1_start                          0x0008
    #define     B16ClientIF_MR1_start                          0x0008
    #define   LSb32ClientIF_MR1_start                             0
    #define   LSb16ClientIF_MR1_start                             0
    #define       bClientIF_MR1_start                          1
    #define   MSK32ClientIF_MR1_start                             0x00000001

    #define     BA_ClientIF_MR1_clear                          0x0008
    #define     B16ClientIF_MR1_clear                          0x0008
    #define   LSb32ClientIF_MR1_clear                             1
    #define   LSb16ClientIF_MR1_clear                             1
    #define       bClientIF_MR1_clear                          1
    #define   MSK32ClientIF_MR1_clear                             0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_MR1_word                           0x000C

    #define     BA_ClientIF_MR1_word_tot                       0x000C
    #define     B16ClientIF_MR1_word_tot                       0x000C
    #define   LSb32ClientIF_MR1_word_tot                          0
    #define   LSb16ClientIF_MR1_word_tot                          0
    #define       bClientIF_MR1_word_tot                       32
    #define   MSK32ClientIF_MR1_word_tot                          0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_CTRL0                              0x0010

    #define     BA_ClientIF_CTRL0_CLKEN_Main0                  0x0010
    #define     B16ClientIF_CTRL0_CLKEN_Main0                  0x0010
    #define   LSb32ClientIF_CTRL0_CLKEN_Main0                     0
    #define   LSb16ClientIF_CTRL0_CLKEN_Main0                     0
    #define       bClientIF_CTRL0_CLKEN_Main0                  1
    #define   MSK32ClientIF_CTRL0_CLKEN_Main0                     0x00000001

    #define     BA_ClientIF_CTRL0_CLKEN_Main1                  0x0010
    #define     B16ClientIF_CTRL0_CLKEN_Main1                  0x0010
    #define   LSb32ClientIF_CTRL0_CLKEN_Main1                     1
    #define   LSb16ClientIF_CTRL0_CLKEN_Main1                     1
    #define       bClientIF_CTRL0_CLKEN_Main1                  1
    #define   MSK32ClientIF_CTRL0_CLKEN_Main1                     0x00000002

    #define     BA_ClientIF_CTRL0_rdmain_initval0              0x0010
    #define     B16ClientIF_CTRL0_rdmain_initval0              0x0010
    #define   LSb32ClientIF_CTRL0_rdmain_initval0                 2
    #define   LSb16ClientIF_CTRL0_rdmain_initval0                 2
    #define       bClientIF_CTRL0_rdmain_initval0              1
    #define   MSK32ClientIF_CTRL0_rdmain_initval0                 0x00000004

    #define     BA_ClientIF_CTRL0_rdmain_initval1              0x0010
    #define     B16ClientIF_CTRL0_rdmain_initval1              0x0010
    #define   LSb32ClientIF_CTRL0_rdmain_initval1                 3
    #define   LSb16ClientIF_CTRL0_rdmain_initval1                 3
    #define       bClientIF_CTRL0_rdmain_initval1              1
    #define   MSK32ClientIF_CTRL0_rdmain_initval1                 0x00000008

    #define     BA_ClientIF_CTRL0_rdm_mask_sftrst              0x0010
    #define     B16ClientIF_CTRL0_rdm_mask_sftrst              0x0010
    #define   LSb32ClientIF_CTRL0_rdm_mask_sftrst                 4
    #define   LSb16ClientIF_CTRL0_rdm_mask_sftrst                 4
    #define       bClientIF_CTRL0_rdm_mask_sftrst              1
    #define   MSK32ClientIF_CTRL0_rdm_mask_sftrst                 0x00000010

    #define     BA_ClientIF_CTRL0_packSel_MR0                  0x0010
    #define     B16ClientIF_CTRL0_packSel_MR0                  0x0010
    #define   LSb32ClientIF_CTRL0_packSel_MR0                     5
    #define   LSb16ClientIF_CTRL0_packSel_MR0                     5
    #define       bClientIF_CTRL0_packSel_MR0                  4
    #define   MSK32ClientIF_CTRL0_packSel_MR0                     0x000001E0

    #define     BA_ClientIF_CTRL0_packSel_MR1                  0x0011
    #define     B16ClientIF_CTRL0_packSel_MR1                  0x0010
    #define   LSb32ClientIF_CTRL0_packSel_MR1                     9
    #define   LSb16ClientIF_CTRL0_packSel_MR1                     9
    #define       bClientIF_CTRL0_packSel_MR1                  2
    #define   MSK32ClientIF_CTRL0_packSel_MR1                     0x00000600

    #define     BA_ClientIF_CTRL0_ups420_idataSelM             0x0011
    #define     B16ClientIF_CTRL0_ups420_idataSelM             0x0010
    #define   LSb32ClientIF_CTRL0_ups420_idataSelM                11
    #define   LSb16ClientIF_CTRL0_ups420_idataSelM                11
    #define       bClientIF_CTRL0_ups420_idataSelM             1
    #define   MSK32ClientIF_CTRL0_ups420_idataSelM                0x00000800

    #define     BA_ClientIF_CTRL0_read_sel_420SP               0x0011
    #define     B16ClientIF_CTRL0_read_sel_420SP               0x0010
    #define   LSb32ClientIF_CTRL0_read_sel_420SP                  12
    #define   LSb16ClientIF_CTRL0_read_sel_420SP                  12
    #define       bClientIF_CTRL0_read_sel_420SP               1
    #define   MSK32ClientIF_CTRL0_read_sel_420SP                  0x00001000

    #define     BA_ClientIF_CTRL0_ups420_idat_ctrl             0x0011
    #define     B16ClientIF_CTRL0_ups420_idat_ctrl             0x0010
    #define   LSb32ClientIF_CTRL0_ups420_idat_ctrl                13
    #define   LSb16ClientIF_CTRL0_ups420_idat_ctrl                13
    #define       bClientIF_CTRL0_ups420_idat_ctrl             3
    #define   MSK32ClientIF_CTRL0_ups420_idat_ctrl                0x0000E000
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_DUMMY                              0x0014

    #define     BA_ClientIF_DUMMY_dummy                        0x0014
    #define     B16ClientIF_DUMMY_dummy                        0x0014
    #define   LSb32ClientIF_DUMMY_dummy                           0
    #define   LSb16ClientIF_DUMMY_dummy                           0
    #define       bClientIF_DUMMY_dummy                        32
    #define   MSK32ClientIF_DUMMY_dummy                           0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_CTRL2                              0x0018

    #define     BA_ClientIF_CTRL2_nonStdResEn_MR0              0x0018
    #define     B16ClientIF_CTRL2_nonStdResEn_MR0              0x0018
    #define   LSb32ClientIF_CTRL2_nonStdResEn_MR0                 0
    #define   LSb16ClientIF_CTRL2_nonStdResEn_MR0                 0
    #define       bClientIF_CTRL2_nonStdResEn_MR0              1
    #define   MSK32ClientIF_CTRL2_nonStdResEn_MR0                 0x00000001

    #define     BA_ClientIF_CTRL2_pixlineTot_MR0               0x0018
    #define     B16ClientIF_CTRL2_pixlineTot_MR0               0x0018
    #define   LSb32ClientIF_CTRL2_pixlineTot_MR0                  1
    #define   LSb16ClientIF_CTRL2_pixlineTot_MR0                  1
    #define       bClientIF_CTRL2_pixlineTot_MR0               13
    #define   MSK32ClientIF_CTRL2_pixlineTot_MR0                  0x00003FFE

    #define     BA_ClientIF_CTRL2_flushCnt_MR0                 0x0019
    #define     B16ClientIF_CTRL2_flushCnt_MR0                 0x0018
    #define   LSb32ClientIF_CTRL2_flushCnt_MR0                    14
    #define   LSb16ClientIF_CTRL2_flushCnt_MR0                    14
    #define       bClientIF_CTRL2_flushCnt_MR0                 4
    #define   MSK32ClientIF_CTRL2_flushCnt_MR0                    0x0003C000
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_CTRL3                              0x001C

    #define     BA_ClientIF_CTRL3_nonStdResEn_MR1              0x001C
    #define     B16ClientIF_CTRL3_nonStdResEn_MR1              0x001C
    #define   LSb32ClientIF_CTRL3_nonStdResEn_MR1                 0
    #define   LSb16ClientIF_CTRL3_nonStdResEn_MR1                 0
    #define       bClientIF_CTRL3_nonStdResEn_MR1              1
    #define   MSK32ClientIF_CTRL3_nonStdResEn_MR1                 0x00000001

    #define     BA_ClientIF_CTRL3_pixlineTot_MR1               0x001C
    #define     B16ClientIF_CTRL3_pixlineTot_MR1               0x001C
    #define   LSb32ClientIF_CTRL3_pixlineTot_MR1                  1
    #define   LSb16ClientIF_CTRL3_pixlineTot_MR1                  1
    #define       bClientIF_CTRL3_pixlineTot_MR1               13
    #define   MSK32ClientIF_CTRL3_pixlineTot_MR1                  0x00003FFE

    #define     BA_ClientIF_CTRL3_flushCnt_MR1                 0x001D
    #define     B16ClientIF_CTRL3_flushCnt_MR1                 0x001C
    #define   LSb32ClientIF_CTRL3_flushCnt_MR1                    14
    #define   LSb16ClientIF_CTRL3_flushCnt_MR1                    14
    #define       bClientIF_CTRL3_flushCnt_MR1                 4
    #define   MSK32ClientIF_CTRL3_flushCnt_MR1                    0x0003C000
    ///////////////////////////////////////////////////////////
    #define     RA_ClientIF_RdClientVmxVm                      0x0020
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ClientIF {
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_MR0_start(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32ClientIF_MR0_start(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16ClientIF_MR0_start(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16ClientIF_MR0_start(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32ClientIF_MR0_clear(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32ClientIF_MR0_clear(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16ClientIF_MR0_clear(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16ClientIF_MR0_clear(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32ClientIF_MR0                                {\
            UNSG32 uMR0_start                                  :  1;\
            UNSG32 uMR0_clear                                  :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32ClientIF_MR0;
            struct w32ClientIF_MR0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_MR0_word_tot(r32)                  _BFGET_(r32,31, 0)
    #define   SET32ClientIF_MR0_word_tot(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32ClientIF_MR0_word                           {\
            UNSG32 uMR0_word_tot                               : 32;\
          }
    union { UNSG32 u32ClientIF_MR0_word;
            struct w32ClientIF_MR0_word;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_MR1_start(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32ClientIF_MR1_start(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16ClientIF_MR1_start(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16ClientIF_MR1_start(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32ClientIF_MR1_clear(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32ClientIF_MR1_clear(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16ClientIF_MR1_clear(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16ClientIF_MR1_clear(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define     w32ClientIF_MR1                                {\
            UNSG32 uMR1_start                                  :  1;\
            UNSG32 uMR1_clear                                  :  1;\
            UNSG32 RSVDx8_b2                                   : 30;\
          }
    union { UNSG32 u32ClientIF_MR1;
            struct w32ClientIF_MR1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_MR1_word_tot(r32)                  _BFGET_(r32,31, 0)
    #define   SET32ClientIF_MR1_word_tot(r32,v)                _BFSET_(r32,31, 0,v)

    #define     w32ClientIF_MR1_word                           {\
            UNSG32 uMR1_word_tot                               : 32;\
          }
    union { UNSG32 u32ClientIF_MR1_word;
            struct w32ClientIF_MR1_word;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_CTRL0_CLKEN_Main0(r32)             _BFGET_(r32, 0, 0)
    #define   SET32ClientIF_CTRL0_CLKEN_Main0(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16ClientIF_CTRL0_CLKEN_Main0(r16)             _BFGET_(r16, 0, 0)
    #define   SET16ClientIF_CTRL0_CLKEN_Main0(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32ClientIF_CTRL0_CLKEN_Main1(r32)             _BFGET_(r32, 1, 1)
    #define   SET32ClientIF_CTRL0_CLKEN_Main1(r32,v)           _BFSET_(r32, 1, 1,v)
    #define   GET16ClientIF_CTRL0_CLKEN_Main1(r16)             _BFGET_(r16, 1, 1)
    #define   SET16ClientIF_CTRL0_CLKEN_Main1(r16,v)           _BFSET_(r16, 1, 1,v)

    #define   GET32ClientIF_CTRL0_rdmain_initval0(r32)         _BFGET_(r32, 2, 2)
    #define   SET32ClientIF_CTRL0_rdmain_initval0(r32,v)       _BFSET_(r32, 2, 2,v)
    #define   GET16ClientIF_CTRL0_rdmain_initval0(r16)         _BFGET_(r16, 2, 2)
    #define   SET16ClientIF_CTRL0_rdmain_initval0(r16,v)       _BFSET_(r16, 2, 2,v)

    #define   GET32ClientIF_CTRL0_rdmain_initval1(r32)         _BFGET_(r32, 3, 3)
    #define   SET32ClientIF_CTRL0_rdmain_initval1(r32,v)       _BFSET_(r32, 3, 3,v)
    #define   GET16ClientIF_CTRL0_rdmain_initval1(r16)         _BFGET_(r16, 3, 3)
    #define   SET16ClientIF_CTRL0_rdmain_initval1(r16,v)       _BFSET_(r16, 3, 3,v)

    #define   GET32ClientIF_CTRL0_rdm_mask_sftrst(r32)         _BFGET_(r32, 4, 4)
    #define   SET32ClientIF_CTRL0_rdm_mask_sftrst(r32,v)       _BFSET_(r32, 4, 4,v)
    #define   GET16ClientIF_CTRL0_rdm_mask_sftrst(r16)         _BFGET_(r16, 4, 4)
    #define   SET16ClientIF_CTRL0_rdm_mask_sftrst(r16,v)       _BFSET_(r16, 4, 4,v)

    #define   GET32ClientIF_CTRL0_packSel_MR0(r32)             _BFGET_(r32, 8, 5)
    #define   SET32ClientIF_CTRL0_packSel_MR0(r32,v)           _BFSET_(r32, 8, 5,v)
    #define   GET16ClientIF_CTRL0_packSel_MR0(r16)             _BFGET_(r16, 8, 5)
    #define   SET16ClientIF_CTRL0_packSel_MR0(r16,v)           _BFSET_(r16, 8, 5,v)

    #define   GET32ClientIF_CTRL0_packSel_MR1(r32)             _BFGET_(r32,10, 9)
    #define   SET32ClientIF_CTRL0_packSel_MR1(r32,v)           _BFSET_(r32,10, 9,v)
    #define   GET16ClientIF_CTRL0_packSel_MR1(r16)             _BFGET_(r16,10, 9)
    #define   SET16ClientIF_CTRL0_packSel_MR1(r16,v)           _BFSET_(r16,10, 9,v)

    #define   GET32ClientIF_CTRL0_ups420_idataSelM(r32)        _BFGET_(r32,11,11)
    #define   SET32ClientIF_CTRL0_ups420_idataSelM(r32,v)      _BFSET_(r32,11,11,v)
    #define   GET16ClientIF_CTRL0_ups420_idataSelM(r16)        _BFGET_(r16,11,11)
    #define   SET16ClientIF_CTRL0_ups420_idataSelM(r16,v)      _BFSET_(r16,11,11,v)

    #define   GET32ClientIF_CTRL0_read_sel_420SP(r32)          _BFGET_(r32,12,12)
    #define   SET32ClientIF_CTRL0_read_sel_420SP(r32,v)        _BFSET_(r32,12,12,v)
    #define   GET16ClientIF_CTRL0_read_sel_420SP(r16)          _BFGET_(r16,12,12)
    #define   SET16ClientIF_CTRL0_read_sel_420SP(r16,v)        _BFSET_(r16,12,12,v)

    #define   GET32ClientIF_CTRL0_ups420_idat_ctrl(r32)        _BFGET_(r32,15,13)
    #define   SET32ClientIF_CTRL0_ups420_idat_ctrl(r32,v)      _BFSET_(r32,15,13,v)
    #define   GET16ClientIF_CTRL0_ups420_idat_ctrl(r16)        _BFGET_(r16,15,13)
    #define   SET16ClientIF_CTRL0_ups420_idat_ctrl(r16,v)      _BFSET_(r16,15,13,v)

    #define     w32ClientIF_CTRL0                              {\
            UNSG32 uCTRL0_CLKEN_Main0                          :  1;\
            UNSG32 uCTRL0_CLKEN_Main1                          :  1;\
            UNSG32 uCTRL0_rdmain_initval0                      :  1;\
            UNSG32 uCTRL0_rdmain_initval1                      :  1;\
            UNSG32 uCTRL0_rdm_mask_sftrst                      :  1;\
            UNSG32 uCTRL0_packSel_MR0                          :  4;\
            UNSG32 uCTRL0_packSel_MR1                          :  2;\
            UNSG32 uCTRL0_ups420_idataSelM                     :  1;\
            UNSG32 uCTRL0_read_sel_420SP                       :  1;\
            UNSG32 uCTRL0_ups420_idat_ctrl                     :  3;\
            UNSG32 RSVDx10_b16                                 : 16;\
          }
    union { UNSG32 u32ClientIF_CTRL0;
            struct w32ClientIF_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_DUMMY_dummy(r32)                   _BFGET_(r32,31, 0)
    #define   SET32ClientIF_DUMMY_dummy(r32,v)                 _BFSET_(r32,31, 0,v)

    #define     w32ClientIF_DUMMY                              {\
            UNSG32 uDUMMY_dummy                                : 32;\
          }
    union { UNSG32 u32ClientIF_DUMMY;
            struct w32ClientIF_DUMMY;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_CTRL2_nonStdResEn_MR0(r32)         _BFGET_(r32, 0, 0)
    #define   SET32ClientIF_CTRL2_nonStdResEn_MR0(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16ClientIF_CTRL2_nonStdResEn_MR0(r16)         _BFGET_(r16, 0, 0)
    #define   SET16ClientIF_CTRL2_nonStdResEn_MR0(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32ClientIF_CTRL2_pixlineTot_MR0(r32)          _BFGET_(r32,13, 1)
    #define   SET32ClientIF_CTRL2_pixlineTot_MR0(r32,v)        _BFSET_(r32,13, 1,v)
    #define   GET16ClientIF_CTRL2_pixlineTot_MR0(r16)          _BFGET_(r16,13, 1)
    #define   SET16ClientIF_CTRL2_pixlineTot_MR0(r16,v)        _BFSET_(r16,13, 1,v)

    #define   GET32ClientIF_CTRL2_flushCnt_MR0(r32)            _BFGET_(r32,17,14)
    #define   SET32ClientIF_CTRL2_flushCnt_MR0(r32,v)          _BFSET_(r32,17,14,v)

    #define     w32ClientIF_CTRL2                              {\
            UNSG32 uCTRL2_nonStdResEn_MR0                      :  1;\
            UNSG32 uCTRL2_pixlineTot_MR0                       : 13;\
            UNSG32 uCTRL2_flushCnt_MR0                         :  4;\
            UNSG32 RSVDx18_b18                                 : 14;\
          }
    union { UNSG32 u32ClientIF_CTRL2;
            struct w32ClientIF_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ClientIF_CTRL3_nonStdResEn_MR1(r32)         _BFGET_(r32, 0, 0)
    #define   SET32ClientIF_CTRL3_nonStdResEn_MR1(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16ClientIF_CTRL3_nonStdResEn_MR1(r16)         _BFGET_(r16, 0, 0)
    #define   SET16ClientIF_CTRL3_nonStdResEn_MR1(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32ClientIF_CTRL3_pixlineTot_MR1(r32)          _BFGET_(r32,13, 1)
    #define   SET32ClientIF_CTRL3_pixlineTot_MR1(r32,v)        _BFSET_(r32,13, 1,v)
    #define   GET16ClientIF_CTRL3_pixlineTot_MR1(r16)          _BFGET_(r16,13, 1)
    #define   SET16ClientIF_CTRL3_pixlineTot_MR1(r16,v)        _BFSET_(r16,13, 1,v)

    #define   GET32ClientIF_CTRL3_flushCnt_MR1(r32)            _BFGET_(r32,17,14)
    #define   SET32ClientIF_CTRL3_flushCnt_MR1(r32,v)          _BFSET_(r32,17,14,v)

    #define     w32ClientIF_CTRL3                              {\
            UNSG32 uCTRL3_nonStdResEn_MR1                      :  1;\
            UNSG32 uCTRL3_pixlineTot_MR1                       : 13;\
            UNSG32 uCTRL3_flushCnt_MR1                         :  4;\
            UNSG32 RSVDx1C_b18                                 : 14;\
          }
    union { UNSG32 u32ClientIF_CTRL3;
            struct w32ClientIF_CTRL3;
          };
    ///////////////////////////////////////////////////////////
              SIE_ReadClient                                   ie_RdClientVmxVm;
    ///////////////////////////////////////////////////////////
    } SIE_ClientIF;

    typedef union  T32ClientIF_MR0
          { UNSG32 u32;
            struct w32ClientIF_MR0;
                 } T32ClientIF_MR0;
    typedef union  T32ClientIF_MR0_word
          { UNSG32 u32;
            struct w32ClientIF_MR0_word;
                 } T32ClientIF_MR0_word;
    typedef union  T32ClientIF_MR1
          { UNSG32 u32;
            struct w32ClientIF_MR1;
                 } T32ClientIF_MR1;
    typedef union  T32ClientIF_MR1_word
          { UNSG32 u32;
            struct w32ClientIF_MR1_word;
                 } T32ClientIF_MR1_word;
    typedef union  T32ClientIF_CTRL0
          { UNSG32 u32;
            struct w32ClientIF_CTRL0;
                 } T32ClientIF_CTRL0;
    typedef union  T32ClientIF_DUMMY
          { UNSG32 u32;
            struct w32ClientIF_DUMMY;
                 } T32ClientIF_DUMMY;
    typedef union  T32ClientIF_CTRL2
          { UNSG32 u32;
            struct w32ClientIF_CTRL2;
                 } T32ClientIF_CTRL2;
    typedef union  T32ClientIF_CTRL3
          { UNSG32 u32;
            struct w32ClientIF_CTRL3;
                 } T32ClientIF_CTRL3;
    ///////////////////////////////////////////////////////////

    typedef union  TClientIF_MR0
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_MR0;
                   };
                 } TClientIF_MR0;
    typedef union  TClientIF_MR0_word
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_MR0_word;
                   };
                 } TClientIF_MR0_word;
    typedef union  TClientIF_MR1
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_MR1;
                   };
                 } TClientIF_MR1;
    typedef union  TClientIF_MR1_word
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_MR1_word;
                   };
                 } TClientIF_MR1_word;
    typedef union  TClientIF_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_CTRL0;
                   };
                 } TClientIF_CTRL0;
    typedef union  TClientIF_DUMMY
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_DUMMY;
                   };
                 } TClientIF_DUMMY;
    typedef union  TClientIF_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_CTRL2;
                   };
                 } TClientIF_CTRL2;
    typedef union  TClientIF_CTRL3
          { UNSG32 u32[1];
            struct {
            struct w32ClientIF_CTRL3;
                   };
                 } TClientIF_CTRL3;

    ///////////////////////////////////////////////////////////
     SIGN32 ClientIF_drvrd(SIE_ClientIF *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ClientIF_drvwr(SIE_ClientIF *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ClientIF_reset(SIE_ClientIF *p);
     SIGN32 ClientIF_cmp  (SIE_ClientIF *p, SIE_ClientIF *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ClientIF_check(p,pie,pfx,hLOG) ClientIF_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ClientIF_print(p,    pfx,hLOG) ClientIF_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ClientIF
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE BETG                    biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 PL0                  
///               $TG_PL               PL0               REG          
///                                    ###
///                                    * Plane 0 Related registers (for Base Plane)
///                                    ###
///     @ 0x00008                      (P)
///     # 0x00008 PL1                  
///               $TG_PL               PL1               REG          
///                                    ###
///                                    * Plane 1 Related registers (for Main plane)
///                                    ###
///     @ 0x00010                      (P)
///     # 0x00010 PL2                  
///               $TG_PL               PL2               REG          
///                                    ###
///                                    * Plane 2 Related registers (for PIP/Graphics1 Plane)
///                                    ###
///     @ 0x00018                      (P)
///     # 0x00018 PL3                  
///               $TG_PL               PL3               REG          
///                                    ###
///                                    * Plane 3 Related registers (for Graphics2 Plane)
///                                    ###
///     @ 0x00020                      (P)
///     # 0x00020 PL4                  
///               $TG_PL               PL4               REG          
///                                    ###
///                                    * Plane 4 Related registers (for FIX0 Plane)
///                                    ###
///     @ 0x00028                      (P)
///     # 0x00028 PL5                  
///               $TG_PL               PL5               REG          
///                                    ###
///                                    * Plane 5 Related registers (for FIX1 Plane)
///                                    ###
///     @ 0x00030                      (P)
///     # 0x00030 PL6                  
///               $TG_PL               PL6               REG          
///                                    ###
///                                    * Plane 6 Related registers (for FIX2 Plane)
///                                    ###
///     @ 0x00038                      (P)
///     # 0x00038 PL7                  
///               $TG_PL               PL7               REG          
///                                    ###
///                                    * Plane 7 Related registers (for FIX3 Plane)
///                                    ###
///     @ 0x00040                      (P)
///     # 0x00040 PL8                  
///               $TG_PL               PL8               REG          
///                                    ###
///                                    * Plane 8 Related registers (for overlay output read)
///                                    ###
///     @ 0x00048                      (P)
///     # 0x00048 PL1_CR               
///               $TG_PL               PL1_CR            REG          
///                                    ###
///                                    * Plane 1 Crop Related registers (for taking cropped input of Main Plane as Overlay Input)
///                                    ###
///     @ 0x00050                      (P)
///     # 0x00050 PL2_CR               
///               $TG_PL               PL2_CR            REG          
///                                    ###
///                                    * Plane 2 Crop Related registers (for taking cropped input of PIP/Graphics1 Plane as Overlay Input)
///                                    ###
///     @ 0x00058                      (P)
///     # 0x00058 PL3_CR               
///               $TG_PL               PL3_CR            REG          
///                                    ###
///                                    * Plane 3 Crop Related registers (for taking cropped input of Graphics-2 Plane as Overlay Input)
///                                    ###
///     @ 0x00060                      (P)
///     # 0x00060 PL4_CR               
///               $TG_PL               PL4_CR            REG          
///                                    ###
///                                    * Plane 4 Crop Related registers
///                                    ###
///     @ 0x00068                      (P)
///     # 0x00068 PL5_CR               
///               $TG_PL               PL5_CR            REG          
///                                    ###
///                                    * Plane 5 Crop Related registers
///                                    ###
///     @ 0x00070                      (P)
///     # 0x00070 PL6_CR               
///               $TG_PL               PL6_CR            REG          
///                                    ###
///                                    * Plane 6 Crop Related registers
///                                    ###
///     @ 0x00078                      (P)
///     # 0x00078 PL7_CR               
///               $TG_PL               PL7_CR            REG          
///                                    ###
///                                    * Plane 7 Crop Related registers
///                                    ###
///     @ 0x00080                      (P)
///     # 0x00080 PL8_CR               
///               $TG_PL               PL8_CR            REG          
///                                    ###
///                                    * Plane 8 Crop Related registers
///                                    ###
///     @ 0x00088                      (P)
///     # 0x00088 PL_FLD               
///               $TG_PL               PL_FLD            REG          
///                                    ###
///                                    * Field Related registers
///                                    ###
///     @ 0x00090                      (P)
///     # 0x00090 TG_PRG               
///               $TG_PRG              TG_PRG            REG          
///                                    ###
///                                    * Timing Generator programming registers
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     180B, bits:    1090b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_BETG
#define h_BETG (){}

    #define     RA_BETG_PL0                                    0x0000
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL1                                    0x0008
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL2                                    0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL3                                    0x0018
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL4                                    0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL5                                    0x0028
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL6                                    0x0030
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL7                                    0x0038
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL8                                    0x0040
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL1_CR                                 0x0048
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL2_CR                                 0x0050
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL3_CR                                 0x0058
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL4_CR                                 0x0060
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL5_CR                                 0x0068
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL6_CR                                 0x0070
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL7_CR                                 0x0078
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL8_CR                                 0x0080
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_PL_FLD                                 0x0088
    ///////////////////////////////////////////////////////////
    #define     RA_BETG_TG_PRG                                 0x0090
    ///////////////////////////////////////////////////////////

    typedef struct SIE_BETG {
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL0;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL1;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL2;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL3;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL4;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL5;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL6;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL7;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL8;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL1_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL2_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL3_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL4_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL5_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL6_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL7_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL8_CR;
    ///////////////////////////////////////////////////////////
              SIE_TG_PL                                        ie_PL_FLD;
    ///////////////////////////////////////////////////////////
              SIE_TG_PRG                                       ie_TG_PRG;
    ///////////////////////////////////////////////////////////
    } SIE_BETG;

    ///////////////////////////////////////////////////////////
     SIGN32 BETG_drvrd(SIE_BETG *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 BETG_drvwr(SIE_BETG *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void BETG_reset(SIE_BETG *p);
     SIGN32 BETG_cmp  (SIE_BETG *p, SIE_BETG *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define BETG_check(p,pie,pfx,hLOG) BETG_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define BETG_print(p,    pfx,hLOG) BETG_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: BETG
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE UPS8                    biu              (4,4)
///     ###
///     * Register specification of interface UPS8
///     * Defines the size of the ups8
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 2  ups_en                    0x3
///                                    ###
///                                    * en[0]
///                                    * 0: Disables 422 to 444 upsampler
///                                    * 1: Enables 422 to 444 upsampler
///                                    * en[1]:
///                                    * 0: disables adaptive sampling
///                                    * 1: enables adaptive sampling
///                                    ###
///               %unsigned 2  rsv                       0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 1  dpwr                      0x0
///                                    ###
///                                    * Internal dynamic power control.
///                                    * 1: enables internal dynamic clock gating.
///                                    * 0: disables internal dynamic clock gating.
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %signmagn 13 ups_c0                    80
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C0.
///                                    ###
///               %signmagn 13 ups_c1                    0
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C1.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %signmagn 13 ups_c2                    4400
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C2.
///                                    ###
///               %signmagn 13 ups_c3                    0
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C3.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %signmagn 13 ups_c4                    1248
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C4.
///                                    ###
///               %signmagn 13 ups_c5                    2048
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C5. Centre tap
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %signmagn 13 ups_c6                    1248
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C6.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 1  ups_yshift                0x0
///                                    ###
///                                    * 0: Disables yshift
///                                    * 1: Enables yshift
///                                    ###
///               %unsigned 1  ups_cshift                0x0
///                                    ###
///                                    * 0: Disables Cshift
///                                    * 1: Enables Cshift
///                                    ###
///               %unsigned 1  ups_cswap                 0x0
///                                    ###
///                                    * 0: Disables Cb and Cr swap
///                                    * 1: Enables Cb and Cr swap
///                                    ###
///               %unsigned 8  ups_yblank                0x0
///                                    ###
///                                    * Y value for blank pixel
///                                    ###
///               %unsigned 8  ups_cblank                0x80
///                                    ###
///                                    * C value for blank pixel
///                                    ###
///               %unsigned 1  ups_use_blank             0x1
///                                    ###
///                                    * C value for blank pixel
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 8  ups_y_th                  0x28
///                                    ###
///                                    * Luma edge threshold for adaptive ups
///                                    ###
///               %unsigned 8  ups_c_th                  0x28
///                                    ###
///                                    * Chroma edge threshold for adaptive ups
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0001C CFG7                 (P)
///               %signmagn 13 ups_7c0                   4132
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C0.
///                                    ###
///               %signmagn 13 ups_7c1                   9
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C1.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00020 CFG8                 (P)
///               %signmagn 13 ups_7c2                   1060
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C2.
///                                    ###
///               %signmagn 13 ups_7c3                   2030
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C3.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00024 CFG9                 (P)
///               %signmagn 13 ups_7c4                   1060
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C4.
///                                    * End of ups8 register group
///                                    ###
///               %%        19         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      40B, bits:     197b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_UPS8
#define h_UPS8 (){}

    #define     RA_UPS8_CFG0                                   0x0000

    #define     BA_UPS8_CFG0_ups_en                            0x0000
    #define     B16UPS8_CFG0_ups_en                            0x0000
    #define   LSb32UPS8_CFG0_ups_en                               0
    #define   LSb16UPS8_CFG0_ups_en                               0
    #define       bUPS8_CFG0_ups_en                            2
    #define   MSK32UPS8_CFG0_ups_en                               0x00000003

    #define     BA_UPS8_CFG0_rsv                               0x0000
    #define     B16UPS8_CFG0_rsv                               0x0000
    #define   LSb32UPS8_CFG0_rsv                                  2
    #define   LSb16UPS8_CFG0_rsv                                  2
    #define       bUPS8_CFG0_rsv                               2
    #define   MSK32UPS8_CFG0_rsv                                  0x0000000C

    #define     BA_UPS8_CFG0_dpwr                              0x0000
    #define     B16UPS8_CFG0_dpwr                              0x0000
    #define   LSb32UPS8_CFG0_dpwr                                 4
    #define   LSb16UPS8_CFG0_dpwr                                 4
    #define       bUPS8_CFG0_dpwr                              1
    #define   MSK32UPS8_CFG0_dpwr                                 0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_UPS8_CFG1                                   0x0004

    #define     BA_UPS8_CFG1_ups_c0                            0x0004
    #define     B16UPS8_CFG1_ups_c0                            0x0004
    #define   LSb32UPS8_CFG1_ups_c0                               0
    #define   LSb16UPS8_CFG1_ups_c0                               0
    #define       bUPS8_CFG1_ups_c0                            13
    #define   MSK32UPS8_CFG1_ups_c0                               0x00001FFF

    #define     BA_UPS8_CFG1_ups_c1                            0x0005
    #define     B16UPS8_CFG1_ups_c1                            0x0004
    #define   LSb32UPS8_CFG1_ups_c1                               13
    #define   LSb16UPS8_CFG1_ups_c1                               13
    #define       bUPS8_CFG1_ups_c1                            13
    #define   MSK32UPS8_CFG1_ups_c1                               0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS8_CFG2                                   0x0008

    #define     BA_UPS8_CFG2_ups_c2                            0x0008
    #define     B16UPS8_CFG2_ups_c2                            0x0008
    #define   LSb32UPS8_CFG2_ups_c2                               0
    #define   LSb16UPS8_CFG2_ups_c2                               0
    #define       bUPS8_CFG2_ups_c2                            13
    #define   MSK32UPS8_CFG2_ups_c2                               0x00001FFF

    #define     BA_UPS8_CFG2_ups_c3                            0x0009
    #define     B16UPS8_CFG2_ups_c3                            0x0008
    #define   LSb32UPS8_CFG2_ups_c3                               13
    #define   LSb16UPS8_CFG2_ups_c3                               13
    #define       bUPS8_CFG2_ups_c3                            13
    #define   MSK32UPS8_CFG2_ups_c3                               0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS8_CFG3                                   0x000C

    #define     BA_UPS8_CFG3_ups_c4                            0x000C
    #define     B16UPS8_CFG3_ups_c4                            0x000C
    #define   LSb32UPS8_CFG3_ups_c4                               0
    #define   LSb16UPS8_CFG3_ups_c4                               0
    #define       bUPS8_CFG3_ups_c4                            13
    #define   MSK32UPS8_CFG3_ups_c4                               0x00001FFF

    #define     BA_UPS8_CFG3_ups_c5                            0x000D
    #define     B16UPS8_CFG3_ups_c5                            0x000C
    #define   LSb32UPS8_CFG3_ups_c5                               13
    #define   LSb16UPS8_CFG3_ups_c5                               13
    #define       bUPS8_CFG3_ups_c5                            13
    #define   MSK32UPS8_CFG3_ups_c5                               0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS8_CFG4                                   0x0010

    #define     BA_UPS8_CFG4_ups_c6                            0x0010
    #define     B16UPS8_CFG4_ups_c6                            0x0010
    #define   LSb32UPS8_CFG4_ups_c6                               0
    #define   LSb16UPS8_CFG4_ups_c6                               0
    #define       bUPS8_CFG4_ups_c6                            13
    #define   MSK32UPS8_CFG4_ups_c6                               0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_UPS8_CFG5                                   0x0014

    #define     BA_UPS8_CFG5_ups_yshift                        0x0014
    #define     B16UPS8_CFG5_ups_yshift                        0x0014
    #define   LSb32UPS8_CFG5_ups_yshift                           0
    #define   LSb16UPS8_CFG5_ups_yshift                           0
    #define       bUPS8_CFG5_ups_yshift                        1
    #define   MSK32UPS8_CFG5_ups_yshift                           0x00000001

    #define     BA_UPS8_CFG5_ups_cshift                        0x0014
    #define     B16UPS8_CFG5_ups_cshift                        0x0014
    #define   LSb32UPS8_CFG5_ups_cshift                           1
    #define   LSb16UPS8_CFG5_ups_cshift                           1
    #define       bUPS8_CFG5_ups_cshift                        1
    #define   MSK32UPS8_CFG5_ups_cshift                           0x00000002

    #define     BA_UPS8_CFG5_ups_cswap                         0x0014
    #define     B16UPS8_CFG5_ups_cswap                         0x0014
    #define   LSb32UPS8_CFG5_ups_cswap                            2
    #define   LSb16UPS8_CFG5_ups_cswap                            2
    #define       bUPS8_CFG5_ups_cswap                         1
    #define   MSK32UPS8_CFG5_ups_cswap                            0x00000004

    #define     BA_UPS8_CFG5_ups_yblank                        0x0014
    #define     B16UPS8_CFG5_ups_yblank                        0x0014
    #define   LSb32UPS8_CFG5_ups_yblank                           3
    #define   LSb16UPS8_CFG5_ups_yblank                           3
    #define       bUPS8_CFG5_ups_yblank                        8
    #define   MSK32UPS8_CFG5_ups_yblank                           0x000007F8

    #define     BA_UPS8_CFG5_ups_cblank                        0x0015
    #define     B16UPS8_CFG5_ups_cblank                        0x0014
    #define   LSb32UPS8_CFG5_ups_cblank                           11
    #define   LSb16UPS8_CFG5_ups_cblank                           11
    #define       bUPS8_CFG5_ups_cblank                        8
    #define   MSK32UPS8_CFG5_ups_cblank                           0x0007F800

    #define     BA_UPS8_CFG5_ups_use_blank                     0x0016
    #define     B16UPS8_CFG5_ups_use_blank                     0x0016
    #define   LSb32UPS8_CFG5_ups_use_blank                        19
    #define   LSb16UPS8_CFG5_ups_use_blank                        3
    #define       bUPS8_CFG5_ups_use_blank                     1
    #define   MSK32UPS8_CFG5_ups_use_blank                        0x00080000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS8_CFG6                                   0x0018

    #define     BA_UPS8_CFG6_ups_y_th                          0x0018
    #define     B16UPS8_CFG6_ups_y_th                          0x0018
    #define   LSb32UPS8_CFG6_ups_y_th                             0
    #define   LSb16UPS8_CFG6_ups_y_th                             0
    #define       bUPS8_CFG6_ups_y_th                          8
    #define   MSK32UPS8_CFG6_ups_y_th                             0x000000FF

    #define     BA_UPS8_CFG6_ups_c_th                          0x0019
    #define     B16UPS8_CFG6_ups_c_th                          0x0018
    #define   LSb32UPS8_CFG6_ups_c_th                             8
    #define   LSb16UPS8_CFG6_ups_c_th                             8
    #define       bUPS8_CFG6_ups_c_th                          8
    #define   MSK32UPS8_CFG6_ups_c_th                             0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_UPS8_CFG7                                   0x001C

    #define     BA_UPS8_CFG7_ups_7c0                           0x001C
    #define     B16UPS8_CFG7_ups_7c0                           0x001C
    #define   LSb32UPS8_CFG7_ups_7c0                              0
    #define   LSb16UPS8_CFG7_ups_7c0                              0
    #define       bUPS8_CFG7_ups_7c0                           13
    #define   MSK32UPS8_CFG7_ups_7c0                              0x00001FFF

    #define     BA_UPS8_CFG7_ups_7c1                           0x001D
    #define     B16UPS8_CFG7_ups_7c1                           0x001C
    #define   LSb32UPS8_CFG7_ups_7c1                              13
    #define   LSb16UPS8_CFG7_ups_7c1                              13
    #define       bUPS8_CFG7_ups_7c1                           13
    #define   MSK32UPS8_CFG7_ups_7c1                              0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS8_CFG8                                   0x0020

    #define     BA_UPS8_CFG8_ups_7c2                           0x0020
    #define     B16UPS8_CFG8_ups_7c2                           0x0020
    #define   LSb32UPS8_CFG8_ups_7c2                              0
    #define   LSb16UPS8_CFG8_ups_7c2                              0
    #define       bUPS8_CFG8_ups_7c2                           13
    #define   MSK32UPS8_CFG8_ups_7c2                              0x00001FFF

    #define     BA_UPS8_CFG8_ups_7c3                           0x0021
    #define     B16UPS8_CFG8_ups_7c3                           0x0020
    #define   LSb32UPS8_CFG8_ups_7c3                              13
    #define   LSb16UPS8_CFG8_ups_7c3                              13
    #define       bUPS8_CFG8_ups_7c3                           13
    #define   MSK32UPS8_CFG8_ups_7c3                              0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS8_CFG9                                   0x0024

    #define     BA_UPS8_CFG9_ups_7c4                           0x0024
    #define     B16UPS8_CFG9_ups_7c4                           0x0024
    #define   LSb32UPS8_CFG9_ups_7c4                              0
    #define   LSb16UPS8_CFG9_ups_7c4                              0
    #define       bUPS8_CFG9_ups_7c4                           13
    #define   MSK32UPS8_CFG9_ups_7c4                              0x00001FFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_UPS8 {
    ///////////////////////////////////////////////////////////
    #define   GET32UPS8_CFG0_ups_en(r32)                       _BFGET_(r32, 1, 0)
    #define   SET32UPS8_CFG0_ups_en(r32,v)                     _BFSET_(r32, 1, 0,v)
    #define   GET16UPS8_CFG0_ups_en(r16)                       _BFGET_(r16, 1, 0)
    #define   SET16UPS8_CFG0_ups_en(r16,v)                     _BFSET_(r16, 1, 0,v)

    #define   GET32UPS8_CFG0_rsv(r32)                          _BFGET_(r32, 3, 2)
    #define   SET32UPS8_CFG0_rsv(r32,v)                        _BFSET_(r32, 3, 2,v)
    #define   GET16UPS8_CFG0_rsv(r16)                          _BFGET_(r16, 3, 2)
    #define   SET16UPS8_CFG0_rsv(r16,v)                        _BFSET_(r16, 3, 2,v)

    #define   GET32UPS8_CFG0_dpwr(r32)                         _BFGET_(r32, 4, 4)
    #define   SET32UPS8_CFG0_dpwr(r32,v)                       _BFSET_(r32, 4, 4,v)
    #define   GET16UPS8_CFG0_dpwr(r16)                         _BFGET_(r16, 4, 4)
    #define   SET16UPS8_CFG0_dpwr(r16,v)                       _BFSET_(r16, 4, 4,v)

    #define     w32UPS8_CFG0                                   {\
            UNSG32 uCFG0_ups_en                                :  2;\
            UNSG32 uCFG0_rsv                                   :  2;\
            UNSG32 uCFG0_dpwr                                  :  1;\
            UNSG32 RSVDx0_b5                                   : 27;\
          }
    union { UNSG32 u32UPS8_CFG0;
            struct w32UPS8_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS8_CFG1_ups_c0(r32)                       _BFGET_(r32,12, 0)
    #define   SET32UPS8_CFG1_ups_c0(r32,v)                     _BFSET_(r32,12, 0,v)
    #define   GET16UPS8_CFG1_ups_c0(r16)                       _BFGET_(r16,12, 0)
    #define   SET16UPS8_CFG1_ups_c0(r16,v)                     _BFSET_(r16,12, 0,v)

    #define   GET32UPS8_CFG1_ups_c1(r32)                       _BFGET_(r32,25,13)
    #define   SET32UPS8_CFG1_ups_c1(r32,v)                     _BFSET_(r32,25,13,v)

    #define     w32UPS8_CFG1                                   {\
            UNSG32 mCFG1_ups_c0                                : 13;\
            UNSG32 mCFG1_ups_c1                                : 13;\
            UNSG32 RSVDx4_b26                                  :  6;\
          }
    union { UNSG32 u32UPS8_CFG1;
            struct w32UPS8_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS8_CFG2_ups_c2(r32)                       _BFGET_(r32,12, 0)
    #define   SET32UPS8_CFG2_ups_c2(r32,v)                     _BFSET_(r32,12, 0,v)
    #define   GET16UPS8_CFG2_ups_c2(r16)                       _BFGET_(r16,12, 0)
    #define   SET16UPS8_CFG2_ups_c2(r16,v)                     _BFSET_(r16,12, 0,v)

    #define   GET32UPS8_CFG2_ups_c3(r32)                       _BFGET_(r32,25,13)
    #define   SET32UPS8_CFG2_ups_c3(r32,v)                     _BFSET_(r32,25,13,v)

    #define     w32UPS8_CFG2                                   {\
            UNSG32 mCFG2_ups_c2                                : 13;\
            UNSG32 mCFG2_ups_c3                                : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32UPS8_CFG2;
            struct w32UPS8_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS8_CFG3_ups_c4(r32)                       _BFGET_(r32,12, 0)
    #define   SET32UPS8_CFG3_ups_c4(r32,v)                     _BFSET_(r32,12, 0,v)
    #define   GET16UPS8_CFG3_ups_c4(r16)                       _BFGET_(r16,12, 0)
    #define   SET16UPS8_CFG3_ups_c4(r16,v)                     _BFSET_(r16,12, 0,v)

    #define   GET32UPS8_CFG3_ups_c5(r32)                       _BFGET_(r32,25,13)
    #define   SET32UPS8_CFG3_ups_c5(r32,v)                     _BFSET_(r32,25,13,v)

    #define     w32UPS8_CFG3                                   {\
            UNSG32 mCFG3_ups_c4                                : 13;\
            UNSG32 mCFG3_ups_c5                                : 13;\
            UNSG32 RSVDxC_b26                                  :  6;\
          }
    union { UNSG32 u32UPS8_CFG3;
            struct w32UPS8_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS8_CFG4_ups_c6(r32)                       _BFGET_(r32,12, 0)
    #define   SET32UPS8_CFG4_ups_c6(r32,v)                     _BFSET_(r32,12, 0,v)
    #define   GET16UPS8_CFG4_ups_c6(r16)                       _BFGET_(r16,12, 0)
    #define   SET16UPS8_CFG4_ups_c6(r16,v)                     _BFSET_(r16,12, 0,v)

    #define     w32UPS8_CFG4                                   {\
            UNSG32 mCFG4_ups_c6                                : 13;\
            UNSG32 RSVDx10_b13                                 : 19;\
          }
    union { UNSG32 u32UPS8_CFG4;
            struct w32UPS8_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS8_CFG5_ups_yshift(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32UPS8_CFG5_ups_yshift(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16UPS8_CFG5_ups_yshift(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16UPS8_CFG5_ups_yshift(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32UPS8_CFG5_ups_cshift(r32)                   _BFGET_(r32, 1, 1)
    #define   SET32UPS8_CFG5_ups_cshift(r32,v)                 _BFSET_(r32, 1, 1,v)
    #define   GET16UPS8_CFG5_ups_cshift(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16UPS8_CFG5_ups_cshift(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define   GET32UPS8_CFG5_ups_cswap(r32)                    _BFGET_(r32, 2, 2)
    #define   SET32UPS8_CFG5_ups_cswap(r32,v)                  _BFSET_(r32, 2, 2,v)
    #define   GET16UPS8_CFG5_ups_cswap(r16)                    _BFGET_(r16, 2, 2)
    #define   SET16UPS8_CFG5_ups_cswap(r16,v)                  _BFSET_(r16, 2, 2,v)

    #define   GET32UPS8_CFG5_ups_yblank(r32)                   _BFGET_(r32,10, 3)
    #define   SET32UPS8_CFG5_ups_yblank(r32,v)                 _BFSET_(r32,10, 3,v)
    #define   GET16UPS8_CFG5_ups_yblank(r16)                   _BFGET_(r16,10, 3)
    #define   SET16UPS8_CFG5_ups_yblank(r16,v)                 _BFSET_(r16,10, 3,v)

    #define   GET32UPS8_CFG5_ups_cblank(r32)                   _BFGET_(r32,18,11)
    #define   SET32UPS8_CFG5_ups_cblank(r32,v)                 _BFSET_(r32,18,11,v)

    #define   GET32UPS8_CFG5_ups_use_blank(r32)                _BFGET_(r32,19,19)
    #define   SET32UPS8_CFG5_ups_use_blank(r32,v)              _BFSET_(r32,19,19,v)
    #define   GET16UPS8_CFG5_ups_use_blank(r16)                _BFGET_(r16, 3, 3)
    #define   SET16UPS8_CFG5_ups_use_blank(r16,v)              _BFSET_(r16, 3, 3,v)

    #define     w32UPS8_CFG5                                   {\
            UNSG32 uCFG5_ups_yshift                            :  1;\
            UNSG32 uCFG5_ups_cshift                            :  1;\
            UNSG32 uCFG5_ups_cswap                             :  1;\
            UNSG32 uCFG5_ups_yblank                            :  8;\
            UNSG32 uCFG5_ups_cblank                            :  8;\
            UNSG32 uCFG5_ups_use_blank                         :  1;\
            UNSG32 RSVDx14_b20                                 : 12;\
          }
    union { UNSG32 u32UPS8_CFG5;
            struct w32UPS8_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS8_CFG6_ups_y_th(r32)                     _BFGET_(r32, 7, 0)
    #define   SET32UPS8_CFG6_ups_y_th(r32,v)                   _BFSET_(r32, 7, 0,v)
    #define   GET16UPS8_CFG6_ups_y_th(r16)                     _BFGET_(r16, 7, 0)
    #define   SET16UPS8_CFG6_ups_y_th(r16,v)                   _BFSET_(r16, 7, 0,v)

    #define   GET32UPS8_CFG6_ups_c_th(r32)                     _BFGET_(r32,15, 8)
    #define   SET32UPS8_CFG6_ups_c_th(r32,v)                   _BFSET_(r32,15, 8,v)
    #define   GET16UPS8_CFG6_ups_c_th(r16)                     _BFGET_(r16,15, 8)
    #define   SET16UPS8_CFG6_ups_c_th(r16,v)                   _BFSET_(r16,15, 8,v)

    #define     w32UPS8_CFG6                                   {\
            UNSG32 uCFG6_ups_y_th                              :  8;\
            UNSG32 uCFG6_ups_c_th                              :  8;\
            UNSG32 RSVDx18_b16                                 : 16;\
          }
    union { UNSG32 u32UPS8_CFG6;
            struct w32UPS8_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS8_CFG7_ups_7c0(r32)                      _BFGET_(r32,12, 0)
    #define   SET32UPS8_CFG7_ups_7c0(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16UPS8_CFG7_ups_7c0(r16)                      _BFGET_(r16,12, 0)
    #define   SET16UPS8_CFG7_ups_7c0(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32UPS8_CFG7_ups_7c1(r32)                      _BFGET_(r32,25,13)
    #define   SET32UPS8_CFG7_ups_7c1(r32,v)                    _BFSET_(r32,25,13,v)

    #define     w32UPS8_CFG7                                   {\
            UNSG32 mCFG7_ups_7c0                               : 13;\
            UNSG32 mCFG7_ups_7c1                               : 13;\
            UNSG32 RSVDx1C_b26                                 :  6;\
          }
    union { UNSG32 u32UPS8_CFG7;
            struct w32UPS8_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS8_CFG8_ups_7c2(r32)                      _BFGET_(r32,12, 0)
    #define   SET32UPS8_CFG8_ups_7c2(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16UPS8_CFG8_ups_7c2(r16)                      _BFGET_(r16,12, 0)
    #define   SET16UPS8_CFG8_ups_7c2(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32UPS8_CFG8_ups_7c3(r32)                      _BFGET_(r32,25,13)
    #define   SET32UPS8_CFG8_ups_7c3(r32,v)                    _BFSET_(r32,25,13,v)

    #define     w32UPS8_CFG8                                   {\
            UNSG32 mCFG8_ups_7c2                               : 13;\
            UNSG32 mCFG8_ups_7c3                               : 13;\
            UNSG32 RSVDx20_b26                                 :  6;\
          }
    union { UNSG32 u32UPS8_CFG8;
            struct w32UPS8_CFG8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS8_CFG9_ups_7c4(r32)                      _BFGET_(r32,12, 0)
    #define   SET32UPS8_CFG9_ups_7c4(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16UPS8_CFG9_ups_7c4(r16)                      _BFGET_(r16,12, 0)
    #define   SET16UPS8_CFG9_ups_7c4(r16,v)                    _BFSET_(r16,12, 0,v)

    #define     w32UPS8_CFG9                                   {\
            UNSG32 mCFG9_ups_7c4                               : 13;\
            UNSG32 RSVDx24_b13                                 : 19;\
          }
    union { UNSG32 u32UPS8_CFG9;
            struct w32UPS8_CFG9;
          };
    ///////////////////////////////////////////////////////////
    } SIE_UPS8;

    typedef union  T32UPS8_CFG0
          { UNSG32 u32;
            struct w32UPS8_CFG0;
                 } T32UPS8_CFG0;
    typedef union  T32UPS8_CFG1
          { UNSG32 u32;
            struct w32UPS8_CFG1;
                 } T32UPS8_CFG1;
    typedef union  T32UPS8_CFG2
          { UNSG32 u32;
            struct w32UPS8_CFG2;
                 } T32UPS8_CFG2;
    typedef union  T32UPS8_CFG3
          { UNSG32 u32;
            struct w32UPS8_CFG3;
                 } T32UPS8_CFG3;
    typedef union  T32UPS8_CFG4
          { UNSG32 u32;
            struct w32UPS8_CFG4;
                 } T32UPS8_CFG4;
    typedef union  T32UPS8_CFG5
          { UNSG32 u32;
            struct w32UPS8_CFG5;
                 } T32UPS8_CFG5;
    typedef union  T32UPS8_CFG6
          { UNSG32 u32;
            struct w32UPS8_CFG6;
                 } T32UPS8_CFG6;
    typedef union  T32UPS8_CFG7
          { UNSG32 u32;
            struct w32UPS8_CFG7;
                 } T32UPS8_CFG7;
    typedef union  T32UPS8_CFG8
          { UNSG32 u32;
            struct w32UPS8_CFG8;
                 } T32UPS8_CFG8;
    typedef union  T32UPS8_CFG9
          { UNSG32 u32;
            struct w32UPS8_CFG9;
                 } T32UPS8_CFG9;
    ///////////////////////////////////////////////////////////

    typedef union  TUPS8_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32UPS8_CFG0;
                   };
                 } TUPS8_CFG0;
    typedef union  TUPS8_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32UPS8_CFG1;
                   };
                 } TUPS8_CFG1;
    typedef union  TUPS8_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32UPS8_CFG2;
                   };
                 } TUPS8_CFG2;
    typedef union  TUPS8_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32UPS8_CFG3;
                   };
                 } TUPS8_CFG3;
    typedef union  TUPS8_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32UPS8_CFG4;
                   };
                 } TUPS8_CFG4;
    typedef union  TUPS8_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32UPS8_CFG5;
                   };
                 } TUPS8_CFG5;
    typedef union  TUPS8_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32UPS8_CFG6;
                   };
                 } TUPS8_CFG6;
    typedef union  TUPS8_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32UPS8_CFG7;
                   };
                 } TUPS8_CFG7;
    typedef union  TUPS8_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32UPS8_CFG8;
                   };
                 } TUPS8_CFG8;
    typedef union  TUPS8_CFG9
          { UNSG32 u32[1];
            struct {
            struct w32UPS8_CFG9;
                   };
                 } TUPS8_CFG9;

    ///////////////////////////////////////////////////////////
     SIGN32 UPS8_drvrd(SIE_UPS8 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 UPS8_drvwr(SIE_UPS8 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void UPS8_reset(SIE_UPS8 *p);
     SIGN32 UPS8_cmp  (SIE_UPS8 *p, SIE_UPS8 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define UPS8_check(p,pie,pfx,hLOG) UPS8_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define UPS8_print(p,    pfx,hLOG) UPS8_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: UPS8
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE UPS10                   biu              (4,4)
///     ###
///     * Register specification of interface UPS10
///     * Defines the size of the ups10
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 2  ups_en                    0x3
///                                    ###
///                                    * en[0]
///                                    * 0: Disables 422 to 444 upsampler
///                                    * 1: Enables 422 to 444 upsampler
///                                    * en[1]:
///                                    * 0: disables adaptive sampling
///                                    * 1: enables adaptive sampling
///                                    ###
///               %unsigned 2  rsv                       0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 1  dpwr                      0x0
///                                    ###
///                                    * Internal dynamic power control.
///                                    * 1: enables internal dynamic clock gating.
///                                    * 0: disables internal dynamic clock gating.
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %signmagn 13 ups_c0                    80
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C0.
///                                    ###
///               %signmagn 13 ups_c1                    0
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C1.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %signmagn 13 ups_c2                    4400
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C2.
///                                    ###
///               %signmagn 13 ups_c3                    0
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C3.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %signmagn 13 ups_c4                    1248
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C4.
///                                    ###
///               %signmagn 13 ups_c5                    2048
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C5. Centre tap
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %signmagn 13 ups_c6                    1248
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C6.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 1  ups_yshift                0x0
///                                    ###
///                                    * 0: Disables yshift
///                                    * 1: Enables yshift
///                                    ###
///               %unsigned 1  ups_cshift                0x0
///                                    ###
///                                    * 0: Disables Cshift
///                                    * 1: Enables Cshift
///                                    ###
///               %unsigned 1  ups_cswap                 0x0
///                                    ###
///                                    * 0: Disables Cb and Cr swap
///                                    * 1: Enables Cb and Cr swap
///                                    ###
///               %unsigned 10 ups_yblank                0x0
///                                    ###
///                                    * Y value for blank pixel
///                                    ###
///               %unsigned 10 ups_cblank                0x200
///                                    ###
///                                    * C value for blank pixel
///                                    ###
///               %unsigned 1  ups_use_blank             0x1
///                                    ###
///                                    * C value for blank pixel
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 8  ups_y_th                  0x28
///                                    ###
///                                    * Luma edge threshold for adaptive ups
///                                    ###
///               %unsigned 8  ups_c_th                  0x28
///                                    ###
///                                    * Chroma edge threshold for adaptive ups
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0001C CFG7                 (P)
///               %signmagn 13 ups_7c0                   4132
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C0.
///                                    ###
///               %signmagn 13 ups_7c1                   9
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C1.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00020 CFG8                 (P)
///               %signmagn 13 ups_7c2                   1060
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C2.
///                                    ###
///               %signmagn 13 ups_7c3                   2030
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C3.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00024 CFG9                 (P)
///               %signmagn 13 ups_7c4                   1060
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C4.
///                                    * End of ups10 register group
///                                    ###
///               %%        19         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      40B, bits:     201b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_UPS10
#define h_UPS10 (){}

    #define     RA_UPS10_CFG0                                  0x0000

    #define     BA_UPS10_CFG0_ups_en                           0x0000
    #define     B16UPS10_CFG0_ups_en                           0x0000
    #define   LSb32UPS10_CFG0_ups_en                              0
    #define   LSb16UPS10_CFG0_ups_en                              0
    #define       bUPS10_CFG0_ups_en                           2
    #define   MSK32UPS10_CFG0_ups_en                              0x00000003

    #define     BA_UPS10_CFG0_rsv                              0x0000
    #define     B16UPS10_CFG0_rsv                              0x0000
    #define   LSb32UPS10_CFG0_rsv                                 2
    #define   LSb16UPS10_CFG0_rsv                                 2
    #define       bUPS10_CFG0_rsv                              2
    #define   MSK32UPS10_CFG0_rsv                                 0x0000000C

    #define     BA_UPS10_CFG0_dpwr                             0x0000
    #define     B16UPS10_CFG0_dpwr                             0x0000
    #define   LSb32UPS10_CFG0_dpwr                                4
    #define   LSb16UPS10_CFG0_dpwr                                4
    #define       bUPS10_CFG0_dpwr                             1
    #define   MSK32UPS10_CFG0_dpwr                                0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_UPS10_CFG1                                  0x0004

    #define     BA_UPS10_CFG1_ups_c0                           0x0004
    #define     B16UPS10_CFG1_ups_c0                           0x0004
    #define   LSb32UPS10_CFG1_ups_c0                              0
    #define   LSb16UPS10_CFG1_ups_c0                              0
    #define       bUPS10_CFG1_ups_c0                           13
    #define   MSK32UPS10_CFG1_ups_c0                              0x00001FFF

    #define     BA_UPS10_CFG1_ups_c1                           0x0005
    #define     B16UPS10_CFG1_ups_c1                           0x0004
    #define   LSb32UPS10_CFG1_ups_c1                              13
    #define   LSb16UPS10_CFG1_ups_c1                              13
    #define       bUPS10_CFG1_ups_c1                           13
    #define   MSK32UPS10_CFG1_ups_c1                              0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS10_CFG2                                  0x0008

    #define     BA_UPS10_CFG2_ups_c2                           0x0008
    #define     B16UPS10_CFG2_ups_c2                           0x0008
    #define   LSb32UPS10_CFG2_ups_c2                              0
    #define   LSb16UPS10_CFG2_ups_c2                              0
    #define       bUPS10_CFG2_ups_c2                           13
    #define   MSK32UPS10_CFG2_ups_c2                              0x00001FFF

    #define     BA_UPS10_CFG2_ups_c3                           0x0009
    #define     B16UPS10_CFG2_ups_c3                           0x0008
    #define   LSb32UPS10_CFG2_ups_c3                              13
    #define   LSb16UPS10_CFG2_ups_c3                              13
    #define       bUPS10_CFG2_ups_c3                           13
    #define   MSK32UPS10_CFG2_ups_c3                              0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS10_CFG3                                  0x000C

    #define     BA_UPS10_CFG3_ups_c4                           0x000C
    #define     B16UPS10_CFG3_ups_c4                           0x000C
    #define   LSb32UPS10_CFG3_ups_c4                              0
    #define   LSb16UPS10_CFG3_ups_c4                              0
    #define       bUPS10_CFG3_ups_c4                           13
    #define   MSK32UPS10_CFG3_ups_c4                              0x00001FFF

    #define     BA_UPS10_CFG3_ups_c5                           0x000D
    #define     B16UPS10_CFG3_ups_c5                           0x000C
    #define   LSb32UPS10_CFG3_ups_c5                              13
    #define   LSb16UPS10_CFG3_ups_c5                              13
    #define       bUPS10_CFG3_ups_c5                           13
    #define   MSK32UPS10_CFG3_ups_c5                              0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS10_CFG4                                  0x0010

    #define     BA_UPS10_CFG4_ups_c6                           0x0010
    #define     B16UPS10_CFG4_ups_c6                           0x0010
    #define   LSb32UPS10_CFG4_ups_c6                              0
    #define   LSb16UPS10_CFG4_ups_c6                              0
    #define       bUPS10_CFG4_ups_c6                           13
    #define   MSK32UPS10_CFG4_ups_c6                              0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_UPS10_CFG5                                  0x0014

    #define     BA_UPS10_CFG5_ups_yshift                       0x0014
    #define     B16UPS10_CFG5_ups_yshift                       0x0014
    #define   LSb32UPS10_CFG5_ups_yshift                          0
    #define   LSb16UPS10_CFG5_ups_yshift                          0
    #define       bUPS10_CFG5_ups_yshift                       1
    #define   MSK32UPS10_CFG5_ups_yshift                          0x00000001

    #define     BA_UPS10_CFG5_ups_cshift                       0x0014
    #define     B16UPS10_CFG5_ups_cshift                       0x0014
    #define   LSb32UPS10_CFG5_ups_cshift                          1
    #define   LSb16UPS10_CFG5_ups_cshift                          1
    #define       bUPS10_CFG5_ups_cshift                       1
    #define   MSK32UPS10_CFG5_ups_cshift                          0x00000002

    #define     BA_UPS10_CFG5_ups_cswap                        0x0014
    #define     B16UPS10_CFG5_ups_cswap                        0x0014
    #define   LSb32UPS10_CFG5_ups_cswap                           2
    #define   LSb16UPS10_CFG5_ups_cswap                           2
    #define       bUPS10_CFG5_ups_cswap                        1
    #define   MSK32UPS10_CFG5_ups_cswap                           0x00000004

    #define     BA_UPS10_CFG5_ups_yblank                       0x0014
    #define     B16UPS10_CFG5_ups_yblank                       0x0014
    #define   LSb32UPS10_CFG5_ups_yblank                          3
    #define   LSb16UPS10_CFG5_ups_yblank                          3
    #define       bUPS10_CFG5_ups_yblank                       10
    #define   MSK32UPS10_CFG5_ups_yblank                          0x00001FF8

    #define     BA_UPS10_CFG5_ups_cblank                       0x0015
    #define     B16UPS10_CFG5_ups_cblank                       0x0014
    #define   LSb32UPS10_CFG5_ups_cblank                          13
    #define   LSb16UPS10_CFG5_ups_cblank                          13
    #define       bUPS10_CFG5_ups_cblank                       10
    #define   MSK32UPS10_CFG5_ups_cblank                          0x007FE000

    #define     BA_UPS10_CFG5_ups_use_blank                    0x0016
    #define     B16UPS10_CFG5_ups_use_blank                    0x0016
    #define   LSb32UPS10_CFG5_ups_use_blank                       23
    #define   LSb16UPS10_CFG5_ups_use_blank                       7
    #define       bUPS10_CFG5_ups_use_blank                    1
    #define   MSK32UPS10_CFG5_ups_use_blank                       0x00800000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS10_CFG6                                  0x0018

    #define     BA_UPS10_CFG6_ups_y_th                         0x0018
    #define     B16UPS10_CFG6_ups_y_th                         0x0018
    #define   LSb32UPS10_CFG6_ups_y_th                            0
    #define   LSb16UPS10_CFG6_ups_y_th                            0
    #define       bUPS10_CFG6_ups_y_th                         8
    #define   MSK32UPS10_CFG6_ups_y_th                            0x000000FF

    #define     BA_UPS10_CFG6_ups_c_th                         0x0019
    #define     B16UPS10_CFG6_ups_c_th                         0x0018
    #define   LSb32UPS10_CFG6_ups_c_th                            8
    #define   LSb16UPS10_CFG6_ups_c_th                            8
    #define       bUPS10_CFG6_ups_c_th                         8
    #define   MSK32UPS10_CFG6_ups_c_th                            0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_UPS10_CFG7                                  0x001C

    #define     BA_UPS10_CFG7_ups_7c0                          0x001C
    #define     B16UPS10_CFG7_ups_7c0                          0x001C
    #define   LSb32UPS10_CFG7_ups_7c0                             0
    #define   LSb16UPS10_CFG7_ups_7c0                             0
    #define       bUPS10_CFG7_ups_7c0                          13
    #define   MSK32UPS10_CFG7_ups_7c0                             0x00001FFF

    #define     BA_UPS10_CFG7_ups_7c1                          0x001D
    #define     B16UPS10_CFG7_ups_7c1                          0x001C
    #define   LSb32UPS10_CFG7_ups_7c1                             13
    #define   LSb16UPS10_CFG7_ups_7c1                             13
    #define       bUPS10_CFG7_ups_7c1                          13
    #define   MSK32UPS10_CFG7_ups_7c1                             0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS10_CFG8                                  0x0020

    #define     BA_UPS10_CFG8_ups_7c2                          0x0020
    #define     B16UPS10_CFG8_ups_7c2                          0x0020
    #define   LSb32UPS10_CFG8_ups_7c2                             0
    #define   LSb16UPS10_CFG8_ups_7c2                             0
    #define       bUPS10_CFG8_ups_7c2                          13
    #define   MSK32UPS10_CFG8_ups_7c2                             0x00001FFF

    #define     BA_UPS10_CFG8_ups_7c3                          0x0021
    #define     B16UPS10_CFG8_ups_7c3                          0x0020
    #define   LSb32UPS10_CFG8_ups_7c3                             13
    #define   LSb16UPS10_CFG8_ups_7c3                             13
    #define       bUPS10_CFG8_ups_7c3                          13
    #define   MSK32UPS10_CFG8_ups_7c3                             0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS10_CFG9                                  0x0024

    #define     BA_UPS10_CFG9_ups_7c4                          0x0024
    #define     B16UPS10_CFG9_ups_7c4                          0x0024
    #define   LSb32UPS10_CFG9_ups_7c4                             0
    #define   LSb16UPS10_CFG9_ups_7c4                             0
    #define       bUPS10_CFG9_ups_7c4                          13
    #define   MSK32UPS10_CFG9_ups_7c4                             0x00001FFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_UPS10 {
    ///////////////////////////////////////////////////////////
    #define   GET32UPS10_CFG0_ups_en(r32)                      _BFGET_(r32, 1, 0)
    #define   SET32UPS10_CFG0_ups_en(r32,v)                    _BFSET_(r32, 1, 0,v)
    #define   GET16UPS10_CFG0_ups_en(r16)                      _BFGET_(r16, 1, 0)
    #define   SET16UPS10_CFG0_ups_en(r16,v)                    _BFSET_(r16, 1, 0,v)

    #define   GET32UPS10_CFG0_rsv(r32)                         _BFGET_(r32, 3, 2)
    #define   SET32UPS10_CFG0_rsv(r32,v)                       _BFSET_(r32, 3, 2,v)
    #define   GET16UPS10_CFG0_rsv(r16)                         _BFGET_(r16, 3, 2)
    #define   SET16UPS10_CFG0_rsv(r16,v)                       _BFSET_(r16, 3, 2,v)

    #define   GET32UPS10_CFG0_dpwr(r32)                        _BFGET_(r32, 4, 4)
    #define   SET32UPS10_CFG0_dpwr(r32,v)                      _BFSET_(r32, 4, 4,v)
    #define   GET16UPS10_CFG0_dpwr(r16)                        _BFGET_(r16, 4, 4)
    #define   SET16UPS10_CFG0_dpwr(r16,v)                      _BFSET_(r16, 4, 4,v)

    #define     w32UPS10_CFG0                                  {\
            UNSG32 uCFG0_ups_en                                :  2;\
            UNSG32 uCFG0_rsv                                   :  2;\
            UNSG32 uCFG0_dpwr                                  :  1;\
            UNSG32 RSVDx0_b5                                   : 27;\
          }
    union { UNSG32 u32UPS10_CFG0;
            struct w32UPS10_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS10_CFG1_ups_c0(r32)                      _BFGET_(r32,12, 0)
    #define   SET32UPS10_CFG1_ups_c0(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16UPS10_CFG1_ups_c0(r16)                      _BFGET_(r16,12, 0)
    #define   SET16UPS10_CFG1_ups_c0(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32UPS10_CFG1_ups_c1(r32)                      _BFGET_(r32,25,13)
    #define   SET32UPS10_CFG1_ups_c1(r32,v)                    _BFSET_(r32,25,13,v)

    #define     w32UPS10_CFG1                                  {\
            UNSG32 mCFG1_ups_c0                                : 13;\
            UNSG32 mCFG1_ups_c1                                : 13;\
            UNSG32 RSVDx4_b26                                  :  6;\
          }
    union { UNSG32 u32UPS10_CFG1;
            struct w32UPS10_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS10_CFG2_ups_c2(r32)                      _BFGET_(r32,12, 0)
    #define   SET32UPS10_CFG2_ups_c2(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16UPS10_CFG2_ups_c2(r16)                      _BFGET_(r16,12, 0)
    #define   SET16UPS10_CFG2_ups_c2(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32UPS10_CFG2_ups_c3(r32)                      _BFGET_(r32,25,13)
    #define   SET32UPS10_CFG2_ups_c3(r32,v)                    _BFSET_(r32,25,13,v)

    #define     w32UPS10_CFG2                                  {\
            UNSG32 mCFG2_ups_c2                                : 13;\
            UNSG32 mCFG2_ups_c3                                : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32UPS10_CFG2;
            struct w32UPS10_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS10_CFG3_ups_c4(r32)                      _BFGET_(r32,12, 0)
    #define   SET32UPS10_CFG3_ups_c4(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16UPS10_CFG3_ups_c4(r16)                      _BFGET_(r16,12, 0)
    #define   SET16UPS10_CFG3_ups_c4(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32UPS10_CFG3_ups_c5(r32)                      _BFGET_(r32,25,13)
    #define   SET32UPS10_CFG3_ups_c5(r32,v)                    _BFSET_(r32,25,13,v)

    #define     w32UPS10_CFG3                                  {\
            UNSG32 mCFG3_ups_c4                                : 13;\
            UNSG32 mCFG3_ups_c5                                : 13;\
            UNSG32 RSVDxC_b26                                  :  6;\
          }
    union { UNSG32 u32UPS10_CFG3;
            struct w32UPS10_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS10_CFG4_ups_c6(r32)                      _BFGET_(r32,12, 0)
    #define   SET32UPS10_CFG4_ups_c6(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16UPS10_CFG4_ups_c6(r16)                      _BFGET_(r16,12, 0)
    #define   SET16UPS10_CFG4_ups_c6(r16,v)                    _BFSET_(r16,12, 0,v)

    #define     w32UPS10_CFG4                                  {\
            UNSG32 mCFG4_ups_c6                                : 13;\
            UNSG32 RSVDx10_b13                                 : 19;\
          }
    union { UNSG32 u32UPS10_CFG4;
            struct w32UPS10_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS10_CFG5_ups_yshift(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32UPS10_CFG5_ups_yshift(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16UPS10_CFG5_ups_yshift(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16UPS10_CFG5_ups_yshift(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32UPS10_CFG5_ups_cshift(r32)                  _BFGET_(r32, 1, 1)
    #define   SET32UPS10_CFG5_ups_cshift(r32,v)                _BFSET_(r32, 1, 1,v)
    #define   GET16UPS10_CFG5_ups_cshift(r16)                  _BFGET_(r16, 1, 1)
    #define   SET16UPS10_CFG5_ups_cshift(r16,v)                _BFSET_(r16, 1, 1,v)

    #define   GET32UPS10_CFG5_ups_cswap(r32)                   _BFGET_(r32, 2, 2)
    #define   SET32UPS10_CFG5_ups_cswap(r32,v)                 _BFSET_(r32, 2, 2,v)
    #define   GET16UPS10_CFG5_ups_cswap(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16UPS10_CFG5_ups_cswap(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define   GET32UPS10_CFG5_ups_yblank(r32)                  _BFGET_(r32,12, 3)
    #define   SET32UPS10_CFG5_ups_yblank(r32,v)                _BFSET_(r32,12, 3,v)
    #define   GET16UPS10_CFG5_ups_yblank(r16)                  _BFGET_(r16,12, 3)
    #define   SET16UPS10_CFG5_ups_yblank(r16,v)                _BFSET_(r16,12, 3,v)

    #define   GET32UPS10_CFG5_ups_cblank(r32)                  _BFGET_(r32,22,13)
    #define   SET32UPS10_CFG5_ups_cblank(r32,v)                _BFSET_(r32,22,13,v)

    #define   GET32UPS10_CFG5_ups_use_blank(r32)               _BFGET_(r32,23,23)
    #define   SET32UPS10_CFG5_ups_use_blank(r32,v)             _BFSET_(r32,23,23,v)
    #define   GET16UPS10_CFG5_ups_use_blank(r16)               _BFGET_(r16, 7, 7)
    #define   SET16UPS10_CFG5_ups_use_blank(r16,v)             _BFSET_(r16, 7, 7,v)

    #define     w32UPS10_CFG5                                  {\
            UNSG32 uCFG5_ups_yshift                            :  1;\
            UNSG32 uCFG5_ups_cshift                            :  1;\
            UNSG32 uCFG5_ups_cswap                             :  1;\
            UNSG32 uCFG5_ups_yblank                            : 10;\
            UNSG32 uCFG5_ups_cblank                            : 10;\
            UNSG32 uCFG5_ups_use_blank                         :  1;\
            UNSG32 RSVDx14_b24                                 :  8;\
          }
    union { UNSG32 u32UPS10_CFG5;
            struct w32UPS10_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS10_CFG6_ups_y_th(r32)                    _BFGET_(r32, 7, 0)
    #define   SET32UPS10_CFG6_ups_y_th(r32,v)                  _BFSET_(r32, 7, 0,v)
    #define   GET16UPS10_CFG6_ups_y_th(r16)                    _BFGET_(r16, 7, 0)
    #define   SET16UPS10_CFG6_ups_y_th(r16,v)                  _BFSET_(r16, 7, 0,v)

    #define   GET32UPS10_CFG6_ups_c_th(r32)                    _BFGET_(r32,15, 8)
    #define   SET32UPS10_CFG6_ups_c_th(r32,v)                  _BFSET_(r32,15, 8,v)
    #define   GET16UPS10_CFG6_ups_c_th(r16)                    _BFGET_(r16,15, 8)
    #define   SET16UPS10_CFG6_ups_c_th(r16,v)                  _BFSET_(r16,15, 8,v)

    #define     w32UPS10_CFG6                                  {\
            UNSG32 uCFG6_ups_y_th                              :  8;\
            UNSG32 uCFG6_ups_c_th                              :  8;\
            UNSG32 RSVDx18_b16                                 : 16;\
          }
    union { UNSG32 u32UPS10_CFG6;
            struct w32UPS10_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS10_CFG7_ups_7c0(r32)                     _BFGET_(r32,12, 0)
    #define   SET32UPS10_CFG7_ups_7c0(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16UPS10_CFG7_ups_7c0(r16)                     _BFGET_(r16,12, 0)
    #define   SET16UPS10_CFG7_ups_7c0(r16,v)                   _BFSET_(r16,12, 0,v)

    #define   GET32UPS10_CFG7_ups_7c1(r32)                     _BFGET_(r32,25,13)
    #define   SET32UPS10_CFG7_ups_7c1(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32UPS10_CFG7                                  {\
            UNSG32 mCFG7_ups_7c0                               : 13;\
            UNSG32 mCFG7_ups_7c1                               : 13;\
            UNSG32 RSVDx1C_b26                                 :  6;\
          }
    union { UNSG32 u32UPS10_CFG7;
            struct w32UPS10_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS10_CFG8_ups_7c2(r32)                     _BFGET_(r32,12, 0)
    #define   SET32UPS10_CFG8_ups_7c2(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16UPS10_CFG8_ups_7c2(r16)                     _BFGET_(r16,12, 0)
    #define   SET16UPS10_CFG8_ups_7c2(r16,v)                   _BFSET_(r16,12, 0,v)

    #define   GET32UPS10_CFG8_ups_7c3(r32)                     _BFGET_(r32,25,13)
    #define   SET32UPS10_CFG8_ups_7c3(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32UPS10_CFG8                                  {\
            UNSG32 mCFG8_ups_7c2                               : 13;\
            UNSG32 mCFG8_ups_7c3                               : 13;\
            UNSG32 RSVDx20_b26                                 :  6;\
          }
    union { UNSG32 u32UPS10_CFG8;
            struct w32UPS10_CFG8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS10_CFG9_ups_7c4(r32)                     _BFGET_(r32,12, 0)
    #define   SET32UPS10_CFG9_ups_7c4(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16UPS10_CFG9_ups_7c4(r16)                     _BFGET_(r16,12, 0)
    #define   SET16UPS10_CFG9_ups_7c4(r16,v)                   _BFSET_(r16,12, 0,v)

    #define     w32UPS10_CFG9                                  {\
            UNSG32 mCFG9_ups_7c4                               : 13;\
            UNSG32 RSVDx24_b13                                 : 19;\
          }
    union { UNSG32 u32UPS10_CFG9;
            struct w32UPS10_CFG9;
          };
    ///////////////////////////////////////////////////////////
    } SIE_UPS10;

    typedef union  T32UPS10_CFG0
          { UNSG32 u32;
            struct w32UPS10_CFG0;
                 } T32UPS10_CFG0;
    typedef union  T32UPS10_CFG1
          { UNSG32 u32;
            struct w32UPS10_CFG1;
                 } T32UPS10_CFG1;
    typedef union  T32UPS10_CFG2
          { UNSG32 u32;
            struct w32UPS10_CFG2;
                 } T32UPS10_CFG2;
    typedef union  T32UPS10_CFG3
          { UNSG32 u32;
            struct w32UPS10_CFG3;
                 } T32UPS10_CFG3;
    typedef union  T32UPS10_CFG4
          { UNSG32 u32;
            struct w32UPS10_CFG4;
                 } T32UPS10_CFG4;
    typedef union  T32UPS10_CFG5
          { UNSG32 u32;
            struct w32UPS10_CFG5;
                 } T32UPS10_CFG5;
    typedef union  T32UPS10_CFG6
          { UNSG32 u32;
            struct w32UPS10_CFG6;
                 } T32UPS10_CFG6;
    typedef union  T32UPS10_CFG7
          { UNSG32 u32;
            struct w32UPS10_CFG7;
                 } T32UPS10_CFG7;
    typedef union  T32UPS10_CFG8
          { UNSG32 u32;
            struct w32UPS10_CFG8;
                 } T32UPS10_CFG8;
    typedef union  T32UPS10_CFG9
          { UNSG32 u32;
            struct w32UPS10_CFG9;
                 } T32UPS10_CFG9;
    ///////////////////////////////////////////////////////////

    typedef union  TUPS10_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32UPS10_CFG0;
                   };
                 } TUPS10_CFG0;
    typedef union  TUPS10_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32UPS10_CFG1;
                   };
                 } TUPS10_CFG1;
    typedef union  TUPS10_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32UPS10_CFG2;
                   };
                 } TUPS10_CFG2;
    typedef union  TUPS10_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32UPS10_CFG3;
                   };
                 } TUPS10_CFG3;
    typedef union  TUPS10_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32UPS10_CFG4;
                   };
                 } TUPS10_CFG4;
    typedef union  TUPS10_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32UPS10_CFG5;
                   };
                 } TUPS10_CFG5;
    typedef union  TUPS10_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32UPS10_CFG6;
                   };
                 } TUPS10_CFG6;
    typedef union  TUPS10_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32UPS10_CFG7;
                   };
                 } TUPS10_CFG7;
    typedef union  TUPS10_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32UPS10_CFG8;
                   };
                 } TUPS10_CFG8;
    typedef union  TUPS10_CFG9
          { UNSG32 u32[1];
            struct {
            struct w32UPS10_CFG9;
                   };
                 } TUPS10_CFG9;

    ///////////////////////////////////////////////////////////
     SIGN32 UPS10_drvrd(SIE_UPS10 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 UPS10_drvwr(SIE_UPS10 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void UPS10_reset(SIE_UPS10 *p);
     SIGN32 UPS10_cmp  (SIE_UPS10 *p, SIE_UPS10 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define UPS10_check(p,pie,pfx,hLOG) UPS10_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define UPS10_print(p,    pfx,hLOG) UPS10_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: UPS10
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE UPS12                   biu              (4,4)
///     ###
///     * Register specification of interface UPS12
///     * Defines the size of the ups12
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 2  ups_en                    0x3
///                                    ###
///                                    * en[0]
///                                    * 0: Disables 422 to 444 upsampler
///                                    * 1: Enables 422 to 444 upsampler
///                                    * en[1]:
///                                    * 0: disables adaptive sampling
///                                    * 1: enables adaptive sampling
///                                    ###
///               %unsigned 2  rsv                       0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 1  dpwr                      0x0
///                                    ###
///                                    * Internal dynamic power control.
///                                    * 1: enables internal dynamic clock gating.
///                                    * 0: disables internal dynamic clock gating.
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %signmagn 13 ups_c0                    80
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C0.
///                                    ###
///               %signmagn 13 ups_c1                    0
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C1.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %signmagn 13 ups_c2                    4400
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C2.
///                                    ###
///               %signmagn 13 ups_c3                    0
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C3.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %signmagn 13 ups_c4                    1248
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C4.
///                                    ###
///               %signmagn 13 ups_c5                    2048
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C5. Centre tap
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %signmagn 13 ups_c6                    1248
///                                    ###
///                                    * 422 to 444 color upsampler filter coefficient C6.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 1  ups_yshift                0x0
///                                    ###
///                                    * 0: Disables yshift
///                                    * 1: Enables yshift
///                                    ###
///               %unsigned 1  ups_cshift                0x0
///                                    ###
///                                    * 0: Disables Cshift
///                                    * 1: Enables Cshift
///                                    ###
///               %unsigned 1  ups_cswap                 0x0
///                                    ###
///                                    * 0: Disables Cb and Cr swap
///                                    * 1: Enables Cb and Cr swap
///                                    ###
///               %unsigned 12 ups_yblank                0x0
///                                    ###
///                                    * Y value for blank pixel
///                                    ###
///               %unsigned 12 ups_cblank                0x800
///                                    ###
///                                    * C value for blank pixel
///                                    ###
///               %unsigned 1  ups_use_blank             0x1
///                                    ###
///                                    * C value for blank pixel
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 8  ups_y_th                  0x28
///                                    ###
///                                    * Luma edge threshold for adaptive ups
///                                    ###
///               %unsigned 8  ups_c_th                  0x28
///                                    ###
///                                    * Chroma edge threshold for adaptive ups
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0001C CFG7                 (P)
///               %signmagn 13 ups_7c0                   4132
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C0.
///                                    ###
///               %signmagn 13 ups_7c1                   9
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C1.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00020 CFG8                 (P)
///               %signmagn 13 ups_7c2                   1060
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C2.
///                                    ###
///               %signmagn 13 ups_7c3                   2030
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C3.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00024 CFG9                 (P)
///               %signmagn 13 ups_7c4                   1060
///                                    ###
///                                    * 422 to 444 color upsampler 7 tap filter coefficient C4.
///                                    * End of ups12 register group
///                                    ###
///               %%        19         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      40B, bits:     205b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_UPS12
#define h_UPS12 (){}

    #define     RA_UPS12_CFG0                                  0x0000

    #define     BA_UPS12_CFG0_ups_en                           0x0000
    #define     B16UPS12_CFG0_ups_en                           0x0000
    #define   LSb32UPS12_CFG0_ups_en                              0
    #define   LSb16UPS12_CFG0_ups_en                              0
    #define       bUPS12_CFG0_ups_en                           2
    #define   MSK32UPS12_CFG0_ups_en                              0x00000003

    #define     BA_UPS12_CFG0_rsv                              0x0000
    #define     B16UPS12_CFG0_rsv                              0x0000
    #define   LSb32UPS12_CFG0_rsv                                 2
    #define   LSb16UPS12_CFG0_rsv                                 2
    #define       bUPS12_CFG0_rsv                              2
    #define   MSK32UPS12_CFG0_rsv                                 0x0000000C

    #define     BA_UPS12_CFG0_dpwr                             0x0000
    #define     B16UPS12_CFG0_dpwr                             0x0000
    #define   LSb32UPS12_CFG0_dpwr                                4
    #define   LSb16UPS12_CFG0_dpwr                                4
    #define       bUPS12_CFG0_dpwr                             1
    #define   MSK32UPS12_CFG0_dpwr                                0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_UPS12_CFG1                                  0x0004

    #define     BA_UPS12_CFG1_ups_c0                           0x0004
    #define     B16UPS12_CFG1_ups_c0                           0x0004
    #define   LSb32UPS12_CFG1_ups_c0                              0
    #define   LSb16UPS12_CFG1_ups_c0                              0
    #define       bUPS12_CFG1_ups_c0                           13
    #define   MSK32UPS12_CFG1_ups_c0                              0x00001FFF

    #define     BA_UPS12_CFG1_ups_c1                           0x0005
    #define     B16UPS12_CFG1_ups_c1                           0x0004
    #define   LSb32UPS12_CFG1_ups_c1                              13
    #define   LSb16UPS12_CFG1_ups_c1                              13
    #define       bUPS12_CFG1_ups_c1                           13
    #define   MSK32UPS12_CFG1_ups_c1                              0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS12_CFG2                                  0x0008

    #define     BA_UPS12_CFG2_ups_c2                           0x0008
    #define     B16UPS12_CFG2_ups_c2                           0x0008
    #define   LSb32UPS12_CFG2_ups_c2                              0
    #define   LSb16UPS12_CFG2_ups_c2                              0
    #define       bUPS12_CFG2_ups_c2                           13
    #define   MSK32UPS12_CFG2_ups_c2                              0x00001FFF

    #define     BA_UPS12_CFG2_ups_c3                           0x0009
    #define     B16UPS12_CFG2_ups_c3                           0x0008
    #define   LSb32UPS12_CFG2_ups_c3                              13
    #define   LSb16UPS12_CFG2_ups_c3                              13
    #define       bUPS12_CFG2_ups_c3                           13
    #define   MSK32UPS12_CFG2_ups_c3                              0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS12_CFG3                                  0x000C

    #define     BA_UPS12_CFG3_ups_c4                           0x000C
    #define     B16UPS12_CFG3_ups_c4                           0x000C
    #define   LSb32UPS12_CFG3_ups_c4                              0
    #define   LSb16UPS12_CFG3_ups_c4                              0
    #define       bUPS12_CFG3_ups_c4                           13
    #define   MSK32UPS12_CFG3_ups_c4                              0x00001FFF

    #define     BA_UPS12_CFG3_ups_c5                           0x000D
    #define     B16UPS12_CFG3_ups_c5                           0x000C
    #define   LSb32UPS12_CFG3_ups_c5                              13
    #define   LSb16UPS12_CFG3_ups_c5                              13
    #define       bUPS12_CFG3_ups_c5                           13
    #define   MSK32UPS12_CFG3_ups_c5                              0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS12_CFG4                                  0x0010

    #define     BA_UPS12_CFG4_ups_c6                           0x0010
    #define     B16UPS12_CFG4_ups_c6                           0x0010
    #define   LSb32UPS12_CFG4_ups_c6                              0
    #define   LSb16UPS12_CFG4_ups_c6                              0
    #define       bUPS12_CFG4_ups_c6                           13
    #define   MSK32UPS12_CFG4_ups_c6                              0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_UPS12_CFG5                                  0x0014

    #define     BA_UPS12_CFG5_ups_yshift                       0x0014
    #define     B16UPS12_CFG5_ups_yshift                       0x0014
    #define   LSb32UPS12_CFG5_ups_yshift                          0
    #define   LSb16UPS12_CFG5_ups_yshift                          0
    #define       bUPS12_CFG5_ups_yshift                       1
    #define   MSK32UPS12_CFG5_ups_yshift                          0x00000001

    #define     BA_UPS12_CFG5_ups_cshift                       0x0014
    #define     B16UPS12_CFG5_ups_cshift                       0x0014
    #define   LSb32UPS12_CFG5_ups_cshift                          1
    #define   LSb16UPS12_CFG5_ups_cshift                          1
    #define       bUPS12_CFG5_ups_cshift                       1
    #define   MSK32UPS12_CFG5_ups_cshift                          0x00000002

    #define     BA_UPS12_CFG5_ups_cswap                        0x0014
    #define     B16UPS12_CFG5_ups_cswap                        0x0014
    #define   LSb32UPS12_CFG5_ups_cswap                           2
    #define   LSb16UPS12_CFG5_ups_cswap                           2
    #define       bUPS12_CFG5_ups_cswap                        1
    #define   MSK32UPS12_CFG5_ups_cswap                           0x00000004

    #define     BA_UPS12_CFG5_ups_yblank                       0x0014
    #define     B16UPS12_CFG5_ups_yblank                       0x0014
    #define   LSb32UPS12_CFG5_ups_yblank                          3
    #define   LSb16UPS12_CFG5_ups_yblank                          3
    #define       bUPS12_CFG5_ups_yblank                       12
    #define   MSK32UPS12_CFG5_ups_yblank                          0x00007FF8

    #define     BA_UPS12_CFG5_ups_cblank                       0x0015
    #define     B16UPS12_CFG5_ups_cblank                       0x0014
    #define   LSb32UPS12_CFG5_ups_cblank                          15
    #define   LSb16UPS12_CFG5_ups_cblank                          15
    #define       bUPS12_CFG5_ups_cblank                       12
    #define   MSK32UPS12_CFG5_ups_cblank                          0x07FF8000

    #define     BA_UPS12_CFG5_ups_use_blank                    0x0017
    #define     B16UPS12_CFG5_ups_use_blank                    0x0016
    #define   LSb32UPS12_CFG5_ups_use_blank                       27
    #define   LSb16UPS12_CFG5_ups_use_blank                       11
    #define       bUPS12_CFG5_ups_use_blank                    1
    #define   MSK32UPS12_CFG5_ups_use_blank                       0x08000000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS12_CFG6                                  0x0018

    #define     BA_UPS12_CFG6_ups_y_th                         0x0018
    #define     B16UPS12_CFG6_ups_y_th                         0x0018
    #define   LSb32UPS12_CFG6_ups_y_th                            0
    #define   LSb16UPS12_CFG6_ups_y_th                            0
    #define       bUPS12_CFG6_ups_y_th                         8
    #define   MSK32UPS12_CFG6_ups_y_th                            0x000000FF

    #define     BA_UPS12_CFG6_ups_c_th                         0x0019
    #define     B16UPS12_CFG6_ups_c_th                         0x0018
    #define   LSb32UPS12_CFG6_ups_c_th                            8
    #define   LSb16UPS12_CFG6_ups_c_th                            8
    #define       bUPS12_CFG6_ups_c_th                         8
    #define   MSK32UPS12_CFG6_ups_c_th                            0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_UPS12_CFG7                                  0x001C

    #define     BA_UPS12_CFG7_ups_7c0                          0x001C
    #define     B16UPS12_CFG7_ups_7c0                          0x001C
    #define   LSb32UPS12_CFG7_ups_7c0                             0
    #define   LSb16UPS12_CFG7_ups_7c0                             0
    #define       bUPS12_CFG7_ups_7c0                          13
    #define   MSK32UPS12_CFG7_ups_7c0                             0x00001FFF

    #define     BA_UPS12_CFG7_ups_7c1                          0x001D
    #define     B16UPS12_CFG7_ups_7c1                          0x001C
    #define   LSb32UPS12_CFG7_ups_7c1                             13
    #define   LSb16UPS12_CFG7_ups_7c1                             13
    #define       bUPS12_CFG7_ups_7c1                          13
    #define   MSK32UPS12_CFG7_ups_7c1                             0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS12_CFG8                                  0x0020

    #define     BA_UPS12_CFG8_ups_7c2                          0x0020
    #define     B16UPS12_CFG8_ups_7c2                          0x0020
    #define   LSb32UPS12_CFG8_ups_7c2                             0
    #define   LSb16UPS12_CFG8_ups_7c2                             0
    #define       bUPS12_CFG8_ups_7c2                          13
    #define   MSK32UPS12_CFG8_ups_7c2                             0x00001FFF

    #define     BA_UPS12_CFG8_ups_7c3                          0x0021
    #define     B16UPS12_CFG8_ups_7c3                          0x0020
    #define   LSb32UPS12_CFG8_ups_7c3                             13
    #define   LSb16UPS12_CFG8_ups_7c3                             13
    #define       bUPS12_CFG8_ups_7c3                          13
    #define   MSK32UPS12_CFG8_ups_7c3                             0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS12_CFG9                                  0x0024

    #define     BA_UPS12_CFG9_ups_7c4                          0x0024
    #define     B16UPS12_CFG9_ups_7c4                          0x0024
    #define   LSb32UPS12_CFG9_ups_7c4                             0
    #define   LSb16UPS12_CFG9_ups_7c4                             0
    #define       bUPS12_CFG9_ups_7c4                          13
    #define   MSK32UPS12_CFG9_ups_7c4                             0x00001FFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_UPS12 {
    ///////////////////////////////////////////////////////////
    #define   GET32UPS12_CFG0_ups_en(r32)                      _BFGET_(r32, 1, 0)
    #define   SET32UPS12_CFG0_ups_en(r32,v)                    _BFSET_(r32, 1, 0,v)
    #define   GET16UPS12_CFG0_ups_en(r16)                      _BFGET_(r16, 1, 0)
    #define   SET16UPS12_CFG0_ups_en(r16,v)                    _BFSET_(r16, 1, 0,v)

    #define   GET32UPS12_CFG0_rsv(r32)                         _BFGET_(r32, 3, 2)
    #define   SET32UPS12_CFG0_rsv(r32,v)                       _BFSET_(r32, 3, 2,v)
    #define   GET16UPS12_CFG0_rsv(r16)                         _BFGET_(r16, 3, 2)
    #define   SET16UPS12_CFG0_rsv(r16,v)                       _BFSET_(r16, 3, 2,v)

    #define   GET32UPS12_CFG0_dpwr(r32)                        _BFGET_(r32, 4, 4)
    #define   SET32UPS12_CFG0_dpwr(r32,v)                      _BFSET_(r32, 4, 4,v)
    #define   GET16UPS12_CFG0_dpwr(r16)                        _BFGET_(r16, 4, 4)
    #define   SET16UPS12_CFG0_dpwr(r16,v)                      _BFSET_(r16, 4, 4,v)

    #define     w32UPS12_CFG0                                  {\
            UNSG32 uCFG0_ups_en                                :  2;\
            UNSG32 uCFG0_rsv                                   :  2;\
            UNSG32 uCFG0_dpwr                                  :  1;\
            UNSG32 RSVDx0_b5                                   : 27;\
          }
    union { UNSG32 u32UPS12_CFG0;
            struct w32UPS12_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS12_CFG1_ups_c0(r32)                      _BFGET_(r32,12, 0)
    #define   SET32UPS12_CFG1_ups_c0(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16UPS12_CFG1_ups_c0(r16)                      _BFGET_(r16,12, 0)
    #define   SET16UPS12_CFG1_ups_c0(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32UPS12_CFG1_ups_c1(r32)                      _BFGET_(r32,25,13)
    #define   SET32UPS12_CFG1_ups_c1(r32,v)                    _BFSET_(r32,25,13,v)

    #define     w32UPS12_CFG1                                  {\
            UNSG32 mCFG1_ups_c0                                : 13;\
            UNSG32 mCFG1_ups_c1                                : 13;\
            UNSG32 RSVDx4_b26                                  :  6;\
          }
    union { UNSG32 u32UPS12_CFG1;
            struct w32UPS12_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS12_CFG2_ups_c2(r32)                      _BFGET_(r32,12, 0)
    #define   SET32UPS12_CFG2_ups_c2(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16UPS12_CFG2_ups_c2(r16)                      _BFGET_(r16,12, 0)
    #define   SET16UPS12_CFG2_ups_c2(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32UPS12_CFG2_ups_c3(r32)                      _BFGET_(r32,25,13)
    #define   SET32UPS12_CFG2_ups_c3(r32,v)                    _BFSET_(r32,25,13,v)

    #define     w32UPS12_CFG2                                  {\
            UNSG32 mCFG2_ups_c2                                : 13;\
            UNSG32 mCFG2_ups_c3                                : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32UPS12_CFG2;
            struct w32UPS12_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS12_CFG3_ups_c4(r32)                      _BFGET_(r32,12, 0)
    #define   SET32UPS12_CFG3_ups_c4(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16UPS12_CFG3_ups_c4(r16)                      _BFGET_(r16,12, 0)
    #define   SET16UPS12_CFG3_ups_c4(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32UPS12_CFG3_ups_c5(r32)                      _BFGET_(r32,25,13)
    #define   SET32UPS12_CFG3_ups_c5(r32,v)                    _BFSET_(r32,25,13,v)

    #define     w32UPS12_CFG3                                  {\
            UNSG32 mCFG3_ups_c4                                : 13;\
            UNSG32 mCFG3_ups_c5                                : 13;\
            UNSG32 RSVDxC_b26                                  :  6;\
          }
    union { UNSG32 u32UPS12_CFG3;
            struct w32UPS12_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS12_CFG4_ups_c6(r32)                      _BFGET_(r32,12, 0)
    #define   SET32UPS12_CFG4_ups_c6(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16UPS12_CFG4_ups_c6(r16)                      _BFGET_(r16,12, 0)
    #define   SET16UPS12_CFG4_ups_c6(r16,v)                    _BFSET_(r16,12, 0,v)

    #define     w32UPS12_CFG4                                  {\
            UNSG32 mCFG4_ups_c6                                : 13;\
            UNSG32 RSVDx10_b13                                 : 19;\
          }
    union { UNSG32 u32UPS12_CFG4;
            struct w32UPS12_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS12_CFG5_ups_yshift(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32UPS12_CFG5_ups_yshift(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16UPS12_CFG5_ups_yshift(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16UPS12_CFG5_ups_yshift(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32UPS12_CFG5_ups_cshift(r32)                  _BFGET_(r32, 1, 1)
    #define   SET32UPS12_CFG5_ups_cshift(r32,v)                _BFSET_(r32, 1, 1,v)
    #define   GET16UPS12_CFG5_ups_cshift(r16)                  _BFGET_(r16, 1, 1)
    #define   SET16UPS12_CFG5_ups_cshift(r16,v)                _BFSET_(r16, 1, 1,v)

    #define   GET32UPS12_CFG5_ups_cswap(r32)                   _BFGET_(r32, 2, 2)
    #define   SET32UPS12_CFG5_ups_cswap(r32,v)                 _BFSET_(r32, 2, 2,v)
    #define   GET16UPS12_CFG5_ups_cswap(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16UPS12_CFG5_ups_cswap(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define   GET32UPS12_CFG5_ups_yblank(r32)                  _BFGET_(r32,14, 3)
    #define   SET32UPS12_CFG5_ups_yblank(r32,v)                _BFSET_(r32,14, 3,v)
    #define   GET16UPS12_CFG5_ups_yblank(r16)                  _BFGET_(r16,14, 3)
    #define   SET16UPS12_CFG5_ups_yblank(r16,v)                _BFSET_(r16,14, 3,v)

    #define   GET32UPS12_CFG5_ups_cblank(r32)                  _BFGET_(r32,26,15)
    #define   SET32UPS12_CFG5_ups_cblank(r32,v)                _BFSET_(r32,26,15,v)

    #define   GET32UPS12_CFG5_ups_use_blank(r32)               _BFGET_(r32,27,27)
    #define   SET32UPS12_CFG5_ups_use_blank(r32,v)             _BFSET_(r32,27,27,v)
    #define   GET16UPS12_CFG5_ups_use_blank(r16)               _BFGET_(r16,11,11)
    #define   SET16UPS12_CFG5_ups_use_blank(r16,v)             _BFSET_(r16,11,11,v)

    #define     w32UPS12_CFG5                                  {\
            UNSG32 uCFG5_ups_yshift                            :  1;\
            UNSG32 uCFG5_ups_cshift                            :  1;\
            UNSG32 uCFG5_ups_cswap                             :  1;\
            UNSG32 uCFG5_ups_yblank                            : 12;\
            UNSG32 uCFG5_ups_cblank                            : 12;\
            UNSG32 uCFG5_ups_use_blank                         :  1;\
            UNSG32 RSVDx14_b28                                 :  4;\
          }
    union { UNSG32 u32UPS12_CFG5;
            struct w32UPS12_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS12_CFG6_ups_y_th(r32)                    _BFGET_(r32, 7, 0)
    #define   SET32UPS12_CFG6_ups_y_th(r32,v)                  _BFSET_(r32, 7, 0,v)
    #define   GET16UPS12_CFG6_ups_y_th(r16)                    _BFGET_(r16, 7, 0)
    #define   SET16UPS12_CFG6_ups_y_th(r16,v)                  _BFSET_(r16, 7, 0,v)

    #define   GET32UPS12_CFG6_ups_c_th(r32)                    _BFGET_(r32,15, 8)
    #define   SET32UPS12_CFG6_ups_c_th(r32,v)                  _BFSET_(r32,15, 8,v)
    #define   GET16UPS12_CFG6_ups_c_th(r16)                    _BFGET_(r16,15, 8)
    #define   SET16UPS12_CFG6_ups_c_th(r16,v)                  _BFSET_(r16,15, 8,v)

    #define     w32UPS12_CFG6                                  {\
            UNSG32 uCFG6_ups_y_th                              :  8;\
            UNSG32 uCFG6_ups_c_th                              :  8;\
            UNSG32 RSVDx18_b16                                 : 16;\
          }
    union { UNSG32 u32UPS12_CFG6;
            struct w32UPS12_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS12_CFG7_ups_7c0(r32)                     _BFGET_(r32,12, 0)
    #define   SET32UPS12_CFG7_ups_7c0(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16UPS12_CFG7_ups_7c0(r16)                     _BFGET_(r16,12, 0)
    #define   SET16UPS12_CFG7_ups_7c0(r16,v)                   _BFSET_(r16,12, 0,v)

    #define   GET32UPS12_CFG7_ups_7c1(r32)                     _BFGET_(r32,25,13)
    #define   SET32UPS12_CFG7_ups_7c1(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32UPS12_CFG7                                  {\
            UNSG32 mCFG7_ups_7c0                               : 13;\
            UNSG32 mCFG7_ups_7c1                               : 13;\
            UNSG32 RSVDx1C_b26                                 :  6;\
          }
    union { UNSG32 u32UPS12_CFG7;
            struct w32UPS12_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS12_CFG8_ups_7c2(r32)                     _BFGET_(r32,12, 0)
    #define   SET32UPS12_CFG8_ups_7c2(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16UPS12_CFG8_ups_7c2(r16)                     _BFGET_(r16,12, 0)
    #define   SET16UPS12_CFG8_ups_7c2(r16,v)                   _BFSET_(r16,12, 0,v)

    #define   GET32UPS12_CFG8_ups_7c3(r32)                     _BFGET_(r32,25,13)
    #define   SET32UPS12_CFG8_ups_7c3(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32UPS12_CFG8                                  {\
            UNSG32 mCFG8_ups_7c2                               : 13;\
            UNSG32 mCFG8_ups_7c3                               : 13;\
            UNSG32 RSVDx20_b26                                 :  6;\
          }
    union { UNSG32 u32UPS12_CFG8;
            struct w32UPS12_CFG8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS12_CFG9_ups_7c4(r32)                     _BFGET_(r32,12, 0)
    #define   SET32UPS12_CFG9_ups_7c4(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16UPS12_CFG9_ups_7c4(r16)                     _BFGET_(r16,12, 0)
    #define   SET16UPS12_CFG9_ups_7c4(r16,v)                   _BFSET_(r16,12, 0,v)

    #define     w32UPS12_CFG9                                  {\
            UNSG32 mCFG9_ups_7c4                               : 13;\
            UNSG32 RSVDx24_b13                                 : 19;\
          }
    union { UNSG32 u32UPS12_CFG9;
            struct w32UPS12_CFG9;
          };
    ///////////////////////////////////////////////////////////
    } SIE_UPS12;

    typedef union  T32UPS12_CFG0
          { UNSG32 u32;
            struct w32UPS12_CFG0;
                 } T32UPS12_CFG0;
    typedef union  T32UPS12_CFG1
          { UNSG32 u32;
            struct w32UPS12_CFG1;
                 } T32UPS12_CFG1;
    typedef union  T32UPS12_CFG2
          { UNSG32 u32;
            struct w32UPS12_CFG2;
                 } T32UPS12_CFG2;
    typedef union  T32UPS12_CFG3
          { UNSG32 u32;
            struct w32UPS12_CFG3;
                 } T32UPS12_CFG3;
    typedef union  T32UPS12_CFG4
          { UNSG32 u32;
            struct w32UPS12_CFG4;
                 } T32UPS12_CFG4;
    typedef union  T32UPS12_CFG5
          { UNSG32 u32;
            struct w32UPS12_CFG5;
                 } T32UPS12_CFG5;
    typedef union  T32UPS12_CFG6
          { UNSG32 u32;
            struct w32UPS12_CFG6;
                 } T32UPS12_CFG6;
    typedef union  T32UPS12_CFG7
          { UNSG32 u32;
            struct w32UPS12_CFG7;
                 } T32UPS12_CFG7;
    typedef union  T32UPS12_CFG8
          { UNSG32 u32;
            struct w32UPS12_CFG8;
                 } T32UPS12_CFG8;
    typedef union  T32UPS12_CFG9
          { UNSG32 u32;
            struct w32UPS12_CFG9;
                 } T32UPS12_CFG9;
    ///////////////////////////////////////////////////////////

    typedef union  TUPS12_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32UPS12_CFG0;
                   };
                 } TUPS12_CFG0;
    typedef union  TUPS12_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32UPS12_CFG1;
                   };
                 } TUPS12_CFG1;
    typedef union  TUPS12_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32UPS12_CFG2;
                   };
                 } TUPS12_CFG2;
    typedef union  TUPS12_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32UPS12_CFG3;
                   };
                 } TUPS12_CFG3;
    typedef union  TUPS12_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32UPS12_CFG4;
                   };
                 } TUPS12_CFG4;
    typedef union  TUPS12_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32UPS12_CFG5;
                   };
                 } TUPS12_CFG5;
    typedef union  TUPS12_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32UPS12_CFG6;
                   };
                 } TUPS12_CFG6;
    typedef union  TUPS12_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32UPS12_CFG7;
                   };
                 } TUPS12_CFG7;
    typedef union  TUPS12_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32UPS12_CFG8;
                   };
                 } TUPS12_CFG8;
    typedef union  TUPS12_CFG9
          { UNSG32 u32[1];
            struct {
            struct w32UPS12_CFG9;
                   };
                 } TUPS12_CFG9;

    ///////////////////////////////////////////////////////////
     SIGN32 UPS12_drvrd(SIE_UPS12 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 UPS12_drvwr(SIE_UPS12 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void UPS12_reset(SIE_UPS12 *p);
     SIGN32 UPS12_cmp  (SIE_UPS12 *p, SIE_UPS12 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define UPS12_check(p,pie,pfx,hLOG) UPS12_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define UPS12_print(p,    pfx,hLOG) UPS12_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: UPS12
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE CSC_C17O24              biu              (4,4)
///     ###
///     * Register specification of interface CSC_C17O24
///     * Defines the size of the CSC_C17O24
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %signmagn 17 C0                        4096
///                                    ###
///                                    * Signed Magnitude Coefficient in s.4.12f format
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %signmagn 17 C1                        0
///                                    ###
///                                    * Signed Magnitude Coefficient in s.4.12f format
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %signmagn 17 C2                        0
///                                    ###
///                                    * Signed Magnitude Coefficient in s.4.12f format
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %signmagn 17 C3                        0
///                                    ###
///                                    * Signed Magnitude Coefficient in s.4.12f format
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %signmagn 17 C4                        4096
///                                    ###
///                                    * Signed Magnitude Coefficient in s.4.12f format
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %signmagn 17 C5                        0
///                                    ###
///                                    * Signed Magnitude Coefficient in s.4.12f format
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %signmagn 17 C6                        0
///                                    ###
///                                    * Signed Magnitude Coefficient in s.4.12f format
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x0001C CFG7                 (P)
///               %signmagn 17 C7                        0
///                                    ###
///                                    * Signed Magnitude Coefficient in s.4.12f format
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x00020 CFG8                 (P)
///               %signmagn 17 C8                        4096
///                                    ###
///                                    * Signed Magnitude Coefficient in s.4.12f format
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x00024 CFG9                 (P)
///               %signmagn 24 OFF1                      0
///                                    ###
///                                    * Coefficients for Main channel in s.4.9f format
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00028 CFG10                (P)
///               %signmagn 24 OFF2                      0
///                                    ###
///                                    * Coefficients for Main channel in s.14.9f format
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x0002C CFG11                (P)
///               %signmagn 24 OFF3                      0
///                                    ###
///                                    * Coefficients for Main channel in s.14.9f format
///                                    * End of CSC_C14O24 register group
///                                    ###
///               %%        8          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      48B, bits:     225b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_CSC_C17O24
#define h_CSC_C17O24 (){}

    #define     RA_CSC_C17O24_CFG0                             0x0000

    #define     BA_CSC_C17O24_CFG0_C0                          0x0000
    #define     B16CSC_C17O24_CFG0_C0                          0x0000
    #define   LSb32CSC_C17O24_CFG0_C0                             0
    #define   LSb16CSC_C17O24_CFG0_C0                             0
    #define       bCSC_C17O24_CFG0_C0                          17
    #define   MSK32CSC_C17O24_CFG0_C0                             0x0001FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CSC_C17O24_CFG1                             0x0004

    #define     BA_CSC_C17O24_CFG1_C1                          0x0004
    #define     B16CSC_C17O24_CFG1_C1                          0x0004
    #define   LSb32CSC_C17O24_CFG1_C1                             0
    #define   LSb16CSC_C17O24_CFG1_C1                             0
    #define       bCSC_C17O24_CFG1_C1                          17
    #define   MSK32CSC_C17O24_CFG1_C1                             0x0001FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CSC_C17O24_CFG2                             0x0008

    #define     BA_CSC_C17O24_CFG2_C2                          0x0008
    #define     B16CSC_C17O24_CFG2_C2                          0x0008
    #define   LSb32CSC_C17O24_CFG2_C2                             0
    #define   LSb16CSC_C17O24_CFG2_C2                             0
    #define       bCSC_C17O24_CFG2_C2                          17
    #define   MSK32CSC_C17O24_CFG2_C2                             0x0001FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CSC_C17O24_CFG3                             0x000C

    #define     BA_CSC_C17O24_CFG3_C3                          0x000C
    #define     B16CSC_C17O24_CFG3_C3                          0x000C
    #define   LSb32CSC_C17O24_CFG3_C3                             0
    #define   LSb16CSC_C17O24_CFG3_C3                             0
    #define       bCSC_C17O24_CFG3_C3                          17
    #define   MSK32CSC_C17O24_CFG3_C3                             0x0001FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CSC_C17O24_CFG4                             0x0010

    #define     BA_CSC_C17O24_CFG4_C4                          0x0010
    #define     B16CSC_C17O24_CFG4_C4                          0x0010
    #define   LSb32CSC_C17O24_CFG4_C4                             0
    #define   LSb16CSC_C17O24_CFG4_C4                             0
    #define       bCSC_C17O24_CFG4_C4                          17
    #define   MSK32CSC_C17O24_CFG4_C4                             0x0001FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CSC_C17O24_CFG5                             0x0014

    #define     BA_CSC_C17O24_CFG5_C5                          0x0014
    #define     B16CSC_C17O24_CFG5_C5                          0x0014
    #define   LSb32CSC_C17O24_CFG5_C5                             0
    #define   LSb16CSC_C17O24_CFG5_C5                             0
    #define       bCSC_C17O24_CFG5_C5                          17
    #define   MSK32CSC_C17O24_CFG5_C5                             0x0001FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CSC_C17O24_CFG6                             0x0018

    #define     BA_CSC_C17O24_CFG6_C6                          0x0018
    #define     B16CSC_C17O24_CFG6_C6                          0x0018
    #define   LSb32CSC_C17O24_CFG6_C6                             0
    #define   LSb16CSC_C17O24_CFG6_C6                             0
    #define       bCSC_C17O24_CFG6_C6                          17
    #define   MSK32CSC_C17O24_CFG6_C6                             0x0001FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CSC_C17O24_CFG7                             0x001C

    #define     BA_CSC_C17O24_CFG7_C7                          0x001C
    #define     B16CSC_C17O24_CFG7_C7                          0x001C
    #define   LSb32CSC_C17O24_CFG7_C7                             0
    #define   LSb16CSC_C17O24_CFG7_C7                             0
    #define       bCSC_C17O24_CFG7_C7                          17
    #define   MSK32CSC_C17O24_CFG7_C7                             0x0001FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CSC_C17O24_CFG8                             0x0020

    #define     BA_CSC_C17O24_CFG8_C8                          0x0020
    #define     B16CSC_C17O24_CFG8_C8                          0x0020
    #define   LSb32CSC_C17O24_CFG8_C8                             0
    #define   LSb16CSC_C17O24_CFG8_C8                             0
    #define       bCSC_C17O24_CFG8_C8                          17
    #define   MSK32CSC_C17O24_CFG8_C8                             0x0001FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CSC_C17O24_CFG9                             0x0024

    #define     BA_CSC_C17O24_CFG9_OFF1                        0x0024
    #define     B16CSC_C17O24_CFG9_OFF1                        0x0024
    #define   LSb32CSC_C17O24_CFG9_OFF1                           0
    #define   LSb16CSC_C17O24_CFG9_OFF1                           0
    #define       bCSC_C17O24_CFG9_OFF1                        24
    #define   MSK32CSC_C17O24_CFG9_OFF1                           0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CSC_C17O24_CFG10                            0x0028

    #define     BA_CSC_C17O24_CFG10_OFF2                       0x0028
    #define     B16CSC_C17O24_CFG10_OFF2                       0x0028
    #define   LSb32CSC_C17O24_CFG10_OFF2                          0
    #define   LSb16CSC_C17O24_CFG10_OFF2                          0
    #define       bCSC_C17O24_CFG10_OFF2                       24
    #define   MSK32CSC_C17O24_CFG10_OFF2                          0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CSC_C17O24_CFG11                            0x002C

    #define     BA_CSC_C17O24_CFG11_OFF3                       0x002C
    #define     B16CSC_C17O24_CFG11_OFF3                       0x002C
    #define   LSb32CSC_C17O24_CFG11_OFF3                          0
    #define   LSb16CSC_C17O24_CFG11_OFF3                          0
    #define       bCSC_C17O24_CFG11_OFF3                       24
    #define   MSK32CSC_C17O24_CFG11_OFF3                          0x00FFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_CSC_C17O24 {
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG0_C0(r32)                     _BFGET_(r32,16, 0)
    #define   SET32CSC_C17O24_CFG0_C0(r32,v)                   _BFSET_(r32,16, 0,v)

    #define     w32CSC_C17O24_CFG0                             {\
            UNSG32 mCFG0_C0                                    : 17;\
            UNSG32 RSVDx0_b17                                  : 15;\
          }
    union { UNSG32 u32CSC_C17O24_CFG0;
            struct w32CSC_C17O24_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG1_C1(r32)                     _BFGET_(r32,16, 0)
    #define   SET32CSC_C17O24_CFG1_C1(r32,v)                   _BFSET_(r32,16, 0,v)

    #define     w32CSC_C17O24_CFG1                             {\
            UNSG32 mCFG1_C1                                    : 17;\
            UNSG32 RSVDx4_b17                                  : 15;\
          }
    union { UNSG32 u32CSC_C17O24_CFG1;
            struct w32CSC_C17O24_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG2_C2(r32)                     _BFGET_(r32,16, 0)
    #define   SET32CSC_C17O24_CFG2_C2(r32,v)                   _BFSET_(r32,16, 0,v)

    #define     w32CSC_C17O24_CFG2                             {\
            UNSG32 mCFG2_C2                                    : 17;\
            UNSG32 RSVDx8_b17                                  : 15;\
          }
    union { UNSG32 u32CSC_C17O24_CFG2;
            struct w32CSC_C17O24_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG3_C3(r32)                     _BFGET_(r32,16, 0)
    #define   SET32CSC_C17O24_CFG3_C3(r32,v)                   _BFSET_(r32,16, 0,v)

    #define     w32CSC_C17O24_CFG3                             {\
            UNSG32 mCFG3_C3                                    : 17;\
            UNSG32 RSVDxC_b17                                  : 15;\
          }
    union { UNSG32 u32CSC_C17O24_CFG3;
            struct w32CSC_C17O24_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG4_C4(r32)                     _BFGET_(r32,16, 0)
    #define   SET32CSC_C17O24_CFG4_C4(r32,v)                   _BFSET_(r32,16, 0,v)

    #define     w32CSC_C17O24_CFG4                             {\
            UNSG32 mCFG4_C4                                    : 17;\
            UNSG32 RSVDx10_b17                                 : 15;\
          }
    union { UNSG32 u32CSC_C17O24_CFG4;
            struct w32CSC_C17O24_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG5_C5(r32)                     _BFGET_(r32,16, 0)
    #define   SET32CSC_C17O24_CFG5_C5(r32,v)                   _BFSET_(r32,16, 0,v)

    #define     w32CSC_C17O24_CFG5                             {\
            UNSG32 mCFG5_C5                                    : 17;\
            UNSG32 RSVDx14_b17                                 : 15;\
          }
    union { UNSG32 u32CSC_C17O24_CFG5;
            struct w32CSC_C17O24_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG6_C6(r32)                     _BFGET_(r32,16, 0)
    #define   SET32CSC_C17O24_CFG6_C6(r32,v)                   _BFSET_(r32,16, 0,v)

    #define     w32CSC_C17O24_CFG6                             {\
            UNSG32 mCFG6_C6                                    : 17;\
            UNSG32 RSVDx18_b17                                 : 15;\
          }
    union { UNSG32 u32CSC_C17O24_CFG6;
            struct w32CSC_C17O24_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG7_C7(r32)                     _BFGET_(r32,16, 0)
    #define   SET32CSC_C17O24_CFG7_C7(r32,v)                   _BFSET_(r32,16, 0,v)

    #define     w32CSC_C17O24_CFG7                             {\
            UNSG32 mCFG7_C7                                    : 17;\
            UNSG32 RSVDx1C_b17                                 : 15;\
          }
    union { UNSG32 u32CSC_C17O24_CFG7;
            struct w32CSC_C17O24_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG8_C8(r32)                     _BFGET_(r32,16, 0)
    #define   SET32CSC_C17O24_CFG8_C8(r32,v)                   _BFSET_(r32,16, 0,v)

    #define     w32CSC_C17O24_CFG8                             {\
            UNSG32 mCFG8_C8                                    : 17;\
            UNSG32 RSVDx20_b17                                 : 15;\
          }
    union { UNSG32 u32CSC_C17O24_CFG8;
            struct w32CSC_C17O24_CFG8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG9_OFF1(r32)                   _BFGET_(r32,23, 0)
    #define   SET32CSC_C17O24_CFG9_OFF1(r32,v)                 _BFSET_(r32,23, 0,v)

    #define     w32CSC_C17O24_CFG9                             {\
            UNSG32 mCFG9_OFF1                                  : 24;\
            UNSG32 RSVDx24_b24                                 :  8;\
          }
    union { UNSG32 u32CSC_C17O24_CFG9;
            struct w32CSC_C17O24_CFG9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG10_OFF2(r32)                  _BFGET_(r32,23, 0)
    #define   SET32CSC_C17O24_CFG10_OFF2(r32,v)                _BFSET_(r32,23, 0,v)

    #define     w32CSC_C17O24_CFG10                            {\
            UNSG32 mCFG10_OFF2                                 : 24;\
            UNSG32 RSVDx28_b24                                 :  8;\
          }
    union { UNSG32 u32CSC_C17O24_CFG10;
            struct w32CSC_C17O24_CFG10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CSC_C17O24_CFG11_OFF3(r32)                  _BFGET_(r32,23, 0)
    #define   SET32CSC_C17O24_CFG11_OFF3(r32,v)                _BFSET_(r32,23, 0,v)

    #define     w32CSC_C17O24_CFG11                            {\
            UNSG32 mCFG11_OFF3                                 : 24;\
            UNSG32 RSVDx2C_b24                                 :  8;\
          }
    union { UNSG32 u32CSC_C17O24_CFG11;
            struct w32CSC_C17O24_CFG11;
          };
    ///////////////////////////////////////////////////////////
    } SIE_CSC_C17O24;

    typedef union  T32CSC_C17O24_CFG0
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG0;
                 } T32CSC_C17O24_CFG0;
    typedef union  T32CSC_C17O24_CFG1
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG1;
                 } T32CSC_C17O24_CFG1;
    typedef union  T32CSC_C17O24_CFG2
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG2;
                 } T32CSC_C17O24_CFG2;
    typedef union  T32CSC_C17O24_CFG3
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG3;
                 } T32CSC_C17O24_CFG3;
    typedef union  T32CSC_C17O24_CFG4
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG4;
                 } T32CSC_C17O24_CFG4;
    typedef union  T32CSC_C17O24_CFG5
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG5;
                 } T32CSC_C17O24_CFG5;
    typedef union  T32CSC_C17O24_CFG6
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG6;
                 } T32CSC_C17O24_CFG6;
    typedef union  T32CSC_C17O24_CFG7
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG7;
                 } T32CSC_C17O24_CFG7;
    typedef union  T32CSC_C17O24_CFG8
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG8;
                 } T32CSC_C17O24_CFG8;
    typedef union  T32CSC_C17O24_CFG9
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG9;
                 } T32CSC_C17O24_CFG9;
    typedef union  T32CSC_C17O24_CFG10
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG10;
                 } T32CSC_C17O24_CFG10;
    typedef union  T32CSC_C17O24_CFG11
          { UNSG32 u32;
            struct w32CSC_C17O24_CFG11;
                 } T32CSC_C17O24_CFG11;
    ///////////////////////////////////////////////////////////

    typedef union  TCSC_C17O24_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG0;
                   };
                 } TCSC_C17O24_CFG0;
    typedef union  TCSC_C17O24_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG1;
                   };
                 } TCSC_C17O24_CFG1;
    typedef union  TCSC_C17O24_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG2;
                   };
                 } TCSC_C17O24_CFG2;
    typedef union  TCSC_C17O24_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG3;
                   };
                 } TCSC_C17O24_CFG3;
    typedef union  TCSC_C17O24_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG4;
                   };
                 } TCSC_C17O24_CFG4;
    typedef union  TCSC_C17O24_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG5;
                   };
                 } TCSC_C17O24_CFG5;
    typedef union  TCSC_C17O24_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG6;
                   };
                 } TCSC_C17O24_CFG6;
    typedef union  TCSC_C17O24_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG7;
                   };
                 } TCSC_C17O24_CFG7;
    typedef union  TCSC_C17O24_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG8;
                   };
                 } TCSC_C17O24_CFG8;
    typedef union  TCSC_C17O24_CFG9
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG9;
                   };
                 } TCSC_C17O24_CFG9;
    typedef union  TCSC_C17O24_CFG10
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG10;
                   };
                 } TCSC_C17O24_CFG10;
    typedef union  TCSC_C17O24_CFG11
          { UNSG32 u32[1];
            struct {
            struct w32CSC_C17O24_CFG11;
                   };
                 } TCSC_C17O24_CFG11;

    ///////////////////////////////////////////////////////////
     SIGN32 CSC_C17O24_drvrd(SIE_CSC_C17O24 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 CSC_C17O24_drvwr(SIE_CSC_C17O24 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void CSC_C17O24_reset(SIE_CSC_C17O24 *p);
     SIGN32 CSC_C17O24_cmp  (SIE_CSC_C17O24 *p, SIE_CSC_C17O24 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define CSC_C17O24_check(p,pie,pfx,hLOG) CSC_C17O24_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define CSC_C17O24_print(p,    pfx,hLOG) CSC_C17O24_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: CSC_C17O24
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DIFLUT0                                  (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 entry                (P)
///               %unsigned 32 DATA                      
///                                    ###
///                                    * The DIF LUT Programming
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DIFLUT0
#define h_DIFLUT0 (){}

    #define     RA_DIFLUT0_entry                               0x0000

    #define     BA_DIFLUT0_entry_DATA                          0x0000
    #define     B16DIFLUT0_entry_DATA                          0x0000
    #define   LSb32DIFLUT0_entry_DATA                             0
    #define   LSb16DIFLUT0_entry_DATA                             0
    #define       bDIFLUT0_entry_DATA                          32
    #define   MSK32DIFLUT0_entry_DATA                             0xFFFFFFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DIFLUT0 {
    ///////////////////////////////////////////////////////////
    #define   GET32DIFLUT0_entry_DATA(r32)                     _BFGET_(r32,31, 0)
    #define   SET32DIFLUT0_entry_DATA(r32,v)                   _BFSET_(r32,31, 0,v)

    #define     w32DIFLUT0_entry                               {\
            UNSG32 uentry_DATA                                 : 32;\
          }
    union { UNSG32 u32DIFLUT0_entry;
            struct w32DIFLUT0_entry;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DIFLUT0;

    typedef union  T32DIFLUT0_entry
          { UNSG32 u32;
            struct w32DIFLUT0_entry;
                 } T32DIFLUT0_entry;
    ///////////////////////////////////////////////////////////

    typedef union  TDIFLUT0_entry
          { UNSG32 u32[1];
            struct {
            struct w32DIFLUT0_entry;
                   };
                 } TDIFLUT0_entry;

    ///////////////////////////////////////////////////////////
     SIGN32 DIFLUT0_drvrd(SIE_DIFLUT0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DIFLUT0_drvwr(SIE_DIFLUT0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DIFLUT0_reset(SIE_DIFLUT0 *p);
     SIGN32 DIFLUT0_cmp  (SIE_DIFLUT0 *p, SIE_DIFLUT0 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DIFLUT0_check(p,pie,pfx,hLOG) DIFLUT0_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DIFLUT0_print(p,    pfx,hLOG) DIFLUT0_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DIFLUT0
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DIF_LUT                                  (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 DIFLUT0              
///               $DIFLUT0             DIFLUT0           REG     [256]
///                                    ###
///                                    * 8-bit index to table lookup
///                                    * End of Interface
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    1024B, bits:    8192b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DIF_LUT
#define h_DIF_LUT (){}

    #define     RA_DIF_LUT_DIFLUT0                             0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DIF_LUT {
    ///////////////////////////////////////////////////////////
              SIE_DIFLUT0                                      ie_DIFLUT0[256];
    ///////////////////////////////////////////////////////////
    } SIE_DIF_LUT;

    ///////////////////////////////////////////////////////////
     SIGN32 DIF_LUT_drvrd(SIE_DIF_LUT *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DIF_LUT_drvwr(SIE_DIF_LUT *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DIF_LUT_reset(SIE_DIF_LUT *p);
     SIGN32 DIF_LUT_cmp  (SIE_DIF_LUT *p, SIE_DIF_LUT *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DIF_LUT_check(p,pie,pfx,hLOG) DIF_LUT_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DIF_LUT_print(p,    pfx,hLOG) DIF_LUT_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DIF_LUT
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DIF                     biu              (4,4)
///     ###
///     * Register specification of interface [Detile Input Formatter module]
///     * Defines the size of DIF config registers
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 1  sft_rst                   0x0
///                                    ###
///                                    * Soft reset bit for Detile Input Formatter. Write 1 to reset internal logic and bring to idle state.
///                                    ###
///               %unsigned 9  tile_size                 0x18
///                                    ###
///                                    * Programmable Tile Size for supporting various configurations.
///                                    * Default Size : for V4H6 tiled (10Bit)
///                                    * For V4H8 , program 0x20 (8Bit)
///                                    * For V4H48, program 0xC0 (10Bit)
///                                    * For V4H64, program 0x100(8Bit)
///                                    * For V4H16, program 0x40(8Bit)
///                                    * For V4H12, program 0x30 (10Bit)
///                                    ###
///               %unsigned 1  PDWN0                     0x0
///                                    ###
///                                    * 1: Reduce the leakage(low power) mode , allows VDD to be switched off with data retention
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDLVMC0                   0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDFVSSM0                  0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDWN1                     0x0
///                                    ###
///                                    * 1: Reduce the leakage(low power) mode , allows VDD to be switched off with data retention
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDLVMC1                   0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDFVSSM1                  0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDWN2                     0x0
///                                    ###
///                                    * 1: Reduce the leakage(low power) mode , allows VDD to be switched off with data retention
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDLVMC2                   0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDFVSSM2                  0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %%        13         # Stuffing bits...
///     @ 0x00004                      (W-)
///     #         # Stuffing bytes...
///               %% 8160
///     @ 0x00400                      (P)
///     # 0x00400 DIFLUT               
///               $DIF_LUT             DIFLUT            MEM          
///                                    ###
///                                    * DIF LUT Values
///                                    * End of DIF register group
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    2048B, bits:      51b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DIF
#define h_DIF (){}

    #define     RA_DIF_CFG0                                    0x0000

    #define     BA_DIF_CFG0_sft_rst                            0x0000
    #define     B16DIF_CFG0_sft_rst                            0x0000
    #define   LSb32DIF_CFG0_sft_rst                               0
    #define   LSb16DIF_CFG0_sft_rst                               0
    #define       bDIF_CFG0_sft_rst                            1
    #define   MSK32DIF_CFG0_sft_rst                               0x00000001

    #define     BA_DIF_CFG0_tile_size                          0x0000
    #define     B16DIF_CFG0_tile_size                          0x0000
    #define   LSb32DIF_CFG0_tile_size                             1
    #define   LSb16DIF_CFG0_tile_size                             1
    #define       bDIF_CFG0_tile_size                          9
    #define   MSK32DIF_CFG0_tile_size                             0x000003FE

    #define     BA_DIF_CFG0_PDWN0                              0x0001
    #define     B16DIF_CFG0_PDWN0                              0x0000
    #define   LSb32DIF_CFG0_PDWN0                                 10
    #define   LSb16DIF_CFG0_PDWN0                                 10
    #define       bDIF_CFG0_PDWN0                              1
    #define   MSK32DIF_CFG0_PDWN0                                 0x00000400

    #define     BA_DIF_CFG0_PDLVMC0                            0x0001
    #define     B16DIF_CFG0_PDLVMC0                            0x0000
    #define   LSb32DIF_CFG0_PDLVMC0                               11
    #define   LSb16DIF_CFG0_PDLVMC0                               11
    #define       bDIF_CFG0_PDLVMC0                            1
    #define   MSK32DIF_CFG0_PDLVMC0                               0x00000800

    #define     BA_DIF_CFG0_PDFVSSM0                           0x0001
    #define     B16DIF_CFG0_PDFVSSM0                           0x0000
    #define   LSb32DIF_CFG0_PDFVSSM0                              12
    #define   LSb16DIF_CFG0_PDFVSSM0                              12
    #define       bDIF_CFG0_PDFVSSM0                           1
    #define   MSK32DIF_CFG0_PDFVSSM0                              0x00001000

    #define     BA_DIF_CFG0_PDWN1                              0x0001
    #define     B16DIF_CFG0_PDWN1                              0x0000
    #define   LSb32DIF_CFG0_PDWN1                                 13
    #define   LSb16DIF_CFG0_PDWN1                                 13
    #define       bDIF_CFG0_PDWN1                              1
    #define   MSK32DIF_CFG0_PDWN1                                 0x00002000

    #define     BA_DIF_CFG0_PDLVMC1                            0x0001
    #define     B16DIF_CFG0_PDLVMC1                            0x0000
    #define   LSb32DIF_CFG0_PDLVMC1                               14
    #define   LSb16DIF_CFG0_PDLVMC1                               14
    #define       bDIF_CFG0_PDLVMC1                            1
    #define   MSK32DIF_CFG0_PDLVMC1                               0x00004000

    #define     BA_DIF_CFG0_PDFVSSM1                           0x0001
    #define     B16DIF_CFG0_PDFVSSM1                           0x0000
    #define   LSb32DIF_CFG0_PDFVSSM1                              15
    #define   LSb16DIF_CFG0_PDFVSSM1                              15
    #define       bDIF_CFG0_PDFVSSM1                           1
    #define   MSK32DIF_CFG0_PDFVSSM1                              0x00008000

    #define     BA_DIF_CFG0_PDWN2                              0x0002
    #define     B16DIF_CFG0_PDWN2                              0x0002
    #define   LSb32DIF_CFG0_PDWN2                                 16
    #define   LSb16DIF_CFG0_PDWN2                                 0
    #define       bDIF_CFG0_PDWN2                              1
    #define   MSK32DIF_CFG0_PDWN2                                 0x00010000

    #define     BA_DIF_CFG0_PDLVMC2                            0x0002
    #define     B16DIF_CFG0_PDLVMC2                            0x0002
    #define   LSb32DIF_CFG0_PDLVMC2                               17
    #define   LSb16DIF_CFG0_PDLVMC2                               1
    #define       bDIF_CFG0_PDLVMC2                            1
    #define   MSK32DIF_CFG0_PDLVMC2                               0x00020000

    #define     BA_DIF_CFG0_PDFVSSM2                           0x0002
    #define     B16DIF_CFG0_PDFVSSM2                           0x0002
    #define   LSb32DIF_CFG0_PDFVSSM2                              18
    #define   LSb16DIF_CFG0_PDFVSSM2                              2
    #define       bDIF_CFG0_PDFVSSM2                           1
    #define   MSK32DIF_CFG0_PDFVSSM2                              0x00040000
    ///////////////////////////////////////////////////////////
    #define     RA_DIF_DIFLUT                                  0x0400
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DIF {
    ///////////////////////////////////////////////////////////
    #define   GET32DIF_CFG0_sft_rst(r32)                       _BFGET_(r32, 0, 0)
    #define   SET32DIF_CFG0_sft_rst(r32,v)                     _BFSET_(r32, 0, 0,v)
    #define   GET16DIF_CFG0_sft_rst(r16)                       _BFGET_(r16, 0, 0)
    #define   SET16DIF_CFG0_sft_rst(r16,v)                     _BFSET_(r16, 0, 0,v)

    #define   GET32DIF_CFG0_tile_size(r32)                     _BFGET_(r32, 9, 1)
    #define   SET32DIF_CFG0_tile_size(r32,v)                   _BFSET_(r32, 9, 1,v)
    #define   GET16DIF_CFG0_tile_size(r16)                     _BFGET_(r16, 9, 1)
    #define   SET16DIF_CFG0_tile_size(r16,v)                   _BFSET_(r16, 9, 1,v)

    #define   GET32DIF_CFG0_PDWN0(r32)                         _BFGET_(r32,10,10)
    #define   SET32DIF_CFG0_PDWN0(r32,v)                       _BFSET_(r32,10,10,v)
    #define   GET16DIF_CFG0_PDWN0(r16)                         _BFGET_(r16,10,10)
    #define   SET16DIF_CFG0_PDWN0(r16,v)                       _BFSET_(r16,10,10,v)

    #define   GET32DIF_CFG0_PDLVMC0(r32)                       _BFGET_(r32,11,11)
    #define   SET32DIF_CFG0_PDLVMC0(r32,v)                     _BFSET_(r32,11,11,v)
    #define   GET16DIF_CFG0_PDLVMC0(r16)                       _BFGET_(r16,11,11)
    #define   SET16DIF_CFG0_PDLVMC0(r16,v)                     _BFSET_(r16,11,11,v)

    #define   GET32DIF_CFG0_PDFVSSM0(r32)                      _BFGET_(r32,12,12)
    #define   SET32DIF_CFG0_PDFVSSM0(r32,v)                    _BFSET_(r32,12,12,v)
    #define   GET16DIF_CFG0_PDFVSSM0(r16)                      _BFGET_(r16,12,12)
    #define   SET16DIF_CFG0_PDFVSSM0(r16,v)                    _BFSET_(r16,12,12,v)

    #define   GET32DIF_CFG0_PDWN1(r32)                         _BFGET_(r32,13,13)
    #define   SET32DIF_CFG0_PDWN1(r32,v)                       _BFSET_(r32,13,13,v)
    #define   GET16DIF_CFG0_PDWN1(r16)                         _BFGET_(r16,13,13)
    #define   SET16DIF_CFG0_PDWN1(r16,v)                       _BFSET_(r16,13,13,v)

    #define   GET32DIF_CFG0_PDLVMC1(r32)                       _BFGET_(r32,14,14)
    #define   SET32DIF_CFG0_PDLVMC1(r32,v)                     _BFSET_(r32,14,14,v)
    #define   GET16DIF_CFG0_PDLVMC1(r16)                       _BFGET_(r16,14,14)
    #define   SET16DIF_CFG0_PDLVMC1(r16,v)                     _BFSET_(r16,14,14,v)

    #define   GET32DIF_CFG0_PDFVSSM1(r32)                      _BFGET_(r32,15,15)
    #define   SET32DIF_CFG0_PDFVSSM1(r32,v)                    _BFSET_(r32,15,15,v)
    #define   GET16DIF_CFG0_PDFVSSM1(r16)                      _BFGET_(r16,15,15)
    #define   SET16DIF_CFG0_PDFVSSM1(r16,v)                    _BFSET_(r16,15,15,v)

    #define   GET32DIF_CFG0_PDWN2(r32)                         _BFGET_(r32,16,16)
    #define   SET32DIF_CFG0_PDWN2(r32,v)                       _BFSET_(r32,16,16,v)
    #define   GET16DIF_CFG0_PDWN2(r16)                         _BFGET_(r16, 0, 0)
    #define   SET16DIF_CFG0_PDWN2(r16,v)                       _BFSET_(r16, 0, 0,v)

    #define   GET32DIF_CFG0_PDLVMC2(r32)                       _BFGET_(r32,17,17)
    #define   SET32DIF_CFG0_PDLVMC2(r32,v)                     _BFSET_(r32,17,17,v)
    #define   GET16DIF_CFG0_PDLVMC2(r16)                       _BFGET_(r16, 1, 1)
    #define   SET16DIF_CFG0_PDLVMC2(r16,v)                     _BFSET_(r16, 1, 1,v)

    #define   GET32DIF_CFG0_PDFVSSM2(r32)                      _BFGET_(r32,18,18)
    #define   SET32DIF_CFG0_PDFVSSM2(r32,v)                    _BFSET_(r32,18,18,v)
    #define   GET16DIF_CFG0_PDFVSSM2(r16)                      _BFGET_(r16, 2, 2)
    #define   SET16DIF_CFG0_PDFVSSM2(r16,v)                    _BFSET_(r16, 2, 2,v)

    #define     w32DIF_CFG0                                    {\
            UNSG32 uCFG0_sft_rst                               :  1;\
            UNSG32 uCFG0_tile_size                             :  9;\
            UNSG32 uCFG0_PDWN0                                 :  1;\
            UNSG32 uCFG0_PDLVMC0                               :  1;\
            UNSG32 uCFG0_PDFVSSM0                              :  1;\
            UNSG32 uCFG0_PDWN1                                 :  1;\
            UNSG32 uCFG0_PDLVMC1                               :  1;\
            UNSG32 uCFG0_PDFVSSM1                              :  1;\
            UNSG32 uCFG0_PDWN2                                 :  1;\
            UNSG32 uCFG0_PDLVMC2                               :  1;\
            UNSG32 uCFG0_PDFVSSM2                              :  1;\
            UNSG32 RSVDx0_b19                                  : 13;\
          }
    union { UNSG32 u32DIF_CFG0;
            struct w32DIF_CFG0;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx4                                      [1020];
    ///////////////////////////////////////////////////////////
              SIE_DIF_LUT                                      ie_DIFLUT;
    ///////////////////////////////////////////////////////////
    } SIE_DIF;

    typedef union  T32DIF_CFG0
          { UNSG32 u32;
            struct w32DIF_CFG0;
                 } T32DIF_CFG0;
    ///////////////////////////////////////////////////////////

    typedef union  TDIF_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32DIF_CFG0;
                   };
                 } TDIF_CFG0;

    ///////////////////////////////////////////////////////////
     SIGN32 DIF_drvrd(SIE_DIF *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DIF_drvwr(SIE_DIF *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DIF_reset(SIE_DIF *p);
     SIGN32 DIF_cmp  (SIE_DIF *p, SIE_DIF *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DIF_check(p,pie,pfx,hLOG) DIF_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DIF_print(p,    pfx,hLOG) DIF_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DIF
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE UPS_420_422_SP_12b      biu              (4,4)
///     ###
///     * Register specification of interface UPS_420_422_SP_12b
///     * Defines the size of the UPS_420_422_SP_12b
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * 1'd1 : enable ups420_422
///                                    * 1'd0 : bypass
///                                    ###
///               %unsigned 1  cswap_regs                0x0
///                                    ###
///                                    * if enable, swaps output choma
///                                    ###
///               %unsigned 1  yshift_regs               0x0
///                                    ###
///                                    * Advances output luma by 1 clock.
///                                    ###
///               %unsigned 1  cshift_regs               0x0
///                                    ###
///                                    * Delayed output chroma by 1 clock
///                                    ###
///               %unsigned 1  sft_rst                   0x0
///                                    ###
///                                    * This is active high clear or soft reset bit. When it is high, UPS_420_422 reset to initial state.
///                                    ###
///               %unsigned 1  use_blank                 0x0
///                                    ###
///                                    * 0 : Use boundary pixel repetition for boundary interpolation
///                                    * 1 : Use blank pixel programmed using yblank_regs and cblank_regs for boundary interpolation.
///                                    ###
///               %unsigned 12 yblank_regs               0x0
///                                    ###
///                                    * luma blank value for initial and end of line pixel taps.
///                                    ###
///               %unsigned 12 cblank_regs               0x800
///                                    ###
///                                    * chroma blank value for initial and end of line pixel taps.
///                                    ###
///               %%        2          # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %unsigned 13 ups_c0                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 0 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c1                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 1 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 13 ups_c2                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 2 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c3                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 3 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %unsigned 13 ups_c4                    0x400
///                                    ###
///                                    * 13 bit upsampler coefficient 4 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c5                    0x800
///                                    ###
///                                    * 13 bit upsampler coefficient 5 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %unsigned 13 ups_c6                    0x400
///                                    ###
///                                    * 13 bit upsampler coefficient 6 in 2s complement format.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 13 hres_regs                 0xF00
///                                    ###
///                                    * this should be programmed with active pixel count in a line.
///                                    ###
///               %unsigned 13 htot_regs                 0x1130
///                                    ###
///                                    * this should be programmed with total pixel count in line.
///                                    ###
///               %unsigned 1  auto_pixcnt               0x0
///                                    ###
///                                    * 0: hres_regs and htot_regs will be used to generate hde timing and delay.
///                                    * 1: automatically count hres and htotal pixel count. This will require hde is blanking region.
///                                    ###
///               %unsigned 1  power_opt                 0x0
///                                    ###
///                                    * Power optimized RTL logic selection.
///                                    * 0: Disables power optimized RTL logic.
///                                    * 1: Enables power optimized RTL logic.
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 6  top_crop                  0x0
///                                    ###
///                                    * Crop for top lines.(It should be multiple of 2)
///                                    ###
///               %unsigned 6  bot_crop                  0x0
///                                    ###
///                                    * Crop for bot lines.(It should be multiple of 2)
///                                    ###
///               %unsigned 6  left_crop                 0x0
///                                    ###
///                                    * Crop for left pixels.
///                                    ###
///               %unsigned 6  right_crop                0x0
///                                    ###
///                                    * Crop for right pixels.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x0001C CFG7                 (P)
///               %unsigned 13 vres_regs                 0x870
///                                    ###
///                                    * Input vertical resolution
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00020 CFG8                 (P)
///               %unsigned 1  pdwn_regs                 0x0
///                                    ###
///                                    * Wired to internal SRAMs' pwdn port.
///                                    ###
///               %unsigned 1  pdlvmc_regs               0x0
///                                    ###
///                                    * Wired to internal SRAMs' pdlvmc port.
///                                    ###
///               %unsigned 1  pdfvssm_regs              0x0
///                                    ###
///                                    * Wired to internal SRAMs' pdfvssm ports.
///                                    ###
///               %unsigned 2  dpwr_regs                 0x3
///                                    ###
///                                    * Internal Dynamic power control.
///                                    * Bit[1] - cg_en: controls clock to internal logic.
///                                    * 1: enables internal dynamic clock gating.
///                                    * 0: disables internal dynamic clock gating.
///                                    * Bit[0] - ctrl_cen: controls CEN to SRAMs
///                                    * 1: enables SRAMs dynamically.
///                                    * 0: SRAMs always enabled.
///                                    * End of UPS_420_422_SP_12b register group
///                                    ###
///               %%        27         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      36B, bits:     191b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_UPS_420_422_SP_12b
#define h_UPS_420_422_SP_12b (){}

    #define     RA_UPS_420_422_SP_12b_CFG0                     0x0000

    #define     BA_UPS_420_422_SP_12b_CFG0_enable              0x0000
    #define     B16UPS_420_422_SP_12b_CFG0_enable              0x0000
    #define   LSb32UPS_420_422_SP_12b_CFG0_enable                 0
    #define   LSb16UPS_420_422_SP_12b_CFG0_enable                 0
    #define       bUPS_420_422_SP_12b_CFG0_enable              1
    #define   MSK32UPS_420_422_SP_12b_CFG0_enable                 0x00000001

    #define     BA_UPS_420_422_SP_12b_CFG0_cswap_regs          0x0000
    #define     B16UPS_420_422_SP_12b_CFG0_cswap_regs          0x0000
    #define   LSb32UPS_420_422_SP_12b_CFG0_cswap_regs             1
    #define   LSb16UPS_420_422_SP_12b_CFG0_cswap_regs             1
    #define       bUPS_420_422_SP_12b_CFG0_cswap_regs          1
    #define   MSK32UPS_420_422_SP_12b_CFG0_cswap_regs             0x00000002

    #define     BA_UPS_420_422_SP_12b_CFG0_yshift_regs         0x0000
    #define     B16UPS_420_422_SP_12b_CFG0_yshift_regs         0x0000
    #define   LSb32UPS_420_422_SP_12b_CFG0_yshift_regs            2
    #define   LSb16UPS_420_422_SP_12b_CFG0_yshift_regs            2
    #define       bUPS_420_422_SP_12b_CFG0_yshift_regs         1
    #define   MSK32UPS_420_422_SP_12b_CFG0_yshift_regs            0x00000004

    #define     BA_UPS_420_422_SP_12b_CFG0_cshift_regs         0x0000
    #define     B16UPS_420_422_SP_12b_CFG0_cshift_regs         0x0000
    #define   LSb32UPS_420_422_SP_12b_CFG0_cshift_regs            3
    #define   LSb16UPS_420_422_SP_12b_CFG0_cshift_regs            3
    #define       bUPS_420_422_SP_12b_CFG0_cshift_regs         1
    #define   MSK32UPS_420_422_SP_12b_CFG0_cshift_regs            0x00000008

    #define     BA_UPS_420_422_SP_12b_CFG0_sft_rst             0x0000
    #define     B16UPS_420_422_SP_12b_CFG0_sft_rst             0x0000
    #define   LSb32UPS_420_422_SP_12b_CFG0_sft_rst                4
    #define   LSb16UPS_420_422_SP_12b_CFG0_sft_rst                4
    #define       bUPS_420_422_SP_12b_CFG0_sft_rst             1
    #define   MSK32UPS_420_422_SP_12b_CFG0_sft_rst                0x00000010

    #define     BA_UPS_420_422_SP_12b_CFG0_use_blank           0x0000
    #define     B16UPS_420_422_SP_12b_CFG0_use_blank           0x0000
    #define   LSb32UPS_420_422_SP_12b_CFG0_use_blank              5
    #define   LSb16UPS_420_422_SP_12b_CFG0_use_blank              5
    #define       bUPS_420_422_SP_12b_CFG0_use_blank           1
    #define   MSK32UPS_420_422_SP_12b_CFG0_use_blank              0x00000020

    #define     BA_UPS_420_422_SP_12b_CFG0_yblank_regs         0x0000
    #define     B16UPS_420_422_SP_12b_CFG0_yblank_regs         0x0000
    #define   LSb32UPS_420_422_SP_12b_CFG0_yblank_regs            6
    #define   LSb16UPS_420_422_SP_12b_CFG0_yblank_regs            6
    #define       bUPS_420_422_SP_12b_CFG0_yblank_regs         12
    #define   MSK32UPS_420_422_SP_12b_CFG0_yblank_regs            0x0003FFC0

    #define     BA_UPS_420_422_SP_12b_CFG0_cblank_regs         0x0002
    #define     B16UPS_420_422_SP_12b_CFG0_cblank_regs         0x0002
    #define   LSb32UPS_420_422_SP_12b_CFG0_cblank_regs            18
    #define   LSb16UPS_420_422_SP_12b_CFG0_cblank_regs            2
    #define       bUPS_420_422_SP_12b_CFG0_cblank_regs         12
    #define   MSK32UPS_420_422_SP_12b_CFG0_cblank_regs            0x3FFC0000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_12b_CFG1                     0x0004

    #define     BA_UPS_420_422_SP_12b_CFG1_ups_c0              0x0004
    #define     B16UPS_420_422_SP_12b_CFG1_ups_c0              0x0004
    #define   LSb32UPS_420_422_SP_12b_CFG1_ups_c0                 0
    #define   LSb16UPS_420_422_SP_12b_CFG1_ups_c0                 0
    #define       bUPS_420_422_SP_12b_CFG1_ups_c0              13
    #define   MSK32UPS_420_422_SP_12b_CFG1_ups_c0                 0x00001FFF

    #define     BA_UPS_420_422_SP_12b_CFG1_ups_c1              0x0005
    #define     B16UPS_420_422_SP_12b_CFG1_ups_c1              0x0004
    #define   LSb32UPS_420_422_SP_12b_CFG1_ups_c1                 13
    #define   LSb16UPS_420_422_SP_12b_CFG1_ups_c1                 13
    #define       bUPS_420_422_SP_12b_CFG1_ups_c1              13
    #define   MSK32UPS_420_422_SP_12b_CFG1_ups_c1                 0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_12b_CFG2                     0x0008

    #define     BA_UPS_420_422_SP_12b_CFG2_ups_c2              0x0008
    #define     B16UPS_420_422_SP_12b_CFG2_ups_c2              0x0008
    #define   LSb32UPS_420_422_SP_12b_CFG2_ups_c2                 0
    #define   LSb16UPS_420_422_SP_12b_CFG2_ups_c2                 0
    #define       bUPS_420_422_SP_12b_CFG2_ups_c2              13
    #define   MSK32UPS_420_422_SP_12b_CFG2_ups_c2                 0x00001FFF

    #define     BA_UPS_420_422_SP_12b_CFG2_ups_c3              0x0009
    #define     B16UPS_420_422_SP_12b_CFG2_ups_c3              0x0008
    #define   LSb32UPS_420_422_SP_12b_CFG2_ups_c3                 13
    #define   LSb16UPS_420_422_SP_12b_CFG2_ups_c3                 13
    #define       bUPS_420_422_SP_12b_CFG2_ups_c3              13
    #define   MSK32UPS_420_422_SP_12b_CFG2_ups_c3                 0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_12b_CFG3                     0x000C

    #define     BA_UPS_420_422_SP_12b_CFG3_ups_c4              0x000C
    #define     B16UPS_420_422_SP_12b_CFG3_ups_c4              0x000C
    #define   LSb32UPS_420_422_SP_12b_CFG3_ups_c4                 0
    #define   LSb16UPS_420_422_SP_12b_CFG3_ups_c4                 0
    #define       bUPS_420_422_SP_12b_CFG3_ups_c4              13
    #define   MSK32UPS_420_422_SP_12b_CFG3_ups_c4                 0x00001FFF

    #define     BA_UPS_420_422_SP_12b_CFG3_ups_c5              0x000D
    #define     B16UPS_420_422_SP_12b_CFG3_ups_c5              0x000C
    #define   LSb32UPS_420_422_SP_12b_CFG3_ups_c5                 13
    #define   LSb16UPS_420_422_SP_12b_CFG3_ups_c5                 13
    #define       bUPS_420_422_SP_12b_CFG3_ups_c5              13
    #define   MSK32UPS_420_422_SP_12b_CFG3_ups_c5                 0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_12b_CFG4                     0x0010

    #define     BA_UPS_420_422_SP_12b_CFG4_ups_c6              0x0010
    #define     B16UPS_420_422_SP_12b_CFG4_ups_c6              0x0010
    #define   LSb32UPS_420_422_SP_12b_CFG4_ups_c6                 0
    #define   LSb16UPS_420_422_SP_12b_CFG4_ups_c6                 0
    #define       bUPS_420_422_SP_12b_CFG4_ups_c6              13
    #define   MSK32UPS_420_422_SP_12b_CFG4_ups_c6                 0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_12b_CFG5                     0x0014

    #define     BA_UPS_420_422_SP_12b_CFG5_hres_regs           0x0014
    #define     B16UPS_420_422_SP_12b_CFG5_hres_regs           0x0014
    #define   LSb32UPS_420_422_SP_12b_CFG5_hres_regs              0
    #define   LSb16UPS_420_422_SP_12b_CFG5_hres_regs              0
    #define       bUPS_420_422_SP_12b_CFG5_hres_regs           13
    #define   MSK32UPS_420_422_SP_12b_CFG5_hres_regs              0x00001FFF

    #define     BA_UPS_420_422_SP_12b_CFG5_htot_regs           0x0015
    #define     B16UPS_420_422_SP_12b_CFG5_htot_regs           0x0014
    #define   LSb32UPS_420_422_SP_12b_CFG5_htot_regs              13
    #define   LSb16UPS_420_422_SP_12b_CFG5_htot_regs              13
    #define       bUPS_420_422_SP_12b_CFG5_htot_regs           13
    #define   MSK32UPS_420_422_SP_12b_CFG5_htot_regs              0x03FFE000

    #define     BA_UPS_420_422_SP_12b_CFG5_auto_pixcnt         0x0017
    #define     B16UPS_420_422_SP_12b_CFG5_auto_pixcnt         0x0016
    #define   LSb32UPS_420_422_SP_12b_CFG5_auto_pixcnt            26
    #define   LSb16UPS_420_422_SP_12b_CFG5_auto_pixcnt            10
    #define       bUPS_420_422_SP_12b_CFG5_auto_pixcnt         1
    #define   MSK32UPS_420_422_SP_12b_CFG5_auto_pixcnt            0x04000000

    #define     BA_UPS_420_422_SP_12b_CFG5_power_opt           0x0017
    #define     B16UPS_420_422_SP_12b_CFG5_power_opt           0x0016
    #define   LSb32UPS_420_422_SP_12b_CFG5_power_opt              27
    #define   LSb16UPS_420_422_SP_12b_CFG5_power_opt              11
    #define       bUPS_420_422_SP_12b_CFG5_power_opt           1
    #define   MSK32UPS_420_422_SP_12b_CFG5_power_opt              0x08000000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_12b_CFG6                     0x0018

    #define     BA_UPS_420_422_SP_12b_CFG6_top_crop            0x0018
    #define     B16UPS_420_422_SP_12b_CFG6_top_crop            0x0018
    #define   LSb32UPS_420_422_SP_12b_CFG6_top_crop               0
    #define   LSb16UPS_420_422_SP_12b_CFG6_top_crop               0
    #define       bUPS_420_422_SP_12b_CFG6_top_crop            6
    #define   MSK32UPS_420_422_SP_12b_CFG6_top_crop               0x0000003F

    #define     BA_UPS_420_422_SP_12b_CFG6_bot_crop            0x0018
    #define     B16UPS_420_422_SP_12b_CFG6_bot_crop            0x0018
    #define   LSb32UPS_420_422_SP_12b_CFG6_bot_crop               6
    #define   LSb16UPS_420_422_SP_12b_CFG6_bot_crop               6
    #define       bUPS_420_422_SP_12b_CFG6_bot_crop            6
    #define   MSK32UPS_420_422_SP_12b_CFG6_bot_crop               0x00000FC0

    #define     BA_UPS_420_422_SP_12b_CFG6_left_crop           0x0019
    #define     B16UPS_420_422_SP_12b_CFG6_left_crop           0x0018
    #define   LSb32UPS_420_422_SP_12b_CFG6_left_crop              12
    #define   LSb16UPS_420_422_SP_12b_CFG6_left_crop              12
    #define       bUPS_420_422_SP_12b_CFG6_left_crop           6
    #define   MSK32UPS_420_422_SP_12b_CFG6_left_crop              0x0003F000

    #define     BA_UPS_420_422_SP_12b_CFG6_right_crop          0x001A
    #define     B16UPS_420_422_SP_12b_CFG6_right_crop          0x001A
    #define   LSb32UPS_420_422_SP_12b_CFG6_right_crop             18
    #define   LSb16UPS_420_422_SP_12b_CFG6_right_crop             2
    #define       bUPS_420_422_SP_12b_CFG6_right_crop          6
    #define   MSK32UPS_420_422_SP_12b_CFG6_right_crop             0x00FC0000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_12b_CFG7                     0x001C

    #define     BA_UPS_420_422_SP_12b_CFG7_vres_regs           0x001C
    #define     B16UPS_420_422_SP_12b_CFG7_vres_regs           0x001C
    #define   LSb32UPS_420_422_SP_12b_CFG7_vres_regs              0
    #define   LSb16UPS_420_422_SP_12b_CFG7_vres_regs              0
    #define       bUPS_420_422_SP_12b_CFG7_vres_regs           13
    #define   MSK32UPS_420_422_SP_12b_CFG7_vres_regs              0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_12b_CFG8                     0x0020

    #define     BA_UPS_420_422_SP_12b_CFG8_pdwn_regs           0x0020
    #define     B16UPS_420_422_SP_12b_CFG8_pdwn_regs           0x0020
    #define   LSb32UPS_420_422_SP_12b_CFG8_pdwn_regs              0
    #define   LSb16UPS_420_422_SP_12b_CFG8_pdwn_regs              0
    #define       bUPS_420_422_SP_12b_CFG8_pdwn_regs           1
    #define   MSK32UPS_420_422_SP_12b_CFG8_pdwn_regs              0x00000001

    #define     BA_UPS_420_422_SP_12b_CFG8_pdlvmc_regs         0x0020
    #define     B16UPS_420_422_SP_12b_CFG8_pdlvmc_regs         0x0020
    #define   LSb32UPS_420_422_SP_12b_CFG8_pdlvmc_regs            1
    #define   LSb16UPS_420_422_SP_12b_CFG8_pdlvmc_regs            1
    #define       bUPS_420_422_SP_12b_CFG8_pdlvmc_regs         1
    #define   MSK32UPS_420_422_SP_12b_CFG8_pdlvmc_regs            0x00000002

    #define     BA_UPS_420_422_SP_12b_CFG8_pdfvssm_regs        0x0020
    #define     B16UPS_420_422_SP_12b_CFG8_pdfvssm_regs        0x0020
    #define   LSb32UPS_420_422_SP_12b_CFG8_pdfvssm_regs           2
    #define   LSb16UPS_420_422_SP_12b_CFG8_pdfvssm_regs           2
    #define       bUPS_420_422_SP_12b_CFG8_pdfvssm_regs        1
    #define   MSK32UPS_420_422_SP_12b_CFG8_pdfvssm_regs           0x00000004

    #define     BA_UPS_420_422_SP_12b_CFG8_dpwr_regs           0x0020
    #define     B16UPS_420_422_SP_12b_CFG8_dpwr_regs           0x0020
    #define   LSb32UPS_420_422_SP_12b_CFG8_dpwr_regs              3
    #define   LSb16UPS_420_422_SP_12b_CFG8_dpwr_regs              3
    #define       bUPS_420_422_SP_12b_CFG8_dpwr_regs           2
    #define   MSK32UPS_420_422_SP_12b_CFG8_dpwr_regs              0x00000018
    ///////////////////////////////////////////////////////////

    typedef struct SIE_UPS_420_422_SP_12b {
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_12b_CFG0_enable(r32)         _BFGET_(r32, 0, 0)
    #define   SET32UPS_420_422_SP_12b_CFG0_enable(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16UPS_420_422_SP_12b_CFG0_enable(r16)         _BFGET_(r16, 0, 0)
    #define   SET16UPS_420_422_SP_12b_CFG0_enable(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32UPS_420_422_SP_12b_CFG0_cswap_regs(r32)     _BFGET_(r32, 1, 1)
    #define   SET32UPS_420_422_SP_12b_CFG0_cswap_regs(r32,v)   _BFSET_(r32, 1, 1,v)
    #define   GET16UPS_420_422_SP_12b_CFG0_cswap_regs(r16)     _BFGET_(r16, 1, 1)
    #define   SET16UPS_420_422_SP_12b_CFG0_cswap_regs(r16,v)   _BFSET_(r16, 1, 1,v)

    #define   GET32UPS_420_422_SP_12b_CFG0_yshift_regs(r32)    _BFGET_(r32, 2, 2)
    #define   SET32UPS_420_422_SP_12b_CFG0_yshift_regs(r32,v)  _BFSET_(r32, 2, 2,v)
    #define   GET16UPS_420_422_SP_12b_CFG0_yshift_regs(r16)    _BFGET_(r16, 2, 2)
    #define   SET16UPS_420_422_SP_12b_CFG0_yshift_regs(r16,v)  _BFSET_(r16, 2, 2,v)

    #define   GET32UPS_420_422_SP_12b_CFG0_cshift_regs(r32)    _BFGET_(r32, 3, 3)
    #define   SET32UPS_420_422_SP_12b_CFG0_cshift_regs(r32,v)  _BFSET_(r32, 3, 3,v)
    #define   GET16UPS_420_422_SP_12b_CFG0_cshift_regs(r16)    _BFGET_(r16, 3, 3)
    #define   SET16UPS_420_422_SP_12b_CFG0_cshift_regs(r16,v)  _BFSET_(r16, 3, 3,v)

    #define   GET32UPS_420_422_SP_12b_CFG0_sft_rst(r32)        _BFGET_(r32, 4, 4)
    #define   SET32UPS_420_422_SP_12b_CFG0_sft_rst(r32,v)      _BFSET_(r32, 4, 4,v)
    #define   GET16UPS_420_422_SP_12b_CFG0_sft_rst(r16)        _BFGET_(r16, 4, 4)
    #define   SET16UPS_420_422_SP_12b_CFG0_sft_rst(r16,v)      _BFSET_(r16, 4, 4,v)

    #define   GET32UPS_420_422_SP_12b_CFG0_use_blank(r32)      _BFGET_(r32, 5, 5)
    #define   SET32UPS_420_422_SP_12b_CFG0_use_blank(r32,v)    _BFSET_(r32, 5, 5,v)
    #define   GET16UPS_420_422_SP_12b_CFG0_use_blank(r16)      _BFGET_(r16, 5, 5)
    #define   SET16UPS_420_422_SP_12b_CFG0_use_blank(r16,v)    _BFSET_(r16, 5, 5,v)

    #define   GET32UPS_420_422_SP_12b_CFG0_yblank_regs(r32)    _BFGET_(r32,17, 6)
    #define   SET32UPS_420_422_SP_12b_CFG0_yblank_regs(r32,v)  _BFSET_(r32,17, 6,v)

    #define   GET32UPS_420_422_SP_12b_CFG0_cblank_regs(r32)    _BFGET_(r32,29,18)
    #define   SET32UPS_420_422_SP_12b_CFG0_cblank_regs(r32,v)  _BFSET_(r32,29,18,v)
    #define   GET16UPS_420_422_SP_12b_CFG0_cblank_regs(r16)    _BFGET_(r16,13, 2)
    #define   SET16UPS_420_422_SP_12b_CFG0_cblank_regs(r16,v)  _BFSET_(r16,13, 2,v)

    #define     w32UPS_420_422_SP_12b_CFG0                     {\
            UNSG32 uCFG0_enable                                :  1;\
            UNSG32 uCFG0_cswap_regs                            :  1;\
            UNSG32 uCFG0_yshift_regs                           :  1;\
            UNSG32 uCFG0_cshift_regs                           :  1;\
            UNSG32 uCFG0_sft_rst                               :  1;\
            UNSG32 uCFG0_use_blank                             :  1;\
            UNSG32 uCFG0_yblank_regs                           : 12;\
            UNSG32 uCFG0_cblank_regs                           : 12;\
            UNSG32 RSVDx0_b30                                  :  2;\
          }
    union { UNSG32 u32UPS_420_422_SP_12b_CFG0;
            struct w32UPS_420_422_SP_12b_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_12b_CFG1_ups_c0(r32)         _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_12b_CFG1_ups_c0(r32,v)       _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_12b_CFG1_ups_c0(r16)         _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_12b_CFG1_ups_c0(r16,v)       _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_SP_12b_CFG1_ups_c1(r32)         _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_SP_12b_CFG1_ups_c1(r32,v)       _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_SP_12b_CFG1                     {\
            UNSG32 uCFG1_ups_c0                                : 13;\
            UNSG32 uCFG1_ups_c1                                : 13;\
            UNSG32 RSVDx4_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_SP_12b_CFG1;
            struct w32UPS_420_422_SP_12b_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_12b_CFG2_ups_c2(r32)         _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_12b_CFG2_ups_c2(r32,v)       _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_12b_CFG2_ups_c2(r16)         _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_12b_CFG2_ups_c2(r16,v)       _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_SP_12b_CFG2_ups_c3(r32)         _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_SP_12b_CFG2_ups_c3(r32,v)       _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_SP_12b_CFG2                     {\
            UNSG32 uCFG2_ups_c2                                : 13;\
            UNSG32 uCFG2_ups_c3                                : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_SP_12b_CFG2;
            struct w32UPS_420_422_SP_12b_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_12b_CFG3_ups_c4(r32)         _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_12b_CFG3_ups_c4(r32,v)       _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_12b_CFG3_ups_c4(r16)         _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_12b_CFG3_ups_c4(r16,v)       _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_SP_12b_CFG3_ups_c5(r32)         _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_SP_12b_CFG3_ups_c5(r32,v)       _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_SP_12b_CFG3                     {\
            UNSG32 uCFG3_ups_c4                                : 13;\
            UNSG32 uCFG3_ups_c5                                : 13;\
            UNSG32 RSVDxC_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_SP_12b_CFG3;
            struct w32UPS_420_422_SP_12b_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_12b_CFG4_ups_c6(r32)         _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_12b_CFG4_ups_c6(r32,v)       _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_12b_CFG4_ups_c6(r16)         _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_12b_CFG4_ups_c6(r16,v)       _BFSET_(r16,12, 0,v)

    #define     w32UPS_420_422_SP_12b_CFG4                     {\
            UNSG32 uCFG4_ups_c6                                : 13;\
            UNSG32 RSVDx10_b13                                 : 19;\
          }
    union { UNSG32 u32UPS_420_422_SP_12b_CFG4;
            struct w32UPS_420_422_SP_12b_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_12b_CFG5_hres_regs(r32)      _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_12b_CFG5_hres_regs(r32,v)    _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_12b_CFG5_hres_regs(r16)      _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_12b_CFG5_hres_regs(r16,v)    _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_SP_12b_CFG5_htot_regs(r32)      _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_SP_12b_CFG5_htot_regs(r32,v)    _BFSET_(r32,25,13,v)

    #define   GET32UPS_420_422_SP_12b_CFG5_auto_pixcnt(r32)    _BFGET_(r32,26,26)
    #define   SET32UPS_420_422_SP_12b_CFG5_auto_pixcnt(r32,v)  _BFSET_(r32,26,26,v)
    #define   GET16UPS_420_422_SP_12b_CFG5_auto_pixcnt(r16)    _BFGET_(r16,10,10)
    #define   SET16UPS_420_422_SP_12b_CFG5_auto_pixcnt(r16,v)  _BFSET_(r16,10,10,v)

    #define   GET32UPS_420_422_SP_12b_CFG5_power_opt(r32)      _BFGET_(r32,27,27)
    #define   SET32UPS_420_422_SP_12b_CFG5_power_opt(r32,v)    _BFSET_(r32,27,27,v)
    #define   GET16UPS_420_422_SP_12b_CFG5_power_opt(r16)      _BFGET_(r16,11,11)
    #define   SET16UPS_420_422_SP_12b_CFG5_power_opt(r16,v)    _BFSET_(r16,11,11,v)

    #define     w32UPS_420_422_SP_12b_CFG5                     {\
            UNSG32 uCFG5_hres_regs                             : 13;\
            UNSG32 uCFG5_htot_regs                             : 13;\
            UNSG32 uCFG5_auto_pixcnt                           :  1;\
            UNSG32 uCFG5_power_opt                             :  1;\
            UNSG32 RSVDx14_b28                                 :  4;\
          }
    union { UNSG32 u32UPS_420_422_SP_12b_CFG5;
            struct w32UPS_420_422_SP_12b_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_12b_CFG6_top_crop(r32)       _BFGET_(r32, 5, 0)
    #define   SET32UPS_420_422_SP_12b_CFG6_top_crop(r32,v)     _BFSET_(r32, 5, 0,v)
    #define   GET16UPS_420_422_SP_12b_CFG6_top_crop(r16)       _BFGET_(r16, 5, 0)
    #define   SET16UPS_420_422_SP_12b_CFG6_top_crop(r16,v)     _BFSET_(r16, 5, 0,v)

    #define   GET32UPS_420_422_SP_12b_CFG6_bot_crop(r32)       _BFGET_(r32,11, 6)
    #define   SET32UPS_420_422_SP_12b_CFG6_bot_crop(r32,v)     _BFSET_(r32,11, 6,v)
    #define   GET16UPS_420_422_SP_12b_CFG6_bot_crop(r16)       _BFGET_(r16,11, 6)
    #define   SET16UPS_420_422_SP_12b_CFG6_bot_crop(r16,v)     _BFSET_(r16,11, 6,v)

    #define   GET32UPS_420_422_SP_12b_CFG6_left_crop(r32)      _BFGET_(r32,17,12)
    #define   SET32UPS_420_422_SP_12b_CFG6_left_crop(r32,v)    _BFSET_(r32,17,12,v)

    #define   GET32UPS_420_422_SP_12b_CFG6_right_crop(r32)     _BFGET_(r32,23,18)
    #define   SET32UPS_420_422_SP_12b_CFG6_right_crop(r32,v)   _BFSET_(r32,23,18,v)
    #define   GET16UPS_420_422_SP_12b_CFG6_right_crop(r16)     _BFGET_(r16, 7, 2)
    #define   SET16UPS_420_422_SP_12b_CFG6_right_crop(r16,v)   _BFSET_(r16, 7, 2,v)

    #define     w32UPS_420_422_SP_12b_CFG6                     {\
            UNSG32 uCFG6_top_crop                              :  6;\
            UNSG32 uCFG6_bot_crop                              :  6;\
            UNSG32 uCFG6_left_crop                             :  6;\
            UNSG32 uCFG6_right_crop                            :  6;\
            UNSG32 RSVDx18_b24                                 :  8;\
          }
    union { UNSG32 u32UPS_420_422_SP_12b_CFG6;
            struct w32UPS_420_422_SP_12b_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_12b_CFG7_vres_regs(r32)      _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_12b_CFG7_vres_regs(r32,v)    _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_12b_CFG7_vres_regs(r16)      _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_12b_CFG7_vres_regs(r16,v)    _BFSET_(r16,12, 0,v)

    #define     w32UPS_420_422_SP_12b_CFG7                     {\
            UNSG32 uCFG7_vres_regs                             : 13;\
            UNSG32 RSVDx1C_b13                                 : 19;\
          }
    union { UNSG32 u32UPS_420_422_SP_12b_CFG7;
            struct w32UPS_420_422_SP_12b_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_12b_CFG8_pdwn_regs(r32)      _BFGET_(r32, 0, 0)
    #define   SET32UPS_420_422_SP_12b_CFG8_pdwn_regs(r32,v)    _BFSET_(r32, 0, 0,v)
    #define   GET16UPS_420_422_SP_12b_CFG8_pdwn_regs(r16)      _BFGET_(r16, 0, 0)
    #define   SET16UPS_420_422_SP_12b_CFG8_pdwn_regs(r16,v)    _BFSET_(r16, 0, 0,v)

    #define   GET32UPS_420_422_SP_12b_CFG8_pdlvmc_regs(r32)    _BFGET_(r32, 1, 1)
    #define   SET32UPS_420_422_SP_12b_CFG8_pdlvmc_regs(r32,v)  _BFSET_(r32, 1, 1,v)
    #define   GET16UPS_420_422_SP_12b_CFG8_pdlvmc_regs(r16)    _BFGET_(r16, 1, 1)
    #define   SET16UPS_420_422_SP_12b_CFG8_pdlvmc_regs(r16,v)  _BFSET_(r16, 1, 1,v)

    #define   GET32UPS_420_422_SP_12b_CFG8_pdfvssm_regs(r32)   _BFGET_(r32, 2, 2)
    #define   SET32UPS_420_422_SP_12b_CFG8_pdfvssm_regs(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16UPS_420_422_SP_12b_CFG8_pdfvssm_regs(r16)   _BFGET_(r16, 2, 2)
    #define   SET16UPS_420_422_SP_12b_CFG8_pdfvssm_regs(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32UPS_420_422_SP_12b_CFG8_dpwr_regs(r32)      _BFGET_(r32, 4, 3)
    #define   SET32UPS_420_422_SP_12b_CFG8_dpwr_regs(r32,v)    _BFSET_(r32, 4, 3,v)
    #define   GET16UPS_420_422_SP_12b_CFG8_dpwr_regs(r16)      _BFGET_(r16, 4, 3)
    #define   SET16UPS_420_422_SP_12b_CFG8_dpwr_regs(r16,v)    _BFSET_(r16, 4, 3,v)

    #define     w32UPS_420_422_SP_12b_CFG8                     {\
            UNSG32 uCFG8_pdwn_regs                             :  1;\
            UNSG32 uCFG8_pdlvmc_regs                           :  1;\
            UNSG32 uCFG8_pdfvssm_regs                          :  1;\
            UNSG32 uCFG8_dpwr_regs                             :  2;\
            UNSG32 RSVDx20_b5                                  : 27;\
          }
    union { UNSG32 u32UPS_420_422_SP_12b_CFG8;
            struct w32UPS_420_422_SP_12b_CFG8;
          };
    ///////////////////////////////////////////////////////////
    } SIE_UPS_420_422_SP_12b;

    typedef union  T32UPS_420_422_SP_12b_CFG0
          { UNSG32 u32;
            struct w32UPS_420_422_SP_12b_CFG0;
                 } T32UPS_420_422_SP_12b_CFG0;
    typedef union  T32UPS_420_422_SP_12b_CFG1
          { UNSG32 u32;
            struct w32UPS_420_422_SP_12b_CFG1;
                 } T32UPS_420_422_SP_12b_CFG1;
    typedef union  T32UPS_420_422_SP_12b_CFG2
          { UNSG32 u32;
            struct w32UPS_420_422_SP_12b_CFG2;
                 } T32UPS_420_422_SP_12b_CFG2;
    typedef union  T32UPS_420_422_SP_12b_CFG3
          { UNSG32 u32;
            struct w32UPS_420_422_SP_12b_CFG3;
                 } T32UPS_420_422_SP_12b_CFG3;
    typedef union  T32UPS_420_422_SP_12b_CFG4
          { UNSG32 u32;
            struct w32UPS_420_422_SP_12b_CFG4;
                 } T32UPS_420_422_SP_12b_CFG4;
    typedef union  T32UPS_420_422_SP_12b_CFG5
          { UNSG32 u32;
            struct w32UPS_420_422_SP_12b_CFG5;
                 } T32UPS_420_422_SP_12b_CFG5;
    typedef union  T32UPS_420_422_SP_12b_CFG6
          { UNSG32 u32;
            struct w32UPS_420_422_SP_12b_CFG6;
                 } T32UPS_420_422_SP_12b_CFG6;
    typedef union  T32UPS_420_422_SP_12b_CFG7
          { UNSG32 u32;
            struct w32UPS_420_422_SP_12b_CFG7;
                 } T32UPS_420_422_SP_12b_CFG7;
    typedef union  T32UPS_420_422_SP_12b_CFG8
          { UNSG32 u32;
            struct w32UPS_420_422_SP_12b_CFG8;
                 } T32UPS_420_422_SP_12b_CFG8;
    ///////////////////////////////////////////////////////////

    typedef union  TUPS_420_422_SP_12b_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_12b_CFG0;
                   };
                 } TUPS_420_422_SP_12b_CFG0;
    typedef union  TUPS_420_422_SP_12b_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_12b_CFG1;
                   };
                 } TUPS_420_422_SP_12b_CFG1;
    typedef union  TUPS_420_422_SP_12b_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_12b_CFG2;
                   };
                 } TUPS_420_422_SP_12b_CFG2;
    typedef union  TUPS_420_422_SP_12b_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_12b_CFG3;
                   };
                 } TUPS_420_422_SP_12b_CFG3;
    typedef union  TUPS_420_422_SP_12b_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_12b_CFG4;
                   };
                 } TUPS_420_422_SP_12b_CFG4;
    typedef union  TUPS_420_422_SP_12b_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_12b_CFG5;
                   };
                 } TUPS_420_422_SP_12b_CFG5;
    typedef union  TUPS_420_422_SP_12b_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_12b_CFG6;
                   };
                 } TUPS_420_422_SP_12b_CFG6;
    typedef union  TUPS_420_422_SP_12b_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_12b_CFG7;
                   };
                 } TUPS_420_422_SP_12b_CFG7;
    typedef union  TUPS_420_422_SP_12b_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_12b_CFG8;
                   };
                 } TUPS_420_422_SP_12b_CFG8;

    ///////////////////////////////////////////////////////////
     SIGN32 UPS_420_422_SP_12b_drvrd(SIE_UPS_420_422_SP_12b *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 UPS_420_422_SP_12b_drvwr(SIE_UPS_420_422_SP_12b *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void UPS_420_422_SP_12b_reset(SIE_UPS_420_422_SP_12b *p);
     SIGN32 UPS_420_422_SP_12b_cmp  (SIE_UPS_420_422_SP_12b *p, SIE_UPS_420_422_SP_12b *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define UPS_420_422_SP_12b_check(p,pie,pfx,hLOG) UPS_420_422_SP_12b_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define UPS_420_422_SP_12b_print(p,    pfx,hLOG) UPS_420_422_SP_12b_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: UPS_420_422_SP_12b
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ALPHADIV                biu              (4,4)
///     ###
///     * Register specification of interface Inverse Tone Mapping Operator
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 1  div_enb                   0x0
///                                    ###
///                                    * Enable alpha divider block for Alpha pre-multiplied RGB to straight RGB
///                                    ###
///               %unsigned 10 data_min                  0x0
///                                    ###
///                                    * Graphics data minimum range
///                                    ###
///               %unsigned 10 data_max                  0x3FF
///                                    ###
///                                    * Graphics data maximum range
///                                    ###
///               %%        11         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      21b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ALPHADIV
#define h_ALPHADIV (){}

    #define     RA_ALPHADIV_CFG0                               0x0000

    #define     BA_ALPHADIV_CFG0_div_enb                       0x0000
    #define     B16ALPHADIV_CFG0_div_enb                       0x0000
    #define   LSb32ALPHADIV_CFG0_div_enb                          0
    #define   LSb16ALPHADIV_CFG0_div_enb                          0
    #define       bALPHADIV_CFG0_div_enb                       1
    #define   MSK32ALPHADIV_CFG0_div_enb                          0x00000001

    #define     BA_ALPHADIV_CFG0_data_min                      0x0000
    #define     B16ALPHADIV_CFG0_data_min                      0x0000
    #define   LSb32ALPHADIV_CFG0_data_min                         1
    #define   LSb16ALPHADIV_CFG0_data_min                         1
    #define       bALPHADIV_CFG0_data_min                      10
    #define   MSK32ALPHADIV_CFG0_data_min                         0x000007FE

    #define     BA_ALPHADIV_CFG0_data_max                      0x0001
    #define     B16ALPHADIV_CFG0_data_max                      0x0000
    #define   LSb32ALPHADIV_CFG0_data_max                         11
    #define   LSb16ALPHADIV_CFG0_data_max                         11
    #define       bALPHADIV_CFG0_data_max                      10
    #define   MSK32ALPHADIV_CFG0_data_max                         0x001FF800
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ALPHADIV {
    ///////////////////////////////////////////////////////////
    #define   GET32ALPHADIV_CFG0_div_enb(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32ALPHADIV_CFG0_div_enb(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16ALPHADIV_CFG0_div_enb(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16ALPHADIV_CFG0_div_enb(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32ALPHADIV_CFG0_data_min(r32)                 _BFGET_(r32,10, 1)
    #define   SET32ALPHADIV_CFG0_data_min(r32,v)               _BFSET_(r32,10, 1,v)
    #define   GET16ALPHADIV_CFG0_data_min(r16)                 _BFGET_(r16,10, 1)
    #define   SET16ALPHADIV_CFG0_data_min(r16,v)               _BFSET_(r16,10, 1,v)

    #define   GET32ALPHADIV_CFG0_data_max(r32)                 _BFGET_(r32,20,11)
    #define   SET32ALPHADIV_CFG0_data_max(r32,v)               _BFSET_(r32,20,11,v)

    #define     w32ALPHADIV_CFG0                               {\
            UNSG32 uCFG0_div_enb                               :  1;\
            UNSG32 uCFG0_data_min                              : 10;\
            UNSG32 uCFG0_data_max                              : 10;\
            UNSG32 RSVDx0_b21                                  : 11;\
          }
    union { UNSG32 u32ALPHADIV_CFG0;
            struct w32ALPHADIV_CFG0;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ALPHADIV;

    typedef union  T32ALPHADIV_CFG0
          { UNSG32 u32;
            struct w32ALPHADIV_CFG0;
                 } T32ALPHADIV_CFG0;
    ///////////////////////////////////////////////////////////

    typedef union  TALPHADIV_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32ALPHADIV_CFG0;
                   };
                 } TALPHADIV_CFG0;

    ///////////////////////////////////////////////////////////
     SIGN32 ALPHADIV_drvrd(SIE_ALPHADIV *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ALPHADIV_drvwr(SIE_ALPHADIV *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ALPHADIV_reset(SIE_ALPHADIV *p);
     SIGN32 ALPHADIV_cmp  (SIE_ALPHADIV *p, SIE_ALPHADIV *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ALPHADIV_check(p,pie,pfx,hLOG) ALPHADIV_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ALPHADIV_print(p,    pfx,hLOG) ALPHADIV_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ALPHADIV
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SRAMPWR                                  (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 1  SD                        0x0
///                                    : ON                        0x0
///                                    : SHUTDWN                   0x1
///                                                 ###
///                                                 * Shut down mode achieves highest leakage reduction without data retention
///                                                 ###
///               %unsigned 1  DSLP                      0x0
///                                    : ON                        0x0
///                                    : DEEPSLP                   0x1
///                                                 ###
///                                                 * Deep sleep mode powers down the most of peripheral circuit for leakage reduction and retains memory
///                                                 * array content with lower voltage
///                                                 ###
///               %unsigned 1  SLP                       0x0
///                                    : ON                        0x0
///                                    : SLEEP                     0x1
///                                                 ###
///                                                 * Sleep mode powers down most peripheral circuit for leakage reduction with data retention
///                                                 ###
///               %%        29         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       3b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SRAMPWR
#define h_SRAMPWR (){}

    #define     RA_SRAMPWR_ctrl                                0x0000

    #define     BA_SRAMPWR_ctrl_SD                             0x0000
    #define     B16SRAMPWR_ctrl_SD                             0x0000
    #define   LSb32SRAMPWR_ctrl_SD                                0
    #define   LSb16SRAMPWR_ctrl_SD                                0
    #define       bSRAMPWR_ctrl_SD                             1
    #define   MSK32SRAMPWR_ctrl_SD                                0x00000001
    #define        SRAMPWR_ctrl_SD_ON                                       0x0
    #define        SRAMPWR_ctrl_SD_SHUTDWN                                  0x1

    #define     BA_SRAMPWR_ctrl_DSLP                           0x0000
    #define     B16SRAMPWR_ctrl_DSLP                           0x0000
    #define   LSb32SRAMPWR_ctrl_DSLP                              1
    #define   LSb16SRAMPWR_ctrl_DSLP                              1
    #define       bSRAMPWR_ctrl_DSLP                           1
    #define   MSK32SRAMPWR_ctrl_DSLP                              0x00000002
    #define        SRAMPWR_ctrl_DSLP_ON                                     0x0
    #define        SRAMPWR_ctrl_DSLP_DEEPSLP                                0x1

    #define     BA_SRAMPWR_ctrl_SLP                            0x0000
    #define     B16SRAMPWR_ctrl_SLP                            0x0000
    #define   LSb32SRAMPWR_ctrl_SLP                               2
    #define   LSb16SRAMPWR_ctrl_SLP                               2
    #define       bSRAMPWR_ctrl_SLP                            1
    #define   MSK32SRAMPWR_ctrl_SLP                               0x00000004
    #define        SRAMPWR_ctrl_SLP_ON                                      0x0
    #define        SRAMPWR_ctrl_SLP_SLEEP                                   0x1
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SRAMPWR {
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMPWR_ctrl_SD(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32SRAMPWR_ctrl_SD(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16SRAMPWR_ctrl_SD(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16SRAMPWR_ctrl_SD(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32SRAMPWR_ctrl_DSLP(r32)                      _BFGET_(r32, 1, 1)
    #define   SET32SRAMPWR_ctrl_DSLP(r32,v)                    _BFSET_(r32, 1, 1,v)
    #define   GET16SRAMPWR_ctrl_DSLP(r16)                      _BFGET_(r16, 1, 1)
    #define   SET16SRAMPWR_ctrl_DSLP(r16,v)                    _BFSET_(r16, 1, 1,v)

    #define   GET32SRAMPWR_ctrl_SLP(r32)                       _BFGET_(r32, 2, 2)
    #define   SET32SRAMPWR_ctrl_SLP(r32,v)                     _BFSET_(r32, 2, 2,v)
    #define   GET16SRAMPWR_ctrl_SLP(r16)                       _BFGET_(r16, 2, 2)
    #define   SET16SRAMPWR_ctrl_SLP(r16,v)                     _BFSET_(r16, 2, 2,v)

    #define     w32SRAMPWR_ctrl                                {\
            UNSG32 uctrl_SD                                    :  1;\
            UNSG32 uctrl_DSLP                                  :  1;\
            UNSG32 uctrl_SLP                                   :  1;\
            UNSG32 RSVDx0_b3                                   : 29;\
          }
    union { UNSG32 u32SRAMPWR_ctrl;
            struct w32SRAMPWR_ctrl;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SRAMPWR;

    typedef union  T32SRAMPWR_ctrl
          { UNSG32 u32;
            struct w32SRAMPWR_ctrl;
                 } T32SRAMPWR_ctrl;
    ///////////////////////////////////////////////////////////

    typedef union  TSRAMPWR_ctrl
          { UNSG32 u32[1];
            struct {
            struct w32SRAMPWR_ctrl;
                   };
                 } TSRAMPWR_ctrl;

    ///////////////////////////////////////////////////////////
     SIGN32 SRAMPWR_drvrd(SIE_SRAMPWR *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SRAMPWR_drvwr(SIE_SRAMPWR *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SRAMPWR_reset(SIE_SRAMPWR *p);
     SIGN32 SRAMPWR_cmp  (SIE_SRAMPWR *p, SIE_SRAMPWR *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SRAMPWR_check(p,pie,pfx,hLOG) SRAMPWR_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SRAMPWR_print(p,    pfx,hLOG) SRAMPWR_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SRAMPWR
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SRAMRWTC                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl0                (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 4  RF1P                      0x5
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  UHDRF1P                   0x9
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL[3:2] = 10 (default)
///                                    ###
///               %unsigned 8  RF2P                      0x35
///                                    ###
///                                    * RCT [1:0] = 01 (default)
///                                    * WCT [3:2] = 01 (default)
///                                    * KP[6:4]      = 011 (default)
///                                    * Bit7 not used
///                                    ###
///               %unsigned 8  UHDRF2P                   0x1
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL [3:2] = 00 (default)
///                                    * MTSEL [5:4] = 00 (default)
///                                    * Bit 7 and 8 not used
///                                    ###
///               %unsigned 8  UHDRF2P_ULVT              0x15
///                                    ###
///                                    * RTSEL [1:0] = 01 (default)
///                                    * WTSEL [3:2] = 01 (default)
///                                    * MTSEL [5:4] = 01 (default)
///                                    * Bit 7 and 8 not used
///                                    ###
///     @ 0x00004 ctrl1                (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 4  SHDMBSR1P                 0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  SHDSBSR1P                 0x1
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  SHCMBSR1P_SSEG            0x1
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  SHCMBSR1P_USEG            0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  SHCSBSR1P                 0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 4  SHCSBSR1P_CUSTM           0xD
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 11 (default)
///                                    ###
///               %unsigned 4  SPSRAM_WT0                0x1
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  SPSRAM_WT1                0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///     @ 0x00008 ctrl2                (P-)
///               ###
///               * Control register
///               ###
///               %unsigned 4  L1CACHE                   0x0
///                                    ###
///                                    * MCR[1:0] = 00 (default)
///                                    * MCW[3:2] = 00 (default)
///                                    ###
///               %unsigned 4  DPSR2P                    0x5
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * WTSEL[3:2] = 01 (default)
///                                    ###
///               %unsigned 8  ROM                       0x15
///                                    ###
///                                    * RTSEL[1:0] = 01 (default)
///                                    * PTSEL[3:2] = 01 (default)
///                                    * TRB[5:4]: 01
///                                    * TM[6]: 0
///                                    * Bit 7 not used
///                                    ###
///               %%        16         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      80b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SRAMRWTC
#define h_SRAMRWTC (){}

    #define     RA_SRAMRWTC_ctrl0                              0x0000

    #define     BA_SRAMRWTC_ctrl0_RF1P                         0x0000
    #define     B16SRAMRWTC_ctrl0_RF1P                         0x0000
    #define   LSb32SRAMRWTC_ctrl0_RF1P                            0
    #define   LSb16SRAMRWTC_ctrl0_RF1P                            0
    #define       bSRAMRWTC_ctrl0_RF1P                         4
    #define   MSK32SRAMRWTC_ctrl0_RF1P                            0x0000000F

    #define     BA_SRAMRWTC_ctrl0_UHDRF1P                      0x0000
    #define     B16SRAMRWTC_ctrl0_UHDRF1P                      0x0000
    #define   LSb32SRAMRWTC_ctrl0_UHDRF1P                         4
    #define   LSb16SRAMRWTC_ctrl0_UHDRF1P                         4
    #define       bSRAMRWTC_ctrl0_UHDRF1P                      4
    #define   MSK32SRAMRWTC_ctrl0_UHDRF1P                         0x000000F0

    #define     BA_SRAMRWTC_ctrl0_RF2P                         0x0001
    #define     B16SRAMRWTC_ctrl0_RF2P                         0x0000
    #define   LSb32SRAMRWTC_ctrl0_RF2P                            8
    #define   LSb16SRAMRWTC_ctrl0_RF2P                            8
    #define       bSRAMRWTC_ctrl0_RF2P                         8
    #define   MSK32SRAMRWTC_ctrl0_RF2P                            0x0000FF00

    #define     BA_SRAMRWTC_ctrl0_UHDRF2P                      0x0002
    #define     B16SRAMRWTC_ctrl0_UHDRF2P                      0x0002
    #define   LSb32SRAMRWTC_ctrl0_UHDRF2P                         16
    #define   LSb16SRAMRWTC_ctrl0_UHDRF2P                         0
    #define       bSRAMRWTC_ctrl0_UHDRF2P                      8
    #define   MSK32SRAMRWTC_ctrl0_UHDRF2P                         0x00FF0000

    #define     BA_SRAMRWTC_ctrl0_UHDRF2P_ULVT                 0x0003
    #define     B16SRAMRWTC_ctrl0_UHDRF2P_ULVT                 0x0002
    #define   LSb32SRAMRWTC_ctrl0_UHDRF2P_ULVT                    24
    #define   LSb16SRAMRWTC_ctrl0_UHDRF2P_ULVT                    8
    #define       bSRAMRWTC_ctrl0_UHDRF2P_ULVT                 8
    #define   MSK32SRAMRWTC_ctrl0_UHDRF2P_ULVT                    0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SRAMRWTC_ctrl1                              0x0004

    #define     BA_SRAMRWTC_ctrl1_SHDMBSR1P                    0x0004
    #define     B16SRAMRWTC_ctrl1_SHDMBSR1P                    0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHDMBSR1P                       0
    #define   LSb16SRAMRWTC_ctrl1_SHDMBSR1P                       0
    #define       bSRAMRWTC_ctrl1_SHDMBSR1P                    4
    #define   MSK32SRAMRWTC_ctrl1_SHDMBSR1P                       0x0000000F

    #define     BA_SRAMRWTC_ctrl1_SHDSBSR1P                    0x0004
    #define     B16SRAMRWTC_ctrl1_SHDSBSR1P                    0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHDSBSR1P                       4
    #define   LSb16SRAMRWTC_ctrl1_SHDSBSR1P                       4
    #define       bSRAMRWTC_ctrl1_SHDSBSR1P                    4
    #define   MSK32SRAMRWTC_ctrl1_SHDSBSR1P                       0x000000F0

    #define     BA_SRAMRWTC_ctrl1_SHCMBSR1P_SSEG               0x0005
    #define     B16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG               0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG                  8
    #define   LSb16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG                  8
    #define       bSRAMRWTC_ctrl1_SHCMBSR1P_SSEG               4
    #define   MSK32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG                  0x00000F00

    #define     BA_SRAMRWTC_ctrl1_SHCMBSR1P_USEG               0x0005
    #define     B16SRAMRWTC_ctrl1_SHCMBSR1P_USEG               0x0004
    #define   LSb32SRAMRWTC_ctrl1_SHCMBSR1P_USEG                  12
    #define   LSb16SRAMRWTC_ctrl1_SHCMBSR1P_USEG                  12
    #define       bSRAMRWTC_ctrl1_SHCMBSR1P_USEG               4
    #define   MSK32SRAMRWTC_ctrl1_SHCMBSR1P_USEG                  0x0000F000

    #define     BA_SRAMRWTC_ctrl1_SHCSBSR1P                    0x0006
    #define     B16SRAMRWTC_ctrl1_SHCSBSR1P                    0x0006
    #define   LSb32SRAMRWTC_ctrl1_SHCSBSR1P                       16
    #define   LSb16SRAMRWTC_ctrl1_SHCSBSR1P                       0
    #define       bSRAMRWTC_ctrl1_SHCSBSR1P                    4
    #define   MSK32SRAMRWTC_ctrl1_SHCSBSR1P                       0x000F0000

    #define     BA_SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM              0x0006
    #define     B16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM              0x0006
    #define   LSb32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM                 20
    #define   LSb16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM                 4
    #define       bSRAMRWTC_ctrl1_SHCSBSR1P_CUSTM              4
    #define   MSK32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM                 0x00F00000

    #define     BA_SRAMRWTC_ctrl1_SPSRAM_WT0                   0x0007
    #define     B16SRAMRWTC_ctrl1_SPSRAM_WT0                   0x0006
    #define   LSb32SRAMRWTC_ctrl1_SPSRAM_WT0                      24
    #define   LSb16SRAMRWTC_ctrl1_SPSRAM_WT0                      8
    #define       bSRAMRWTC_ctrl1_SPSRAM_WT0                   4
    #define   MSK32SRAMRWTC_ctrl1_SPSRAM_WT0                      0x0F000000

    #define     BA_SRAMRWTC_ctrl1_SPSRAM_WT1                   0x0007
    #define     B16SRAMRWTC_ctrl1_SPSRAM_WT1                   0x0006
    #define   LSb32SRAMRWTC_ctrl1_SPSRAM_WT1                      28
    #define   LSb16SRAMRWTC_ctrl1_SPSRAM_WT1                      12
    #define       bSRAMRWTC_ctrl1_SPSRAM_WT1                   4
    #define   MSK32SRAMRWTC_ctrl1_SPSRAM_WT1                      0xF0000000
    ///////////////////////////////////////////////////////////
    #define     RA_SRAMRWTC_ctrl2                              0x0008

    #define     BA_SRAMRWTC_ctrl2_L1CACHE                      0x0008
    #define     B16SRAMRWTC_ctrl2_L1CACHE                      0x0008
    #define   LSb32SRAMRWTC_ctrl2_L1CACHE                         0
    #define   LSb16SRAMRWTC_ctrl2_L1CACHE                         0
    #define       bSRAMRWTC_ctrl2_L1CACHE                      4
    #define   MSK32SRAMRWTC_ctrl2_L1CACHE                         0x0000000F

    #define     BA_SRAMRWTC_ctrl2_DPSR2P                       0x0008
    #define     B16SRAMRWTC_ctrl2_DPSR2P                       0x0008
    #define   LSb32SRAMRWTC_ctrl2_DPSR2P                          4
    #define   LSb16SRAMRWTC_ctrl2_DPSR2P                          4
    #define       bSRAMRWTC_ctrl2_DPSR2P                       4
    #define   MSK32SRAMRWTC_ctrl2_DPSR2P                          0x000000F0

    #define     BA_SRAMRWTC_ctrl2_ROM                          0x0009
    #define     B16SRAMRWTC_ctrl2_ROM                          0x0008
    #define   LSb32SRAMRWTC_ctrl2_ROM                             8
    #define   LSb16SRAMRWTC_ctrl2_ROM                             8
    #define       bSRAMRWTC_ctrl2_ROM                          8
    #define   MSK32SRAMRWTC_ctrl2_ROM                             0x0000FF00
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SRAMRWTC {
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMRWTC_ctrl0_RF1P(r32)                    _BFGET_(r32, 3, 0)
    #define   SET32SRAMRWTC_ctrl0_RF1P(r32,v)                  _BFSET_(r32, 3, 0,v)
    #define   GET16SRAMRWTC_ctrl0_RF1P(r16)                    _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl0_RF1P(r16,v)                  _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl0_UHDRF1P(r32)                 _BFGET_(r32, 7, 4)
    #define   SET32SRAMRWTC_ctrl0_UHDRF1P(r32,v)               _BFSET_(r32, 7, 4,v)
    #define   GET16SRAMRWTC_ctrl0_UHDRF1P(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl0_UHDRF1P(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl0_RF2P(r32)                    _BFGET_(r32,15, 8)
    #define   SET32SRAMRWTC_ctrl0_RF2P(r32,v)                  _BFSET_(r32,15, 8,v)
    #define   GET16SRAMRWTC_ctrl0_RF2P(r16)                    _BFGET_(r16,15, 8)
    #define   SET16SRAMRWTC_ctrl0_RF2P(r16,v)                  _BFSET_(r16,15, 8,v)

    #define   GET32SRAMRWTC_ctrl0_UHDRF2P(r32)                 _BFGET_(r32,23,16)
    #define   SET32SRAMRWTC_ctrl0_UHDRF2P(r32,v)               _BFSET_(r32,23,16,v)
    #define   GET16SRAMRWTC_ctrl0_UHDRF2P(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16SRAMRWTC_ctrl0_UHDRF2P(r16,v)               _BFSET_(r16, 7, 0,v)

    #define   GET32SRAMRWTC_ctrl0_UHDRF2P_ULVT(r32)            _BFGET_(r32,31,24)
    #define   SET32SRAMRWTC_ctrl0_UHDRF2P_ULVT(r32,v)          _BFSET_(r32,31,24,v)
    #define   GET16SRAMRWTC_ctrl0_UHDRF2P_ULVT(r16)            _BFGET_(r16,15, 8)
    #define   SET16SRAMRWTC_ctrl0_UHDRF2P_ULVT(r16,v)          _BFSET_(r16,15, 8,v)

    #define     w32SRAMRWTC_ctrl0                              {\
            UNSG32 uctrl0_RF1P                                 :  4;\
            UNSG32 uctrl0_UHDRF1P                              :  4;\
            UNSG32 uctrl0_RF2P                                 :  8;\
            UNSG32 uctrl0_UHDRF2P                              :  8;\
            UNSG32 uctrl0_UHDRF2P_ULVT                         :  8;\
          }
    union { UNSG32 u32SRAMRWTC_ctrl0;
            struct w32SRAMRWTC_ctrl0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMRWTC_ctrl1_SHDMBSR1P(r32)               _BFGET_(r32, 3, 0)
    #define   SET32SRAMRWTC_ctrl1_SHDMBSR1P(r32,v)             _BFSET_(r32, 3, 0,v)
    #define   GET16SRAMRWTC_ctrl1_SHDMBSR1P(r16)               _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl1_SHDMBSR1P(r16,v)             _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl1_SHDSBSR1P(r32)               _BFGET_(r32, 7, 4)
    #define   SET32SRAMRWTC_ctrl1_SHDSBSR1P(r32,v)             _BFSET_(r32, 7, 4,v)
    #define   GET16SRAMRWTC_ctrl1_SHDSBSR1P(r16)               _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl1_SHDSBSR1P(r16,v)             _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r32)          _BFGET_(r32,11, 8)
    #define   SET32SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r32,v)        _BFSET_(r32,11, 8,v)
    #define   GET16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r16)          _BFGET_(r16,11, 8)
    #define   SET16SRAMRWTC_ctrl1_SHCMBSR1P_SSEG(r16,v)        _BFSET_(r16,11, 8,v)

    #define   GET32SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r32)          _BFGET_(r32,15,12)
    #define   SET32SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r32,v)        _BFSET_(r32,15,12,v)
    #define   GET16SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r16)          _BFGET_(r16,15,12)
    #define   SET16SRAMRWTC_ctrl1_SHCMBSR1P_USEG(r16,v)        _BFSET_(r16,15,12,v)

    #define   GET32SRAMRWTC_ctrl1_SHCSBSR1P(r32)               _BFGET_(r32,19,16)
    #define   SET32SRAMRWTC_ctrl1_SHCSBSR1P(r32,v)             _BFSET_(r32,19,16,v)
    #define   GET16SRAMRWTC_ctrl1_SHCSBSR1P(r16)               _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl1_SHCSBSR1P(r16,v)             _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r32)         _BFGET_(r32,23,20)
    #define   SET32SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r32,v)       _BFSET_(r32,23,20,v)
    #define   GET16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r16)         _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl1_SHCSBSR1P_CUSTM(r16,v)       _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl1_SPSRAM_WT0(r32)              _BFGET_(r32,27,24)
    #define   SET32SRAMRWTC_ctrl1_SPSRAM_WT0(r32,v)            _BFSET_(r32,27,24,v)
    #define   GET16SRAMRWTC_ctrl1_SPSRAM_WT0(r16)              _BFGET_(r16,11, 8)
    #define   SET16SRAMRWTC_ctrl1_SPSRAM_WT0(r16,v)            _BFSET_(r16,11, 8,v)

    #define   GET32SRAMRWTC_ctrl1_SPSRAM_WT1(r32)              _BFGET_(r32,31,28)
    #define   SET32SRAMRWTC_ctrl1_SPSRAM_WT1(r32,v)            _BFSET_(r32,31,28,v)
    #define   GET16SRAMRWTC_ctrl1_SPSRAM_WT1(r16)              _BFGET_(r16,15,12)
    #define   SET16SRAMRWTC_ctrl1_SPSRAM_WT1(r16,v)            _BFSET_(r16,15,12,v)

    #define     w32SRAMRWTC_ctrl1                              {\
            UNSG32 uctrl1_SHDMBSR1P                            :  4;\
            UNSG32 uctrl1_SHDSBSR1P                            :  4;\
            UNSG32 uctrl1_SHCMBSR1P_SSEG                       :  4;\
            UNSG32 uctrl1_SHCMBSR1P_USEG                       :  4;\
            UNSG32 uctrl1_SHCSBSR1P                            :  4;\
            UNSG32 uctrl1_SHCSBSR1P_CUSTM                      :  4;\
            UNSG32 uctrl1_SPSRAM_WT0                           :  4;\
            UNSG32 uctrl1_SPSRAM_WT1                           :  4;\
          }
    union { UNSG32 u32SRAMRWTC_ctrl1;
            struct w32SRAMRWTC_ctrl1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SRAMRWTC_ctrl2_L1CACHE(r32)                 _BFGET_(r32, 3, 0)
    #define   SET32SRAMRWTC_ctrl2_L1CACHE(r32,v)               _BFSET_(r32, 3, 0,v)
    #define   GET16SRAMRWTC_ctrl2_L1CACHE(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16SRAMRWTC_ctrl2_L1CACHE(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32SRAMRWTC_ctrl2_DPSR2P(r32)                  _BFGET_(r32, 7, 4)
    #define   SET32SRAMRWTC_ctrl2_DPSR2P(r32,v)                _BFSET_(r32, 7, 4,v)
    #define   GET16SRAMRWTC_ctrl2_DPSR2P(r16)                  _BFGET_(r16, 7, 4)
    #define   SET16SRAMRWTC_ctrl2_DPSR2P(r16,v)                _BFSET_(r16, 7, 4,v)

    #define   GET32SRAMRWTC_ctrl2_ROM(r32)                     _BFGET_(r32,15, 8)
    #define   SET32SRAMRWTC_ctrl2_ROM(r32,v)                   _BFSET_(r32,15, 8,v)
    #define   GET16SRAMRWTC_ctrl2_ROM(r16)                     _BFGET_(r16,15, 8)
    #define   SET16SRAMRWTC_ctrl2_ROM(r16,v)                   _BFSET_(r16,15, 8,v)

    #define     w32SRAMRWTC_ctrl2                              {\
            UNSG32 uctrl2_L1CACHE                              :  4;\
            UNSG32 uctrl2_DPSR2P                               :  4;\
            UNSG32 uctrl2_ROM                                  :  8;\
            UNSG32 RSVDx8_b16                                  : 16;\
          }
    union { UNSG32 u32SRAMRWTC_ctrl2;
            struct w32SRAMRWTC_ctrl2;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SRAMRWTC;

    typedef union  T32SRAMRWTC_ctrl0
          { UNSG32 u32;
            struct w32SRAMRWTC_ctrl0;
                 } T32SRAMRWTC_ctrl0;
    typedef union  T32SRAMRWTC_ctrl1
          { UNSG32 u32;
            struct w32SRAMRWTC_ctrl1;
                 } T32SRAMRWTC_ctrl1;
    typedef union  T32SRAMRWTC_ctrl2
          { UNSG32 u32;
            struct w32SRAMRWTC_ctrl2;
                 } T32SRAMRWTC_ctrl2;
    ///////////////////////////////////////////////////////////

    typedef union  TSRAMRWTC_ctrl0
          { UNSG32 u32[1];
            struct {
            struct w32SRAMRWTC_ctrl0;
                   };
                 } TSRAMRWTC_ctrl0;
    typedef union  TSRAMRWTC_ctrl1
          { UNSG32 u32[1];
            struct {
            struct w32SRAMRWTC_ctrl1;
                   };
                 } TSRAMRWTC_ctrl1;
    typedef union  TSRAMRWTC_ctrl2
          { UNSG32 u32[1];
            struct {
            struct w32SRAMRWTC_ctrl2;
                   };
                 } TSRAMRWTC_ctrl2;

    ///////////////////////////////////////////////////////////
     SIGN32 SRAMRWTC_drvrd(SIE_SRAMRWTC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SRAMRWTC_drvwr(SIE_SRAMRWTC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SRAMRWTC_reset(SIE_SRAMRWTC *p);
     SIGN32 SRAMRWTC_cmp  (SIE_SRAMRWTC *p, SIE_SRAMRWTC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SRAMRWTC_check(p,pie,pfx,hLOG) SRAMRWTC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SRAMRWTC_print(p,    pfx,hLOG) SRAMRWTC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SRAMRWTC
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE PIP_PIPE                                 (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (P-)
///               %unsigned 1  tg_start                  0x0
///                                    ###
///                                    * Start bit for tg
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  tg_clear                  0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear tg
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 CTRL1                (P)
///               %unsigned 1  clken_ctrl0               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of ready status from Read Client0
///                                    ###
///               %unsigned 1  clken_ctrl1               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of ready status from Read Client1
///                                    ###
///               %unsigned 1  clken_ctrl2               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of fifo_full status from dvComp EL iFiFo
///                                    ###
///               %unsigned 2  idatctrl                  0x0
///                                    ###
///                                    * Input data control for 8bit and 10bit from respective clients :
///                                    * [00] : 8bpc data from GFX0/PIP Rd Clients
///                                    * [01] : 10bpc data from GFX0/PIP Rd Clients
///                                    * [11] : 12bpc data from GFX0/PIP Rd Clients
///                                    ###
///               %unsigned 1  dif2k_blk_en              0x0
///                                    ###
///                                    * Write 1 to enable DIF block for Tiled input formats V4H8 and V4H6
///                                    ###
///               %unsigned 1  read_en                   0x0
///                                    ###
///                                    * Read Enable select between GFX0/PIP Channel and DEINT Channel
///                                    * [0] : Read data is from GFX0/PIP channels (ReadClients)
///                                    * [1] : Read data is from DEINT channels (ReadClients)
///                                    ###
///               %unsigned 1  ups420_2k_mode            0x0
///                                    ###
///                                    * 0 : FHD UPS
///                                    * 1 : 4K UPS
///                                    ###
///               %unsigned 1  detile_rd_initval0        0x0
///                                    ###
///                                    * Initiallization value for read Mask for DETILE in PIP Plane Read Client's (420SP Cases)
///                                    ###
///               %unsigned 1  detile_rd_initval1        0x1
///                                    ###
///                                    * Initiallization value for read Mask for DETILE in PIP Plane Read Client's (420SP Cases)
///                                    ###
///               %unsigned 1  rd_mask_sftrst            0x0
///                                    ###
///                                    * Soft reset to initialize read mask. Write 1 to initialize read mask with detile_rd_initval0
///                                    ###
///               %unsigned 1  detile_rdsel_420SP        0x0
///                                    ###
///                                    * Read select from read client (R1) for 420 SP format case [ DETILE in PIP Plane ]
///                                    ###
///               %unsigned 2  lineCnt_rstval0           0x0
///                                    ###
///                                    * Programmable lineCnt reset value at soft reset or End of Frame. Defaule 0
///                                    ###
///               %unsigned 2  lineCnt_rstval1           0x0
///                                    ###
///                                    * Programmable lineCnt reset value at Start of Frame. Defaule 0
///                                    ###
///               %unsigned 1  bitMap_en                 0x0
///                                    ###
///                                    * Control bit to enable BITMAP for DETILE in PIP Plane. Default disabled. Write 1 to enable BITMAP20
///                                    ###
///               %unsigned 2  cr_line_cnt               0x3
///                                    ###
///                                    * Croma Line Count Number.
///                                    * (a) For Detile UPS420 cases (except when tile_height =
///                                    * 3), it should be programmed as 0x3 (default value)
///                                    * (b) For Tile Format (tile width=4 && tile height=3),
///                                    * program cr_line_cnt = 0x2
///                                    ###
///               %unsigned 1  pip_rd_sel                0x0
///                                    ###
///                                    * Read Select bit for selecting read enable to PIP/GFX0 Read Clients from either DETILE in PIP Plane or PIP/GFX0 Path
///                                    * [0] : Read Enable is from PIP/GFX0 paths
///                                    * [1] : Read Enable is from DETILE in PIP Plane pipe for DETILE 2K input data
///                                    ###
///               %unsigned 1  crop_de_en                0x0
///                                    ###
///                                    * Enable for cropped de's to be used for cropped input read from Read Client's which is fed to DETILE-UPS420
///                                    * Write 1 to enable it. Default disabled.
///                                    ###
///               %unsigned 1  crop_de2_en               0x0
///                                    ###
///                                    * Enable for cropped de's to be used for cropped input support for 420-SemiPlanar Input for DETILE in PIP Plane .
///                                    * Note : crop_de_en bit should be high for this mode and DETILE TG to be programmed accordingly for Luma, Croma and DE (required to fetch data from Read Client)
///                                    * Write 1 to enable it. Default disabled.
///                                    ###
///               %unsigned 1  clken_ctrl3               0x0
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of fifo_full status from offline dv test scalar fifo.
///                                    ###
///               %unsigned 2  detile2k_idata_sel        0x0
///                                    ###
///                                    * [00] : Input data from GFX0 Rd Client
///                                    * [01] : Not Used
///                                    * [10] : Input data from BL Read Client
///                                    * [11] : Input data from EL Read Client
///                                    ###
///               %unsigned 1  fifo_full_ctrl1           0x0
///                                    ###
///                                    * tg_clken control bit to enable use of fifo full status in generating clock enable from ovpScl iFifo luma. Default enable. Write 1 to disable this control
///                                    ###
///               %unsigned 1  fifo_full_ctrl2           0x0
///                                    ###
///                                    * tg_clken control bit to enable use of fifo full status in generating clock enable from ovpScl iFifo croma. Default enable. Write 1 to disable this control
///                                    ###
///               %unsigned 1  uv_mask_val0              0x0
///                                    ###
///                                    * Mask value for UV data read control for OVPSCLWRAP
///                                    * Default 0. For Front-end, alternate line control to be independent of UV
///                                    ###
///               %unsigned 1  uv_mask_val1              0x0
///                                    ###
///                                    * Mask value for UV data read control for OVPSCLWRAP
///                                    * Default 0. For Front-end, alternate line control to be independent of UV
///                                    ###
///               %unsigned 1  uv_mask_disable           0x0
///                                    ###
///                                    * Control bit to diable uv_mask generation for OVP SCL Pipe (Croma control)
///                                    * Write 1 to disable UV mask generation. Default enabled.
///                                    ###
///               %%        2          # Stuffing bits...
///     @ 0x00008 CTRL2                (P)
///               %unsigned 1  clken_ctrl6               0x0
///                                    ###
///                                    * Clock enable control bit (based on either BL or EL plane Read Client0 FIFO). Write 1 to make clock enable dependent on Read Client0 FIFO status.
///                                    * When Input format to PIP path is from either BL or EL fifo, this bit to be programmed as 1'b1 (to make tg_clken dependent on Read Client0 's rdy status of either BL or EL FIFO)
///                                    ###
///               %unsigned 1  clken_ctrl7               0x0
///                                    ###
///                                    * Clock enable control bit (based on either BL or EL plane Read Client1 FIFO). Write 1 to make clock enable dependent on Read Client1 FIFO status.
///                                    * When Input format to PIP path is from either BL or EL fifo, this bit to be programmed as 1'b1 (to make tg_clken dependent on Read Client1's rdy status of either BL or EL FIFO)
///                                    ###
///               %%        30         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      34b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_PIP_PIPE
#define h_PIP_PIPE (){}

    #define     RA_PIP_PIPE_CTRL0                              0x0000

    #define     BA_PIP_PIPE_CTRL0_tg_start                     0x0000
    #define     B16PIP_PIPE_CTRL0_tg_start                     0x0000
    #define   LSb32PIP_PIPE_CTRL0_tg_start                        0
    #define   LSb16PIP_PIPE_CTRL0_tg_start                        0
    #define       bPIP_PIPE_CTRL0_tg_start                     1
    #define   MSK32PIP_PIPE_CTRL0_tg_start                        0x00000001

    #define     BA_PIP_PIPE_CTRL0_tg_clear                     0x0000
    #define     B16PIP_PIPE_CTRL0_tg_clear                     0x0000
    #define   LSb32PIP_PIPE_CTRL0_tg_clear                        1
    #define   LSb16PIP_PIPE_CTRL0_tg_clear                        1
    #define       bPIP_PIPE_CTRL0_tg_clear                     1
    #define   MSK32PIP_PIPE_CTRL0_tg_clear                        0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_PIP_PIPE_CTRL1                              0x0004

    #define     BA_PIP_PIPE_CTRL1_clken_ctrl0                  0x0004
    #define     B16PIP_PIPE_CTRL1_clken_ctrl0                  0x0004
    #define   LSb32PIP_PIPE_CTRL1_clken_ctrl0                     0
    #define   LSb16PIP_PIPE_CTRL1_clken_ctrl0                     0
    #define       bPIP_PIPE_CTRL1_clken_ctrl0                  1
    #define   MSK32PIP_PIPE_CTRL1_clken_ctrl0                     0x00000001

    #define     BA_PIP_PIPE_CTRL1_clken_ctrl1                  0x0004
    #define     B16PIP_PIPE_CTRL1_clken_ctrl1                  0x0004
    #define   LSb32PIP_PIPE_CTRL1_clken_ctrl1                     1
    #define   LSb16PIP_PIPE_CTRL1_clken_ctrl1                     1
    #define       bPIP_PIPE_CTRL1_clken_ctrl1                  1
    #define   MSK32PIP_PIPE_CTRL1_clken_ctrl1                     0x00000002

    #define     BA_PIP_PIPE_CTRL1_clken_ctrl2                  0x0004
    #define     B16PIP_PIPE_CTRL1_clken_ctrl2                  0x0004
    #define   LSb32PIP_PIPE_CTRL1_clken_ctrl2                     2
    #define   LSb16PIP_PIPE_CTRL1_clken_ctrl2                     2
    #define       bPIP_PIPE_CTRL1_clken_ctrl2                  1
    #define   MSK32PIP_PIPE_CTRL1_clken_ctrl2                     0x00000004

    #define     BA_PIP_PIPE_CTRL1_idatctrl                     0x0004
    #define     B16PIP_PIPE_CTRL1_idatctrl                     0x0004
    #define   LSb32PIP_PIPE_CTRL1_idatctrl                        3
    #define   LSb16PIP_PIPE_CTRL1_idatctrl                        3
    #define       bPIP_PIPE_CTRL1_idatctrl                     2
    #define   MSK32PIP_PIPE_CTRL1_idatctrl                        0x00000018

    #define     BA_PIP_PIPE_CTRL1_dif2k_blk_en                 0x0004
    #define     B16PIP_PIPE_CTRL1_dif2k_blk_en                 0x0004
    #define   LSb32PIP_PIPE_CTRL1_dif2k_blk_en                    5
    #define   LSb16PIP_PIPE_CTRL1_dif2k_blk_en                    5
    #define       bPIP_PIPE_CTRL1_dif2k_blk_en                 1
    #define   MSK32PIP_PIPE_CTRL1_dif2k_blk_en                    0x00000020

    #define     BA_PIP_PIPE_CTRL1_read_en                      0x0004
    #define     B16PIP_PIPE_CTRL1_read_en                      0x0004
    #define   LSb32PIP_PIPE_CTRL1_read_en                         6
    #define   LSb16PIP_PIPE_CTRL1_read_en                         6
    #define       bPIP_PIPE_CTRL1_read_en                      1
    #define   MSK32PIP_PIPE_CTRL1_read_en                         0x00000040

    #define     BA_PIP_PIPE_CTRL1_ups420_2k_mode               0x0004
    #define     B16PIP_PIPE_CTRL1_ups420_2k_mode               0x0004
    #define   LSb32PIP_PIPE_CTRL1_ups420_2k_mode                  7
    #define   LSb16PIP_PIPE_CTRL1_ups420_2k_mode                  7
    #define       bPIP_PIPE_CTRL1_ups420_2k_mode               1
    #define   MSK32PIP_PIPE_CTRL1_ups420_2k_mode                  0x00000080

    #define     BA_PIP_PIPE_CTRL1_detile_rd_initval0           0x0005
    #define     B16PIP_PIPE_CTRL1_detile_rd_initval0           0x0004
    #define   LSb32PIP_PIPE_CTRL1_detile_rd_initval0              8
    #define   LSb16PIP_PIPE_CTRL1_detile_rd_initval0              8
    #define       bPIP_PIPE_CTRL1_detile_rd_initval0           1
    #define   MSK32PIP_PIPE_CTRL1_detile_rd_initval0              0x00000100

    #define     BA_PIP_PIPE_CTRL1_detile_rd_initval1           0x0005
    #define     B16PIP_PIPE_CTRL1_detile_rd_initval1           0x0004
    #define   LSb32PIP_PIPE_CTRL1_detile_rd_initval1              9
    #define   LSb16PIP_PIPE_CTRL1_detile_rd_initval1              9
    #define       bPIP_PIPE_CTRL1_detile_rd_initval1           1
    #define   MSK32PIP_PIPE_CTRL1_detile_rd_initval1              0x00000200

    #define     BA_PIP_PIPE_CTRL1_rd_mask_sftrst               0x0005
    #define     B16PIP_PIPE_CTRL1_rd_mask_sftrst               0x0004
    #define   LSb32PIP_PIPE_CTRL1_rd_mask_sftrst                  10
    #define   LSb16PIP_PIPE_CTRL1_rd_mask_sftrst                  10
    #define       bPIP_PIPE_CTRL1_rd_mask_sftrst               1
    #define   MSK32PIP_PIPE_CTRL1_rd_mask_sftrst                  0x00000400

    #define     BA_PIP_PIPE_CTRL1_detile_rdsel_420SP           0x0005
    #define     B16PIP_PIPE_CTRL1_detile_rdsel_420SP           0x0004
    #define   LSb32PIP_PIPE_CTRL1_detile_rdsel_420SP              11
    #define   LSb16PIP_PIPE_CTRL1_detile_rdsel_420SP              11
    #define       bPIP_PIPE_CTRL1_detile_rdsel_420SP           1
    #define   MSK32PIP_PIPE_CTRL1_detile_rdsel_420SP              0x00000800

    #define     BA_PIP_PIPE_CTRL1_lineCnt_rstval0              0x0005
    #define     B16PIP_PIPE_CTRL1_lineCnt_rstval0              0x0004
    #define   LSb32PIP_PIPE_CTRL1_lineCnt_rstval0                 12
    #define   LSb16PIP_PIPE_CTRL1_lineCnt_rstval0                 12
    #define       bPIP_PIPE_CTRL1_lineCnt_rstval0              2
    #define   MSK32PIP_PIPE_CTRL1_lineCnt_rstval0                 0x00003000

    #define     BA_PIP_PIPE_CTRL1_lineCnt_rstval1              0x0005
    #define     B16PIP_PIPE_CTRL1_lineCnt_rstval1              0x0004
    #define   LSb32PIP_PIPE_CTRL1_lineCnt_rstval1                 14
    #define   LSb16PIP_PIPE_CTRL1_lineCnt_rstval1                 14
    #define       bPIP_PIPE_CTRL1_lineCnt_rstval1              2
    #define   MSK32PIP_PIPE_CTRL1_lineCnt_rstval1                 0x0000C000

    #define     BA_PIP_PIPE_CTRL1_bitMap_en                    0x0006
    #define     B16PIP_PIPE_CTRL1_bitMap_en                    0x0006
    #define   LSb32PIP_PIPE_CTRL1_bitMap_en                       16
    #define   LSb16PIP_PIPE_CTRL1_bitMap_en                       0
    #define       bPIP_PIPE_CTRL1_bitMap_en                    1
    #define   MSK32PIP_PIPE_CTRL1_bitMap_en                       0x00010000

    #define     BA_PIP_PIPE_CTRL1_cr_line_cnt                  0x0006
    #define     B16PIP_PIPE_CTRL1_cr_line_cnt                  0x0006
    #define   LSb32PIP_PIPE_CTRL1_cr_line_cnt                     17
    #define   LSb16PIP_PIPE_CTRL1_cr_line_cnt                     1
    #define       bPIP_PIPE_CTRL1_cr_line_cnt                  2
    #define   MSK32PIP_PIPE_CTRL1_cr_line_cnt                     0x00060000

    #define     BA_PIP_PIPE_CTRL1_pip_rd_sel                   0x0006
    #define     B16PIP_PIPE_CTRL1_pip_rd_sel                   0x0006
    #define   LSb32PIP_PIPE_CTRL1_pip_rd_sel                      19
    #define   LSb16PIP_PIPE_CTRL1_pip_rd_sel                      3
    #define       bPIP_PIPE_CTRL1_pip_rd_sel                   1
    #define   MSK32PIP_PIPE_CTRL1_pip_rd_sel                      0x00080000

    #define     BA_PIP_PIPE_CTRL1_crop_de_en                   0x0006
    #define     B16PIP_PIPE_CTRL1_crop_de_en                   0x0006
    #define   LSb32PIP_PIPE_CTRL1_crop_de_en                      20
    #define   LSb16PIP_PIPE_CTRL1_crop_de_en                      4
    #define       bPIP_PIPE_CTRL1_crop_de_en                   1
    #define   MSK32PIP_PIPE_CTRL1_crop_de_en                      0x00100000

    #define     BA_PIP_PIPE_CTRL1_crop_de2_en                  0x0006
    #define     B16PIP_PIPE_CTRL1_crop_de2_en                  0x0006
    #define   LSb32PIP_PIPE_CTRL1_crop_de2_en                     21
    #define   LSb16PIP_PIPE_CTRL1_crop_de2_en                     5
    #define       bPIP_PIPE_CTRL1_crop_de2_en                  1
    #define   MSK32PIP_PIPE_CTRL1_crop_de2_en                     0x00200000

    #define     BA_PIP_PIPE_CTRL1_clken_ctrl3                  0x0006
    #define     B16PIP_PIPE_CTRL1_clken_ctrl3                  0x0006
    #define   LSb32PIP_PIPE_CTRL1_clken_ctrl3                     22
    #define   LSb16PIP_PIPE_CTRL1_clken_ctrl3                     6
    #define       bPIP_PIPE_CTRL1_clken_ctrl3                  1
    #define   MSK32PIP_PIPE_CTRL1_clken_ctrl3                     0x00400000

    #define     BA_PIP_PIPE_CTRL1_detile2k_idata_sel           0x0006
    #define     B16PIP_PIPE_CTRL1_detile2k_idata_sel           0x0006
    #define   LSb32PIP_PIPE_CTRL1_detile2k_idata_sel              23
    #define   LSb16PIP_PIPE_CTRL1_detile2k_idata_sel              7
    #define       bPIP_PIPE_CTRL1_detile2k_idata_sel           2
    #define   MSK32PIP_PIPE_CTRL1_detile2k_idata_sel              0x01800000

    #define     BA_PIP_PIPE_CTRL1_fifo_full_ctrl1              0x0007
    #define     B16PIP_PIPE_CTRL1_fifo_full_ctrl1              0x0006
    #define   LSb32PIP_PIPE_CTRL1_fifo_full_ctrl1                 25
    #define   LSb16PIP_PIPE_CTRL1_fifo_full_ctrl1                 9
    #define       bPIP_PIPE_CTRL1_fifo_full_ctrl1              1
    #define   MSK32PIP_PIPE_CTRL1_fifo_full_ctrl1                 0x02000000

    #define     BA_PIP_PIPE_CTRL1_fifo_full_ctrl2              0x0007
    #define     B16PIP_PIPE_CTRL1_fifo_full_ctrl2              0x0006
    #define   LSb32PIP_PIPE_CTRL1_fifo_full_ctrl2                 26
    #define   LSb16PIP_PIPE_CTRL1_fifo_full_ctrl2                 10
    #define       bPIP_PIPE_CTRL1_fifo_full_ctrl2              1
    #define   MSK32PIP_PIPE_CTRL1_fifo_full_ctrl2                 0x04000000

    #define     BA_PIP_PIPE_CTRL1_uv_mask_val0                 0x0007
    #define     B16PIP_PIPE_CTRL1_uv_mask_val0                 0x0006
    #define   LSb32PIP_PIPE_CTRL1_uv_mask_val0                    27
    #define   LSb16PIP_PIPE_CTRL1_uv_mask_val0                    11
    #define       bPIP_PIPE_CTRL1_uv_mask_val0                 1
    #define   MSK32PIP_PIPE_CTRL1_uv_mask_val0                    0x08000000

    #define     BA_PIP_PIPE_CTRL1_uv_mask_val1                 0x0007
    #define     B16PIP_PIPE_CTRL1_uv_mask_val1                 0x0006
    #define   LSb32PIP_PIPE_CTRL1_uv_mask_val1                    28
    #define   LSb16PIP_PIPE_CTRL1_uv_mask_val1                    12
    #define       bPIP_PIPE_CTRL1_uv_mask_val1                 1
    #define   MSK32PIP_PIPE_CTRL1_uv_mask_val1                    0x10000000

    #define     BA_PIP_PIPE_CTRL1_uv_mask_disable              0x0007
    #define     B16PIP_PIPE_CTRL1_uv_mask_disable              0x0006
    #define   LSb32PIP_PIPE_CTRL1_uv_mask_disable                 29
    #define   LSb16PIP_PIPE_CTRL1_uv_mask_disable                 13
    #define       bPIP_PIPE_CTRL1_uv_mask_disable              1
    #define   MSK32PIP_PIPE_CTRL1_uv_mask_disable                 0x20000000
    ///////////////////////////////////////////////////////////
    #define     RA_PIP_PIPE_CTRL2                              0x0008

    #define     BA_PIP_PIPE_CTRL2_clken_ctrl6                  0x0008
    #define     B16PIP_PIPE_CTRL2_clken_ctrl6                  0x0008
    #define   LSb32PIP_PIPE_CTRL2_clken_ctrl6                     0
    #define   LSb16PIP_PIPE_CTRL2_clken_ctrl6                     0
    #define       bPIP_PIPE_CTRL2_clken_ctrl6                  1
    #define   MSK32PIP_PIPE_CTRL2_clken_ctrl6                     0x00000001

    #define     BA_PIP_PIPE_CTRL2_clken_ctrl7                  0x0008
    #define     B16PIP_PIPE_CTRL2_clken_ctrl7                  0x0008
    #define   LSb32PIP_PIPE_CTRL2_clken_ctrl7                     1
    #define   LSb16PIP_PIPE_CTRL2_clken_ctrl7                     1
    #define       bPIP_PIPE_CTRL2_clken_ctrl7                  1
    #define   MSK32PIP_PIPE_CTRL2_clken_ctrl7                     0x00000002
    ///////////////////////////////////////////////////////////

    typedef struct SIE_PIP_PIPE {
    ///////////////////////////////////////////////////////////
    #define   GET32PIP_PIPE_CTRL0_tg_start(r32)                _BFGET_(r32, 0, 0)
    #define   SET32PIP_PIPE_CTRL0_tg_start(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16PIP_PIPE_CTRL0_tg_start(r16)                _BFGET_(r16, 0, 0)
    #define   SET16PIP_PIPE_CTRL0_tg_start(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32PIP_PIPE_CTRL0_tg_clear(r32)                _BFGET_(r32, 1, 1)
    #define   SET32PIP_PIPE_CTRL0_tg_clear(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16PIP_PIPE_CTRL0_tg_clear(r16)                _BFGET_(r16, 1, 1)
    #define   SET16PIP_PIPE_CTRL0_tg_clear(r16,v)              _BFSET_(r16, 1, 1,v)

    #define     w32PIP_PIPE_CTRL0                              {\
            UNSG32 uCTRL0_tg_start                             :  1;\
            UNSG32 uCTRL0_tg_clear                             :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32PIP_PIPE_CTRL0;
            struct w32PIP_PIPE_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32PIP_PIPE_CTRL1_clken_ctrl0(r32)             _BFGET_(r32, 0, 0)
    #define   SET32PIP_PIPE_CTRL1_clken_ctrl0(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16PIP_PIPE_CTRL1_clken_ctrl0(r16)             _BFGET_(r16, 0, 0)
    #define   SET16PIP_PIPE_CTRL1_clken_ctrl0(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32PIP_PIPE_CTRL1_clken_ctrl1(r32)             _BFGET_(r32, 1, 1)
    #define   SET32PIP_PIPE_CTRL1_clken_ctrl1(r32,v)           _BFSET_(r32, 1, 1,v)
    #define   GET16PIP_PIPE_CTRL1_clken_ctrl1(r16)             _BFGET_(r16, 1, 1)
    #define   SET16PIP_PIPE_CTRL1_clken_ctrl1(r16,v)           _BFSET_(r16, 1, 1,v)

    #define   GET32PIP_PIPE_CTRL1_clken_ctrl2(r32)             _BFGET_(r32, 2, 2)
    #define   SET32PIP_PIPE_CTRL1_clken_ctrl2(r32,v)           _BFSET_(r32, 2, 2,v)
    #define   GET16PIP_PIPE_CTRL1_clken_ctrl2(r16)             _BFGET_(r16, 2, 2)
    #define   SET16PIP_PIPE_CTRL1_clken_ctrl2(r16,v)           _BFSET_(r16, 2, 2,v)

    #define   GET32PIP_PIPE_CTRL1_idatctrl(r32)                _BFGET_(r32, 4, 3)
    #define   SET32PIP_PIPE_CTRL1_idatctrl(r32,v)              _BFSET_(r32, 4, 3,v)
    #define   GET16PIP_PIPE_CTRL1_idatctrl(r16)                _BFGET_(r16, 4, 3)
    #define   SET16PIP_PIPE_CTRL1_idatctrl(r16,v)              _BFSET_(r16, 4, 3,v)

    #define   GET32PIP_PIPE_CTRL1_dif2k_blk_en(r32)            _BFGET_(r32, 5, 5)
    #define   SET32PIP_PIPE_CTRL1_dif2k_blk_en(r32,v)          _BFSET_(r32, 5, 5,v)
    #define   GET16PIP_PIPE_CTRL1_dif2k_blk_en(r16)            _BFGET_(r16, 5, 5)
    #define   SET16PIP_PIPE_CTRL1_dif2k_blk_en(r16,v)          _BFSET_(r16, 5, 5,v)

    #define   GET32PIP_PIPE_CTRL1_read_en(r32)                 _BFGET_(r32, 6, 6)
    #define   SET32PIP_PIPE_CTRL1_read_en(r32,v)               _BFSET_(r32, 6, 6,v)
    #define   GET16PIP_PIPE_CTRL1_read_en(r16)                 _BFGET_(r16, 6, 6)
    #define   SET16PIP_PIPE_CTRL1_read_en(r16,v)               _BFSET_(r16, 6, 6,v)

    #define   GET32PIP_PIPE_CTRL1_ups420_2k_mode(r32)          _BFGET_(r32, 7, 7)
    #define   SET32PIP_PIPE_CTRL1_ups420_2k_mode(r32,v)        _BFSET_(r32, 7, 7,v)
    #define   GET16PIP_PIPE_CTRL1_ups420_2k_mode(r16)          _BFGET_(r16, 7, 7)
    #define   SET16PIP_PIPE_CTRL1_ups420_2k_mode(r16,v)        _BFSET_(r16, 7, 7,v)

    #define   GET32PIP_PIPE_CTRL1_detile_rd_initval0(r32)      _BFGET_(r32, 8, 8)
    #define   SET32PIP_PIPE_CTRL1_detile_rd_initval0(r32,v)    _BFSET_(r32, 8, 8,v)
    #define   GET16PIP_PIPE_CTRL1_detile_rd_initval0(r16)      _BFGET_(r16, 8, 8)
    #define   SET16PIP_PIPE_CTRL1_detile_rd_initval0(r16,v)    _BFSET_(r16, 8, 8,v)

    #define   GET32PIP_PIPE_CTRL1_detile_rd_initval1(r32)      _BFGET_(r32, 9, 9)
    #define   SET32PIP_PIPE_CTRL1_detile_rd_initval1(r32,v)    _BFSET_(r32, 9, 9,v)
    #define   GET16PIP_PIPE_CTRL1_detile_rd_initval1(r16)      _BFGET_(r16, 9, 9)
    #define   SET16PIP_PIPE_CTRL1_detile_rd_initval1(r16,v)    _BFSET_(r16, 9, 9,v)

    #define   GET32PIP_PIPE_CTRL1_rd_mask_sftrst(r32)          _BFGET_(r32,10,10)
    #define   SET32PIP_PIPE_CTRL1_rd_mask_sftrst(r32,v)        _BFSET_(r32,10,10,v)
    #define   GET16PIP_PIPE_CTRL1_rd_mask_sftrst(r16)          _BFGET_(r16,10,10)
    #define   SET16PIP_PIPE_CTRL1_rd_mask_sftrst(r16,v)        _BFSET_(r16,10,10,v)

    #define   GET32PIP_PIPE_CTRL1_detile_rdsel_420SP(r32)      _BFGET_(r32,11,11)
    #define   SET32PIP_PIPE_CTRL1_detile_rdsel_420SP(r32,v)    _BFSET_(r32,11,11,v)
    #define   GET16PIP_PIPE_CTRL1_detile_rdsel_420SP(r16)      _BFGET_(r16,11,11)
    #define   SET16PIP_PIPE_CTRL1_detile_rdsel_420SP(r16,v)    _BFSET_(r16,11,11,v)

    #define   GET32PIP_PIPE_CTRL1_lineCnt_rstval0(r32)         _BFGET_(r32,13,12)
    #define   SET32PIP_PIPE_CTRL1_lineCnt_rstval0(r32,v)       _BFSET_(r32,13,12,v)
    #define   GET16PIP_PIPE_CTRL1_lineCnt_rstval0(r16)         _BFGET_(r16,13,12)
    #define   SET16PIP_PIPE_CTRL1_lineCnt_rstval0(r16,v)       _BFSET_(r16,13,12,v)

    #define   GET32PIP_PIPE_CTRL1_lineCnt_rstval1(r32)         _BFGET_(r32,15,14)
    #define   SET32PIP_PIPE_CTRL1_lineCnt_rstval1(r32,v)       _BFSET_(r32,15,14,v)
    #define   GET16PIP_PIPE_CTRL1_lineCnt_rstval1(r16)         _BFGET_(r16,15,14)
    #define   SET16PIP_PIPE_CTRL1_lineCnt_rstval1(r16,v)       _BFSET_(r16,15,14,v)

    #define   GET32PIP_PIPE_CTRL1_bitMap_en(r32)               _BFGET_(r32,16,16)
    #define   SET32PIP_PIPE_CTRL1_bitMap_en(r32,v)             _BFSET_(r32,16,16,v)
    #define   GET16PIP_PIPE_CTRL1_bitMap_en(r16)               _BFGET_(r16, 0, 0)
    #define   SET16PIP_PIPE_CTRL1_bitMap_en(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32PIP_PIPE_CTRL1_cr_line_cnt(r32)             _BFGET_(r32,18,17)
    #define   SET32PIP_PIPE_CTRL1_cr_line_cnt(r32,v)           _BFSET_(r32,18,17,v)
    #define   GET16PIP_PIPE_CTRL1_cr_line_cnt(r16)             _BFGET_(r16, 2, 1)
    #define   SET16PIP_PIPE_CTRL1_cr_line_cnt(r16,v)           _BFSET_(r16, 2, 1,v)

    #define   GET32PIP_PIPE_CTRL1_pip_rd_sel(r32)              _BFGET_(r32,19,19)
    #define   SET32PIP_PIPE_CTRL1_pip_rd_sel(r32,v)            _BFSET_(r32,19,19,v)
    #define   GET16PIP_PIPE_CTRL1_pip_rd_sel(r16)              _BFGET_(r16, 3, 3)
    #define   SET16PIP_PIPE_CTRL1_pip_rd_sel(r16,v)            _BFSET_(r16, 3, 3,v)

    #define   GET32PIP_PIPE_CTRL1_crop_de_en(r32)              _BFGET_(r32,20,20)
    #define   SET32PIP_PIPE_CTRL1_crop_de_en(r32,v)            _BFSET_(r32,20,20,v)
    #define   GET16PIP_PIPE_CTRL1_crop_de_en(r16)              _BFGET_(r16, 4, 4)
    #define   SET16PIP_PIPE_CTRL1_crop_de_en(r16,v)            _BFSET_(r16, 4, 4,v)

    #define   GET32PIP_PIPE_CTRL1_crop_de2_en(r32)             _BFGET_(r32,21,21)
    #define   SET32PIP_PIPE_CTRL1_crop_de2_en(r32,v)           _BFSET_(r32,21,21,v)
    #define   GET16PIP_PIPE_CTRL1_crop_de2_en(r16)             _BFGET_(r16, 5, 5)
    #define   SET16PIP_PIPE_CTRL1_crop_de2_en(r16,v)           _BFSET_(r16, 5, 5,v)

    #define   GET32PIP_PIPE_CTRL1_clken_ctrl3(r32)             _BFGET_(r32,22,22)
    #define   SET32PIP_PIPE_CTRL1_clken_ctrl3(r32,v)           _BFSET_(r32,22,22,v)
    #define   GET16PIP_PIPE_CTRL1_clken_ctrl3(r16)             _BFGET_(r16, 6, 6)
    #define   SET16PIP_PIPE_CTRL1_clken_ctrl3(r16,v)           _BFSET_(r16, 6, 6,v)

    #define   GET32PIP_PIPE_CTRL1_detile2k_idata_sel(r32)      _BFGET_(r32,24,23)
    #define   SET32PIP_PIPE_CTRL1_detile2k_idata_sel(r32,v)    _BFSET_(r32,24,23,v)
    #define   GET16PIP_PIPE_CTRL1_detile2k_idata_sel(r16)      _BFGET_(r16, 8, 7)
    #define   SET16PIP_PIPE_CTRL1_detile2k_idata_sel(r16,v)    _BFSET_(r16, 8, 7,v)

    #define   GET32PIP_PIPE_CTRL1_fifo_full_ctrl1(r32)         _BFGET_(r32,25,25)
    #define   SET32PIP_PIPE_CTRL1_fifo_full_ctrl1(r32,v)       _BFSET_(r32,25,25,v)
    #define   GET16PIP_PIPE_CTRL1_fifo_full_ctrl1(r16)         _BFGET_(r16, 9, 9)
    #define   SET16PIP_PIPE_CTRL1_fifo_full_ctrl1(r16,v)       _BFSET_(r16, 9, 9,v)

    #define   GET32PIP_PIPE_CTRL1_fifo_full_ctrl2(r32)         _BFGET_(r32,26,26)
    #define   SET32PIP_PIPE_CTRL1_fifo_full_ctrl2(r32,v)       _BFSET_(r32,26,26,v)
    #define   GET16PIP_PIPE_CTRL1_fifo_full_ctrl2(r16)         _BFGET_(r16,10,10)
    #define   SET16PIP_PIPE_CTRL1_fifo_full_ctrl2(r16,v)       _BFSET_(r16,10,10,v)

    #define   GET32PIP_PIPE_CTRL1_uv_mask_val0(r32)            _BFGET_(r32,27,27)
    #define   SET32PIP_PIPE_CTRL1_uv_mask_val0(r32,v)          _BFSET_(r32,27,27,v)
    #define   GET16PIP_PIPE_CTRL1_uv_mask_val0(r16)            _BFGET_(r16,11,11)
    #define   SET16PIP_PIPE_CTRL1_uv_mask_val0(r16,v)          _BFSET_(r16,11,11,v)

    #define   GET32PIP_PIPE_CTRL1_uv_mask_val1(r32)            _BFGET_(r32,28,28)
    #define   SET32PIP_PIPE_CTRL1_uv_mask_val1(r32,v)          _BFSET_(r32,28,28,v)
    #define   GET16PIP_PIPE_CTRL1_uv_mask_val1(r16)            _BFGET_(r16,12,12)
    #define   SET16PIP_PIPE_CTRL1_uv_mask_val1(r16,v)          _BFSET_(r16,12,12,v)

    #define   GET32PIP_PIPE_CTRL1_uv_mask_disable(r32)         _BFGET_(r32,29,29)
    #define   SET32PIP_PIPE_CTRL1_uv_mask_disable(r32,v)       _BFSET_(r32,29,29,v)
    #define   GET16PIP_PIPE_CTRL1_uv_mask_disable(r16)         _BFGET_(r16,13,13)
    #define   SET16PIP_PIPE_CTRL1_uv_mask_disable(r16,v)       _BFSET_(r16,13,13,v)

    #define     w32PIP_PIPE_CTRL1                              {\
            UNSG32 uCTRL1_clken_ctrl0                          :  1;\
            UNSG32 uCTRL1_clken_ctrl1                          :  1;\
            UNSG32 uCTRL1_clken_ctrl2                          :  1;\
            UNSG32 uCTRL1_idatctrl                             :  2;\
            UNSG32 uCTRL1_dif2k_blk_en                         :  1;\
            UNSG32 uCTRL1_read_en                              :  1;\
            UNSG32 uCTRL1_ups420_2k_mode                       :  1;\
            UNSG32 uCTRL1_detile_rd_initval0                   :  1;\
            UNSG32 uCTRL1_detile_rd_initval1                   :  1;\
            UNSG32 uCTRL1_rd_mask_sftrst                       :  1;\
            UNSG32 uCTRL1_detile_rdsel_420SP                   :  1;\
            UNSG32 uCTRL1_lineCnt_rstval0                      :  2;\
            UNSG32 uCTRL1_lineCnt_rstval1                      :  2;\
            UNSG32 uCTRL1_bitMap_en                            :  1;\
            UNSG32 uCTRL1_cr_line_cnt                          :  2;\
            UNSG32 uCTRL1_pip_rd_sel                           :  1;\
            UNSG32 uCTRL1_crop_de_en                           :  1;\
            UNSG32 uCTRL1_crop_de2_en                          :  1;\
            UNSG32 uCTRL1_clken_ctrl3                          :  1;\
            UNSG32 uCTRL1_detile2k_idata_sel                   :  2;\
            UNSG32 uCTRL1_fifo_full_ctrl1                      :  1;\
            UNSG32 uCTRL1_fifo_full_ctrl2                      :  1;\
            UNSG32 uCTRL1_uv_mask_val0                         :  1;\
            UNSG32 uCTRL1_uv_mask_val1                         :  1;\
            UNSG32 uCTRL1_uv_mask_disable                      :  1;\
            UNSG32 RSVDx4_b30                                  :  2;\
          }
    union { UNSG32 u32PIP_PIPE_CTRL1;
            struct w32PIP_PIPE_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32PIP_PIPE_CTRL2_clken_ctrl6(r32)             _BFGET_(r32, 0, 0)
    #define   SET32PIP_PIPE_CTRL2_clken_ctrl6(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16PIP_PIPE_CTRL2_clken_ctrl6(r16)             _BFGET_(r16, 0, 0)
    #define   SET16PIP_PIPE_CTRL2_clken_ctrl6(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32PIP_PIPE_CTRL2_clken_ctrl7(r32)             _BFGET_(r32, 1, 1)
    #define   SET32PIP_PIPE_CTRL2_clken_ctrl7(r32,v)           _BFSET_(r32, 1, 1,v)
    #define   GET16PIP_PIPE_CTRL2_clken_ctrl7(r16)             _BFGET_(r16, 1, 1)
    #define   SET16PIP_PIPE_CTRL2_clken_ctrl7(r16,v)           _BFSET_(r16, 1, 1,v)

    #define     w32PIP_PIPE_CTRL2                              {\
            UNSG32 uCTRL2_clken_ctrl6                          :  1;\
            UNSG32 uCTRL2_clken_ctrl7                          :  1;\
            UNSG32 RSVDx8_b2                                   : 30;\
          }
    union { UNSG32 u32PIP_PIPE_CTRL2;
            struct w32PIP_PIPE_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    } SIE_PIP_PIPE;

    typedef union  T32PIP_PIPE_CTRL0
          { UNSG32 u32;
            struct w32PIP_PIPE_CTRL0;
                 } T32PIP_PIPE_CTRL0;
    typedef union  T32PIP_PIPE_CTRL1
          { UNSG32 u32;
            struct w32PIP_PIPE_CTRL1;
                 } T32PIP_PIPE_CTRL1;
    typedef union  T32PIP_PIPE_CTRL2
          { UNSG32 u32;
            struct w32PIP_PIPE_CTRL2;
                 } T32PIP_PIPE_CTRL2;
    ///////////////////////////////////////////////////////////

    typedef union  TPIP_PIPE_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32PIP_PIPE_CTRL0;
                   };
                 } TPIP_PIPE_CTRL0;
    typedef union  TPIP_PIPE_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32PIP_PIPE_CTRL1;
                   };
                 } TPIP_PIPE_CTRL1;
    typedef union  TPIP_PIPE_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32PIP_PIPE_CTRL2;
                   };
                 } TPIP_PIPE_CTRL2;

    ///////////////////////////////////////////////////////////
     SIGN32 PIP_PIPE_drvrd(SIE_PIP_PIPE *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 PIP_PIPE_drvwr(SIE_PIP_PIPE *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void PIP_PIPE_reset(SIE_PIP_PIPE *p);
     SIGN32 PIP_PIPE_cmp  (SIE_PIP_PIPE *p, SIE_PIP_PIPE *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define PIP_PIPE_check(p,pie,pfx,hLOG) PIP_PIPE_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define PIP_PIPE_print(p,    pfx,hLOG) PIP_PIPE_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: PIP_PIPE
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE CQUAD                                    (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ARGB                 (P)
///               %unsigned 8  A                         
///               %unsigned 8  R_V                       
///               %unsigned 8  G_Y                       
///               %unsigned 8  B_U                       
///                                    ###
///                                    * 8-bit index to 32-bit ARGB/AYUV table lookup
///                                    * A is stored at [7:0], R/V is stored at [15:8], G/Y is stored at [23:16] and B/U is stored at [31:24].
///                                    * End of Color QUAD LUT definition.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:      32b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_CQUAD
#define h_CQUAD (){}

    #define     RA_CQUAD_ARGB                                  0x0000

    #define     BA_CQUAD_ARGB_A                                0x0000
    #define     B16CQUAD_ARGB_A                                0x0000
    #define   LSb32CQUAD_ARGB_A                                   0
    #define   LSb16CQUAD_ARGB_A                                   0
    #define       bCQUAD_ARGB_A                                8
    #define   MSK32CQUAD_ARGB_A                                   0x000000FF

    #define     BA_CQUAD_ARGB_R_V                              0x0001
    #define     B16CQUAD_ARGB_R_V                              0x0000
    #define   LSb32CQUAD_ARGB_R_V                                 8
    #define   LSb16CQUAD_ARGB_R_V                                 8
    #define       bCQUAD_ARGB_R_V                              8
    #define   MSK32CQUAD_ARGB_R_V                                 0x0000FF00

    #define     BA_CQUAD_ARGB_G_Y                              0x0002
    #define     B16CQUAD_ARGB_G_Y                              0x0002
    #define   LSb32CQUAD_ARGB_G_Y                                 16
    #define   LSb16CQUAD_ARGB_G_Y                                 0
    #define       bCQUAD_ARGB_G_Y                              8
    #define   MSK32CQUAD_ARGB_G_Y                                 0x00FF0000

    #define     BA_CQUAD_ARGB_B_U                              0x0003
    #define     B16CQUAD_ARGB_B_U                              0x0002
    #define   LSb32CQUAD_ARGB_B_U                                 24
    #define   LSb16CQUAD_ARGB_B_U                                 8
    #define       bCQUAD_ARGB_B_U                              8
    #define   MSK32CQUAD_ARGB_B_U                                 0xFF000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_CQUAD {
    ///////////////////////////////////////////////////////////
    #define   GET32CQUAD_ARGB_A(r32)                           _BFGET_(r32, 7, 0)
    #define   SET32CQUAD_ARGB_A(r32,v)                         _BFSET_(r32, 7, 0,v)
    #define   GET16CQUAD_ARGB_A(r16)                           _BFGET_(r16, 7, 0)
    #define   SET16CQUAD_ARGB_A(r16,v)                         _BFSET_(r16, 7, 0,v)

    #define   GET32CQUAD_ARGB_R_V(r32)                         _BFGET_(r32,15, 8)
    #define   SET32CQUAD_ARGB_R_V(r32,v)                       _BFSET_(r32,15, 8,v)
    #define   GET16CQUAD_ARGB_R_V(r16)                         _BFGET_(r16,15, 8)
    #define   SET16CQUAD_ARGB_R_V(r16,v)                       _BFSET_(r16,15, 8,v)

    #define   GET32CQUAD_ARGB_G_Y(r32)                         _BFGET_(r32,23,16)
    #define   SET32CQUAD_ARGB_G_Y(r32,v)                       _BFSET_(r32,23,16,v)
    #define   GET16CQUAD_ARGB_G_Y(r16)                         _BFGET_(r16, 7, 0)
    #define   SET16CQUAD_ARGB_G_Y(r16,v)                       _BFSET_(r16, 7, 0,v)

    #define   GET32CQUAD_ARGB_B_U(r32)                         _BFGET_(r32,31,24)
    #define   SET32CQUAD_ARGB_B_U(r32,v)                       _BFSET_(r32,31,24,v)
    #define   GET16CQUAD_ARGB_B_U(r16)                         _BFGET_(r16,15, 8)
    #define   SET16CQUAD_ARGB_B_U(r16,v)                       _BFSET_(r16,15, 8,v)

    #define     w32CQUAD_ARGB                                  {\
            UNSG32 uARGB_A                                     :  8;\
            UNSG32 uARGB_R_V                                   :  8;\
            UNSG32 uARGB_G_Y                                   :  8;\
            UNSG32 uARGB_B_U                                   :  8;\
          }
    union { UNSG32 u32CQUAD_ARGB;
            struct w32CQUAD_ARGB;
          };
    ///////////////////////////////////////////////////////////
    } SIE_CQUAD;

    typedef union  T32CQUAD_ARGB
          { UNSG32 u32;
            struct w32CQUAD_ARGB;
                 } T32CQUAD_ARGB;
    ///////////////////////////////////////////////////////////

    typedef union  TCQUAD_ARGB
          { UNSG32 u32[1];
            struct {
            struct w32CQUAD_ARGB;
                   };
                 } TCQUAD_ARGB;

    ///////////////////////////////////////////////////////////
     SIGN32 CQUAD_drvrd(SIE_CQUAD *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 CQUAD_drvwr(SIE_CQUAD *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void CQUAD_reset(SIE_CQUAD *p);
     SIGN32 CQUAD_cmp  (SIE_CQUAD *p, SIE_CQUAD *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define CQUAD_check(p,pie,pfx,hLOG) CQUAD_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define CQUAD_print(p,    pfx,hLOG) CQUAD_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: CQUAD
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE CLUT                                     (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000                      (P)
///     # 0x00000 CLUT                 
///               $CQUAD               CLUT              REG     [256]
///                                    ###
///                                    * 8-bit index to 32-bit ARGB/AYUV table lookup
///                                    * End of Color CLUT definition.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    1024B, bits:    8192b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_CLUT
#define h_CLUT (){}

    #define     RA_CLUT_CLUT                                   0x0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_CLUT {
    ///////////////////////////////////////////////////////////
              SIE_CQUAD                                        ie_CLUT[256];
    ///////////////////////////////////////////////////////////
    } SIE_CLUT;

    ///////////////////////////////////////////////////////////
     SIGN32 CLUT_drvrd(SIE_CLUT *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 CLUT_drvwr(SIE_CLUT *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void CLUT_reset(SIE_CLUT *p);
     SIGN32 CLUT_cmp  (SIE_CLUT *p, SIE_CLUT *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define CLUT_check(p,pie,pfx,hLOG) CLUT_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define CLUT_print(p,    pfx,hLOG) CLUT_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: CLUT
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE GFX0                    biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               %unsigned 1  bitmap40_en               0x0
///                                    ###
///                                    * Write 1 to enable bit mapping on ReadClient Output data.
///                                    ###
///               %unsigned 4  packSelR0                 0x0
///                                    ###
///                                    * Packsel value for read client R0
///                                    * 00 : data supported is 8 bits
///                                    * 01 : data supported is 16 bits
///                                    * 10 : data supported is 32 bits
///                                    * 11: data supported 10 bit unpacking [for Tile Format 10Bit V4H6]
///                                    * 100: data supported is 10 bits
///                                    * 101: data supported is 20 bits
///                                    * 110: data supported is 30 bits
///                                    * 111: data supported is 24 bits
///                                    ###
///               %unsigned 1  nonStdResEn_R0            0x0
///                                    ###
///                                    * Enable for Read Client 0 when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot_R0             0x64
///                                    ###
///                                    * Total number of pixels in a line (for Read Client 0)
///                                    ###
///               %unsigned 4  flushCnt_R0               0x5
///                                    ###
///                                    * Counter to determine the ready status of Read Client 0 after end of line (only used when nonStdResEn_R0 = 1)
///                                    ###
///               %unsigned 1  SCL_CLKEN_CTRL            0x0
///                                    ###
///                                    * 0: Clock enable to scaler depends on the input FIFO status; scaler clken is deasserted when FE can't supply data to scaler.
///                                    * 1: Clock enable to scaler is always high.
///                                    * Since AUX scaler input always comes from CPCB0 : its clock enable should be 1 whenever it is being used.
///                                    ###
///               %unsigned 1  FE_GFX_CTRL_fld           0x0
///                                    ###
///                                    * Controls the field signal at the input of OSD scaler.
///                                    ###
///               %unsigned 1  gfx_sclEnb                0x1
///                                    ###
///                                    * Clock gating enable for GFX Scalar. Write 0 to clock gate
///                                    ###
///               %unsigned 1  clken_ctrl                0x0
///                                    ###
///                                    * Clock enable control bit (based on Read Client FIFO). Write 1 to make clock enable dependent on Read Client FIFO status.
///                                    * When Input format to PIP path is TILED, this bit to be programmed as 1'b0 (to make tg_clken independent of Read Client0 's rdy status
///                                    ###
///               %unsigned 1  fifo_sts_ctrl             0x0
///                                    ###
///                                    * SCL Input FIFO full status control (used for clk_en generation). Write 1 to enable fifo full status for clk_en generation.
///                                    ###
///               %unsigned 1  ups8_bypass               0x0
///                                    ###
///                                    * UPS8 Hard-bypass bit. Write 1 to Hard Bypass UPS8.
///                                    ###
///               %unsigned 1  csc_bypass                0x0
///                                    ###
///                                    * CSC Hard-bypass bit. Write 1 to Hard Bypass CSC
///                                    ###
///               %unsigned 1  pip_gfx_en                0x0
///                                    ###
///                                    * [0] : Plane is enabled for ARGB input (32bit)
///                                    * [1] : Plane is enabled for YV422 input (16bit)
///                                    ###
///               %unsigned 1  clken_ctrl_sp             0x0
///                                    ###
///                                    * Clock enable control bit (based on Read Client PipR1 FIFO). Write 1 to make clock enable dependent on Read Client PipR1 FIFO status.
///                                    * When Input format to PIP path is TILED, this bit to be programmed as 1'b0 (to make tg_clken independent of Read Client1 's rdy status
///                                    ###
///     @ 0x00004 CTRL0                (P)
///               %unsigned 1  ups422_idata_ctrl         0x0
///                                    ###
///                                    * Input data control for UPS422_444. Write 1 to select input which is in mentioned format -
///                                    * MSB : 8bits from Read Client 0
///                                    * LSB : 8bits from Read Client 1
///                                    ###
///               %unsigned 1  pixel_crop_en             0x0
///                                    ###
///                                    * [1] : Pixel cropping or De-alpha IP is enabled [0] : Pixel cropping or De-alpha IP is disabled
///                                    ###
///               %unsigned 3  gfxpl_idata_ctrl          0x0
///                                    ###
///                                    * [000]: Input data is 8bpc
///                                    * [001]: Input data is 10bpc
///                                    * [010]: Input data is YUV444 (RGB444) 8bpc
///                                    * [011]: Input data is YUV444 10bpc
///                                    * [100]: Input data is ARGB2101010
///                                    * [101]: Input data is ARGB32 8bpc
///                                    ###
///               %unsigned 1  sp_dwa_10b_normal_mode    0x0
///                                    ###
///                                    * 1: used for only sp DWA 10 bit format support in normal mode.
///                                    * 0: default path (other formats)
///                                    ###
///               %unsigned 1  sp_dwa_10b_inverse_mode   0x0
///                                    ###
///                                    * 1: used for only sp DWA 10 bit format support in inverse scan mode.
///                                    * 0: default path (other formats)
///                                    ###
///               %unsigned 1  yuv422_sp_dwa_10b_en      0x0
///                                    ###
///                                    * 1: used for only 422sp DWA 10 bit format support.
///                                    * 0: default path (other formats)
///                                    ###
///               %unsigned 1  gdcm_bypass               0x1
///                                    ###
///                                    * [1] : GDCM IP Bypass
///                                    * [0] : GDCM IP Enable
///                                    ###
///               %unsigned 1  gfxpl_gdcm_sel            0x0
///                                    ###
///                                    * Output select for GFX0 Plane between Scalar, Dolby, GITM and GDCM
///                                    * 0: scalar output /Dolby Output
///                                    * 1: GDCM Output
///                                    ###
///               %unsigned 1  alphaRange_InpAlign       0x0
///                                    ###
///                                    * 0: MSB align alpha input
///                                    * 1: LSB align alpha input
///                                    ###
///               %unsigned 4  alphaRange_InpBDP         0x8
///                                    ###
///                                    * Selection register for alpha input Bit depth -
///                                    * 1: 1 bit alpha input
///                                    * 2: 2 bit alpha input
///                                    * 4: 4 bit alpha input
///                                    * 8: 8 bit alpha input
///                                    ###
///               %unsigned 1  hdrLut_pdwn_regs          0x0
///                                    ###
///                                    * Wired to internal SRAM's pdwn port of GDCM IP
///                                    ###
///               %unsigned 1  hdrLut_pdlvmc_regs        0x0
///                                    ###
///                                    * Wired to internal SRAM's pdlvmc port of GDCM IP
///                                    ###
///               %unsigned 1  hdrLut_pdfvssm_regs       0x0
///                                    ###
///                                    * Wired to internal SRAM's pdfvssm port of GDCM IP
///                                    ###
///               %unsigned 1  bl_rd_sel                 0x0
///                                    ###
///                                    * Read Select bit for selecting read enable to Main (BL)Read Clients from either BL layer or PIP/    GFX0 Path.
///                                    * [0] : Read Enable is from BL paths
///                                    * [1] : Read Enable is from GFX0/PIP Path.
///                                    ###
///               %unsigned 1  el_rd_sel                 0x0
///                                    ###
///                                    * Read Select bit for selecting read enable to Main (EL)Read Clients from either EL layer (EL) or PIP/ GFX0 Path.
///                                    * [0] : Read Enable is from EL paths
///                                    * [1] : Read Enable is from GFX0/PIP Path.
///                                    ###
///               %unsigned 1  read_sel                  0x0
///                                    ###
///                                    * Read select between DEINT Channel (EL)and Main Plane (BL)
///                                    * [1] :Read data/Ready is from DEINT(EL)
///                                    * channels (ReadClients)
///                                    * [0] : Read data/Ready is from Main Plane (BL)
///                                    * channels (ReadClients)
///                                    ###
///               %%        11         # Stuffing bits...
///     @ 0x00008 DB_CTRL              (P)
///               %unsigned 1  DBVIP_GFX0_bypass         0x0
///                                    ###
///                                    * 0 : Dolby input processing block enable
///                                    * 1 : Dolby input processing block bypass
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0000C SCL_BYPASS           (P)
///               %unsigned 1  en                        0x0
///                                    ###
///                                    * 1 : Enables the SCL bypass
///                                    * 0 : Disables the SCL bypass
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00010 gfxScl               (P-)
///               %unsigned 1  client_start              0x0
///               %unsigned 1  client_clear              0x0
///               %unsigned 1  scl_start                 0x0
///               %unsigned 1  scl_clear                 0x0
///                                    ###
///                                    * Read Client & GFX SCL : start and clear
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00014 Rd_word0             (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for RdClient.
///                                    * Should be programmed as:
///                                    * ceil( ohres*ovres*pixW / 128 )
///                                    * where pixW = pixel width in no of bits
///                                    * Note : In case of resolution which is not integer multiple of 128, word total should be programmed as follows :
///                                    * For eg if ohres = 116, and pixW = 24, then (ohres*24/128) = 21.75. Then word total should be (22*ovres)
///                                    ###
///     @ 0x00018 UPS420_CTRL          (P)
///               %unsigned 1  ups420_bypass             0x0
///                                    ###
///                                    * Hard-bypass for UPS420-SP. Write 1 to bypass it.
///                                    ###
///               %unsigned 1  rd_mask_initVal0          0x0
///                                    ###
///                                    * Initiallization value for read Mask for RdClient1 (420SP)
///                                    ###
///               %unsigned 1  rd_mask_initVal1          0x1
///                                    ###
///                                    * Initiallization value for read Mask for RdClient1 (420SP)
///                                    ###
///               %unsigned 1  rd_mask_sftrst            0x0
///                                    ###
///                                    * Soft reset to initialize read mask. Write 1 to initialize read mask with rd_mask_initVal0
///                                    ###
///               %unsigned 1  ups422_data_ctrl          0x0
///                                    ###
///                                    * Data control enable for ups420_422
///                                    * [0] : Input data is from Read Client 0
///                                    * [1] : Input data is from ups420-sp
///                                    ###
///               %unsigned 1  memdlbUPS420_cgEnb        0x1
///                                    ###
///                                    * Clock gating enable for External Memory Delay Line Buffer (memdl : detileUPS420)
///                                    * Write 0 to clock gate this block. Default enabled.
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x0001C TILE_CTRL            (P)
///               %unsigned 1  detile_inp_en             0x0
///                                    ###
///                                    * TILE input format support enable bit for PIP path. Write 1 to enable this path (from MAIN EL or BL PIPE). Default disabled.
///                                    ###
///               %unsigned 1  infifo_ctrl               0x0
///                                    ###
///                                    * Not used
///                                    * tg_clken control bit to enable use of fifo empty status (of EL 'dvEdrInFifo_el' in main plane) in generating clock enable when input format is TILE in PIP path. Default 0. Write 1 to enable this control
///                                    ###
///               %unsigned 1  pipInfifo_ctrl            0x0
///                                    ###
///                                    * tg_clken control bit to enable use of fifo empty status (of PIP FIFO pipInFifo in main plane) in generating clock enable when input format is TILE (from MAIN EL or BL PIPE) in PIP path. Default 0. Write 1 to enable this control
///                                    ###
///               %unsigned 1  tile_inp_sel              0x1
///                                    ###
///                                    * Not used
///                                    * Control bit to select the input to PIP path.
///                                    * 0 : Reserved
///                                    * 1 : Input is from pipInFifo_el FIFO
///                                    ###
///               %unsigned 1  pip_tile_sel              0x0
///                                    ###
///                                    * Used to select input to PIP path either from BL Detile or EL Detile output.
///                                    * 0 : EL Detile ouput
///                                    * 1 : BL Detile output
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00020 pipInpix             (P)
///               %unsigned 32 tot                       0x7E9001
///                                    ###
///                                    * Specifies the total number of pixels expected at the input of PIP Plane Input FIFO when Input Format is Tiled (V4H8 or V4H6 etc 8bpc). It should be programmed with (ivres*ihres).
///                                    * Default Value : 3840*2160+1
///                                    ###
///     @ 0x00024 gfx_pix              (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of pixels expected at the input of GFX Scaler. It should be programmed with (gfx_ivres*gfx_ihres).
///                                    ###
///     @ 0x00028 INVSCAN              (P)
///               %unsigned 1  bitmap128_Rd0_en          0x0
///               %unsigned 1  bitmap128_Rd1_en          0x0
///               %unsigned 1  bitmap8R_Rd1_en           0x0
///                                    ###
///                                    * [1] : enable for H Inverse Scan.
///                                    * [0] : Default Value.
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x0002C STATUS               (R-)
///               %unsigned 16 pipTg                     0x0
///                                    ###
///                                    * Vcount status for PIP TG
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00030 CTRL1                (P)
///               %unsigned 1  scl_sw_rst                0x0
///                                    ###
///                                    * Graphics Scalar software controlled reset. Write 1 to reset adaptive scalar.
///                                    ###
///               %unsigned 1  scl_rst_en0               0x1
///                                    ###
///                                    * Graphics Scalar will get resetted on scalar start
///                                    * Disable this bit for not-resetting Graphics Scalar on start.
///                                    ###
///               %unsigned 1  scl_rst_en1               0x1
///                                    ###
///                                    * Graphics Scalar will get resetted on displayTG frst
///                                    * Enable this bit to reset Graphics Scalar on frst
///                                    ###
///               %unsigned 1  scl_rst_en2               0x0
///                                    ###
///                                    * Enable this bit to soft-reset Graphics scalar. Software will have control to soft-reset scalar during VBI
///                                    ###
///               %unsigned 1  crop_de2_en               0x0
///                                    ###
///                                    * Enable for cropped de2 to be used for cropping input read from Read Client's which is fed to UPS420-SP
///                                    * Write 1 to enable it. Default disabled.
///                                    ###
///               %unsigned 1  sb_clkg_en                0x1
///                                    ###
///                                    * Clock gating enable for separate clock to Graphics-0 Scalar (except LUT logic). Default enabled. Write 0 to clock gate logic except LUT logic.
///                                    ###
///               %unsigned 1  fall_bk_en                0x0
///                                    ###
///                                    * Graphics Scalar Clock Enable control : fall back option for previous logic. Write 1 for clock enable generation with previous logic.
///                                    * Default : power saving mode
///                                    ###
///               %unsigned 1  clken_st_clr              0x0
///                                    ###
///                                    * Clear Bit for Graphics Scalar ClkEn state. Write 1 to Initialize State. Level Signal
///                                    ###
///               %unsigned 1  tgclken_sel               0x0
///                                    ###
///                                    * pipTG clock enable select for fall back option. Write 1 to select mode without power saving option
///                                    * Default : Power Saving Mode
///                                    ###
///               %unsigned 1  gitmtop_bypass            0x1
///                                    ###
///                                    * [1] : GITM IP Bypass
///                                    * [0] : GITM IP Enable
///                                    ###
///               %unsigned 2  fifo_rd_sel               0x0
///                                    ###
///                                    * Read Select bit for selecting read enable to Dolby Input Fifo from either Dolby IP or GITM or GDCM IP
///                                    * [00]: Read Enable is from Dolby IP
///                                    * [01]: Read Enable is from GITM IP
///                                    * [10]: Read Enable is from GDCM IP
///                                    ###
///               %unsigned 1  gfxpl_gitmsel             0x0
///                                    ###
///                                    * Output Select for GFX0 Plane between Scalar,Dolby and GITM
///                                    * [0] : Sclar Output / Dolby Output
///                                    * [1] : GITM Output
///                                    ###
///               %unsigned 1  fifo_full_ctrl1           0x0
///                                    ###
///                                    * tg_clken control bit to enable use of fifo full status in generating clock enable from ovpScl iFifo luma. Default enable. Write 1 to disable this control
///                                    ###
///               %unsigned 1  fifo_full_ctrl2           0x0
///                                    ###
///                                    * tg_clken control bit to enable use of fifo full status in generating clock enable from ovpScl iFifo chroma. Default enable. Write 1 to disable this control
///                                    ###
///               %unsigned 1  uv_mask_val0              0x0
///                                    ###
///                                    * Mask value for UV data read control for OVPSCLWRAP
///                                    * Default 0. For Front-end, alternate line control to be independent of UV
///                                    ###
///               %unsigned 1  uv_mask_val1              0x0
///                                    ###
///                                    * Mask value for UV data read control for OVPSCLWRAP
///                                    * Default 0. For Front-end, alternate line control to be independent of UV
///                                    ###
///               %unsigned 1  uv_mask_disable           0x0
///                                    ###
///                                    * Control bit to diable uv_mask generation for OVP SCL Pipe (Croma control)
///                                    * Write 1 to disable UV mask generation. Default enabled.
///                                    ###
///               %unsigned 1  gfx0_ovpidat_ctrl         0x0
///                                    ###
///                                    * OVPSCL PIPE input data control from GFX0 path
///                                    * [0] : Input is 8bpc
///                                    * [1] : Input is 10bpc
///                                    ###
///               %unsigned 1  hdrLut_bypass             0x1
///                                    ###
///                                    * [1] : hdrLut Bypass
///                                    * [0] : hdrLut Enable
///                                    ###
///               %unsigned 1  alphadiv_bypass           0x1
///                                    ###
///                                    * [1] : De-Alpha IP Bypass
///                                    * [0] : De-Alpha IP Enable
///                                    ###
///               %%        11         # Stuffing bits...
///     @ 0x00034 LUT_BYPASS           (P)
///               %unsigned 1  en                        0x1
///                                    ###
///                                    * 1 : Enables the LUT bypass
///                                    * 0 : Disables the LUT bypass
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00038 CTRL2                (P)
///               %unsigned 1  CLUT8_pdwn_regs           0x0
///                                    ###
///                                    * Wired to internal SRAM's pwdn port of CLUT Wrapper
///                                    ###
///               %unsigned 1  CLUT8_pdlvmc_regs         0x0
///                                    ###
///                                    * Wired to internal SRAM's pdlvmc port of CLUT Wrapper
///                                    ###
///               %unsigned 1  CLUT8_pdfvssm_regs        0x0
///                                    ###
///                                    * Wired to internal SRAM's pdfvssm ports of CLUT Wrapper
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x0003C GITM_CTRL            (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * GITM TOP Start
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00040 GDCM_CTRL            (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * GDCM Start register
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00044 RASTERSCAN           (P)
///               %unsigned 1  ovp_rd_sel_420sp          0x0
///                                    ###
///                                    * Select bit to enable read from ReadClients in GFX0 PIPE.
///                                    * [0]:Read Enable for ReadClients in GFX0 PIPE is dependent on gfx0 Tg control signals in GFX0/PIP
///                                    * PIPE.(420SP input for OVP).
///                                    * [1] : Read Enable is dependent on rsfetg control signals (420SP input for OVP).
///                                    ###
///               %unsigned 1  gfx0_rd_sel_420sp_en      0x0
///                                    ###
///                                    * Select bit to enable read from ReadClients in GFX0 PIPE.
///                                    * [0]:Read Enable for ReadClients in GFX0 PIPE is dependent on gfx0 Tg control signals in GFX0/PIP
///                                    * PIPE.(420SP input for GFX0 PIPE).
///                                    * [1]: Read enable is dependent on rsfetg control signals (420SP input for OVP decoupled path)
///                                    ###
///               %unsigned 1  gfx0_rd_sel_420sp_sel     0x0
///                                    ###
///                                    * Enable bit for taking 420SP input from ReadClients for GFX0 PIPE which is controlled by rsFetg signals.
///                                    * [0]: 420SP input is for ovp decoupled path(EL/BL)
///                                    * [1]: 420SP input for GFX0 PIPE.
///                                    * Write 1 to this for receiving 420SP input from
///                                    * ReadClients for GFX0/PIP PIPE (controlled by
///                                    * rsFeTg)
///                                    ###
///               %unsigned 1  ovp_420sp_datasel         0x0
///                                    ###
///                                    * [0] : Input data(420SP) is from PIP readclient and controlled by gfx0 Tg in GFX0/PIP PIPE.(420SP input for OVP).
///                                    * [1] : Input data(420SP) is from any readclient and controlled by rsFetg.(420SP input for OVP through PIP path).
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00048                      (P)
///     # 0x00048 pipTG                
///               $TG                  pipTG             REG          
///                                    ###
///                                    * PIP Plane (GFX/PIP) Tming Generator related registers
///                                    ###
///     @ 0x00088                      (P)
///     # 0x00088 BITMAP40             
///               $BITMAP40            BITMAP40          REG          
///                                    ###
///                                    * Bit Map registers for bit mapping of Read Client output data
///                                    ###
///     @ 0x000A8                      (P)
///     # 0x000A8 UPS10                
///               $UPS10               UPS10             REG          
///                                    ###
///                                    * UPS 8bit related registers
///                                    ###
///     @ 0x000D0                      (P)
///     # 0x000D0 PIP_CSC              
///               $CSC_C17O24          PIP_CSC           REG          
///                                    ###
///                                    * CSC coefficients for PIP plane CSC
///                                    ###
///     @ 0x00100                      (P)
///     # 0x00100 RdClientPipR1        
///               $ReadClient          RdClientPipR1     REG          
///                                    ###
///                                    * 'Read Client PipR1 for Semi-Planar 420 support' related registers
///                                    ###
///     @ 0x00110                      (P)
///     # 0x00110 PIP_PIPE             
///               $PIP_PIPE            PIP_PIPE          REG          
///                                    ###
///                                    * Register specifications for DETILE processing in PIP Path
///                                    ###
///     @ 0x0011C                      (W-)
///     #         # Stuffing bytes...
///               %% 5920
///     @ 0x00400                      (P)
///     # 0x00400 LUT                  
///               $CLUT                LUT               MEM          
///                                    ###
///                                    * LUT for color index look-up.
///                                    ###
///     @ 0x00800                      (P)
///     # 0x00800 BITMAP12             
///               $BITMAP12            BITMAP12          REG          
///                                    ###
///                                    * Bit Map registers for bit mapping of Read Client output data (Croma)
///                                    ###
///     @ 0x00808                      (P)
///     # 0x00808 UPS420_SP            
///               $UPS_420_422_SP_12b  UPS420_SP         REG          
///                                    ###
///                                    * Register specifications for UPS420 SP processing in PIP Path
///                                    ###
///     @ 0x0082C                      (P)
///     # 0x0082C ALPHADIV             
///               $ALPHADIV            ALPHADIV          REG          
///                                    ###
///                                    * Register specifications for De-Alpha in GFX0 Path
///                                    ###
///     @ 0x00830                      (P)
///     # 0x00830 SRAMPWR_CLUT         
///               $SRAMPWR             SRAMPWR_CLUT      REG          
///                                    ###
///                                    * Power control register for CLUT in GFX0 path.
///                                    * End of GFX0 plane definition.
///                                    ###
///     @ 0x00834                      (W-)
///     #         # Stuffing bytes...
///               %% 7776
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    3072B, bits:    1687b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_GFX0
#define h_GFX0 (){}

    #define     RA_GFX0_CTRL                                   0x0000

    #define     BA_GFX0_CTRL_bitmap40_en                       0x0000
    #define     B16GFX0_CTRL_bitmap40_en                       0x0000
    #define   LSb32GFX0_CTRL_bitmap40_en                          0
    #define   LSb16GFX0_CTRL_bitmap40_en                          0
    #define       bGFX0_CTRL_bitmap40_en                       1
    #define   MSK32GFX0_CTRL_bitmap40_en                          0x00000001

    #define     BA_GFX0_CTRL_packSelR0                         0x0000
    #define     B16GFX0_CTRL_packSelR0                         0x0000
    #define   LSb32GFX0_CTRL_packSelR0                            1
    #define   LSb16GFX0_CTRL_packSelR0                            1
    #define       bGFX0_CTRL_packSelR0                         4
    #define   MSK32GFX0_CTRL_packSelR0                            0x0000001E

    #define     BA_GFX0_CTRL_nonStdResEn_R0                    0x0000
    #define     B16GFX0_CTRL_nonStdResEn_R0                    0x0000
    #define   LSb32GFX0_CTRL_nonStdResEn_R0                       5
    #define   LSb16GFX0_CTRL_nonStdResEn_R0                       5
    #define       bGFX0_CTRL_nonStdResEn_R0                    1
    #define   MSK32GFX0_CTRL_nonStdResEn_R0                       0x00000020

    #define     BA_GFX0_CTRL_pixlineTot_R0                     0x0000
    #define     B16GFX0_CTRL_pixlineTot_R0                     0x0000
    #define   LSb32GFX0_CTRL_pixlineTot_R0                        6
    #define   LSb16GFX0_CTRL_pixlineTot_R0                        6
    #define       bGFX0_CTRL_pixlineTot_R0                     13
    #define   MSK32GFX0_CTRL_pixlineTot_R0                        0x0007FFC0

    #define     BA_GFX0_CTRL_flushCnt_R0                       0x0002
    #define     B16GFX0_CTRL_flushCnt_R0                       0x0002
    #define   LSb32GFX0_CTRL_flushCnt_R0                          19
    #define   LSb16GFX0_CTRL_flushCnt_R0                          3
    #define       bGFX0_CTRL_flushCnt_R0                       4
    #define   MSK32GFX0_CTRL_flushCnt_R0                          0x00780000

    #define     BA_GFX0_CTRL_SCL_CLKEN_CTRL                    0x0002
    #define     B16GFX0_CTRL_SCL_CLKEN_CTRL                    0x0002
    #define   LSb32GFX0_CTRL_SCL_CLKEN_CTRL                       23
    #define   LSb16GFX0_CTRL_SCL_CLKEN_CTRL                       7
    #define       bGFX0_CTRL_SCL_CLKEN_CTRL                    1
    #define   MSK32GFX0_CTRL_SCL_CLKEN_CTRL                       0x00800000

    #define     BA_GFX0_CTRL_FE_GFX_CTRL_fld                   0x0003
    #define     B16GFX0_CTRL_FE_GFX_CTRL_fld                   0x0002
    #define   LSb32GFX0_CTRL_FE_GFX_CTRL_fld                      24
    #define   LSb16GFX0_CTRL_FE_GFX_CTRL_fld                      8
    #define       bGFX0_CTRL_FE_GFX_CTRL_fld                   1
    #define   MSK32GFX0_CTRL_FE_GFX_CTRL_fld                      0x01000000

    #define     BA_GFX0_CTRL_gfx_sclEnb                        0x0003
    #define     B16GFX0_CTRL_gfx_sclEnb                        0x0002
    #define   LSb32GFX0_CTRL_gfx_sclEnb                           25
    #define   LSb16GFX0_CTRL_gfx_sclEnb                           9
    #define       bGFX0_CTRL_gfx_sclEnb                        1
    #define   MSK32GFX0_CTRL_gfx_sclEnb                           0x02000000

    #define     BA_GFX0_CTRL_clken_ctrl                        0x0003
    #define     B16GFX0_CTRL_clken_ctrl                        0x0002
    #define   LSb32GFX0_CTRL_clken_ctrl                           26
    #define   LSb16GFX0_CTRL_clken_ctrl                           10
    #define       bGFX0_CTRL_clken_ctrl                        1
    #define   MSK32GFX0_CTRL_clken_ctrl                           0x04000000

    #define     BA_GFX0_CTRL_fifo_sts_ctrl                     0x0003
    #define     B16GFX0_CTRL_fifo_sts_ctrl                     0x0002
    #define   LSb32GFX0_CTRL_fifo_sts_ctrl                        27
    #define   LSb16GFX0_CTRL_fifo_sts_ctrl                        11
    #define       bGFX0_CTRL_fifo_sts_ctrl                     1
    #define   MSK32GFX0_CTRL_fifo_sts_ctrl                        0x08000000

    #define     BA_GFX0_CTRL_ups8_bypass                       0x0003
    #define     B16GFX0_CTRL_ups8_bypass                       0x0002
    #define   LSb32GFX0_CTRL_ups8_bypass                          28
    #define   LSb16GFX0_CTRL_ups8_bypass                          12
    #define       bGFX0_CTRL_ups8_bypass                       1
    #define   MSK32GFX0_CTRL_ups8_bypass                          0x10000000

    #define     BA_GFX0_CTRL_csc_bypass                        0x0003
    #define     B16GFX0_CTRL_csc_bypass                        0x0002
    #define   LSb32GFX0_CTRL_csc_bypass                           29
    #define   LSb16GFX0_CTRL_csc_bypass                           13
    #define       bGFX0_CTRL_csc_bypass                        1
    #define   MSK32GFX0_CTRL_csc_bypass                           0x20000000

    #define     BA_GFX0_CTRL_pip_gfx_en                        0x0003
    #define     B16GFX0_CTRL_pip_gfx_en                        0x0002
    #define   LSb32GFX0_CTRL_pip_gfx_en                           30
    #define   LSb16GFX0_CTRL_pip_gfx_en                           14
    #define       bGFX0_CTRL_pip_gfx_en                        1
    #define   MSK32GFX0_CTRL_pip_gfx_en                           0x40000000

    #define     BA_GFX0_CTRL_clken_ctrl_sp                     0x0003
    #define     B16GFX0_CTRL_clken_ctrl_sp                     0x0002
    #define   LSb32GFX0_CTRL_clken_ctrl_sp                        31
    #define   LSb16GFX0_CTRL_clken_ctrl_sp                        15
    #define       bGFX0_CTRL_clken_ctrl_sp                     1
    #define   MSK32GFX0_CTRL_clken_ctrl_sp                        0x80000000
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_CTRL0                                  0x0004

    #define     BA_GFX0_CTRL0_ups422_idata_ctrl                0x0004
    #define     B16GFX0_CTRL0_ups422_idata_ctrl                0x0004
    #define   LSb32GFX0_CTRL0_ups422_idata_ctrl                   0
    #define   LSb16GFX0_CTRL0_ups422_idata_ctrl                   0
    #define       bGFX0_CTRL0_ups422_idata_ctrl                1
    #define   MSK32GFX0_CTRL0_ups422_idata_ctrl                   0x00000001

    #define     BA_GFX0_CTRL0_pixel_crop_en                    0x0004
    #define     B16GFX0_CTRL0_pixel_crop_en                    0x0004
    #define   LSb32GFX0_CTRL0_pixel_crop_en                       1
    #define   LSb16GFX0_CTRL0_pixel_crop_en                       1
    #define       bGFX0_CTRL0_pixel_crop_en                    1
    #define   MSK32GFX0_CTRL0_pixel_crop_en                       0x00000002

    #define     BA_GFX0_CTRL0_gfxpl_idata_ctrl                 0x0004
    #define     B16GFX0_CTRL0_gfxpl_idata_ctrl                 0x0004
    #define   LSb32GFX0_CTRL0_gfxpl_idata_ctrl                    2
    #define   LSb16GFX0_CTRL0_gfxpl_idata_ctrl                    2
    #define       bGFX0_CTRL0_gfxpl_idata_ctrl                 3
    #define   MSK32GFX0_CTRL0_gfxpl_idata_ctrl                    0x0000001C

    #define     BA_GFX0_CTRL0_sp_dwa_10b_normal_mode           0x0004
    #define     B16GFX0_CTRL0_sp_dwa_10b_normal_mode           0x0004
    #define   LSb32GFX0_CTRL0_sp_dwa_10b_normal_mode              5
    #define   LSb16GFX0_CTRL0_sp_dwa_10b_normal_mode              5
    #define       bGFX0_CTRL0_sp_dwa_10b_normal_mode           1
    #define   MSK32GFX0_CTRL0_sp_dwa_10b_normal_mode              0x00000020

    #define     BA_GFX0_CTRL0_sp_dwa_10b_inverse_mode          0x0004
    #define     B16GFX0_CTRL0_sp_dwa_10b_inverse_mode          0x0004
    #define   LSb32GFX0_CTRL0_sp_dwa_10b_inverse_mode             6
    #define   LSb16GFX0_CTRL0_sp_dwa_10b_inverse_mode             6
    #define       bGFX0_CTRL0_sp_dwa_10b_inverse_mode          1
    #define   MSK32GFX0_CTRL0_sp_dwa_10b_inverse_mode             0x00000040

    #define     BA_GFX0_CTRL0_yuv422_sp_dwa_10b_en             0x0004
    #define     B16GFX0_CTRL0_yuv422_sp_dwa_10b_en             0x0004
    #define   LSb32GFX0_CTRL0_yuv422_sp_dwa_10b_en                7
    #define   LSb16GFX0_CTRL0_yuv422_sp_dwa_10b_en                7
    #define       bGFX0_CTRL0_yuv422_sp_dwa_10b_en             1
    #define   MSK32GFX0_CTRL0_yuv422_sp_dwa_10b_en                0x00000080

    #define     BA_GFX0_CTRL0_gdcm_bypass                      0x0005
    #define     B16GFX0_CTRL0_gdcm_bypass                      0x0004
    #define   LSb32GFX0_CTRL0_gdcm_bypass                         8
    #define   LSb16GFX0_CTRL0_gdcm_bypass                         8
    #define       bGFX0_CTRL0_gdcm_bypass                      1
    #define   MSK32GFX0_CTRL0_gdcm_bypass                         0x00000100

    #define     BA_GFX0_CTRL0_gfxpl_gdcm_sel                   0x0005
    #define     B16GFX0_CTRL0_gfxpl_gdcm_sel                   0x0004
    #define   LSb32GFX0_CTRL0_gfxpl_gdcm_sel                      9
    #define   LSb16GFX0_CTRL0_gfxpl_gdcm_sel                      9
    #define       bGFX0_CTRL0_gfxpl_gdcm_sel                   1
    #define   MSK32GFX0_CTRL0_gfxpl_gdcm_sel                      0x00000200

    #define     BA_GFX0_CTRL0_alphaRange_InpAlign              0x0005
    #define     B16GFX0_CTRL0_alphaRange_InpAlign              0x0004
    #define   LSb32GFX0_CTRL0_alphaRange_InpAlign                 10
    #define   LSb16GFX0_CTRL0_alphaRange_InpAlign                 10
    #define       bGFX0_CTRL0_alphaRange_InpAlign              1
    #define   MSK32GFX0_CTRL0_alphaRange_InpAlign                 0x00000400

    #define     BA_GFX0_CTRL0_alphaRange_InpBDP                0x0005
    #define     B16GFX0_CTRL0_alphaRange_InpBDP                0x0004
    #define   LSb32GFX0_CTRL0_alphaRange_InpBDP                   11
    #define   LSb16GFX0_CTRL0_alphaRange_InpBDP                   11
    #define       bGFX0_CTRL0_alphaRange_InpBDP                4
    #define   MSK32GFX0_CTRL0_alphaRange_InpBDP                   0x00007800

    #define     BA_GFX0_CTRL0_hdrLut_pdwn_regs                 0x0005
    #define     B16GFX0_CTRL0_hdrLut_pdwn_regs                 0x0004
    #define   LSb32GFX0_CTRL0_hdrLut_pdwn_regs                    15
    #define   LSb16GFX0_CTRL0_hdrLut_pdwn_regs                    15
    #define       bGFX0_CTRL0_hdrLut_pdwn_regs                 1
    #define   MSK32GFX0_CTRL0_hdrLut_pdwn_regs                    0x00008000

    #define     BA_GFX0_CTRL0_hdrLut_pdlvmc_regs               0x0006
    #define     B16GFX0_CTRL0_hdrLut_pdlvmc_regs               0x0006
    #define   LSb32GFX0_CTRL0_hdrLut_pdlvmc_regs                  16
    #define   LSb16GFX0_CTRL0_hdrLut_pdlvmc_regs                  0
    #define       bGFX0_CTRL0_hdrLut_pdlvmc_regs               1
    #define   MSK32GFX0_CTRL0_hdrLut_pdlvmc_regs                  0x00010000

    #define     BA_GFX0_CTRL0_hdrLut_pdfvssm_regs              0x0006
    #define     B16GFX0_CTRL0_hdrLut_pdfvssm_regs              0x0006
    #define   LSb32GFX0_CTRL0_hdrLut_pdfvssm_regs                 17
    #define   LSb16GFX0_CTRL0_hdrLut_pdfvssm_regs                 1
    #define       bGFX0_CTRL0_hdrLut_pdfvssm_regs              1
    #define   MSK32GFX0_CTRL0_hdrLut_pdfvssm_regs                 0x00020000

    #define     BA_GFX0_CTRL0_bl_rd_sel                        0x0006
    #define     B16GFX0_CTRL0_bl_rd_sel                        0x0006
    #define   LSb32GFX0_CTRL0_bl_rd_sel                           18
    #define   LSb16GFX0_CTRL0_bl_rd_sel                           2
    #define       bGFX0_CTRL0_bl_rd_sel                        1
    #define   MSK32GFX0_CTRL0_bl_rd_sel                           0x00040000

    #define     BA_GFX0_CTRL0_el_rd_sel                        0x0006
    #define     B16GFX0_CTRL0_el_rd_sel                        0x0006
    #define   LSb32GFX0_CTRL0_el_rd_sel                           19
    #define   LSb16GFX0_CTRL0_el_rd_sel                           3
    #define       bGFX0_CTRL0_el_rd_sel                        1
    #define   MSK32GFX0_CTRL0_el_rd_sel                           0x00080000

    #define     BA_GFX0_CTRL0_read_sel                         0x0006
    #define     B16GFX0_CTRL0_read_sel                         0x0006
    #define   LSb32GFX0_CTRL0_read_sel                            20
    #define   LSb16GFX0_CTRL0_read_sel                            4
    #define       bGFX0_CTRL0_read_sel                         1
    #define   MSK32GFX0_CTRL0_read_sel                            0x00100000
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_DB_CTRL                                0x0008

    #define     BA_GFX0_DB_CTRL_DBVIP_GFX0_bypass              0x0008
    #define     B16GFX0_DB_CTRL_DBVIP_GFX0_bypass              0x0008
    #define   LSb32GFX0_DB_CTRL_DBVIP_GFX0_bypass                 0
    #define   LSb16GFX0_DB_CTRL_DBVIP_GFX0_bypass                 0
    #define       bGFX0_DB_CTRL_DBVIP_GFX0_bypass              1
    #define   MSK32GFX0_DB_CTRL_DBVIP_GFX0_bypass                 0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_SCL_BYPASS                             0x000C

    #define     BA_GFX0_SCL_BYPASS_en                          0x000C
    #define     B16GFX0_SCL_BYPASS_en                          0x000C
    #define   LSb32GFX0_SCL_BYPASS_en                             0
    #define   LSb16GFX0_SCL_BYPASS_en                             0
    #define       bGFX0_SCL_BYPASS_en                          1
    #define   MSK32GFX0_SCL_BYPASS_en                             0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_gfxScl                                 0x0010

    #define     BA_GFX0_gfxScl_client_start                    0x0010
    #define     B16GFX0_gfxScl_client_start                    0x0010
    #define   LSb32GFX0_gfxScl_client_start                       0
    #define   LSb16GFX0_gfxScl_client_start                       0
    #define       bGFX0_gfxScl_client_start                    1
    #define   MSK32GFX0_gfxScl_client_start                       0x00000001

    #define     BA_GFX0_gfxScl_client_clear                    0x0010
    #define     B16GFX0_gfxScl_client_clear                    0x0010
    #define   LSb32GFX0_gfxScl_client_clear                       1
    #define   LSb16GFX0_gfxScl_client_clear                       1
    #define       bGFX0_gfxScl_client_clear                    1
    #define   MSK32GFX0_gfxScl_client_clear                       0x00000002

    #define     BA_GFX0_gfxScl_scl_start                       0x0010
    #define     B16GFX0_gfxScl_scl_start                       0x0010
    #define   LSb32GFX0_gfxScl_scl_start                          2
    #define   LSb16GFX0_gfxScl_scl_start                          2
    #define       bGFX0_gfxScl_scl_start                       1
    #define   MSK32GFX0_gfxScl_scl_start                          0x00000004

    #define     BA_GFX0_gfxScl_scl_clear                       0x0010
    #define     B16GFX0_gfxScl_scl_clear                       0x0010
    #define   LSb32GFX0_gfxScl_scl_clear                          3
    #define   LSb16GFX0_gfxScl_scl_clear                          3
    #define       bGFX0_gfxScl_scl_clear                       1
    #define   MSK32GFX0_gfxScl_scl_clear                          0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_Rd_word0                               0x0014

    #define     BA_GFX0_Rd_word0_tot                           0x0014
    #define     B16GFX0_Rd_word0_tot                           0x0014
    #define   LSb32GFX0_Rd_word0_tot                              0
    #define   LSb16GFX0_Rd_word0_tot                              0
    #define       bGFX0_Rd_word0_tot                           32
    #define   MSK32GFX0_Rd_word0_tot                              0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_UPS420_CTRL                            0x0018

    #define     BA_GFX0_UPS420_CTRL_ups420_bypass              0x0018
    #define     B16GFX0_UPS420_CTRL_ups420_bypass              0x0018
    #define   LSb32GFX0_UPS420_CTRL_ups420_bypass                 0
    #define   LSb16GFX0_UPS420_CTRL_ups420_bypass                 0
    #define       bGFX0_UPS420_CTRL_ups420_bypass              1
    #define   MSK32GFX0_UPS420_CTRL_ups420_bypass                 0x00000001

    #define     BA_GFX0_UPS420_CTRL_rd_mask_initVal0           0x0018
    #define     B16GFX0_UPS420_CTRL_rd_mask_initVal0           0x0018
    #define   LSb32GFX0_UPS420_CTRL_rd_mask_initVal0              1
    #define   LSb16GFX0_UPS420_CTRL_rd_mask_initVal0              1
    #define       bGFX0_UPS420_CTRL_rd_mask_initVal0           1
    #define   MSK32GFX0_UPS420_CTRL_rd_mask_initVal0              0x00000002

    #define     BA_GFX0_UPS420_CTRL_rd_mask_initVal1           0x0018
    #define     B16GFX0_UPS420_CTRL_rd_mask_initVal1           0x0018
    #define   LSb32GFX0_UPS420_CTRL_rd_mask_initVal1              2
    #define   LSb16GFX0_UPS420_CTRL_rd_mask_initVal1              2
    #define       bGFX0_UPS420_CTRL_rd_mask_initVal1           1
    #define   MSK32GFX0_UPS420_CTRL_rd_mask_initVal1              0x00000004

    #define     BA_GFX0_UPS420_CTRL_rd_mask_sftrst             0x0018
    #define     B16GFX0_UPS420_CTRL_rd_mask_sftrst             0x0018
    #define   LSb32GFX0_UPS420_CTRL_rd_mask_sftrst                3
    #define   LSb16GFX0_UPS420_CTRL_rd_mask_sftrst                3
    #define       bGFX0_UPS420_CTRL_rd_mask_sftrst             1
    #define   MSK32GFX0_UPS420_CTRL_rd_mask_sftrst                0x00000008

    #define     BA_GFX0_UPS420_CTRL_ups422_data_ctrl           0x0018
    #define     B16GFX0_UPS420_CTRL_ups422_data_ctrl           0x0018
    #define   LSb32GFX0_UPS420_CTRL_ups422_data_ctrl              4
    #define   LSb16GFX0_UPS420_CTRL_ups422_data_ctrl              4
    #define       bGFX0_UPS420_CTRL_ups422_data_ctrl           1
    #define   MSK32GFX0_UPS420_CTRL_ups422_data_ctrl              0x00000010

    #define     BA_GFX0_UPS420_CTRL_memdlbUPS420_cgEnb         0x0018
    #define     B16GFX0_UPS420_CTRL_memdlbUPS420_cgEnb         0x0018
    #define   LSb32GFX0_UPS420_CTRL_memdlbUPS420_cgEnb            5
    #define   LSb16GFX0_UPS420_CTRL_memdlbUPS420_cgEnb            5
    #define       bGFX0_UPS420_CTRL_memdlbUPS420_cgEnb         1
    #define   MSK32GFX0_UPS420_CTRL_memdlbUPS420_cgEnb            0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_TILE_CTRL                              0x001C

    #define     BA_GFX0_TILE_CTRL_detile_inp_en                0x001C
    #define     B16GFX0_TILE_CTRL_detile_inp_en                0x001C
    #define   LSb32GFX0_TILE_CTRL_detile_inp_en                   0
    #define   LSb16GFX0_TILE_CTRL_detile_inp_en                   0
    #define       bGFX0_TILE_CTRL_detile_inp_en                1
    #define   MSK32GFX0_TILE_CTRL_detile_inp_en                   0x00000001

    #define     BA_GFX0_TILE_CTRL_infifo_ctrl                  0x001C
    #define     B16GFX0_TILE_CTRL_infifo_ctrl                  0x001C
    #define   LSb32GFX0_TILE_CTRL_infifo_ctrl                     1
    #define   LSb16GFX0_TILE_CTRL_infifo_ctrl                     1
    #define       bGFX0_TILE_CTRL_infifo_ctrl                  1
    #define   MSK32GFX0_TILE_CTRL_infifo_ctrl                     0x00000002

    #define     BA_GFX0_TILE_CTRL_pipInfifo_ctrl               0x001C
    #define     B16GFX0_TILE_CTRL_pipInfifo_ctrl               0x001C
    #define   LSb32GFX0_TILE_CTRL_pipInfifo_ctrl                  2
    #define   LSb16GFX0_TILE_CTRL_pipInfifo_ctrl                  2
    #define       bGFX0_TILE_CTRL_pipInfifo_ctrl               1
    #define   MSK32GFX0_TILE_CTRL_pipInfifo_ctrl                  0x00000004

    #define     BA_GFX0_TILE_CTRL_tile_inp_sel                 0x001C
    #define     B16GFX0_TILE_CTRL_tile_inp_sel                 0x001C
    #define   LSb32GFX0_TILE_CTRL_tile_inp_sel                    3
    #define   LSb16GFX0_TILE_CTRL_tile_inp_sel                    3
    #define       bGFX0_TILE_CTRL_tile_inp_sel                 1
    #define   MSK32GFX0_TILE_CTRL_tile_inp_sel                    0x00000008

    #define     BA_GFX0_TILE_CTRL_pip_tile_sel                 0x001C
    #define     B16GFX0_TILE_CTRL_pip_tile_sel                 0x001C
    #define   LSb32GFX0_TILE_CTRL_pip_tile_sel                    4
    #define   LSb16GFX0_TILE_CTRL_pip_tile_sel                    4
    #define       bGFX0_TILE_CTRL_pip_tile_sel                 1
    #define   MSK32GFX0_TILE_CTRL_pip_tile_sel                    0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_pipInpix                               0x0020

    #define     BA_GFX0_pipInpix_tot                           0x0020
    #define     B16GFX0_pipInpix_tot                           0x0020
    #define   LSb32GFX0_pipInpix_tot                              0
    #define   LSb16GFX0_pipInpix_tot                              0
    #define       bGFX0_pipInpix_tot                           32
    #define   MSK32GFX0_pipInpix_tot                              0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_gfx_pix                                0x0024

    #define     BA_GFX0_gfx_pix_tot                            0x0024
    #define     B16GFX0_gfx_pix_tot                            0x0024
    #define   LSb32GFX0_gfx_pix_tot                               0
    #define   LSb16GFX0_gfx_pix_tot                               0
    #define       bGFX0_gfx_pix_tot                            32
    #define   MSK32GFX0_gfx_pix_tot                               0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_INVSCAN                                0x0028

    #define     BA_GFX0_INVSCAN_bitmap128_Rd0_en               0x0028
    #define     B16GFX0_INVSCAN_bitmap128_Rd0_en               0x0028
    #define   LSb32GFX0_INVSCAN_bitmap128_Rd0_en                  0
    #define   LSb16GFX0_INVSCAN_bitmap128_Rd0_en                  0
    #define       bGFX0_INVSCAN_bitmap128_Rd0_en               1
    #define   MSK32GFX0_INVSCAN_bitmap128_Rd0_en                  0x00000001

    #define     BA_GFX0_INVSCAN_bitmap128_Rd1_en               0x0028
    #define     B16GFX0_INVSCAN_bitmap128_Rd1_en               0x0028
    #define   LSb32GFX0_INVSCAN_bitmap128_Rd1_en                  1
    #define   LSb16GFX0_INVSCAN_bitmap128_Rd1_en                  1
    #define       bGFX0_INVSCAN_bitmap128_Rd1_en               1
    #define   MSK32GFX0_INVSCAN_bitmap128_Rd1_en                  0x00000002

    #define     BA_GFX0_INVSCAN_bitmap8R_Rd1_en                0x0028
    #define     B16GFX0_INVSCAN_bitmap8R_Rd1_en                0x0028
    #define   LSb32GFX0_INVSCAN_bitmap8R_Rd1_en                   2
    #define   LSb16GFX0_INVSCAN_bitmap8R_Rd1_en                   2
    #define       bGFX0_INVSCAN_bitmap8R_Rd1_en                1
    #define   MSK32GFX0_INVSCAN_bitmap8R_Rd1_en                   0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_STATUS                                 0x002C

    #define     BA_GFX0_STATUS_pipTg                           0x002C
    #define     B16GFX0_STATUS_pipTg                           0x002C
    #define   LSb32GFX0_STATUS_pipTg                              0
    #define   LSb16GFX0_STATUS_pipTg                              0
    #define       bGFX0_STATUS_pipTg                           16
    #define   MSK32GFX0_STATUS_pipTg                              0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_CTRL1                                  0x0030

    #define     BA_GFX0_CTRL1_scl_sw_rst                       0x0030
    #define     B16GFX0_CTRL1_scl_sw_rst                       0x0030
    #define   LSb32GFX0_CTRL1_scl_sw_rst                          0
    #define   LSb16GFX0_CTRL1_scl_sw_rst                          0
    #define       bGFX0_CTRL1_scl_sw_rst                       1
    #define   MSK32GFX0_CTRL1_scl_sw_rst                          0x00000001

    #define     BA_GFX0_CTRL1_scl_rst_en0                      0x0030
    #define     B16GFX0_CTRL1_scl_rst_en0                      0x0030
    #define   LSb32GFX0_CTRL1_scl_rst_en0                         1
    #define   LSb16GFX0_CTRL1_scl_rst_en0                         1
    #define       bGFX0_CTRL1_scl_rst_en0                      1
    #define   MSK32GFX0_CTRL1_scl_rst_en0                         0x00000002

    #define     BA_GFX0_CTRL1_scl_rst_en1                      0x0030
    #define     B16GFX0_CTRL1_scl_rst_en1                      0x0030
    #define   LSb32GFX0_CTRL1_scl_rst_en1                         2
    #define   LSb16GFX0_CTRL1_scl_rst_en1                         2
    #define       bGFX0_CTRL1_scl_rst_en1                      1
    #define   MSK32GFX0_CTRL1_scl_rst_en1                         0x00000004

    #define     BA_GFX0_CTRL1_scl_rst_en2                      0x0030
    #define     B16GFX0_CTRL1_scl_rst_en2                      0x0030
    #define   LSb32GFX0_CTRL1_scl_rst_en2                         3
    #define   LSb16GFX0_CTRL1_scl_rst_en2                         3
    #define       bGFX0_CTRL1_scl_rst_en2                      1
    #define   MSK32GFX0_CTRL1_scl_rst_en2                         0x00000008

    #define     BA_GFX0_CTRL1_crop_de2_en                      0x0030
    #define     B16GFX0_CTRL1_crop_de2_en                      0x0030
    #define   LSb32GFX0_CTRL1_crop_de2_en                         4
    #define   LSb16GFX0_CTRL1_crop_de2_en                         4
    #define       bGFX0_CTRL1_crop_de2_en                      1
    #define   MSK32GFX0_CTRL1_crop_de2_en                         0x00000010

    #define     BA_GFX0_CTRL1_sb_clkg_en                       0x0030
    #define     B16GFX0_CTRL1_sb_clkg_en                       0x0030
    #define   LSb32GFX0_CTRL1_sb_clkg_en                          5
    #define   LSb16GFX0_CTRL1_sb_clkg_en                          5
    #define       bGFX0_CTRL1_sb_clkg_en                       1
    #define   MSK32GFX0_CTRL1_sb_clkg_en                          0x00000020

    #define     BA_GFX0_CTRL1_fall_bk_en                       0x0030
    #define     B16GFX0_CTRL1_fall_bk_en                       0x0030
    #define   LSb32GFX0_CTRL1_fall_bk_en                          6
    #define   LSb16GFX0_CTRL1_fall_bk_en                          6
    #define       bGFX0_CTRL1_fall_bk_en                       1
    #define   MSK32GFX0_CTRL1_fall_bk_en                          0x00000040

    #define     BA_GFX0_CTRL1_clken_st_clr                     0x0030
    #define     B16GFX0_CTRL1_clken_st_clr                     0x0030
    #define   LSb32GFX0_CTRL1_clken_st_clr                        7
    #define   LSb16GFX0_CTRL1_clken_st_clr                        7
    #define       bGFX0_CTRL1_clken_st_clr                     1
    #define   MSK32GFX0_CTRL1_clken_st_clr                        0x00000080

    #define     BA_GFX0_CTRL1_tgclken_sel                      0x0031
    #define     B16GFX0_CTRL1_tgclken_sel                      0x0030
    #define   LSb32GFX0_CTRL1_tgclken_sel                         8
    #define   LSb16GFX0_CTRL1_tgclken_sel                         8
    #define       bGFX0_CTRL1_tgclken_sel                      1
    #define   MSK32GFX0_CTRL1_tgclken_sel                         0x00000100

    #define     BA_GFX0_CTRL1_gitmtop_bypass                   0x0031
    #define     B16GFX0_CTRL1_gitmtop_bypass                   0x0030
    #define   LSb32GFX0_CTRL1_gitmtop_bypass                      9
    #define   LSb16GFX0_CTRL1_gitmtop_bypass                      9
    #define       bGFX0_CTRL1_gitmtop_bypass                   1
    #define   MSK32GFX0_CTRL1_gitmtop_bypass                      0x00000200

    #define     BA_GFX0_CTRL1_fifo_rd_sel                      0x0031
    #define     B16GFX0_CTRL1_fifo_rd_sel                      0x0030
    #define   LSb32GFX0_CTRL1_fifo_rd_sel                         10
    #define   LSb16GFX0_CTRL1_fifo_rd_sel                         10
    #define       bGFX0_CTRL1_fifo_rd_sel                      2
    #define   MSK32GFX0_CTRL1_fifo_rd_sel                         0x00000C00

    #define     BA_GFX0_CTRL1_gfxpl_gitmsel                    0x0031
    #define     B16GFX0_CTRL1_gfxpl_gitmsel                    0x0030
    #define   LSb32GFX0_CTRL1_gfxpl_gitmsel                       12
    #define   LSb16GFX0_CTRL1_gfxpl_gitmsel                       12
    #define       bGFX0_CTRL1_gfxpl_gitmsel                    1
    #define   MSK32GFX0_CTRL1_gfxpl_gitmsel                       0x00001000

    #define     BA_GFX0_CTRL1_fifo_full_ctrl1                  0x0031
    #define     B16GFX0_CTRL1_fifo_full_ctrl1                  0x0030
    #define   LSb32GFX0_CTRL1_fifo_full_ctrl1                     13
    #define   LSb16GFX0_CTRL1_fifo_full_ctrl1                     13
    #define       bGFX0_CTRL1_fifo_full_ctrl1                  1
    #define   MSK32GFX0_CTRL1_fifo_full_ctrl1                     0x00002000

    #define     BA_GFX0_CTRL1_fifo_full_ctrl2                  0x0031
    #define     B16GFX0_CTRL1_fifo_full_ctrl2                  0x0030
    #define   LSb32GFX0_CTRL1_fifo_full_ctrl2                     14
    #define   LSb16GFX0_CTRL1_fifo_full_ctrl2                     14
    #define       bGFX0_CTRL1_fifo_full_ctrl2                  1
    #define   MSK32GFX0_CTRL1_fifo_full_ctrl2                     0x00004000

    #define     BA_GFX0_CTRL1_uv_mask_val0                     0x0031
    #define     B16GFX0_CTRL1_uv_mask_val0                     0x0030
    #define   LSb32GFX0_CTRL1_uv_mask_val0                        15
    #define   LSb16GFX0_CTRL1_uv_mask_val0                        15
    #define       bGFX0_CTRL1_uv_mask_val0                     1
    #define   MSK32GFX0_CTRL1_uv_mask_val0                        0x00008000

    #define     BA_GFX0_CTRL1_uv_mask_val1                     0x0032
    #define     B16GFX0_CTRL1_uv_mask_val1                     0x0032
    #define   LSb32GFX0_CTRL1_uv_mask_val1                        16
    #define   LSb16GFX0_CTRL1_uv_mask_val1                        0
    #define       bGFX0_CTRL1_uv_mask_val1                     1
    #define   MSK32GFX0_CTRL1_uv_mask_val1                        0x00010000

    #define     BA_GFX0_CTRL1_uv_mask_disable                  0x0032
    #define     B16GFX0_CTRL1_uv_mask_disable                  0x0032
    #define   LSb32GFX0_CTRL1_uv_mask_disable                     17
    #define   LSb16GFX0_CTRL1_uv_mask_disable                     1
    #define       bGFX0_CTRL1_uv_mask_disable                  1
    #define   MSK32GFX0_CTRL1_uv_mask_disable                     0x00020000

    #define     BA_GFX0_CTRL1_gfx0_ovpidat_ctrl                0x0032
    #define     B16GFX0_CTRL1_gfx0_ovpidat_ctrl                0x0032
    #define   LSb32GFX0_CTRL1_gfx0_ovpidat_ctrl                   18
    #define   LSb16GFX0_CTRL1_gfx0_ovpidat_ctrl                   2
    #define       bGFX0_CTRL1_gfx0_ovpidat_ctrl                1
    #define   MSK32GFX0_CTRL1_gfx0_ovpidat_ctrl                   0x00040000

    #define     BA_GFX0_CTRL1_hdrLut_bypass                    0x0032
    #define     B16GFX0_CTRL1_hdrLut_bypass                    0x0032
    #define   LSb32GFX0_CTRL1_hdrLut_bypass                       19
    #define   LSb16GFX0_CTRL1_hdrLut_bypass                       3
    #define       bGFX0_CTRL1_hdrLut_bypass                    1
    #define   MSK32GFX0_CTRL1_hdrLut_bypass                       0x00080000

    #define     BA_GFX0_CTRL1_alphadiv_bypass                  0x0032
    #define     B16GFX0_CTRL1_alphadiv_bypass                  0x0032
    #define   LSb32GFX0_CTRL1_alphadiv_bypass                     20
    #define   LSb16GFX0_CTRL1_alphadiv_bypass                     4
    #define       bGFX0_CTRL1_alphadiv_bypass                  1
    #define   MSK32GFX0_CTRL1_alphadiv_bypass                     0x00100000
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_LUT_BYPASS                             0x0034

    #define     BA_GFX0_LUT_BYPASS_en                          0x0034
    #define     B16GFX0_LUT_BYPASS_en                          0x0034
    #define   LSb32GFX0_LUT_BYPASS_en                             0
    #define   LSb16GFX0_LUT_BYPASS_en                             0
    #define       bGFX0_LUT_BYPASS_en                          1
    #define   MSK32GFX0_LUT_BYPASS_en                             0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_CTRL2                                  0x0038

    #define     BA_GFX0_CTRL2_CLUT8_pdwn_regs                  0x0038
    #define     B16GFX0_CTRL2_CLUT8_pdwn_regs                  0x0038
    #define   LSb32GFX0_CTRL2_CLUT8_pdwn_regs                     0
    #define   LSb16GFX0_CTRL2_CLUT8_pdwn_regs                     0
    #define       bGFX0_CTRL2_CLUT8_pdwn_regs                  1
    #define   MSK32GFX0_CTRL2_CLUT8_pdwn_regs                     0x00000001

    #define     BA_GFX0_CTRL2_CLUT8_pdlvmc_regs                0x0038
    #define     B16GFX0_CTRL2_CLUT8_pdlvmc_regs                0x0038
    #define   LSb32GFX0_CTRL2_CLUT8_pdlvmc_regs                   1
    #define   LSb16GFX0_CTRL2_CLUT8_pdlvmc_regs                   1
    #define       bGFX0_CTRL2_CLUT8_pdlvmc_regs                1
    #define   MSK32GFX0_CTRL2_CLUT8_pdlvmc_regs                   0x00000002

    #define     BA_GFX0_CTRL2_CLUT8_pdfvssm_regs               0x0038
    #define     B16GFX0_CTRL2_CLUT8_pdfvssm_regs               0x0038
    #define   LSb32GFX0_CTRL2_CLUT8_pdfvssm_regs                  2
    #define   LSb16GFX0_CTRL2_CLUT8_pdfvssm_regs                  2
    #define       bGFX0_CTRL2_CLUT8_pdfvssm_regs               1
    #define   MSK32GFX0_CTRL2_CLUT8_pdfvssm_regs                  0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_GITM_CTRL                              0x003C

    #define     BA_GFX0_GITM_CTRL_start                        0x003C
    #define     B16GFX0_GITM_CTRL_start                        0x003C
    #define   LSb32GFX0_GITM_CTRL_start                           0
    #define   LSb16GFX0_GITM_CTRL_start                           0
    #define       bGFX0_GITM_CTRL_start                        1
    #define   MSK32GFX0_GITM_CTRL_start                           0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_GDCM_CTRL                              0x0040

    #define     BA_GFX0_GDCM_CTRL_start                        0x0040
    #define     B16GFX0_GDCM_CTRL_start                        0x0040
    #define   LSb32GFX0_GDCM_CTRL_start                           0
    #define   LSb16GFX0_GDCM_CTRL_start                           0
    #define       bGFX0_GDCM_CTRL_start                        1
    #define   MSK32GFX0_GDCM_CTRL_start                           0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_RASTERSCAN                             0x0044

    #define     BA_GFX0_RASTERSCAN_ovp_rd_sel_420sp            0x0044
    #define     B16GFX0_RASTERSCAN_ovp_rd_sel_420sp            0x0044
    #define   LSb32GFX0_RASTERSCAN_ovp_rd_sel_420sp               0
    #define   LSb16GFX0_RASTERSCAN_ovp_rd_sel_420sp               0
    #define       bGFX0_RASTERSCAN_ovp_rd_sel_420sp            1
    #define   MSK32GFX0_RASTERSCAN_ovp_rd_sel_420sp               0x00000001

    #define     BA_GFX0_RASTERSCAN_gfx0_rd_sel_420sp_en        0x0044
    #define     B16GFX0_RASTERSCAN_gfx0_rd_sel_420sp_en        0x0044
    #define   LSb32GFX0_RASTERSCAN_gfx0_rd_sel_420sp_en           1
    #define   LSb16GFX0_RASTERSCAN_gfx0_rd_sel_420sp_en           1
    #define       bGFX0_RASTERSCAN_gfx0_rd_sel_420sp_en        1
    #define   MSK32GFX0_RASTERSCAN_gfx0_rd_sel_420sp_en           0x00000002

    #define     BA_GFX0_RASTERSCAN_gfx0_rd_sel_420sp_sel       0x0044
    #define     B16GFX0_RASTERSCAN_gfx0_rd_sel_420sp_sel       0x0044
    #define   LSb32GFX0_RASTERSCAN_gfx0_rd_sel_420sp_sel          2
    #define   LSb16GFX0_RASTERSCAN_gfx0_rd_sel_420sp_sel          2
    #define       bGFX0_RASTERSCAN_gfx0_rd_sel_420sp_sel       1
    #define   MSK32GFX0_RASTERSCAN_gfx0_rd_sel_420sp_sel          0x00000004

    #define     BA_GFX0_RASTERSCAN_ovp_420sp_datasel           0x0044
    #define     B16GFX0_RASTERSCAN_ovp_420sp_datasel           0x0044
    #define   LSb32GFX0_RASTERSCAN_ovp_420sp_datasel              3
    #define   LSb16GFX0_RASTERSCAN_ovp_420sp_datasel              3
    #define       bGFX0_RASTERSCAN_ovp_420sp_datasel           1
    #define   MSK32GFX0_RASTERSCAN_ovp_420sp_datasel              0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_pipTG                                  0x0048
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_BITMAP40                               0x0088
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_UPS10                                  0x00A8
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_PIP_CSC                                0x00D0
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_RdClientPipR1                          0x0100
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_PIP_PIPE                               0x0110
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_LUT                                    0x0400
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_BITMAP12                               0x0800
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_UPS420_SP                              0x0808
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_ALPHADIV                               0x082C
    ///////////////////////////////////////////////////////////
    #define     RA_GFX0_SRAMPWR_CLUT                           0x0830
    ///////////////////////////////////////////////////////////

    typedef struct SIE_GFX0 {
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_CTRL_bitmap40_en(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32GFX0_CTRL_bitmap40_en(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_CTRL_bitmap40_en(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16GFX0_CTRL_bitmap40_en(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32GFX0_CTRL_packSelR0(r32)                    _BFGET_(r32, 4, 1)
    #define   SET32GFX0_CTRL_packSelR0(r32,v)                  _BFSET_(r32, 4, 1,v)
    #define   GET16GFX0_CTRL_packSelR0(r16)                    _BFGET_(r16, 4, 1)
    #define   SET16GFX0_CTRL_packSelR0(r16,v)                  _BFSET_(r16, 4, 1,v)

    #define   GET32GFX0_CTRL_nonStdResEn_R0(r32)               _BFGET_(r32, 5, 5)
    #define   SET32GFX0_CTRL_nonStdResEn_R0(r32,v)             _BFSET_(r32, 5, 5,v)
    #define   GET16GFX0_CTRL_nonStdResEn_R0(r16)               _BFGET_(r16, 5, 5)
    #define   SET16GFX0_CTRL_nonStdResEn_R0(r16,v)             _BFSET_(r16, 5, 5,v)

    #define   GET32GFX0_CTRL_pixlineTot_R0(r32)                _BFGET_(r32,18, 6)
    #define   SET32GFX0_CTRL_pixlineTot_R0(r32,v)              _BFSET_(r32,18, 6,v)

    #define   GET32GFX0_CTRL_flushCnt_R0(r32)                  _BFGET_(r32,22,19)
    #define   SET32GFX0_CTRL_flushCnt_R0(r32,v)                _BFSET_(r32,22,19,v)
    #define   GET16GFX0_CTRL_flushCnt_R0(r16)                  _BFGET_(r16, 6, 3)
    #define   SET16GFX0_CTRL_flushCnt_R0(r16,v)                _BFSET_(r16, 6, 3,v)

    #define   GET32GFX0_CTRL_SCL_CLKEN_CTRL(r32)               _BFGET_(r32,23,23)
    #define   SET32GFX0_CTRL_SCL_CLKEN_CTRL(r32,v)             _BFSET_(r32,23,23,v)
    #define   GET16GFX0_CTRL_SCL_CLKEN_CTRL(r16)               _BFGET_(r16, 7, 7)
    #define   SET16GFX0_CTRL_SCL_CLKEN_CTRL(r16,v)             _BFSET_(r16, 7, 7,v)

    #define   GET32GFX0_CTRL_FE_GFX_CTRL_fld(r32)              _BFGET_(r32,24,24)
    #define   SET32GFX0_CTRL_FE_GFX_CTRL_fld(r32,v)            _BFSET_(r32,24,24,v)
    #define   GET16GFX0_CTRL_FE_GFX_CTRL_fld(r16)              _BFGET_(r16, 8, 8)
    #define   SET16GFX0_CTRL_FE_GFX_CTRL_fld(r16,v)            _BFSET_(r16, 8, 8,v)

    #define   GET32GFX0_CTRL_gfx_sclEnb(r32)                   _BFGET_(r32,25,25)
    #define   SET32GFX0_CTRL_gfx_sclEnb(r32,v)                 _BFSET_(r32,25,25,v)
    #define   GET16GFX0_CTRL_gfx_sclEnb(r16)                   _BFGET_(r16, 9, 9)
    #define   SET16GFX0_CTRL_gfx_sclEnb(r16,v)                 _BFSET_(r16, 9, 9,v)

    #define   GET32GFX0_CTRL_clken_ctrl(r32)                   _BFGET_(r32,26,26)
    #define   SET32GFX0_CTRL_clken_ctrl(r32,v)                 _BFSET_(r32,26,26,v)
    #define   GET16GFX0_CTRL_clken_ctrl(r16)                   _BFGET_(r16,10,10)
    #define   SET16GFX0_CTRL_clken_ctrl(r16,v)                 _BFSET_(r16,10,10,v)

    #define   GET32GFX0_CTRL_fifo_sts_ctrl(r32)                _BFGET_(r32,27,27)
    #define   SET32GFX0_CTRL_fifo_sts_ctrl(r32,v)              _BFSET_(r32,27,27,v)
    #define   GET16GFX0_CTRL_fifo_sts_ctrl(r16)                _BFGET_(r16,11,11)
    #define   SET16GFX0_CTRL_fifo_sts_ctrl(r16,v)              _BFSET_(r16,11,11,v)

    #define   GET32GFX0_CTRL_ups8_bypass(r32)                  _BFGET_(r32,28,28)
    #define   SET32GFX0_CTRL_ups8_bypass(r32,v)                _BFSET_(r32,28,28,v)
    #define   GET16GFX0_CTRL_ups8_bypass(r16)                  _BFGET_(r16,12,12)
    #define   SET16GFX0_CTRL_ups8_bypass(r16,v)                _BFSET_(r16,12,12,v)

    #define   GET32GFX0_CTRL_csc_bypass(r32)                   _BFGET_(r32,29,29)
    #define   SET32GFX0_CTRL_csc_bypass(r32,v)                 _BFSET_(r32,29,29,v)
    #define   GET16GFX0_CTRL_csc_bypass(r16)                   _BFGET_(r16,13,13)
    #define   SET16GFX0_CTRL_csc_bypass(r16,v)                 _BFSET_(r16,13,13,v)

    #define   GET32GFX0_CTRL_pip_gfx_en(r32)                   _BFGET_(r32,30,30)
    #define   SET32GFX0_CTRL_pip_gfx_en(r32,v)                 _BFSET_(r32,30,30,v)
    #define   GET16GFX0_CTRL_pip_gfx_en(r16)                   _BFGET_(r16,14,14)
    #define   SET16GFX0_CTRL_pip_gfx_en(r16,v)                 _BFSET_(r16,14,14,v)

    #define   GET32GFX0_CTRL_clken_ctrl_sp(r32)                _BFGET_(r32,31,31)
    #define   SET32GFX0_CTRL_clken_ctrl_sp(r32,v)              _BFSET_(r32,31,31,v)
    #define   GET16GFX0_CTRL_clken_ctrl_sp(r16)                _BFGET_(r16,15,15)
    #define   SET16GFX0_CTRL_clken_ctrl_sp(r16,v)              _BFSET_(r16,15,15,v)

    #define     w32GFX0_CTRL                                   {\
            UNSG32 uCTRL_bitmap40_en                           :  1;\
            UNSG32 uCTRL_packSelR0                             :  4;\
            UNSG32 uCTRL_nonStdResEn_R0                        :  1;\
            UNSG32 uCTRL_pixlineTot_R0                         : 13;\
            UNSG32 uCTRL_flushCnt_R0                           :  4;\
            UNSG32 uCTRL_SCL_CLKEN_CTRL                        :  1;\
            UNSG32 uCTRL_FE_GFX_CTRL_fld                       :  1;\
            UNSG32 uCTRL_gfx_sclEnb                            :  1;\
            UNSG32 uCTRL_clken_ctrl                            :  1;\
            UNSG32 uCTRL_fifo_sts_ctrl                         :  1;\
            UNSG32 uCTRL_ups8_bypass                           :  1;\
            UNSG32 uCTRL_csc_bypass                            :  1;\
            UNSG32 uCTRL_pip_gfx_en                            :  1;\
            UNSG32 uCTRL_clken_ctrl_sp                         :  1;\
          }
    union { UNSG32 u32GFX0_CTRL;
            struct w32GFX0_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_CTRL0_ups422_idata_ctrl(r32)           _BFGET_(r32, 0, 0)
    #define   SET32GFX0_CTRL0_ups422_idata_ctrl(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_CTRL0_ups422_idata_ctrl(r16)           _BFGET_(r16, 0, 0)
    #define   SET16GFX0_CTRL0_ups422_idata_ctrl(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32GFX0_CTRL0_pixel_crop_en(r32)               _BFGET_(r32, 1, 1)
    #define   SET32GFX0_CTRL0_pixel_crop_en(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16GFX0_CTRL0_pixel_crop_en(r16)               _BFGET_(r16, 1, 1)
    #define   SET16GFX0_CTRL0_pixel_crop_en(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32GFX0_CTRL0_gfxpl_idata_ctrl(r32)            _BFGET_(r32, 4, 2)
    #define   SET32GFX0_CTRL0_gfxpl_idata_ctrl(r32,v)          _BFSET_(r32, 4, 2,v)
    #define   GET16GFX0_CTRL0_gfxpl_idata_ctrl(r16)            _BFGET_(r16, 4, 2)
    #define   SET16GFX0_CTRL0_gfxpl_idata_ctrl(r16,v)          _BFSET_(r16, 4, 2,v)

    #define   GET32GFX0_CTRL0_sp_dwa_10b_normal_mode(r32)      _BFGET_(r32, 5, 5)
    #define   SET32GFX0_CTRL0_sp_dwa_10b_normal_mode(r32,v)    _BFSET_(r32, 5, 5,v)
    #define   GET16GFX0_CTRL0_sp_dwa_10b_normal_mode(r16)      _BFGET_(r16, 5, 5)
    #define   SET16GFX0_CTRL0_sp_dwa_10b_normal_mode(r16,v)    _BFSET_(r16, 5, 5,v)

    #define   GET32GFX0_CTRL0_sp_dwa_10b_inverse_mode(r32)     _BFGET_(r32, 6, 6)
    #define   SET32GFX0_CTRL0_sp_dwa_10b_inverse_mode(r32,v)   _BFSET_(r32, 6, 6,v)
    #define   GET16GFX0_CTRL0_sp_dwa_10b_inverse_mode(r16)     _BFGET_(r16, 6, 6)
    #define   SET16GFX0_CTRL0_sp_dwa_10b_inverse_mode(r16,v)   _BFSET_(r16, 6, 6,v)

    #define   GET32GFX0_CTRL0_yuv422_sp_dwa_10b_en(r32)        _BFGET_(r32, 7, 7)
    #define   SET32GFX0_CTRL0_yuv422_sp_dwa_10b_en(r32,v)      _BFSET_(r32, 7, 7,v)
    #define   GET16GFX0_CTRL0_yuv422_sp_dwa_10b_en(r16)        _BFGET_(r16, 7, 7)
    #define   SET16GFX0_CTRL0_yuv422_sp_dwa_10b_en(r16,v)      _BFSET_(r16, 7, 7,v)

    #define   GET32GFX0_CTRL0_gdcm_bypass(r32)                 _BFGET_(r32, 8, 8)
    #define   SET32GFX0_CTRL0_gdcm_bypass(r32,v)               _BFSET_(r32, 8, 8,v)
    #define   GET16GFX0_CTRL0_gdcm_bypass(r16)                 _BFGET_(r16, 8, 8)
    #define   SET16GFX0_CTRL0_gdcm_bypass(r16,v)               _BFSET_(r16, 8, 8,v)

    #define   GET32GFX0_CTRL0_gfxpl_gdcm_sel(r32)              _BFGET_(r32, 9, 9)
    #define   SET32GFX0_CTRL0_gfxpl_gdcm_sel(r32,v)            _BFSET_(r32, 9, 9,v)
    #define   GET16GFX0_CTRL0_gfxpl_gdcm_sel(r16)              _BFGET_(r16, 9, 9)
    #define   SET16GFX0_CTRL0_gfxpl_gdcm_sel(r16,v)            _BFSET_(r16, 9, 9,v)

    #define   GET32GFX0_CTRL0_alphaRange_InpAlign(r32)         _BFGET_(r32,10,10)
    #define   SET32GFX0_CTRL0_alphaRange_InpAlign(r32,v)       _BFSET_(r32,10,10,v)
    #define   GET16GFX0_CTRL0_alphaRange_InpAlign(r16)         _BFGET_(r16,10,10)
    #define   SET16GFX0_CTRL0_alphaRange_InpAlign(r16,v)       _BFSET_(r16,10,10,v)

    #define   GET32GFX0_CTRL0_alphaRange_InpBDP(r32)           _BFGET_(r32,14,11)
    #define   SET32GFX0_CTRL0_alphaRange_InpBDP(r32,v)         _BFSET_(r32,14,11,v)
    #define   GET16GFX0_CTRL0_alphaRange_InpBDP(r16)           _BFGET_(r16,14,11)
    #define   SET16GFX0_CTRL0_alphaRange_InpBDP(r16,v)         _BFSET_(r16,14,11,v)

    #define   GET32GFX0_CTRL0_hdrLut_pdwn_regs(r32)            _BFGET_(r32,15,15)
    #define   SET32GFX0_CTRL0_hdrLut_pdwn_regs(r32,v)          _BFSET_(r32,15,15,v)
    #define   GET16GFX0_CTRL0_hdrLut_pdwn_regs(r16)            _BFGET_(r16,15,15)
    #define   SET16GFX0_CTRL0_hdrLut_pdwn_regs(r16,v)          _BFSET_(r16,15,15,v)

    #define   GET32GFX0_CTRL0_hdrLut_pdlvmc_regs(r32)          _BFGET_(r32,16,16)
    #define   SET32GFX0_CTRL0_hdrLut_pdlvmc_regs(r32,v)        _BFSET_(r32,16,16,v)
    #define   GET16GFX0_CTRL0_hdrLut_pdlvmc_regs(r16)          _BFGET_(r16, 0, 0)
    #define   SET16GFX0_CTRL0_hdrLut_pdlvmc_regs(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32GFX0_CTRL0_hdrLut_pdfvssm_regs(r32)         _BFGET_(r32,17,17)
    #define   SET32GFX0_CTRL0_hdrLut_pdfvssm_regs(r32,v)       _BFSET_(r32,17,17,v)
    #define   GET16GFX0_CTRL0_hdrLut_pdfvssm_regs(r16)         _BFGET_(r16, 1, 1)
    #define   SET16GFX0_CTRL0_hdrLut_pdfvssm_regs(r16,v)       _BFSET_(r16, 1, 1,v)

    #define   GET32GFX0_CTRL0_bl_rd_sel(r32)                   _BFGET_(r32,18,18)
    #define   SET32GFX0_CTRL0_bl_rd_sel(r32,v)                 _BFSET_(r32,18,18,v)
    #define   GET16GFX0_CTRL0_bl_rd_sel(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16GFX0_CTRL0_bl_rd_sel(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define   GET32GFX0_CTRL0_el_rd_sel(r32)                   _BFGET_(r32,19,19)
    #define   SET32GFX0_CTRL0_el_rd_sel(r32,v)                 _BFSET_(r32,19,19,v)
    #define   GET16GFX0_CTRL0_el_rd_sel(r16)                   _BFGET_(r16, 3, 3)
    #define   SET16GFX0_CTRL0_el_rd_sel(r16,v)                 _BFSET_(r16, 3, 3,v)

    #define   GET32GFX0_CTRL0_read_sel(r32)                    _BFGET_(r32,20,20)
    #define   SET32GFX0_CTRL0_read_sel(r32,v)                  _BFSET_(r32,20,20,v)
    #define   GET16GFX0_CTRL0_read_sel(r16)                    _BFGET_(r16, 4, 4)
    #define   SET16GFX0_CTRL0_read_sel(r16,v)                  _BFSET_(r16, 4, 4,v)

    #define     w32GFX0_CTRL0                                  {\
            UNSG32 uCTRL0_ups422_idata_ctrl                    :  1;\
            UNSG32 uCTRL0_pixel_crop_en                        :  1;\
            UNSG32 uCTRL0_gfxpl_idata_ctrl                     :  3;\
            UNSG32 uCTRL0_sp_dwa_10b_normal_mode               :  1;\
            UNSG32 uCTRL0_sp_dwa_10b_inverse_mode              :  1;\
            UNSG32 uCTRL0_yuv422_sp_dwa_10b_en                 :  1;\
            UNSG32 uCTRL0_gdcm_bypass                          :  1;\
            UNSG32 uCTRL0_gfxpl_gdcm_sel                       :  1;\
            UNSG32 uCTRL0_alphaRange_InpAlign                  :  1;\
            UNSG32 uCTRL0_alphaRange_InpBDP                    :  4;\
            UNSG32 uCTRL0_hdrLut_pdwn_regs                     :  1;\
            UNSG32 uCTRL0_hdrLut_pdlvmc_regs                   :  1;\
            UNSG32 uCTRL0_hdrLut_pdfvssm_regs                  :  1;\
            UNSG32 uCTRL0_bl_rd_sel                            :  1;\
            UNSG32 uCTRL0_el_rd_sel                            :  1;\
            UNSG32 uCTRL0_read_sel                             :  1;\
            UNSG32 RSVDx4_b21                                  : 11;\
          }
    union { UNSG32 u32GFX0_CTRL0;
            struct w32GFX0_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_DB_CTRL_DBVIP_GFX0_bypass(r32)         _BFGET_(r32, 0, 0)
    #define   SET32GFX0_DB_CTRL_DBVIP_GFX0_bypass(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_DB_CTRL_DBVIP_GFX0_bypass(r16)         _BFGET_(r16, 0, 0)
    #define   SET16GFX0_DB_CTRL_DBVIP_GFX0_bypass(r16,v)       _BFSET_(r16, 0, 0,v)

    #define     w32GFX0_DB_CTRL                                {\
            UNSG32 uDB_CTRL_DBVIP_GFX0_bypass                  :  1;\
            UNSG32 RSVDx8_b1                                   : 31;\
          }
    union { UNSG32 u32GFX0_DB_CTRL;
            struct w32GFX0_DB_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_SCL_BYPASS_en(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32GFX0_SCL_BYPASS_en(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_SCL_BYPASS_en(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16GFX0_SCL_BYPASS_en(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32GFX0_SCL_BYPASS                             {\
            UNSG32 uSCL_BYPASS_en                              :  1;\
            UNSG32 RSVDxC_b1                                   : 31;\
          }
    union { UNSG32 u32GFX0_SCL_BYPASS;
            struct w32GFX0_SCL_BYPASS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_gfxScl_client_start(r32)               _BFGET_(r32, 0, 0)
    #define   SET32GFX0_gfxScl_client_start(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_gfxScl_client_start(r16)               _BFGET_(r16, 0, 0)
    #define   SET16GFX0_gfxScl_client_start(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32GFX0_gfxScl_client_clear(r32)               _BFGET_(r32, 1, 1)
    #define   SET32GFX0_gfxScl_client_clear(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16GFX0_gfxScl_client_clear(r16)               _BFGET_(r16, 1, 1)
    #define   SET16GFX0_gfxScl_client_clear(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32GFX0_gfxScl_scl_start(r32)                  _BFGET_(r32, 2, 2)
    #define   SET32GFX0_gfxScl_scl_start(r32,v)                _BFSET_(r32, 2, 2,v)
    #define   GET16GFX0_gfxScl_scl_start(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16GFX0_gfxScl_scl_start(r16,v)                _BFSET_(r16, 2, 2,v)

    #define   GET32GFX0_gfxScl_scl_clear(r32)                  _BFGET_(r32, 3, 3)
    #define   SET32GFX0_gfxScl_scl_clear(r32,v)                _BFSET_(r32, 3, 3,v)
    #define   GET16GFX0_gfxScl_scl_clear(r16)                  _BFGET_(r16, 3, 3)
    #define   SET16GFX0_gfxScl_scl_clear(r16,v)                _BFSET_(r16, 3, 3,v)

    #define     w32GFX0_gfxScl                                 {\
            UNSG32 ugfxScl_client_start                        :  1;\
            UNSG32 ugfxScl_client_clear                        :  1;\
            UNSG32 ugfxScl_scl_start                           :  1;\
            UNSG32 ugfxScl_scl_clear                           :  1;\
            UNSG32 RSVDx10_b4                                  : 28;\
          }
    union { UNSG32 u32GFX0_gfxScl;
            struct w32GFX0_gfxScl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_Rd_word0_tot(r32)                      _BFGET_(r32,31, 0)
    #define   SET32GFX0_Rd_word0_tot(r32,v)                    _BFSET_(r32,31, 0,v)

    #define     w32GFX0_Rd_word0                               {\
            UNSG32 uRd_word0_tot                               : 32;\
          }
    union { UNSG32 u32GFX0_Rd_word0;
            struct w32GFX0_Rd_word0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_UPS420_CTRL_ups420_bypass(r32)         _BFGET_(r32, 0, 0)
    #define   SET32GFX0_UPS420_CTRL_ups420_bypass(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_UPS420_CTRL_ups420_bypass(r16)         _BFGET_(r16, 0, 0)
    #define   SET16GFX0_UPS420_CTRL_ups420_bypass(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32GFX0_UPS420_CTRL_rd_mask_initVal0(r32)      _BFGET_(r32, 1, 1)
    #define   SET32GFX0_UPS420_CTRL_rd_mask_initVal0(r32,v)    _BFSET_(r32, 1, 1,v)
    #define   GET16GFX0_UPS420_CTRL_rd_mask_initVal0(r16)      _BFGET_(r16, 1, 1)
    #define   SET16GFX0_UPS420_CTRL_rd_mask_initVal0(r16,v)    _BFSET_(r16, 1, 1,v)

    #define   GET32GFX0_UPS420_CTRL_rd_mask_initVal1(r32)      _BFGET_(r32, 2, 2)
    #define   SET32GFX0_UPS420_CTRL_rd_mask_initVal1(r32,v)    _BFSET_(r32, 2, 2,v)
    #define   GET16GFX0_UPS420_CTRL_rd_mask_initVal1(r16)      _BFGET_(r16, 2, 2)
    #define   SET16GFX0_UPS420_CTRL_rd_mask_initVal1(r16,v)    _BFSET_(r16, 2, 2,v)

    #define   GET32GFX0_UPS420_CTRL_rd_mask_sftrst(r32)        _BFGET_(r32, 3, 3)
    #define   SET32GFX0_UPS420_CTRL_rd_mask_sftrst(r32,v)      _BFSET_(r32, 3, 3,v)
    #define   GET16GFX0_UPS420_CTRL_rd_mask_sftrst(r16)        _BFGET_(r16, 3, 3)
    #define   SET16GFX0_UPS420_CTRL_rd_mask_sftrst(r16,v)      _BFSET_(r16, 3, 3,v)

    #define   GET32GFX0_UPS420_CTRL_ups422_data_ctrl(r32)      _BFGET_(r32, 4, 4)
    #define   SET32GFX0_UPS420_CTRL_ups422_data_ctrl(r32,v)    _BFSET_(r32, 4, 4,v)
    #define   GET16GFX0_UPS420_CTRL_ups422_data_ctrl(r16)      _BFGET_(r16, 4, 4)
    #define   SET16GFX0_UPS420_CTRL_ups422_data_ctrl(r16,v)    _BFSET_(r16, 4, 4,v)

    #define   GET32GFX0_UPS420_CTRL_memdlbUPS420_cgEnb(r32)    _BFGET_(r32, 5, 5)
    #define   SET32GFX0_UPS420_CTRL_memdlbUPS420_cgEnb(r32,v)  _BFSET_(r32, 5, 5,v)
    #define   GET16GFX0_UPS420_CTRL_memdlbUPS420_cgEnb(r16)    _BFGET_(r16, 5, 5)
    #define   SET16GFX0_UPS420_CTRL_memdlbUPS420_cgEnb(r16,v)  _BFSET_(r16, 5, 5,v)

    #define     w32GFX0_UPS420_CTRL                            {\
            UNSG32 uUPS420_CTRL_ups420_bypass                  :  1;\
            UNSG32 uUPS420_CTRL_rd_mask_initVal0               :  1;\
            UNSG32 uUPS420_CTRL_rd_mask_initVal1               :  1;\
            UNSG32 uUPS420_CTRL_rd_mask_sftrst                 :  1;\
            UNSG32 uUPS420_CTRL_ups422_data_ctrl               :  1;\
            UNSG32 uUPS420_CTRL_memdlbUPS420_cgEnb             :  1;\
            UNSG32 RSVDx18_b6                                  : 26;\
          }
    union { UNSG32 u32GFX0_UPS420_CTRL;
            struct w32GFX0_UPS420_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_TILE_CTRL_detile_inp_en(r32)           _BFGET_(r32, 0, 0)
    #define   SET32GFX0_TILE_CTRL_detile_inp_en(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_TILE_CTRL_detile_inp_en(r16)           _BFGET_(r16, 0, 0)
    #define   SET16GFX0_TILE_CTRL_detile_inp_en(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32GFX0_TILE_CTRL_infifo_ctrl(r32)             _BFGET_(r32, 1, 1)
    #define   SET32GFX0_TILE_CTRL_infifo_ctrl(r32,v)           _BFSET_(r32, 1, 1,v)
    #define   GET16GFX0_TILE_CTRL_infifo_ctrl(r16)             _BFGET_(r16, 1, 1)
    #define   SET16GFX0_TILE_CTRL_infifo_ctrl(r16,v)           _BFSET_(r16, 1, 1,v)

    #define   GET32GFX0_TILE_CTRL_pipInfifo_ctrl(r32)          _BFGET_(r32, 2, 2)
    #define   SET32GFX0_TILE_CTRL_pipInfifo_ctrl(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16GFX0_TILE_CTRL_pipInfifo_ctrl(r16)          _BFGET_(r16, 2, 2)
    #define   SET16GFX0_TILE_CTRL_pipInfifo_ctrl(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32GFX0_TILE_CTRL_tile_inp_sel(r32)            _BFGET_(r32, 3, 3)
    #define   SET32GFX0_TILE_CTRL_tile_inp_sel(r32,v)          _BFSET_(r32, 3, 3,v)
    #define   GET16GFX0_TILE_CTRL_tile_inp_sel(r16)            _BFGET_(r16, 3, 3)
    #define   SET16GFX0_TILE_CTRL_tile_inp_sel(r16,v)          _BFSET_(r16, 3, 3,v)

    #define   GET32GFX0_TILE_CTRL_pip_tile_sel(r32)            _BFGET_(r32, 4, 4)
    #define   SET32GFX0_TILE_CTRL_pip_tile_sel(r32,v)          _BFSET_(r32, 4, 4,v)
    #define   GET16GFX0_TILE_CTRL_pip_tile_sel(r16)            _BFGET_(r16, 4, 4)
    #define   SET16GFX0_TILE_CTRL_pip_tile_sel(r16,v)          _BFSET_(r16, 4, 4,v)

    #define     w32GFX0_TILE_CTRL                              {\
            UNSG32 uTILE_CTRL_detile_inp_en                    :  1;\
            UNSG32 uTILE_CTRL_infifo_ctrl                      :  1;\
            UNSG32 uTILE_CTRL_pipInfifo_ctrl                   :  1;\
            UNSG32 uTILE_CTRL_tile_inp_sel                     :  1;\
            UNSG32 uTILE_CTRL_pip_tile_sel                     :  1;\
            UNSG32 RSVDx1C_b5                                  : 27;\
          }
    union { UNSG32 u32GFX0_TILE_CTRL;
            struct w32GFX0_TILE_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_pipInpix_tot(r32)                      _BFGET_(r32,31, 0)
    #define   SET32GFX0_pipInpix_tot(r32,v)                    _BFSET_(r32,31, 0,v)

    #define     w32GFX0_pipInpix                               {\
            UNSG32 upipInpix_tot                               : 32;\
          }
    union { UNSG32 u32GFX0_pipInpix;
            struct w32GFX0_pipInpix;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_gfx_pix_tot(r32)                       _BFGET_(r32,31, 0)
    #define   SET32GFX0_gfx_pix_tot(r32,v)                     _BFSET_(r32,31, 0,v)

    #define     w32GFX0_gfx_pix                                {\
            UNSG32 ugfx_pix_tot                                : 32;\
          }
    union { UNSG32 u32GFX0_gfx_pix;
            struct w32GFX0_gfx_pix;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_INVSCAN_bitmap128_Rd0_en(r32)          _BFGET_(r32, 0, 0)
    #define   SET32GFX0_INVSCAN_bitmap128_Rd0_en(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_INVSCAN_bitmap128_Rd0_en(r16)          _BFGET_(r16, 0, 0)
    #define   SET16GFX0_INVSCAN_bitmap128_Rd0_en(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32GFX0_INVSCAN_bitmap128_Rd1_en(r32)          _BFGET_(r32, 1, 1)
    #define   SET32GFX0_INVSCAN_bitmap128_Rd1_en(r32,v)        _BFSET_(r32, 1, 1,v)
    #define   GET16GFX0_INVSCAN_bitmap128_Rd1_en(r16)          _BFGET_(r16, 1, 1)
    #define   SET16GFX0_INVSCAN_bitmap128_Rd1_en(r16,v)        _BFSET_(r16, 1, 1,v)

    #define   GET32GFX0_INVSCAN_bitmap8R_Rd1_en(r32)           _BFGET_(r32, 2, 2)
    #define   SET32GFX0_INVSCAN_bitmap8R_Rd1_en(r32,v)         _BFSET_(r32, 2, 2,v)
    #define   GET16GFX0_INVSCAN_bitmap8R_Rd1_en(r16)           _BFGET_(r16, 2, 2)
    #define   SET16GFX0_INVSCAN_bitmap8R_Rd1_en(r16,v)         _BFSET_(r16, 2, 2,v)

    #define     w32GFX0_INVSCAN                                {\
            UNSG32 uINVSCAN_bitmap128_Rd0_en                   :  1;\
            UNSG32 uINVSCAN_bitmap128_Rd1_en                   :  1;\
            UNSG32 uINVSCAN_bitmap8R_Rd1_en                    :  1;\
            UNSG32 RSVDx28_b3                                  : 29;\
          }
    union { UNSG32 u32GFX0_INVSCAN;
            struct w32GFX0_INVSCAN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_STATUS_pipTg(r32)                      _BFGET_(r32,15, 0)
    #define   SET32GFX0_STATUS_pipTg(r32,v)                    _BFSET_(r32,15, 0,v)
    #define   GET16GFX0_STATUS_pipTg(r16)                      _BFGET_(r16,15, 0)
    #define   SET16GFX0_STATUS_pipTg(r16,v)                    _BFSET_(r16,15, 0,v)

    #define     w32GFX0_STATUS                                 {\
            UNSG32 uSTATUS_pipTg                               : 16;\
            UNSG32 RSVDx2C_b16                                 : 16;\
          }
    union { UNSG32 u32GFX0_STATUS;
            struct w32GFX0_STATUS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_CTRL1_scl_sw_rst(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32GFX0_CTRL1_scl_sw_rst(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_CTRL1_scl_sw_rst(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16GFX0_CTRL1_scl_sw_rst(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32GFX0_CTRL1_scl_rst_en0(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32GFX0_CTRL1_scl_rst_en0(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16GFX0_CTRL1_scl_rst_en0(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16GFX0_CTRL1_scl_rst_en0(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32GFX0_CTRL1_scl_rst_en1(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32GFX0_CTRL1_scl_rst_en1(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16GFX0_CTRL1_scl_rst_en1(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16GFX0_CTRL1_scl_rst_en1(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32GFX0_CTRL1_scl_rst_en2(r32)                 _BFGET_(r32, 3, 3)
    #define   SET32GFX0_CTRL1_scl_rst_en2(r32,v)               _BFSET_(r32, 3, 3,v)
    #define   GET16GFX0_CTRL1_scl_rst_en2(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16GFX0_CTRL1_scl_rst_en2(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32GFX0_CTRL1_crop_de2_en(r32)                 _BFGET_(r32, 4, 4)
    #define   SET32GFX0_CTRL1_crop_de2_en(r32,v)               _BFSET_(r32, 4, 4,v)
    #define   GET16GFX0_CTRL1_crop_de2_en(r16)                 _BFGET_(r16, 4, 4)
    #define   SET16GFX0_CTRL1_crop_de2_en(r16,v)               _BFSET_(r16, 4, 4,v)

    #define   GET32GFX0_CTRL1_sb_clkg_en(r32)                  _BFGET_(r32, 5, 5)
    #define   SET32GFX0_CTRL1_sb_clkg_en(r32,v)                _BFSET_(r32, 5, 5,v)
    #define   GET16GFX0_CTRL1_sb_clkg_en(r16)                  _BFGET_(r16, 5, 5)
    #define   SET16GFX0_CTRL1_sb_clkg_en(r16,v)                _BFSET_(r16, 5, 5,v)

    #define   GET32GFX0_CTRL1_fall_bk_en(r32)                  _BFGET_(r32, 6, 6)
    #define   SET32GFX0_CTRL1_fall_bk_en(r32,v)                _BFSET_(r32, 6, 6,v)
    #define   GET16GFX0_CTRL1_fall_bk_en(r16)                  _BFGET_(r16, 6, 6)
    #define   SET16GFX0_CTRL1_fall_bk_en(r16,v)                _BFSET_(r16, 6, 6,v)

    #define   GET32GFX0_CTRL1_clken_st_clr(r32)                _BFGET_(r32, 7, 7)
    #define   SET32GFX0_CTRL1_clken_st_clr(r32,v)              _BFSET_(r32, 7, 7,v)
    #define   GET16GFX0_CTRL1_clken_st_clr(r16)                _BFGET_(r16, 7, 7)
    #define   SET16GFX0_CTRL1_clken_st_clr(r16,v)              _BFSET_(r16, 7, 7,v)

    #define   GET32GFX0_CTRL1_tgclken_sel(r32)                 _BFGET_(r32, 8, 8)
    #define   SET32GFX0_CTRL1_tgclken_sel(r32,v)               _BFSET_(r32, 8, 8,v)
    #define   GET16GFX0_CTRL1_tgclken_sel(r16)                 _BFGET_(r16, 8, 8)
    #define   SET16GFX0_CTRL1_tgclken_sel(r16,v)               _BFSET_(r16, 8, 8,v)

    #define   GET32GFX0_CTRL1_gitmtop_bypass(r32)              _BFGET_(r32, 9, 9)
    #define   SET32GFX0_CTRL1_gitmtop_bypass(r32,v)            _BFSET_(r32, 9, 9,v)
    #define   GET16GFX0_CTRL1_gitmtop_bypass(r16)              _BFGET_(r16, 9, 9)
    #define   SET16GFX0_CTRL1_gitmtop_bypass(r16,v)            _BFSET_(r16, 9, 9,v)

    #define   GET32GFX0_CTRL1_fifo_rd_sel(r32)                 _BFGET_(r32,11,10)
    #define   SET32GFX0_CTRL1_fifo_rd_sel(r32,v)               _BFSET_(r32,11,10,v)
    #define   GET16GFX0_CTRL1_fifo_rd_sel(r16)                 _BFGET_(r16,11,10)
    #define   SET16GFX0_CTRL1_fifo_rd_sel(r16,v)               _BFSET_(r16,11,10,v)

    #define   GET32GFX0_CTRL1_gfxpl_gitmsel(r32)               _BFGET_(r32,12,12)
    #define   SET32GFX0_CTRL1_gfxpl_gitmsel(r32,v)             _BFSET_(r32,12,12,v)
    #define   GET16GFX0_CTRL1_gfxpl_gitmsel(r16)               _BFGET_(r16,12,12)
    #define   SET16GFX0_CTRL1_gfxpl_gitmsel(r16,v)             _BFSET_(r16,12,12,v)

    #define   GET32GFX0_CTRL1_fifo_full_ctrl1(r32)             _BFGET_(r32,13,13)
    #define   SET32GFX0_CTRL1_fifo_full_ctrl1(r32,v)           _BFSET_(r32,13,13,v)
    #define   GET16GFX0_CTRL1_fifo_full_ctrl1(r16)             _BFGET_(r16,13,13)
    #define   SET16GFX0_CTRL1_fifo_full_ctrl1(r16,v)           _BFSET_(r16,13,13,v)

    #define   GET32GFX0_CTRL1_fifo_full_ctrl2(r32)             _BFGET_(r32,14,14)
    #define   SET32GFX0_CTRL1_fifo_full_ctrl2(r32,v)           _BFSET_(r32,14,14,v)
    #define   GET16GFX0_CTRL1_fifo_full_ctrl2(r16)             _BFGET_(r16,14,14)
    #define   SET16GFX0_CTRL1_fifo_full_ctrl2(r16,v)           _BFSET_(r16,14,14,v)

    #define   GET32GFX0_CTRL1_uv_mask_val0(r32)                _BFGET_(r32,15,15)
    #define   SET32GFX0_CTRL1_uv_mask_val0(r32,v)              _BFSET_(r32,15,15,v)
    #define   GET16GFX0_CTRL1_uv_mask_val0(r16)                _BFGET_(r16,15,15)
    #define   SET16GFX0_CTRL1_uv_mask_val0(r16,v)              _BFSET_(r16,15,15,v)

    #define   GET32GFX0_CTRL1_uv_mask_val1(r32)                _BFGET_(r32,16,16)
    #define   SET32GFX0_CTRL1_uv_mask_val1(r32,v)              _BFSET_(r32,16,16,v)
    #define   GET16GFX0_CTRL1_uv_mask_val1(r16)                _BFGET_(r16, 0, 0)
    #define   SET16GFX0_CTRL1_uv_mask_val1(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32GFX0_CTRL1_uv_mask_disable(r32)             _BFGET_(r32,17,17)
    #define   SET32GFX0_CTRL1_uv_mask_disable(r32,v)           _BFSET_(r32,17,17,v)
    #define   GET16GFX0_CTRL1_uv_mask_disable(r16)             _BFGET_(r16, 1, 1)
    #define   SET16GFX0_CTRL1_uv_mask_disable(r16,v)           _BFSET_(r16, 1, 1,v)

    #define   GET32GFX0_CTRL1_gfx0_ovpidat_ctrl(r32)           _BFGET_(r32,18,18)
    #define   SET32GFX0_CTRL1_gfx0_ovpidat_ctrl(r32,v)         _BFSET_(r32,18,18,v)
    #define   GET16GFX0_CTRL1_gfx0_ovpidat_ctrl(r16)           _BFGET_(r16, 2, 2)
    #define   SET16GFX0_CTRL1_gfx0_ovpidat_ctrl(r16,v)         _BFSET_(r16, 2, 2,v)

    #define   GET32GFX0_CTRL1_hdrLut_bypass(r32)               _BFGET_(r32,19,19)
    #define   SET32GFX0_CTRL1_hdrLut_bypass(r32,v)             _BFSET_(r32,19,19,v)
    #define   GET16GFX0_CTRL1_hdrLut_bypass(r16)               _BFGET_(r16, 3, 3)
    #define   SET16GFX0_CTRL1_hdrLut_bypass(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32GFX0_CTRL1_alphadiv_bypass(r32)             _BFGET_(r32,20,20)
    #define   SET32GFX0_CTRL1_alphadiv_bypass(r32,v)           _BFSET_(r32,20,20,v)
    #define   GET16GFX0_CTRL1_alphadiv_bypass(r16)             _BFGET_(r16, 4, 4)
    #define   SET16GFX0_CTRL1_alphadiv_bypass(r16,v)           _BFSET_(r16, 4, 4,v)

    #define     w32GFX0_CTRL1                                  {\
            UNSG32 uCTRL1_scl_sw_rst                           :  1;\
            UNSG32 uCTRL1_scl_rst_en0                          :  1;\
            UNSG32 uCTRL1_scl_rst_en1                          :  1;\
            UNSG32 uCTRL1_scl_rst_en2                          :  1;\
            UNSG32 uCTRL1_crop_de2_en                          :  1;\
            UNSG32 uCTRL1_sb_clkg_en                           :  1;\
            UNSG32 uCTRL1_fall_bk_en                           :  1;\
            UNSG32 uCTRL1_clken_st_clr                         :  1;\
            UNSG32 uCTRL1_tgclken_sel                          :  1;\
            UNSG32 uCTRL1_gitmtop_bypass                       :  1;\
            UNSG32 uCTRL1_fifo_rd_sel                          :  2;\
            UNSG32 uCTRL1_gfxpl_gitmsel                        :  1;\
            UNSG32 uCTRL1_fifo_full_ctrl1                      :  1;\
            UNSG32 uCTRL1_fifo_full_ctrl2                      :  1;\
            UNSG32 uCTRL1_uv_mask_val0                         :  1;\
            UNSG32 uCTRL1_uv_mask_val1                         :  1;\
            UNSG32 uCTRL1_uv_mask_disable                      :  1;\
            UNSG32 uCTRL1_gfx0_ovpidat_ctrl                    :  1;\
            UNSG32 uCTRL1_hdrLut_bypass                        :  1;\
            UNSG32 uCTRL1_alphadiv_bypass                      :  1;\
            UNSG32 RSVDx30_b21                                 : 11;\
          }
    union { UNSG32 u32GFX0_CTRL1;
            struct w32GFX0_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_LUT_BYPASS_en(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32GFX0_LUT_BYPASS_en(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_LUT_BYPASS_en(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16GFX0_LUT_BYPASS_en(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32GFX0_LUT_BYPASS                             {\
            UNSG32 uLUT_BYPASS_en                              :  1;\
            UNSG32 RSVDx34_b1                                  : 31;\
          }
    union { UNSG32 u32GFX0_LUT_BYPASS;
            struct w32GFX0_LUT_BYPASS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_CTRL2_CLUT8_pdwn_regs(r32)             _BFGET_(r32, 0, 0)
    #define   SET32GFX0_CTRL2_CLUT8_pdwn_regs(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_CTRL2_CLUT8_pdwn_regs(r16)             _BFGET_(r16, 0, 0)
    #define   SET16GFX0_CTRL2_CLUT8_pdwn_regs(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32GFX0_CTRL2_CLUT8_pdlvmc_regs(r32)           _BFGET_(r32, 1, 1)
    #define   SET32GFX0_CTRL2_CLUT8_pdlvmc_regs(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16GFX0_CTRL2_CLUT8_pdlvmc_regs(r16)           _BFGET_(r16, 1, 1)
    #define   SET16GFX0_CTRL2_CLUT8_pdlvmc_regs(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32GFX0_CTRL2_CLUT8_pdfvssm_regs(r32)          _BFGET_(r32, 2, 2)
    #define   SET32GFX0_CTRL2_CLUT8_pdfvssm_regs(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16GFX0_CTRL2_CLUT8_pdfvssm_regs(r16)          _BFGET_(r16, 2, 2)
    #define   SET16GFX0_CTRL2_CLUT8_pdfvssm_regs(r16,v)        _BFSET_(r16, 2, 2,v)

    #define     w32GFX0_CTRL2                                  {\
            UNSG32 uCTRL2_CLUT8_pdwn_regs                      :  1;\
            UNSG32 uCTRL2_CLUT8_pdlvmc_regs                    :  1;\
            UNSG32 uCTRL2_CLUT8_pdfvssm_regs                   :  1;\
            UNSG32 RSVDx38_b3                                  : 29;\
          }
    union { UNSG32 u32GFX0_CTRL2;
            struct w32GFX0_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_GITM_CTRL_start(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32GFX0_GITM_CTRL_start(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_GITM_CTRL_start(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16GFX0_GITM_CTRL_start(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define     w32GFX0_GITM_CTRL                              {\
            UNSG32 uGITM_CTRL_start                            :  1;\
            UNSG32 RSVDx3C_b1                                  : 31;\
          }
    union { UNSG32 u32GFX0_GITM_CTRL;
            struct w32GFX0_GITM_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_GDCM_CTRL_start(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32GFX0_GDCM_CTRL_start(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_GDCM_CTRL_start(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16GFX0_GDCM_CTRL_start(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define     w32GFX0_GDCM_CTRL                              {\
            UNSG32 uGDCM_CTRL_start                            :  1;\
            UNSG32 RSVDx40_b1                                  : 31;\
          }
    union { UNSG32 u32GFX0_GDCM_CTRL;
            struct w32GFX0_GDCM_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX0_RASTERSCAN_ovp_rd_sel_420sp(r32)       _BFGET_(r32, 0, 0)
    #define   SET32GFX0_RASTERSCAN_ovp_rd_sel_420sp(r32,v)     _BFSET_(r32, 0, 0,v)
    #define   GET16GFX0_RASTERSCAN_ovp_rd_sel_420sp(r16)       _BFGET_(r16, 0, 0)
    #define   SET16GFX0_RASTERSCAN_ovp_rd_sel_420sp(r16,v)     _BFSET_(r16, 0, 0,v)

    #define   GET32GFX0_RASTERSCAN_gfx0_rd_sel_420sp_en(r32)   _BFGET_(r32, 1, 1)
    #define   SET32GFX0_RASTERSCAN_gfx0_rd_sel_420sp_en(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16GFX0_RASTERSCAN_gfx0_rd_sel_420sp_en(r16)   _BFGET_(r16, 1, 1)
    #define   SET16GFX0_RASTERSCAN_gfx0_rd_sel_420sp_en(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32GFX0_RASTERSCAN_gfx0_rd_sel_420sp_sel(r32)  _BFGET_(r32, 2, 2)
    #define   SET32GFX0_RASTERSCAN_gfx0_rd_sel_420sp_sel(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16GFX0_RASTERSCAN_gfx0_rd_sel_420sp_sel(r16)  _BFGET_(r16, 2, 2)
    #define   SET16GFX0_RASTERSCAN_gfx0_rd_sel_420sp_sel(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32GFX0_RASTERSCAN_ovp_420sp_datasel(r32)      _BFGET_(r32, 3, 3)
    #define   SET32GFX0_RASTERSCAN_ovp_420sp_datasel(r32,v)    _BFSET_(r32, 3, 3,v)
    #define   GET16GFX0_RASTERSCAN_ovp_420sp_datasel(r16)      _BFGET_(r16, 3, 3)
    #define   SET16GFX0_RASTERSCAN_ovp_420sp_datasel(r16,v)    _BFSET_(r16, 3, 3,v)

    #define     w32GFX0_RASTERSCAN                             {\
            UNSG32 uRASTERSCAN_ovp_rd_sel_420sp                :  1;\
            UNSG32 uRASTERSCAN_gfx0_rd_sel_420sp_en            :  1;\
            UNSG32 uRASTERSCAN_gfx0_rd_sel_420sp_sel           :  1;\
            UNSG32 uRASTERSCAN_ovp_420sp_datasel               :  1;\
            UNSG32 RSVDx44_b4                                  : 28;\
          }
    union { UNSG32 u32GFX0_RASTERSCAN;
            struct w32GFX0_RASTERSCAN;
          };
    ///////////////////////////////////////////////////////////
              SIE_TG                                           ie_pipTG;
    ///////////////////////////////////////////////////////////
              SIE_BITMAP40                                     ie_BITMAP40;
    ///////////////////////////////////////////////////////////
              SIE_UPS10                                        ie_UPS10;
    ///////////////////////////////////////////////////////////
              SIE_CSC_C17O24                                   ie_PIP_CSC;
    ///////////////////////////////////////////////////////////
              SIE_ReadClient                                   ie_RdClientPipR1;
    ///////////////////////////////////////////////////////////
              SIE_PIP_PIPE                                     ie_PIP_PIPE;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx11C                                    [740];
    ///////////////////////////////////////////////////////////
              SIE_CLUT                                         ie_LUT;
    ///////////////////////////////////////////////////////////
              SIE_BITMAP12                                     ie_BITMAP12;
    ///////////////////////////////////////////////////////////
              SIE_UPS_420_422_SP_12b                           ie_UPS420_SP;
    ///////////////////////////////////////////////////////////
              SIE_ALPHADIV                                     ie_ALPHADIV;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_CLUT;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx834                                    [972];
    ///////////////////////////////////////////////////////////
    } SIE_GFX0;

    typedef union  T32GFX0_CTRL
          { UNSG32 u32;
            struct w32GFX0_CTRL;
                 } T32GFX0_CTRL;
    typedef union  T32GFX0_CTRL0
          { UNSG32 u32;
            struct w32GFX0_CTRL0;
                 } T32GFX0_CTRL0;
    typedef union  T32GFX0_DB_CTRL
          { UNSG32 u32;
            struct w32GFX0_DB_CTRL;
                 } T32GFX0_DB_CTRL;
    typedef union  T32GFX0_SCL_BYPASS
          { UNSG32 u32;
            struct w32GFX0_SCL_BYPASS;
                 } T32GFX0_SCL_BYPASS;
    typedef union  T32GFX0_gfxScl
          { UNSG32 u32;
            struct w32GFX0_gfxScl;
                 } T32GFX0_gfxScl;
    typedef union  T32GFX0_Rd_word0
          { UNSG32 u32;
            struct w32GFX0_Rd_word0;
                 } T32GFX0_Rd_word0;
    typedef union  T32GFX0_UPS420_CTRL
          { UNSG32 u32;
            struct w32GFX0_UPS420_CTRL;
                 } T32GFX0_UPS420_CTRL;
    typedef union  T32GFX0_TILE_CTRL
          { UNSG32 u32;
            struct w32GFX0_TILE_CTRL;
                 } T32GFX0_TILE_CTRL;
    typedef union  T32GFX0_pipInpix
          { UNSG32 u32;
            struct w32GFX0_pipInpix;
                 } T32GFX0_pipInpix;
    typedef union  T32GFX0_gfx_pix
          { UNSG32 u32;
            struct w32GFX0_gfx_pix;
                 } T32GFX0_gfx_pix;
    typedef union  T32GFX0_INVSCAN
          { UNSG32 u32;
            struct w32GFX0_INVSCAN;
                 } T32GFX0_INVSCAN;
    typedef union  T32GFX0_STATUS
          { UNSG32 u32;
            struct w32GFX0_STATUS;
                 } T32GFX0_STATUS;
    typedef union  T32GFX0_CTRL1
          { UNSG32 u32;
            struct w32GFX0_CTRL1;
                 } T32GFX0_CTRL1;
    typedef union  T32GFX0_LUT_BYPASS
          { UNSG32 u32;
            struct w32GFX0_LUT_BYPASS;
                 } T32GFX0_LUT_BYPASS;
    typedef union  T32GFX0_CTRL2
          { UNSG32 u32;
            struct w32GFX0_CTRL2;
                 } T32GFX0_CTRL2;
    typedef union  T32GFX0_GITM_CTRL
          { UNSG32 u32;
            struct w32GFX0_GITM_CTRL;
                 } T32GFX0_GITM_CTRL;
    typedef union  T32GFX0_GDCM_CTRL
          { UNSG32 u32;
            struct w32GFX0_GDCM_CTRL;
                 } T32GFX0_GDCM_CTRL;
    typedef union  T32GFX0_RASTERSCAN
          { UNSG32 u32;
            struct w32GFX0_RASTERSCAN;
                 } T32GFX0_RASTERSCAN;
    ///////////////////////////////////////////////////////////

    typedef union  TGFX0_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_CTRL;
                   };
                 } TGFX0_CTRL;
    typedef union  TGFX0_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_CTRL0;
                   };
                 } TGFX0_CTRL0;
    typedef union  TGFX0_DB_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_DB_CTRL;
                   };
                 } TGFX0_DB_CTRL;
    typedef union  TGFX0_SCL_BYPASS
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_SCL_BYPASS;
                   };
                 } TGFX0_SCL_BYPASS;
    typedef union  TGFX0_gfxScl
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_gfxScl;
                   };
                 } TGFX0_gfxScl;
    typedef union  TGFX0_Rd_word0
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_Rd_word0;
                   };
                 } TGFX0_Rd_word0;
    typedef union  TGFX0_UPS420_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_UPS420_CTRL;
                   };
                 } TGFX0_UPS420_CTRL;
    typedef union  TGFX0_TILE_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_TILE_CTRL;
                   };
                 } TGFX0_TILE_CTRL;
    typedef union  TGFX0_pipInpix
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_pipInpix;
                   };
                 } TGFX0_pipInpix;
    typedef union  TGFX0_gfx_pix
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_gfx_pix;
                   };
                 } TGFX0_gfx_pix;
    typedef union  TGFX0_INVSCAN
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_INVSCAN;
                   };
                 } TGFX0_INVSCAN;
    typedef union  TGFX0_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_STATUS;
                   };
                 } TGFX0_STATUS;
    typedef union  TGFX0_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_CTRL1;
                   };
                 } TGFX0_CTRL1;
    typedef union  TGFX0_LUT_BYPASS
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_LUT_BYPASS;
                   };
                 } TGFX0_LUT_BYPASS;
    typedef union  TGFX0_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_CTRL2;
                   };
                 } TGFX0_CTRL2;
    typedef union  TGFX0_GITM_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_GITM_CTRL;
                   };
                 } TGFX0_GITM_CTRL;
    typedef union  TGFX0_GDCM_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_GDCM_CTRL;
                   };
                 } TGFX0_GDCM_CTRL;
    typedef union  TGFX0_RASTERSCAN
          { UNSG32 u32[1];
            struct {
            struct w32GFX0_RASTERSCAN;
                   };
                 } TGFX0_RASTERSCAN;

    ///////////////////////////////////////////////////////////
     SIGN32 GFX0_drvrd(SIE_GFX0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 GFX0_drvwr(SIE_GFX0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void GFX0_reset(SIE_GFX0 *p);
     SIGN32 GFX0_cmp  (SIE_GFX0 *p, SIE_GFX0 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define GFX0_check(p,pie,pfx,hLOG) GFX0_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define GFX0_print(p,    pfx,hLOG) GFX0_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: GFX0
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE GFX1                    biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               %unsigned 1  bitmap40_en               0x0
///                                    ###
///                                    * Write 1 to enable bit mapping on ReadClient Output data.
///                                    ###
///               %unsigned 2  packSelR0                 0x0
///                                    ###
///                                    * Packsel value for read client R0
///                                    * 00 : data supported is 8 bits
///                                    * 01 : data supported is 16 bits
///                                    * 10 : data supported is 32 bits
///                                    * 11 : data supported is 24 bits
///                                    ###
///               %unsigned 1  nonStdResEn_R0            0x0
///                                    ###
///                                    * Enable for Read Client 0 when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot_R0             0x64
///                                    ###
///                                    * Total number of pixels in a line (for Read Client 0)
///                                    ###
///               %unsigned 4  flushCnt_R0               0x5
///                                    ###
///                                    * Counter to determine the ready status of Read Client 0 after end of line (only used when nonStdResEn_R0 = 1)
///                                    ###
///               %unsigned 1  SCL_CLKEN_CTRL            0x0
///                                    ###
///                                    * 0: Clock enable to scaler depends on the input FIFO status; scaler clken is deasserted when FE can't supply data to scaler.
///                                    * 1: Clock enable to scaler is always high.
///                                    * Since AUX scaler input always comes from CPCB0 – its clock enable should be 1 whenever it is being used.
///                                    ###
///               %unsigned 1  FE_GFX_CTRL_fld           0x0
///                                    ###
///                                    * Controls the field signal at the input of OSD scaler.
///                                    ###
///               %unsigned 1  gfx_sclEnb                0x1
///                                    ###
///                                    * Clock gating enable for GFX Scalar. Write 0 to clock gate
///                                    ###
///               %unsigned 1  pixel_crop_en             0x0
///                                    ###
///                                    * [1] : Pixel cropping or De-alpha IP is enabled
///                                    * [0] : Pixel cropping or De-alpha IP is disabled
///                                    ###
///               %unsigned 1  clken_ctrl                0x1
///                                    ###
///                                    * Clock enable control bit (based on Read Client FIFO). Write 1 to make clock enable dependent on Read Client FIFO status.
///                                    ###
///               %unsigned 1  fifo_sts_ctrl             0x1
///                                    ###
///                                    * SCL Input FIFO full status control (used for clk_en generation). Write 1 to enable fifo full status for clk_en generation.
///                                    ###
///               %unsigned 1  gitmtop_bypass            0x1
///                                    ###
///                                    * [1] : GITM IP Bypass
///                                    * [0] : GITM IP Enable
///                                    ###
///               %unsigned 1  gfxpl_gitmsel             0x0
///                                    ###
///                                    * Output Select for GFX1 and GFX2 Plane between Scalar,Dolby and GITM
///                                    * [0] : Sclar Output / Dolby Output
///                                    * [1] : GITM Output
///                                    ###
///               %unsigned 1  hdrLut_bypass             0x1
///                                    ###
///                                    * [1] : hdrLut Bypass
///                                    * [0] : hdrLut Enable
///                                    ###
///               %unsigned 1  csc_bypass                0x1
///                                    ###
///                                    * [1] : CSC Bypass
///                                    * [0] : CSC Enable
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x00004 SCL_BYPASS           (P)
///               %unsigned 1  en                        0x0
///                                    ###
///                                    * 1 : Enables the SCL bypass
///                                    * 0 : Disables the SCL bypass
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00008 gfxScl               (P-)
///               %unsigned 1  client_start              0x0
///               %unsigned 1  client_clear              0x0
///               %unsigned 1  scl_start                 0x0
///               %unsigned 1  scl_clear                 0x0
///                                    ###
///                                    * Read Client & GFX SCL → start and clear
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x0000C Rd_word0             (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for RdClient.
///                                    * Should be programmed as:
///                                    * ceil( ohres*ovres*pixW / 128 )
///                                    * where pixW = pixel width in no of bits
///                                    * Note : In case of resolution which is not integer multiple of 128, word total should be programmed as follows :
///                                    * For eg if ohres = 116, and pixW = 24, then (ohres*24/128) = 21.75. Then word total should be (22*ovres)
///                                    ###
///     @ 0x00010 gfx_pix              (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of pixels expected at the input of GFX Scaler. It should be programmed with (gfx_ivres*gfx_ihres).
///                                    ###
///     @ 0x00014 INVSCAN              (P)
///               %unsigned 1  bitmap128_Rd0_en          0x0
///                                    ###
///                                    * [1] : enable for H Inverse Scan.
///                                    * [0] : Default Value.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00018 CTRL1                (P)
///               %unsigned 1  scl_sw_rst                0x0
///                                    ###
///                                    * Graphics Scalar software controlled reset. Write 1 to reset adaptive scalar.
///                                    ###
///               %unsigned 1  scl_rst_en0               0x1
///                                    ###
///                                    * Graphics Scalar will get resetted on scalar start
///                                    * Disable this bit for not-resetting Graphics Scalar on start.
///                                    ###
///               %unsigned 1  scl_rst_en1               0x1
///                                    ###
///                                    * Graphics Scalar will get resetted on displayTG frst
///                                    * Enable this bit to reset Graphics Scalar on frst
///                                    ###
///               %unsigned 1  scl_rst_en2               0x0
///                                    ###
///                                    * Enable this bit to soft-reset Graphics scalar. Software will have control to soft-reset scalar during VBI
///                                    ###
///               %unsigned 1  sb_clkg_en                0x1
///                                    ###
///                                    * Clock gating enable for separate clock to Graphics-1 Scalar (except LUT logic). Default enabled. Write 0 to clock gate logic except LUT logic.
///                                    ###
///               %unsigned 1  fall_bk_en                0x0
///                                    ###
///                                    * Graphics Scalar Clock Enable control : fall back option for previous logic. Write 1 for clock enable generation with previous logic.
///                                    * Default : power saving mode
///                                    ###
///               %unsigned 1  clken_st_clr              0x0
///                                    ###
///                                    * Clear Bit for Graphics Scalar ClkEn state. Write 1 to Initialize State. Level Signal
///                                    ###
///               %unsigned 1  DBVIP_GFX1_bypass         0x1
///                                    ###
///                                    * 0 : Dolby input processing block enable (RGB2IPT + DV CVM + ALPHA PROC)
///                                    * 1 : Dolby input processing block hard bypass
///                                    * Default Dolby VIP is not in path
///                                    ###
///               %unsigned 2  fifo_rd_sel               0x0
///                                    ###
///                                    * Read Select bit for selecting read enable to Dolby Input Fifo from either Dolby IP or GITM or GDCM IP
///                                    * [00]: Read Enable is from Dolby IP
///                                    * [01]: Read Enable is from GITM IP
///                                    * [10]: Read Enable is from GDCM IP
///                                    ###
///               %unsigned 2  idata_ctrl                0x0
///                                    ###
///                                    * 0: 8bpc ARGB32 data from client
///                                    * 1: ARGB2101010 data from client
///                                    * 2: RGB444 data from client
///                                    ###
///               %unsigned 1  gdcm_bypass               0x1
///                                    ###
///                                    * [1] : GDCM IP Bypass
///                                    * [0] : GDCM IP Enable
///                                    ###
///               %unsigned 1  gfxpl_gdcm_sel            0x0
///                                    ###
///                                    * Output select for GFX Plane between Scalar, Dolby, GITM and GDCM
///                                    * 0: scalar output /Dolby Output
///                                    * 1: GDCM Output
///                                    ###
///               %unsigned 1  alphaRange_InpAlign       0x0
///                                    ###
///                                    * 0: MSB align alpha input
///                                    * 1: LSB align alpha input
///                                    ###
///               %unsigned 4  alphaRange_InpBDP         0x8
///                                    ###
///                                    * Selection register for alpha input Bit depth -
///                                    * 1: 1 bit alpha input
///                                    * 2: 2 bit alpha input
///                                    * 4: 4 bit alpha input
///                                    * 8: 8 bit alpha input
///                                    ###
///               %unsigned 1  hdrLut_pdwn_regs          0x0
///                                    ###
///                                    * Wired to internal SRAM's pdwn port of GDCM IP
///                                    ###
///               %unsigned 1  hdrLut_pdlvmc_regs        0x0
///                                    ###
///                                    * Wired to internal SRAM's pdlvmc port of GDCM IP
///                                    ###
///               %unsigned 1  hdrLut_pdfvssm_regs       0x0
///                                    ###
///                                    * Wired to internal SRAM's pdfvssm port of GDCM IP
///                                    ###
///               %unsigned 1  alphadiv_bypass           0x1
///                                    ###
///                                    * [1] : De-Alpha IP Bypass
///                                    * [0] : De-Alpha IP Enable
///                                    ###
///               %%        9          # Stuffing bits...
///     @ 0x0001C LUT_BYPASS           (P)
///               %unsigned 1  en                        0x1
///                                    ###
///                                    * 1 : Enables the LUT bypass
///                                    * 0 : Disables the LUT bypass
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00020 CTRL2                (P)
///               %unsigned 1  CLUT8_pdwn_regs           0x0
///                                    ###
///                                    * Wired to internal SRAM's pwdn port of CLUT Wrapper
///                                    ###
///               %unsigned 1  CLUT8_pdlvmc_regs         0x0
///                                    ###
///                                    * Wired to internal SRAM's pdlvmc port of CLUT Wrapper
///                                    ###
///               %unsigned 1  CLUT8_pdfvssm_regs        0x0
///                                    ###
///                                    * Wired to internal SRAM's pdfvssm ports of CLUT Wrapper
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x00024 STATUS               (P)
///               %unsigned 16 gfx1Tg                    0x0
///                                    ###
///                                    * Vcount status for GFX1 TG
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00028 GITM_CTRL            (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * GITM TOP Start
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0002C GDCM_CTRL            (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * GDCM Start register
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00030                      (P)
///     # 0x00030 BITMAP40             
///               $BITMAP40            BITMAP40          REG          
///                                    ###
///                                    * Bit Map registers for bit mapping of Read Client output data
///                                    ###
///     @ 0x00050                      (W-)
///     #         # Stuffing bytes...
///               %% 7552
///     @ 0x00400                      (P)
///     # 0x00400 LUT                  
///               $CLUT                LUT               MEM          
///                                    ###
///                                    * LUT for color index look-up.
///                                    ###
///     @ 0x00800                      (P)
///     # 0x00800 gfx1Tg               
///               $TG                  gfx1Tg            REG          
///                                    ###
///                                    * GFX1 Plane Tming Generator related registers
///                                    ###
///     @ 0x00840                      (P)
///     # 0x00840 ALPHADIV             
///               $ALPHADIV            ALPHADIV          REG          
///                                    ###
///                                    * Registers for de-alpha in GFX1 Path
///                                    ###
///     @ 0x00844                      (P)
///     # 0x00844 SRAMPWR_CLUT         
///               $SRAMPWR             SRAMPWR_CLUT      REG          
///                                    ###
///                                    * Power control register for CLUT in GFX1 path.
///                                    * End of GFX1 plane definition.
///                                    ###
///     @ 0x00848                      (W-)
///     #         # Stuffing bytes...
///               %% 7616
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    3072B, bits:     862b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_GFX1
#define h_GFX1 (){}

    #define     RA_GFX1_CTRL                                   0x0000

    #define     BA_GFX1_CTRL_bitmap40_en                       0x0000
    #define     B16GFX1_CTRL_bitmap40_en                       0x0000
    #define   LSb32GFX1_CTRL_bitmap40_en                          0
    #define   LSb16GFX1_CTRL_bitmap40_en                          0
    #define       bGFX1_CTRL_bitmap40_en                       1
    #define   MSK32GFX1_CTRL_bitmap40_en                          0x00000001

    #define     BA_GFX1_CTRL_packSelR0                         0x0000
    #define     B16GFX1_CTRL_packSelR0                         0x0000
    #define   LSb32GFX1_CTRL_packSelR0                            1
    #define   LSb16GFX1_CTRL_packSelR0                            1
    #define       bGFX1_CTRL_packSelR0                         2
    #define   MSK32GFX1_CTRL_packSelR0                            0x00000006

    #define     BA_GFX1_CTRL_nonStdResEn_R0                    0x0000
    #define     B16GFX1_CTRL_nonStdResEn_R0                    0x0000
    #define   LSb32GFX1_CTRL_nonStdResEn_R0                       3
    #define   LSb16GFX1_CTRL_nonStdResEn_R0                       3
    #define       bGFX1_CTRL_nonStdResEn_R0                    1
    #define   MSK32GFX1_CTRL_nonStdResEn_R0                       0x00000008

    #define     BA_GFX1_CTRL_pixlineTot_R0                     0x0000
    #define     B16GFX1_CTRL_pixlineTot_R0                     0x0000
    #define   LSb32GFX1_CTRL_pixlineTot_R0                        4
    #define   LSb16GFX1_CTRL_pixlineTot_R0                        4
    #define       bGFX1_CTRL_pixlineTot_R0                     13
    #define   MSK32GFX1_CTRL_pixlineTot_R0                        0x0001FFF0

    #define     BA_GFX1_CTRL_flushCnt_R0                       0x0002
    #define     B16GFX1_CTRL_flushCnt_R0                       0x0002
    #define   LSb32GFX1_CTRL_flushCnt_R0                          17
    #define   LSb16GFX1_CTRL_flushCnt_R0                          1
    #define       bGFX1_CTRL_flushCnt_R0                       4
    #define   MSK32GFX1_CTRL_flushCnt_R0                          0x001E0000

    #define     BA_GFX1_CTRL_SCL_CLKEN_CTRL                    0x0002
    #define     B16GFX1_CTRL_SCL_CLKEN_CTRL                    0x0002
    #define   LSb32GFX1_CTRL_SCL_CLKEN_CTRL                       21
    #define   LSb16GFX1_CTRL_SCL_CLKEN_CTRL                       5
    #define       bGFX1_CTRL_SCL_CLKEN_CTRL                    1
    #define   MSK32GFX1_CTRL_SCL_CLKEN_CTRL                       0x00200000

    #define     BA_GFX1_CTRL_FE_GFX_CTRL_fld                   0x0002
    #define     B16GFX1_CTRL_FE_GFX_CTRL_fld                   0x0002
    #define   LSb32GFX1_CTRL_FE_GFX_CTRL_fld                      22
    #define   LSb16GFX1_CTRL_FE_GFX_CTRL_fld                      6
    #define       bGFX1_CTRL_FE_GFX_CTRL_fld                   1
    #define   MSK32GFX1_CTRL_FE_GFX_CTRL_fld                      0x00400000

    #define     BA_GFX1_CTRL_gfx_sclEnb                        0x0002
    #define     B16GFX1_CTRL_gfx_sclEnb                        0x0002
    #define   LSb32GFX1_CTRL_gfx_sclEnb                           23
    #define   LSb16GFX1_CTRL_gfx_sclEnb                           7
    #define       bGFX1_CTRL_gfx_sclEnb                        1
    #define   MSK32GFX1_CTRL_gfx_sclEnb                           0x00800000

    #define     BA_GFX1_CTRL_pixel_crop_en                     0x0003
    #define     B16GFX1_CTRL_pixel_crop_en                     0x0002
    #define   LSb32GFX1_CTRL_pixel_crop_en                        24
    #define   LSb16GFX1_CTRL_pixel_crop_en                        8
    #define       bGFX1_CTRL_pixel_crop_en                     1
    #define   MSK32GFX1_CTRL_pixel_crop_en                        0x01000000

    #define     BA_GFX1_CTRL_clken_ctrl                        0x0003
    #define     B16GFX1_CTRL_clken_ctrl                        0x0002
    #define   LSb32GFX1_CTRL_clken_ctrl                           25
    #define   LSb16GFX1_CTRL_clken_ctrl                           9
    #define       bGFX1_CTRL_clken_ctrl                        1
    #define   MSK32GFX1_CTRL_clken_ctrl                           0x02000000

    #define     BA_GFX1_CTRL_fifo_sts_ctrl                     0x0003
    #define     B16GFX1_CTRL_fifo_sts_ctrl                     0x0002
    #define   LSb32GFX1_CTRL_fifo_sts_ctrl                        26
    #define   LSb16GFX1_CTRL_fifo_sts_ctrl                        10
    #define       bGFX1_CTRL_fifo_sts_ctrl                     1
    #define   MSK32GFX1_CTRL_fifo_sts_ctrl                        0x04000000

    #define     BA_GFX1_CTRL_gitmtop_bypass                    0x0003
    #define     B16GFX1_CTRL_gitmtop_bypass                    0x0002
    #define   LSb32GFX1_CTRL_gitmtop_bypass                       27
    #define   LSb16GFX1_CTRL_gitmtop_bypass                       11
    #define       bGFX1_CTRL_gitmtop_bypass                    1
    #define   MSK32GFX1_CTRL_gitmtop_bypass                       0x08000000

    #define     BA_GFX1_CTRL_gfxpl_gitmsel                     0x0003
    #define     B16GFX1_CTRL_gfxpl_gitmsel                     0x0002
    #define   LSb32GFX1_CTRL_gfxpl_gitmsel                        28
    #define   LSb16GFX1_CTRL_gfxpl_gitmsel                        12
    #define       bGFX1_CTRL_gfxpl_gitmsel                     1
    #define   MSK32GFX1_CTRL_gfxpl_gitmsel                        0x10000000

    #define     BA_GFX1_CTRL_hdrLut_bypass                     0x0003
    #define     B16GFX1_CTRL_hdrLut_bypass                     0x0002
    #define   LSb32GFX1_CTRL_hdrLut_bypass                        29
    #define   LSb16GFX1_CTRL_hdrLut_bypass                        13
    #define       bGFX1_CTRL_hdrLut_bypass                     1
    #define   MSK32GFX1_CTRL_hdrLut_bypass                        0x20000000

    #define     BA_GFX1_CTRL_csc_bypass                        0x0003
    #define     B16GFX1_CTRL_csc_bypass                        0x0002
    #define   LSb32GFX1_CTRL_csc_bypass                           30
    #define   LSb16GFX1_CTRL_csc_bypass                           14
    #define       bGFX1_CTRL_csc_bypass                        1
    #define   MSK32GFX1_CTRL_csc_bypass                           0x40000000
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_SCL_BYPASS                             0x0004

    #define     BA_GFX1_SCL_BYPASS_en                          0x0004
    #define     B16GFX1_SCL_BYPASS_en                          0x0004
    #define   LSb32GFX1_SCL_BYPASS_en                             0
    #define   LSb16GFX1_SCL_BYPASS_en                             0
    #define       bGFX1_SCL_BYPASS_en                          1
    #define   MSK32GFX1_SCL_BYPASS_en                             0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_gfxScl                                 0x0008

    #define     BA_GFX1_gfxScl_client_start                    0x0008
    #define     B16GFX1_gfxScl_client_start                    0x0008
    #define   LSb32GFX1_gfxScl_client_start                       0
    #define   LSb16GFX1_gfxScl_client_start                       0
    #define       bGFX1_gfxScl_client_start                    1
    #define   MSK32GFX1_gfxScl_client_start                       0x00000001

    #define     BA_GFX1_gfxScl_client_clear                    0x0008
    #define     B16GFX1_gfxScl_client_clear                    0x0008
    #define   LSb32GFX1_gfxScl_client_clear                       1
    #define   LSb16GFX1_gfxScl_client_clear                       1
    #define       bGFX1_gfxScl_client_clear                    1
    #define   MSK32GFX1_gfxScl_client_clear                       0x00000002

    #define     BA_GFX1_gfxScl_scl_start                       0x0008
    #define     B16GFX1_gfxScl_scl_start                       0x0008
    #define   LSb32GFX1_gfxScl_scl_start                          2
    #define   LSb16GFX1_gfxScl_scl_start                          2
    #define       bGFX1_gfxScl_scl_start                       1
    #define   MSK32GFX1_gfxScl_scl_start                          0x00000004

    #define     BA_GFX1_gfxScl_scl_clear                       0x0008
    #define     B16GFX1_gfxScl_scl_clear                       0x0008
    #define   LSb32GFX1_gfxScl_scl_clear                          3
    #define   LSb16GFX1_gfxScl_scl_clear                          3
    #define       bGFX1_gfxScl_scl_clear                       1
    #define   MSK32GFX1_gfxScl_scl_clear                          0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_Rd_word0                               0x000C

    #define     BA_GFX1_Rd_word0_tot                           0x000C
    #define     B16GFX1_Rd_word0_tot                           0x000C
    #define   LSb32GFX1_Rd_word0_tot                              0
    #define   LSb16GFX1_Rd_word0_tot                              0
    #define       bGFX1_Rd_word0_tot                           32
    #define   MSK32GFX1_Rd_word0_tot                              0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_gfx_pix                                0x0010

    #define     BA_GFX1_gfx_pix_tot                            0x0010
    #define     B16GFX1_gfx_pix_tot                            0x0010
    #define   LSb32GFX1_gfx_pix_tot                               0
    #define   LSb16GFX1_gfx_pix_tot                               0
    #define       bGFX1_gfx_pix_tot                            32
    #define   MSK32GFX1_gfx_pix_tot                               0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_INVSCAN                                0x0014

    #define     BA_GFX1_INVSCAN_bitmap128_Rd0_en               0x0014
    #define     B16GFX1_INVSCAN_bitmap128_Rd0_en               0x0014
    #define   LSb32GFX1_INVSCAN_bitmap128_Rd0_en                  0
    #define   LSb16GFX1_INVSCAN_bitmap128_Rd0_en                  0
    #define       bGFX1_INVSCAN_bitmap128_Rd0_en               1
    #define   MSK32GFX1_INVSCAN_bitmap128_Rd0_en                  0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_CTRL1                                  0x0018

    #define     BA_GFX1_CTRL1_scl_sw_rst                       0x0018
    #define     B16GFX1_CTRL1_scl_sw_rst                       0x0018
    #define   LSb32GFX1_CTRL1_scl_sw_rst                          0
    #define   LSb16GFX1_CTRL1_scl_sw_rst                          0
    #define       bGFX1_CTRL1_scl_sw_rst                       1
    #define   MSK32GFX1_CTRL1_scl_sw_rst                          0x00000001

    #define     BA_GFX1_CTRL1_scl_rst_en0                      0x0018
    #define     B16GFX1_CTRL1_scl_rst_en0                      0x0018
    #define   LSb32GFX1_CTRL1_scl_rst_en0                         1
    #define   LSb16GFX1_CTRL1_scl_rst_en0                         1
    #define       bGFX1_CTRL1_scl_rst_en0                      1
    #define   MSK32GFX1_CTRL1_scl_rst_en0                         0x00000002

    #define     BA_GFX1_CTRL1_scl_rst_en1                      0x0018
    #define     B16GFX1_CTRL1_scl_rst_en1                      0x0018
    #define   LSb32GFX1_CTRL1_scl_rst_en1                         2
    #define   LSb16GFX1_CTRL1_scl_rst_en1                         2
    #define       bGFX1_CTRL1_scl_rst_en1                      1
    #define   MSK32GFX1_CTRL1_scl_rst_en1                         0x00000004

    #define     BA_GFX1_CTRL1_scl_rst_en2                      0x0018
    #define     B16GFX1_CTRL1_scl_rst_en2                      0x0018
    #define   LSb32GFX1_CTRL1_scl_rst_en2                         3
    #define   LSb16GFX1_CTRL1_scl_rst_en2                         3
    #define       bGFX1_CTRL1_scl_rst_en2                      1
    #define   MSK32GFX1_CTRL1_scl_rst_en2                         0x00000008

    #define     BA_GFX1_CTRL1_sb_clkg_en                       0x0018
    #define     B16GFX1_CTRL1_sb_clkg_en                       0x0018
    #define   LSb32GFX1_CTRL1_sb_clkg_en                          4
    #define   LSb16GFX1_CTRL1_sb_clkg_en                          4
    #define       bGFX1_CTRL1_sb_clkg_en                       1
    #define   MSK32GFX1_CTRL1_sb_clkg_en                          0x00000010

    #define     BA_GFX1_CTRL1_fall_bk_en                       0x0018
    #define     B16GFX1_CTRL1_fall_bk_en                       0x0018
    #define   LSb32GFX1_CTRL1_fall_bk_en                          5
    #define   LSb16GFX1_CTRL1_fall_bk_en                          5
    #define       bGFX1_CTRL1_fall_bk_en                       1
    #define   MSK32GFX1_CTRL1_fall_bk_en                          0x00000020

    #define     BA_GFX1_CTRL1_clken_st_clr                     0x0018
    #define     B16GFX1_CTRL1_clken_st_clr                     0x0018
    #define   LSb32GFX1_CTRL1_clken_st_clr                        6
    #define   LSb16GFX1_CTRL1_clken_st_clr                        6
    #define       bGFX1_CTRL1_clken_st_clr                     1
    #define   MSK32GFX1_CTRL1_clken_st_clr                        0x00000040

    #define     BA_GFX1_CTRL1_DBVIP_GFX1_bypass                0x0018
    #define     B16GFX1_CTRL1_DBVIP_GFX1_bypass                0x0018
    #define   LSb32GFX1_CTRL1_DBVIP_GFX1_bypass                   7
    #define   LSb16GFX1_CTRL1_DBVIP_GFX1_bypass                   7
    #define       bGFX1_CTRL1_DBVIP_GFX1_bypass                1
    #define   MSK32GFX1_CTRL1_DBVIP_GFX1_bypass                   0x00000080

    #define     BA_GFX1_CTRL1_fifo_rd_sel                      0x0019
    #define     B16GFX1_CTRL1_fifo_rd_sel                      0x0018
    #define   LSb32GFX1_CTRL1_fifo_rd_sel                         8
    #define   LSb16GFX1_CTRL1_fifo_rd_sel                         8
    #define       bGFX1_CTRL1_fifo_rd_sel                      2
    #define   MSK32GFX1_CTRL1_fifo_rd_sel                         0x00000300

    #define     BA_GFX1_CTRL1_idata_ctrl                       0x0019
    #define     B16GFX1_CTRL1_idata_ctrl                       0x0018
    #define   LSb32GFX1_CTRL1_idata_ctrl                          10
    #define   LSb16GFX1_CTRL1_idata_ctrl                          10
    #define       bGFX1_CTRL1_idata_ctrl                       2
    #define   MSK32GFX1_CTRL1_idata_ctrl                          0x00000C00

    #define     BA_GFX1_CTRL1_gdcm_bypass                      0x0019
    #define     B16GFX1_CTRL1_gdcm_bypass                      0x0018
    #define   LSb32GFX1_CTRL1_gdcm_bypass                         12
    #define   LSb16GFX1_CTRL1_gdcm_bypass                         12
    #define       bGFX1_CTRL1_gdcm_bypass                      1
    #define   MSK32GFX1_CTRL1_gdcm_bypass                         0x00001000

    #define     BA_GFX1_CTRL1_gfxpl_gdcm_sel                   0x0019
    #define     B16GFX1_CTRL1_gfxpl_gdcm_sel                   0x0018
    #define   LSb32GFX1_CTRL1_gfxpl_gdcm_sel                      13
    #define   LSb16GFX1_CTRL1_gfxpl_gdcm_sel                      13
    #define       bGFX1_CTRL1_gfxpl_gdcm_sel                   1
    #define   MSK32GFX1_CTRL1_gfxpl_gdcm_sel                      0x00002000

    #define     BA_GFX1_CTRL1_alphaRange_InpAlign              0x0019
    #define     B16GFX1_CTRL1_alphaRange_InpAlign              0x0018
    #define   LSb32GFX1_CTRL1_alphaRange_InpAlign                 14
    #define   LSb16GFX1_CTRL1_alphaRange_InpAlign                 14
    #define       bGFX1_CTRL1_alphaRange_InpAlign              1
    #define   MSK32GFX1_CTRL1_alphaRange_InpAlign                 0x00004000

    #define     BA_GFX1_CTRL1_alphaRange_InpBDP                0x0019
    #define     B16GFX1_CTRL1_alphaRange_InpBDP                0x0018
    #define   LSb32GFX1_CTRL1_alphaRange_InpBDP                   15
    #define   LSb16GFX1_CTRL1_alphaRange_InpBDP                   15
    #define       bGFX1_CTRL1_alphaRange_InpBDP                4
    #define   MSK32GFX1_CTRL1_alphaRange_InpBDP                   0x00078000

    #define     BA_GFX1_CTRL1_hdrLut_pdwn_regs                 0x001A
    #define     B16GFX1_CTRL1_hdrLut_pdwn_regs                 0x001A
    #define   LSb32GFX1_CTRL1_hdrLut_pdwn_regs                    19
    #define   LSb16GFX1_CTRL1_hdrLut_pdwn_regs                    3
    #define       bGFX1_CTRL1_hdrLut_pdwn_regs                 1
    #define   MSK32GFX1_CTRL1_hdrLut_pdwn_regs                    0x00080000

    #define     BA_GFX1_CTRL1_hdrLut_pdlvmc_regs               0x001A
    #define     B16GFX1_CTRL1_hdrLut_pdlvmc_regs               0x001A
    #define   LSb32GFX1_CTRL1_hdrLut_pdlvmc_regs                  20
    #define   LSb16GFX1_CTRL1_hdrLut_pdlvmc_regs                  4
    #define       bGFX1_CTRL1_hdrLut_pdlvmc_regs               1
    #define   MSK32GFX1_CTRL1_hdrLut_pdlvmc_regs                  0x00100000

    #define     BA_GFX1_CTRL1_hdrLut_pdfvssm_regs              0x001A
    #define     B16GFX1_CTRL1_hdrLut_pdfvssm_regs              0x001A
    #define   LSb32GFX1_CTRL1_hdrLut_pdfvssm_regs                 21
    #define   LSb16GFX1_CTRL1_hdrLut_pdfvssm_regs                 5
    #define       bGFX1_CTRL1_hdrLut_pdfvssm_regs              1
    #define   MSK32GFX1_CTRL1_hdrLut_pdfvssm_regs                 0x00200000

    #define     BA_GFX1_CTRL1_alphadiv_bypass                  0x001A
    #define     B16GFX1_CTRL1_alphadiv_bypass                  0x001A
    #define   LSb32GFX1_CTRL1_alphadiv_bypass                     22
    #define   LSb16GFX1_CTRL1_alphadiv_bypass                     6
    #define       bGFX1_CTRL1_alphadiv_bypass                  1
    #define   MSK32GFX1_CTRL1_alphadiv_bypass                     0x00400000
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_LUT_BYPASS                             0x001C

    #define     BA_GFX1_LUT_BYPASS_en                          0x001C
    #define     B16GFX1_LUT_BYPASS_en                          0x001C
    #define   LSb32GFX1_LUT_BYPASS_en                             0
    #define   LSb16GFX1_LUT_BYPASS_en                             0
    #define       bGFX1_LUT_BYPASS_en                          1
    #define   MSK32GFX1_LUT_BYPASS_en                             0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_CTRL2                                  0x0020

    #define     BA_GFX1_CTRL2_CLUT8_pdwn_regs                  0x0020
    #define     B16GFX1_CTRL2_CLUT8_pdwn_regs                  0x0020
    #define   LSb32GFX1_CTRL2_CLUT8_pdwn_regs                     0
    #define   LSb16GFX1_CTRL2_CLUT8_pdwn_regs                     0
    #define       bGFX1_CTRL2_CLUT8_pdwn_regs                  1
    #define   MSK32GFX1_CTRL2_CLUT8_pdwn_regs                     0x00000001

    #define     BA_GFX1_CTRL2_CLUT8_pdlvmc_regs                0x0020
    #define     B16GFX1_CTRL2_CLUT8_pdlvmc_regs                0x0020
    #define   LSb32GFX1_CTRL2_CLUT8_pdlvmc_regs                   1
    #define   LSb16GFX1_CTRL2_CLUT8_pdlvmc_regs                   1
    #define       bGFX1_CTRL2_CLUT8_pdlvmc_regs                1
    #define   MSK32GFX1_CTRL2_CLUT8_pdlvmc_regs                   0x00000002

    #define     BA_GFX1_CTRL2_CLUT8_pdfvssm_regs               0x0020
    #define     B16GFX1_CTRL2_CLUT8_pdfvssm_regs               0x0020
    #define   LSb32GFX1_CTRL2_CLUT8_pdfvssm_regs                  2
    #define   LSb16GFX1_CTRL2_CLUT8_pdfvssm_regs                  2
    #define       bGFX1_CTRL2_CLUT8_pdfvssm_regs               1
    #define   MSK32GFX1_CTRL2_CLUT8_pdfvssm_regs                  0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_STATUS                                 0x0024

    #define     BA_GFX1_STATUS_gfx1Tg                          0x0024
    #define     B16GFX1_STATUS_gfx1Tg                          0x0024
    #define   LSb32GFX1_STATUS_gfx1Tg                             0
    #define   LSb16GFX1_STATUS_gfx1Tg                             0
    #define       bGFX1_STATUS_gfx1Tg                          16
    #define   MSK32GFX1_STATUS_gfx1Tg                             0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_GITM_CTRL                              0x0028

    #define     BA_GFX1_GITM_CTRL_start                        0x0028
    #define     B16GFX1_GITM_CTRL_start                        0x0028
    #define   LSb32GFX1_GITM_CTRL_start                           0
    #define   LSb16GFX1_GITM_CTRL_start                           0
    #define       bGFX1_GITM_CTRL_start                        1
    #define   MSK32GFX1_GITM_CTRL_start                           0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_GDCM_CTRL                              0x002C

    #define     BA_GFX1_GDCM_CTRL_start                        0x002C
    #define     B16GFX1_GDCM_CTRL_start                        0x002C
    #define   LSb32GFX1_GDCM_CTRL_start                           0
    #define   LSb16GFX1_GDCM_CTRL_start                           0
    #define       bGFX1_GDCM_CTRL_start                        1
    #define   MSK32GFX1_GDCM_CTRL_start                           0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_BITMAP40                               0x0030
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_LUT                                    0x0400
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_gfx1Tg                                 0x0800
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_ALPHADIV                               0x0840
    ///////////////////////////////////////////////////////////
    #define     RA_GFX1_SRAMPWR_CLUT                           0x0844
    ///////////////////////////////////////////////////////////

    typedef struct SIE_GFX1 {
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_CTRL_bitmap40_en(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32GFX1_CTRL_bitmap40_en(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16GFX1_CTRL_bitmap40_en(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16GFX1_CTRL_bitmap40_en(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32GFX1_CTRL_packSelR0(r32)                    _BFGET_(r32, 2, 1)
    #define   SET32GFX1_CTRL_packSelR0(r32,v)                  _BFSET_(r32, 2, 1,v)
    #define   GET16GFX1_CTRL_packSelR0(r16)                    _BFGET_(r16, 2, 1)
    #define   SET16GFX1_CTRL_packSelR0(r16,v)                  _BFSET_(r16, 2, 1,v)

    #define   GET32GFX1_CTRL_nonStdResEn_R0(r32)               _BFGET_(r32, 3, 3)
    #define   SET32GFX1_CTRL_nonStdResEn_R0(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16GFX1_CTRL_nonStdResEn_R0(r16)               _BFGET_(r16, 3, 3)
    #define   SET16GFX1_CTRL_nonStdResEn_R0(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32GFX1_CTRL_pixlineTot_R0(r32)                _BFGET_(r32,16, 4)
    #define   SET32GFX1_CTRL_pixlineTot_R0(r32,v)              _BFSET_(r32,16, 4,v)

    #define   GET32GFX1_CTRL_flushCnt_R0(r32)                  _BFGET_(r32,20,17)
    #define   SET32GFX1_CTRL_flushCnt_R0(r32,v)                _BFSET_(r32,20,17,v)
    #define   GET16GFX1_CTRL_flushCnt_R0(r16)                  _BFGET_(r16, 4, 1)
    #define   SET16GFX1_CTRL_flushCnt_R0(r16,v)                _BFSET_(r16, 4, 1,v)

    #define   GET32GFX1_CTRL_SCL_CLKEN_CTRL(r32)               _BFGET_(r32,21,21)
    #define   SET32GFX1_CTRL_SCL_CLKEN_CTRL(r32,v)             _BFSET_(r32,21,21,v)
    #define   GET16GFX1_CTRL_SCL_CLKEN_CTRL(r16)               _BFGET_(r16, 5, 5)
    #define   SET16GFX1_CTRL_SCL_CLKEN_CTRL(r16,v)             _BFSET_(r16, 5, 5,v)

    #define   GET32GFX1_CTRL_FE_GFX_CTRL_fld(r32)              _BFGET_(r32,22,22)
    #define   SET32GFX1_CTRL_FE_GFX_CTRL_fld(r32,v)            _BFSET_(r32,22,22,v)
    #define   GET16GFX1_CTRL_FE_GFX_CTRL_fld(r16)              _BFGET_(r16, 6, 6)
    #define   SET16GFX1_CTRL_FE_GFX_CTRL_fld(r16,v)            _BFSET_(r16, 6, 6,v)

    #define   GET32GFX1_CTRL_gfx_sclEnb(r32)                   _BFGET_(r32,23,23)
    #define   SET32GFX1_CTRL_gfx_sclEnb(r32,v)                 _BFSET_(r32,23,23,v)
    #define   GET16GFX1_CTRL_gfx_sclEnb(r16)                   _BFGET_(r16, 7, 7)
    #define   SET16GFX1_CTRL_gfx_sclEnb(r16,v)                 _BFSET_(r16, 7, 7,v)

    #define   GET32GFX1_CTRL_pixel_crop_en(r32)                _BFGET_(r32,24,24)
    #define   SET32GFX1_CTRL_pixel_crop_en(r32,v)              _BFSET_(r32,24,24,v)
    #define   GET16GFX1_CTRL_pixel_crop_en(r16)                _BFGET_(r16, 8, 8)
    #define   SET16GFX1_CTRL_pixel_crop_en(r16,v)              _BFSET_(r16, 8, 8,v)

    #define   GET32GFX1_CTRL_clken_ctrl(r32)                   _BFGET_(r32,25,25)
    #define   SET32GFX1_CTRL_clken_ctrl(r32,v)                 _BFSET_(r32,25,25,v)
    #define   GET16GFX1_CTRL_clken_ctrl(r16)                   _BFGET_(r16, 9, 9)
    #define   SET16GFX1_CTRL_clken_ctrl(r16,v)                 _BFSET_(r16, 9, 9,v)

    #define   GET32GFX1_CTRL_fifo_sts_ctrl(r32)                _BFGET_(r32,26,26)
    #define   SET32GFX1_CTRL_fifo_sts_ctrl(r32,v)              _BFSET_(r32,26,26,v)
    #define   GET16GFX1_CTRL_fifo_sts_ctrl(r16)                _BFGET_(r16,10,10)
    #define   SET16GFX1_CTRL_fifo_sts_ctrl(r16,v)              _BFSET_(r16,10,10,v)

    #define   GET32GFX1_CTRL_gitmtop_bypass(r32)               _BFGET_(r32,27,27)
    #define   SET32GFX1_CTRL_gitmtop_bypass(r32,v)             _BFSET_(r32,27,27,v)
    #define   GET16GFX1_CTRL_gitmtop_bypass(r16)               _BFGET_(r16,11,11)
    #define   SET16GFX1_CTRL_gitmtop_bypass(r16,v)             _BFSET_(r16,11,11,v)

    #define   GET32GFX1_CTRL_gfxpl_gitmsel(r32)                _BFGET_(r32,28,28)
    #define   SET32GFX1_CTRL_gfxpl_gitmsel(r32,v)              _BFSET_(r32,28,28,v)
    #define   GET16GFX1_CTRL_gfxpl_gitmsel(r16)                _BFGET_(r16,12,12)
    #define   SET16GFX1_CTRL_gfxpl_gitmsel(r16,v)              _BFSET_(r16,12,12,v)

    #define   GET32GFX1_CTRL_hdrLut_bypass(r32)                _BFGET_(r32,29,29)
    #define   SET32GFX1_CTRL_hdrLut_bypass(r32,v)              _BFSET_(r32,29,29,v)
    #define   GET16GFX1_CTRL_hdrLut_bypass(r16)                _BFGET_(r16,13,13)
    #define   SET16GFX1_CTRL_hdrLut_bypass(r16,v)              _BFSET_(r16,13,13,v)

    #define   GET32GFX1_CTRL_csc_bypass(r32)                   _BFGET_(r32,30,30)
    #define   SET32GFX1_CTRL_csc_bypass(r32,v)                 _BFSET_(r32,30,30,v)
    #define   GET16GFX1_CTRL_csc_bypass(r16)                   _BFGET_(r16,14,14)
    #define   SET16GFX1_CTRL_csc_bypass(r16,v)                 _BFSET_(r16,14,14,v)

    #define     w32GFX1_CTRL                                   {\
            UNSG32 uCTRL_bitmap40_en                           :  1;\
            UNSG32 uCTRL_packSelR0                             :  2;\
            UNSG32 uCTRL_nonStdResEn_R0                        :  1;\
            UNSG32 uCTRL_pixlineTot_R0                         : 13;\
            UNSG32 uCTRL_flushCnt_R0                           :  4;\
            UNSG32 uCTRL_SCL_CLKEN_CTRL                        :  1;\
            UNSG32 uCTRL_FE_GFX_CTRL_fld                       :  1;\
            UNSG32 uCTRL_gfx_sclEnb                            :  1;\
            UNSG32 uCTRL_pixel_crop_en                         :  1;\
            UNSG32 uCTRL_clken_ctrl                            :  1;\
            UNSG32 uCTRL_fifo_sts_ctrl                         :  1;\
            UNSG32 uCTRL_gitmtop_bypass                        :  1;\
            UNSG32 uCTRL_gfxpl_gitmsel                         :  1;\
            UNSG32 uCTRL_hdrLut_bypass                         :  1;\
            UNSG32 uCTRL_csc_bypass                            :  1;\
            UNSG32 RSVDx0_b31                                  :  1;\
          }
    union { UNSG32 u32GFX1_CTRL;
            struct w32GFX1_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_SCL_BYPASS_en(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32GFX1_SCL_BYPASS_en(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16GFX1_SCL_BYPASS_en(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16GFX1_SCL_BYPASS_en(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32GFX1_SCL_BYPASS                             {\
            UNSG32 uSCL_BYPASS_en                              :  1;\
            UNSG32 RSVDx4_b1                                   : 31;\
          }
    union { UNSG32 u32GFX1_SCL_BYPASS;
            struct w32GFX1_SCL_BYPASS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_gfxScl_client_start(r32)               _BFGET_(r32, 0, 0)
    #define   SET32GFX1_gfxScl_client_start(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16GFX1_gfxScl_client_start(r16)               _BFGET_(r16, 0, 0)
    #define   SET16GFX1_gfxScl_client_start(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32GFX1_gfxScl_client_clear(r32)               _BFGET_(r32, 1, 1)
    #define   SET32GFX1_gfxScl_client_clear(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16GFX1_gfxScl_client_clear(r16)               _BFGET_(r16, 1, 1)
    #define   SET16GFX1_gfxScl_client_clear(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32GFX1_gfxScl_scl_start(r32)                  _BFGET_(r32, 2, 2)
    #define   SET32GFX1_gfxScl_scl_start(r32,v)                _BFSET_(r32, 2, 2,v)
    #define   GET16GFX1_gfxScl_scl_start(r16)                  _BFGET_(r16, 2, 2)
    #define   SET16GFX1_gfxScl_scl_start(r16,v)                _BFSET_(r16, 2, 2,v)

    #define   GET32GFX1_gfxScl_scl_clear(r32)                  _BFGET_(r32, 3, 3)
    #define   SET32GFX1_gfxScl_scl_clear(r32,v)                _BFSET_(r32, 3, 3,v)
    #define   GET16GFX1_gfxScl_scl_clear(r16)                  _BFGET_(r16, 3, 3)
    #define   SET16GFX1_gfxScl_scl_clear(r16,v)                _BFSET_(r16, 3, 3,v)

    #define     w32GFX1_gfxScl                                 {\
            UNSG32 ugfxScl_client_start                        :  1;\
            UNSG32 ugfxScl_client_clear                        :  1;\
            UNSG32 ugfxScl_scl_start                           :  1;\
            UNSG32 ugfxScl_scl_clear                           :  1;\
            UNSG32 RSVDx8_b4                                   : 28;\
          }
    union { UNSG32 u32GFX1_gfxScl;
            struct w32GFX1_gfxScl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_Rd_word0_tot(r32)                      _BFGET_(r32,31, 0)
    #define   SET32GFX1_Rd_word0_tot(r32,v)                    _BFSET_(r32,31, 0,v)

    #define     w32GFX1_Rd_word0                               {\
            UNSG32 uRd_word0_tot                               : 32;\
          }
    union { UNSG32 u32GFX1_Rd_word0;
            struct w32GFX1_Rd_word0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_gfx_pix_tot(r32)                       _BFGET_(r32,31, 0)
    #define   SET32GFX1_gfx_pix_tot(r32,v)                     _BFSET_(r32,31, 0,v)

    #define     w32GFX1_gfx_pix                                {\
            UNSG32 ugfx_pix_tot                                : 32;\
          }
    union { UNSG32 u32GFX1_gfx_pix;
            struct w32GFX1_gfx_pix;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_INVSCAN_bitmap128_Rd0_en(r32)          _BFGET_(r32, 0, 0)
    #define   SET32GFX1_INVSCAN_bitmap128_Rd0_en(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16GFX1_INVSCAN_bitmap128_Rd0_en(r16)          _BFGET_(r16, 0, 0)
    #define   SET16GFX1_INVSCAN_bitmap128_Rd0_en(r16,v)        _BFSET_(r16, 0, 0,v)

    #define     w32GFX1_INVSCAN                                {\
            UNSG32 uINVSCAN_bitmap128_Rd0_en                   :  1;\
            UNSG32 RSVDx14_b1                                  : 31;\
          }
    union { UNSG32 u32GFX1_INVSCAN;
            struct w32GFX1_INVSCAN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_CTRL1_scl_sw_rst(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32GFX1_CTRL1_scl_sw_rst(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16GFX1_CTRL1_scl_sw_rst(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16GFX1_CTRL1_scl_sw_rst(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32GFX1_CTRL1_scl_rst_en0(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32GFX1_CTRL1_scl_rst_en0(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16GFX1_CTRL1_scl_rst_en0(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16GFX1_CTRL1_scl_rst_en0(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32GFX1_CTRL1_scl_rst_en1(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32GFX1_CTRL1_scl_rst_en1(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16GFX1_CTRL1_scl_rst_en1(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16GFX1_CTRL1_scl_rst_en1(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32GFX1_CTRL1_scl_rst_en2(r32)                 _BFGET_(r32, 3, 3)
    #define   SET32GFX1_CTRL1_scl_rst_en2(r32,v)               _BFSET_(r32, 3, 3,v)
    #define   GET16GFX1_CTRL1_scl_rst_en2(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16GFX1_CTRL1_scl_rst_en2(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32GFX1_CTRL1_sb_clkg_en(r32)                  _BFGET_(r32, 4, 4)
    #define   SET32GFX1_CTRL1_sb_clkg_en(r32,v)                _BFSET_(r32, 4, 4,v)
    #define   GET16GFX1_CTRL1_sb_clkg_en(r16)                  _BFGET_(r16, 4, 4)
    #define   SET16GFX1_CTRL1_sb_clkg_en(r16,v)                _BFSET_(r16, 4, 4,v)

    #define   GET32GFX1_CTRL1_fall_bk_en(r32)                  _BFGET_(r32, 5, 5)
    #define   SET32GFX1_CTRL1_fall_bk_en(r32,v)                _BFSET_(r32, 5, 5,v)
    #define   GET16GFX1_CTRL1_fall_bk_en(r16)                  _BFGET_(r16, 5, 5)
    #define   SET16GFX1_CTRL1_fall_bk_en(r16,v)                _BFSET_(r16, 5, 5,v)

    #define   GET32GFX1_CTRL1_clken_st_clr(r32)                _BFGET_(r32, 6, 6)
    #define   SET32GFX1_CTRL1_clken_st_clr(r32,v)              _BFSET_(r32, 6, 6,v)
    #define   GET16GFX1_CTRL1_clken_st_clr(r16)                _BFGET_(r16, 6, 6)
    #define   SET16GFX1_CTRL1_clken_st_clr(r16,v)              _BFSET_(r16, 6, 6,v)

    #define   GET32GFX1_CTRL1_DBVIP_GFX1_bypass(r32)           _BFGET_(r32, 7, 7)
    #define   SET32GFX1_CTRL1_DBVIP_GFX1_bypass(r32,v)         _BFSET_(r32, 7, 7,v)
    #define   GET16GFX1_CTRL1_DBVIP_GFX1_bypass(r16)           _BFGET_(r16, 7, 7)
    #define   SET16GFX1_CTRL1_DBVIP_GFX1_bypass(r16,v)         _BFSET_(r16, 7, 7,v)

    #define   GET32GFX1_CTRL1_fifo_rd_sel(r32)                 _BFGET_(r32, 9, 8)
    #define   SET32GFX1_CTRL1_fifo_rd_sel(r32,v)               _BFSET_(r32, 9, 8,v)
    #define   GET16GFX1_CTRL1_fifo_rd_sel(r16)                 _BFGET_(r16, 9, 8)
    #define   SET16GFX1_CTRL1_fifo_rd_sel(r16,v)               _BFSET_(r16, 9, 8,v)

    #define   GET32GFX1_CTRL1_idata_ctrl(r32)                  _BFGET_(r32,11,10)
    #define   SET32GFX1_CTRL1_idata_ctrl(r32,v)                _BFSET_(r32,11,10,v)
    #define   GET16GFX1_CTRL1_idata_ctrl(r16)                  _BFGET_(r16,11,10)
    #define   SET16GFX1_CTRL1_idata_ctrl(r16,v)                _BFSET_(r16,11,10,v)

    #define   GET32GFX1_CTRL1_gdcm_bypass(r32)                 _BFGET_(r32,12,12)
    #define   SET32GFX1_CTRL1_gdcm_bypass(r32,v)               _BFSET_(r32,12,12,v)
    #define   GET16GFX1_CTRL1_gdcm_bypass(r16)                 _BFGET_(r16,12,12)
    #define   SET16GFX1_CTRL1_gdcm_bypass(r16,v)               _BFSET_(r16,12,12,v)

    #define   GET32GFX1_CTRL1_gfxpl_gdcm_sel(r32)              _BFGET_(r32,13,13)
    #define   SET32GFX1_CTRL1_gfxpl_gdcm_sel(r32,v)            _BFSET_(r32,13,13,v)
    #define   GET16GFX1_CTRL1_gfxpl_gdcm_sel(r16)              _BFGET_(r16,13,13)
    #define   SET16GFX1_CTRL1_gfxpl_gdcm_sel(r16,v)            _BFSET_(r16,13,13,v)

    #define   GET32GFX1_CTRL1_alphaRange_InpAlign(r32)         _BFGET_(r32,14,14)
    #define   SET32GFX1_CTRL1_alphaRange_InpAlign(r32,v)       _BFSET_(r32,14,14,v)
    #define   GET16GFX1_CTRL1_alphaRange_InpAlign(r16)         _BFGET_(r16,14,14)
    #define   SET16GFX1_CTRL1_alphaRange_InpAlign(r16,v)       _BFSET_(r16,14,14,v)

    #define   GET32GFX1_CTRL1_alphaRange_InpBDP(r32)           _BFGET_(r32,18,15)
    #define   SET32GFX1_CTRL1_alphaRange_InpBDP(r32,v)         _BFSET_(r32,18,15,v)

    #define   GET32GFX1_CTRL1_hdrLut_pdwn_regs(r32)            _BFGET_(r32,19,19)
    #define   SET32GFX1_CTRL1_hdrLut_pdwn_regs(r32,v)          _BFSET_(r32,19,19,v)
    #define   GET16GFX1_CTRL1_hdrLut_pdwn_regs(r16)            _BFGET_(r16, 3, 3)
    #define   SET16GFX1_CTRL1_hdrLut_pdwn_regs(r16,v)          _BFSET_(r16, 3, 3,v)

    #define   GET32GFX1_CTRL1_hdrLut_pdlvmc_regs(r32)          _BFGET_(r32,20,20)
    #define   SET32GFX1_CTRL1_hdrLut_pdlvmc_regs(r32,v)        _BFSET_(r32,20,20,v)
    #define   GET16GFX1_CTRL1_hdrLut_pdlvmc_regs(r16)          _BFGET_(r16, 4, 4)
    #define   SET16GFX1_CTRL1_hdrLut_pdlvmc_regs(r16,v)        _BFSET_(r16, 4, 4,v)

    #define   GET32GFX1_CTRL1_hdrLut_pdfvssm_regs(r32)         _BFGET_(r32,21,21)
    #define   SET32GFX1_CTRL1_hdrLut_pdfvssm_regs(r32,v)       _BFSET_(r32,21,21,v)
    #define   GET16GFX1_CTRL1_hdrLut_pdfvssm_regs(r16)         _BFGET_(r16, 5, 5)
    #define   SET16GFX1_CTRL1_hdrLut_pdfvssm_regs(r16,v)       _BFSET_(r16, 5, 5,v)

    #define   GET32GFX1_CTRL1_alphadiv_bypass(r32)             _BFGET_(r32,22,22)
    #define   SET32GFX1_CTRL1_alphadiv_bypass(r32,v)           _BFSET_(r32,22,22,v)
    #define   GET16GFX1_CTRL1_alphadiv_bypass(r16)             _BFGET_(r16, 6, 6)
    #define   SET16GFX1_CTRL1_alphadiv_bypass(r16,v)           _BFSET_(r16, 6, 6,v)

    #define     w32GFX1_CTRL1                                  {\
            UNSG32 uCTRL1_scl_sw_rst                           :  1;\
            UNSG32 uCTRL1_scl_rst_en0                          :  1;\
            UNSG32 uCTRL1_scl_rst_en1                          :  1;\
            UNSG32 uCTRL1_scl_rst_en2                          :  1;\
            UNSG32 uCTRL1_sb_clkg_en                           :  1;\
            UNSG32 uCTRL1_fall_bk_en                           :  1;\
            UNSG32 uCTRL1_clken_st_clr                         :  1;\
            UNSG32 uCTRL1_DBVIP_GFX1_bypass                    :  1;\
            UNSG32 uCTRL1_fifo_rd_sel                          :  2;\
            UNSG32 uCTRL1_idata_ctrl                           :  2;\
            UNSG32 uCTRL1_gdcm_bypass                          :  1;\
            UNSG32 uCTRL1_gfxpl_gdcm_sel                       :  1;\
            UNSG32 uCTRL1_alphaRange_InpAlign                  :  1;\
            UNSG32 uCTRL1_alphaRange_InpBDP                    :  4;\
            UNSG32 uCTRL1_hdrLut_pdwn_regs                     :  1;\
            UNSG32 uCTRL1_hdrLut_pdlvmc_regs                   :  1;\
            UNSG32 uCTRL1_hdrLut_pdfvssm_regs                  :  1;\
            UNSG32 uCTRL1_alphadiv_bypass                      :  1;\
            UNSG32 RSVDx18_b23                                 :  9;\
          }
    union { UNSG32 u32GFX1_CTRL1;
            struct w32GFX1_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_LUT_BYPASS_en(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32GFX1_LUT_BYPASS_en(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16GFX1_LUT_BYPASS_en(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16GFX1_LUT_BYPASS_en(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32GFX1_LUT_BYPASS                             {\
            UNSG32 uLUT_BYPASS_en                              :  1;\
            UNSG32 RSVDx1C_b1                                  : 31;\
          }
    union { UNSG32 u32GFX1_LUT_BYPASS;
            struct w32GFX1_LUT_BYPASS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_CTRL2_CLUT8_pdwn_regs(r32)             _BFGET_(r32, 0, 0)
    #define   SET32GFX1_CTRL2_CLUT8_pdwn_regs(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16GFX1_CTRL2_CLUT8_pdwn_regs(r16)             _BFGET_(r16, 0, 0)
    #define   SET16GFX1_CTRL2_CLUT8_pdwn_regs(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32GFX1_CTRL2_CLUT8_pdlvmc_regs(r32)           _BFGET_(r32, 1, 1)
    #define   SET32GFX1_CTRL2_CLUT8_pdlvmc_regs(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16GFX1_CTRL2_CLUT8_pdlvmc_regs(r16)           _BFGET_(r16, 1, 1)
    #define   SET16GFX1_CTRL2_CLUT8_pdlvmc_regs(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32GFX1_CTRL2_CLUT8_pdfvssm_regs(r32)          _BFGET_(r32, 2, 2)
    #define   SET32GFX1_CTRL2_CLUT8_pdfvssm_regs(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16GFX1_CTRL2_CLUT8_pdfvssm_regs(r16)          _BFGET_(r16, 2, 2)
    #define   SET16GFX1_CTRL2_CLUT8_pdfvssm_regs(r16,v)        _BFSET_(r16, 2, 2,v)

    #define     w32GFX1_CTRL2                                  {\
            UNSG32 uCTRL2_CLUT8_pdwn_regs                      :  1;\
            UNSG32 uCTRL2_CLUT8_pdlvmc_regs                    :  1;\
            UNSG32 uCTRL2_CLUT8_pdfvssm_regs                   :  1;\
            UNSG32 RSVDx20_b3                                  : 29;\
          }
    union { UNSG32 u32GFX1_CTRL2;
            struct w32GFX1_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_STATUS_gfx1Tg(r32)                     _BFGET_(r32,15, 0)
    #define   SET32GFX1_STATUS_gfx1Tg(r32,v)                   _BFSET_(r32,15, 0,v)
    #define   GET16GFX1_STATUS_gfx1Tg(r16)                     _BFGET_(r16,15, 0)
    #define   SET16GFX1_STATUS_gfx1Tg(r16,v)                   _BFSET_(r16,15, 0,v)

    #define     w32GFX1_STATUS                                 {\
            UNSG32 uSTATUS_gfx1Tg                              : 16;\
            UNSG32 RSVDx24_b16                                 : 16;\
          }
    union { UNSG32 u32GFX1_STATUS;
            struct w32GFX1_STATUS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_GITM_CTRL_start(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32GFX1_GITM_CTRL_start(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16GFX1_GITM_CTRL_start(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16GFX1_GITM_CTRL_start(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define     w32GFX1_GITM_CTRL                              {\
            UNSG32 uGITM_CTRL_start                            :  1;\
            UNSG32 RSVDx28_b1                                  : 31;\
          }
    union { UNSG32 u32GFX1_GITM_CTRL;
            struct w32GFX1_GITM_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GFX1_GDCM_CTRL_start(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32GFX1_GDCM_CTRL_start(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16GFX1_GDCM_CTRL_start(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16GFX1_GDCM_CTRL_start(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define     w32GFX1_GDCM_CTRL                              {\
            UNSG32 uGDCM_CTRL_start                            :  1;\
            UNSG32 RSVDx2C_b1                                  : 31;\
          }
    union { UNSG32 u32GFX1_GDCM_CTRL;
            struct w32GFX1_GDCM_CTRL;
          };
    ///////////////////////////////////////////////////////////
              SIE_BITMAP40                                     ie_BITMAP40;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx50                                     [944];
    ///////////////////////////////////////////////////////////
              SIE_CLUT                                         ie_LUT;
    ///////////////////////////////////////////////////////////
              SIE_TG                                           ie_gfx1Tg;
    ///////////////////////////////////////////////////////////
              SIE_ALPHADIV                                     ie_ALPHADIV;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_CLUT;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx848                                    [952];
    ///////////////////////////////////////////////////////////
    } SIE_GFX1;

    typedef union  T32GFX1_CTRL
          { UNSG32 u32;
            struct w32GFX1_CTRL;
                 } T32GFX1_CTRL;
    typedef union  T32GFX1_SCL_BYPASS
          { UNSG32 u32;
            struct w32GFX1_SCL_BYPASS;
                 } T32GFX1_SCL_BYPASS;
    typedef union  T32GFX1_gfxScl
          { UNSG32 u32;
            struct w32GFX1_gfxScl;
                 } T32GFX1_gfxScl;
    typedef union  T32GFX1_Rd_word0
          { UNSG32 u32;
            struct w32GFX1_Rd_word0;
                 } T32GFX1_Rd_word0;
    typedef union  T32GFX1_gfx_pix
          { UNSG32 u32;
            struct w32GFX1_gfx_pix;
                 } T32GFX1_gfx_pix;
    typedef union  T32GFX1_INVSCAN
          { UNSG32 u32;
            struct w32GFX1_INVSCAN;
                 } T32GFX1_INVSCAN;
    typedef union  T32GFX1_CTRL1
          { UNSG32 u32;
            struct w32GFX1_CTRL1;
                 } T32GFX1_CTRL1;
    typedef union  T32GFX1_LUT_BYPASS
          { UNSG32 u32;
            struct w32GFX1_LUT_BYPASS;
                 } T32GFX1_LUT_BYPASS;
    typedef union  T32GFX1_CTRL2
          { UNSG32 u32;
            struct w32GFX1_CTRL2;
                 } T32GFX1_CTRL2;
    typedef union  T32GFX1_STATUS
          { UNSG32 u32;
            struct w32GFX1_STATUS;
                 } T32GFX1_STATUS;
    typedef union  T32GFX1_GITM_CTRL
          { UNSG32 u32;
            struct w32GFX1_GITM_CTRL;
                 } T32GFX1_GITM_CTRL;
    typedef union  T32GFX1_GDCM_CTRL
          { UNSG32 u32;
            struct w32GFX1_GDCM_CTRL;
                 } T32GFX1_GDCM_CTRL;
    ///////////////////////////////////////////////////////////

    typedef union  TGFX1_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_CTRL;
                   };
                 } TGFX1_CTRL;
    typedef union  TGFX1_SCL_BYPASS
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_SCL_BYPASS;
                   };
                 } TGFX1_SCL_BYPASS;
    typedef union  TGFX1_gfxScl
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_gfxScl;
                   };
                 } TGFX1_gfxScl;
    typedef union  TGFX1_Rd_word0
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_Rd_word0;
                   };
                 } TGFX1_Rd_word0;
    typedef union  TGFX1_gfx_pix
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_gfx_pix;
                   };
                 } TGFX1_gfx_pix;
    typedef union  TGFX1_INVSCAN
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_INVSCAN;
                   };
                 } TGFX1_INVSCAN;
    typedef union  TGFX1_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_CTRL1;
                   };
                 } TGFX1_CTRL1;
    typedef union  TGFX1_LUT_BYPASS
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_LUT_BYPASS;
                   };
                 } TGFX1_LUT_BYPASS;
    typedef union  TGFX1_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_CTRL2;
                   };
                 } TGFX1_CTRL2;
    typedef union  TGFX1_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_STATUS;
                   };
                 } TGFX1_STATUS;
    typedef union  TGFX1_GITM_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_GITM_CTRL;
                   };
                 } TGFX1_GITM_CTRL;
    typedef union  TGFX1_GDCM_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32GFX1_GDCM_CTRL;
                   };
                 } TGFX1_GDCM_CTRL;

    ///////////////////////////////////////////////////////////
     SIGN32 GFX1_drvrd(SIE_GFX1 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 GFX1_drvwr(SIE_GFX1 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void GFX1_reset(SIE_GFX1 *p);
     SIGN32 GFX1_cmp  (SIE_GFX1 *p, SIE_GFX1 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define GFX1_check(p,pie,pfx,hLOG) GFX1_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define GFX1_print(p,    pfx,hLOG) GFX1_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: GFX1
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE UPS_420_422             biu              (4,4)
///     ###
///     * Register specification of interface UPS_420_422
///     * Defines the size of the UPS_420_422
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * 1'd1 : enable ups420_422
///                                    * 1'd0 : bypass
///                                    ###
///               %unsigned 1  msbswap                   0x0
///                                    ###
///                                    * Not valid.
///                                    * 1'd0 : it assume first pixel consist of msb 5bit of chroma(C) and second pixel have lsb 5bit of chroma(C).
///                                    * 1'd1 : vice versa(means it assume first pixel consist of lsb 5bit of Chroma and second pixel have msb 5bit of chroma.
///                                    ###
///               %unsigned 1  cswap_regs                0x0
///                                    ###
///                                    * if enable, swaps output choma
///                                    * As per algo engineer, cswap must be 0 if vfilter = 1.
///                                    ###
///               %unsigned 1  yshift_regs               0x0
///                                    ###
///                                    * Advances output luma by 1 clock.
///                                    ###
///               %unsigned 1  cshift_regs               0x0
///                                    ###
///                                    * Delayed output chroma by 1 clock
///                                    ###
///               %unsigned 1  sp_en                     0x0
///                                    ###
///                                    * if enable(=1), it assumes input data format is in semi-planer format.
///                                    * Configuration enable=1 & sp_en=0 is not suporrted.
///                                    ###
///               %unsigned 1  dat8_en                   0x0
///                                    ###
///                                    * Unused.
///                                    * this should be enable if input 420 data is converted from 8bit to 10bit by LSB append with zero(Only for HDMI pack). This should be zero for 8bit design.
///                                    ###
///               %unsigned 1  sft_rst                   0x0
///                                    ###
///                                    * This is active high clear or soft reset bit. When it is high, UPS_420_422 reset to initial state.
///                                    ###
///               %unsigned 1  use_blank                 0x0
///                                    ###
///                                    * 0 : Use boundary pixel repetition for boundary interpolation
///                                    * 1 : Use blank pixel programmed using yblank_regs and cblank_regs for boundary interpolation.
///                                    ###
///               %unsigned 1  opt_malloc                0x0
///                                    ###
///                                    * 1: Optimizes tile segment memory allocations for high horizontal resolutions.
///                                    * 0: No memory allocation optimization.
///                                    * Must be set 1 if tile_en=1, and if HRES extends into additional marginal HRES supported by the module. Else must be 0.
///                                    * For example, for any operating mode, if the maximum HRES supported is '4K(i.e., 3840) + 126', then opt_malloc must be set 1 for the particular operating mode if HRES >= 3840. If for any operating mode, if the maximum supported is '2K(i.e., 1920) + 126', then opt_malloc must be set 1 for particular operating mode if HRES >= 1920.
///                                    ###
///               %unsigned 9  rsv0                      0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 9  rsv1                      0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 1  vfilter                   0x0
///                                    ###
///                                    * Controls vertical 2 tap filtering
///                                    * 1: Enables
///                                    * 0: Disables
///                                    * Note: vfilter=1 and luma_rpt=1 is an invalid combination
///                                    ###
///               %unsigned 1  out422                    0x1
///                                    ###
///                                    * To be programmed only for tiled SP input and if hardware configuration has 420-422 filter. Otherwise, must be 1.
///                                    * 1: output format is YUV422.
///                                    * 0: output format is YUV420 SP.
///                                    ###
///               %unsigned 1  crop_blank                0x1
///                                    ###
///                                    * Must be '1' if 'hardware configration doesn't have 420-422 filter' or if 'out422=0'.
///                                    * 1: pixels to be cropped are replaced with blank value before 420-422 filtering. 420-422 filter boundary includes these blank pixels (existing implementation).
///                                    * 0: 420-422 filtering boundary excludes these croppped pixels (newly added support).
///                                    ###
///               %unsigned 1  luma_rpt                  0x0
///                                    ###
///                                    * Repetiion in 420 output.
///                                    * Valid only if out422 is 0.
///                                    * 0: Repeats only chroma line.
///                                    * 1: Repeats both chroma and luma lines.
///                                    * Hres,vres,hblanking should be programmed as double(el_tg) in luma repeat case
///                                    * Refer “ups_420_422_design.pdf” for illustration.
///                                    ###
///     @ 0x00004 CFG1                 (P)
///               %unsigned 13 ups_c0                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 0 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c1                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 1 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 13 ups_c2                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 2 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c3                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 3 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %unsigned 13 ups_c4                    0x400
///                                    ###
///                                    * 13 bit upsampler coefficient 4 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c5                    0x800
///                                    ###
///                                    * 13 bit upsampler coefficient 5 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %unsigned 13 ups_c6                    0x400
///                                    ###
///                                    * 13 bit upsampler coefficient 6 in 2s complement format.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 13 hres_regs                 0xF00
///                                    ###
///                                    * this should be programmed with active pixel count in a line.
///                                    * If luma_rpt=1, each new input pixel data arrives once every 2 clocks. But the hres_regs should still be programmed to # of pixels and not to # of clocks within input active line duration.
///                                    * Eg: if luma_rpt=1 and hres_regs=0d80, input horizontal actrive duration is 2*80 = 0d160 clocks.
///                                    ###
///               %unsigned 13 htot_regs                 0x1130
///                                    ###
///                                    * this should be programmed with total pixel clocks (not pixel count) in a line duration.
///                                    * Eg:
///                                    * Eg: if luma_rpt=1, each new input pixel data arrives once every 2 clocks . So if hres_regs=0d80 and input hblank=0d50 clocks, htot_regs = 2*80 + 50 = 0d210.
///                                    ###
///               %unsigned 1  auto_pixcnt               0x0
///                                    ###
///                                    * 0: hres_regs and htot_regs will be used to generate hde timing and delay.
///                                    * 1: automatically count hres and htotal pixel count. This will require hde is blanking region.
///                                    ###
///               %unsigned 1  power_redn                0x0
///                                    ###
///                                    * 0: Disables Power Optimization Logic
///                                    * 1: Enables Power Optimization Logic
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 8  Rsv0                      0x0
///                                    ###
///                                    * Reserved bits.
///                                    ###
///               %unsigned 6  top_crop                  0x0
///                                    ###
///                                    * Crop for top lines.(It should be multiple of 2)
///                                    * If luma_rpt=1, if top_crop=p, to account for line repetition, # of lines cropped on top is 2p.
///                                    ###
///               %unsigned 6  bot_crop                  0x0
///                                    ###
///                                    * Crop for bot lines.(It should be multiple of 2)
///                                    * If luma_rpt=1, if bot_crop=p, to account for line repetition, # of lines cropped at bottom is 2p.
///                                    ###
///               %unsigned 6  left_crop                 0x0
///                                    ###
///                                    * Crop for left pixels.
///                                    * If luma_rpt=1, if left_crop=p, to account for pixel repetition, # of lines cropped at left is 2p.
///                                    ###
///               %unsigned 6  right_crop                0x0
///                                    ###
///                                    * Crop for right pixels.
///                                    * If luma_rpt=1, if right_crop=p, to account for pixel repetition, # of lines cropped at right is 2p.
///                                    ###
///     @ 0x0001C CFG7                 (P)
///               %unsigned 13 vres_regs                 0x870
///                                    ###
///                                    * Input image vertical resolution
///                                    * If luma_rpt=1, each new luma pixel line arrives once every 2 line period. But vres_regs should still be programmed to # of actual valid image lines .
///                                    * Eg: if luma_rpt=1 and vres_regs=0d80, input active video frame contains 160 horizontal line durations.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00020 CFG8                 (P)
///               %unsigned 1  pdwn_regs                 0x0
///                                    ###
///                                    * Wired to internal SRAMs' pwdn port.
///                                    ###
///               %unsigned 1  pdlvmc_regs               0x0
///                                    ###
///                                    * Wired to internal SRAMs' pdlvmc port.
///                                    ###
///               %unsigned 1  pdfvssm_regs              0x0
///                                    ###
///                                    * Wired to internal SRAMs' pdfvssm ports.
///                                    ###
///               %unsigned 2  dpwr_regs                 0x3
///                                    ###
///                                    * Internal Dynamic power control.
///                                    * Bit[1] -cg_en: controls clock to internal logic.
///                                    * 1: enables internal dynamic clock gating.
///                                    * 0: disables internal dynamic clock gating.
///                                    * Bit[0] - ctrl_cen: controls CEN to SRAMs
///                                    * 1: enables SRAMs dynamically.
///                                    * 0: SRAMs always enabled.
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00024 CFG9                 (P)
///               %unsigned 12 yblank_regs               0x0
///                                    ###
///                                    * luma blank value for initial and end of line pixel taps. For 10 bit design, MS 10 bits are used.
///                                    ###
///               %unsigned 12 cblank_regs               0x800
///                                    ###
///                                    * chroma blank value for initial and end of line pixel taps. For 10 bit design, MS 10 bits are used.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00028 CFG10                (P)
///               %unsigned 1  tile_en                   0x0
///                                    ###
///                                    * 1 : Module accept data is in tile format.
///                                    * 0 : Else data input to the module is in SP format or normal fomat(HDMI pack). This bit will having highest priority.
///                                    ###
///               %unsigned 3  rsv0                      0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 8  tile_depth                0x4
///                                    ###
///                                    * number of lines in tile.
///                                    * Supported values: 0d3, 0d4,0d6, 0d8 (provided the value is within the range of hardware supported max tile depth)
///                                    ###
///               %unsigned 8  tile_width                0x8
///                                    ###
///                                    * number of pixel of each line within tile.
///                                    * Supported values: d4, d8, d6, d12, d16.
///                                    * Minimum value should be 2
///                                    * End of UPS_420_422 register group
///                                    ###
///               %%        12         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      44B, bits:     245b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_UPS_420_422
#define h_UPS_420_422 (){}

    #define     RA_UPS_420_422_CFG0                            0x0000

    #define     BA_UPS_420_422_CFG0_enable                     0x0000
    #define     B16UPS_420_422_CFG0_enable                     0x0000
    #define   LSb32UPS_420_422_CFG0_enable                        0
    #define   LSb16UPS_420_422_CFG0_enable                        0
    #define       bUPS_420_422_CFG0_enable                     1
    #define   MSK32UPS_420_422_CFG0_enable                        0x00000001

    #define     BA_UPS_420_422_CFG0_msbswap                    0x0000
    #define     B16UPS_420_422_CFG0_msbswap                    0x0000
    #define   LSb32UPS_420_422_CFG0_msbswap                       1
    #define   LSb16UPS_420_422_CFG0_msbswap                       1
    #define       bUPS_420_422_CFG0_msbswap                    1
    #define   MSK32UPS_420_422_CFG0_msbswap                       0x00000002

    #define     BA_UPS_420_422_CFG0_cswap_regs                 0x0000
    #define     B16UPS_420_422_CFG0_cswap_regs                 0x0000
    #define   LSb32UPS_420_422_CFG0_cswap_regs                    2
    #define   LSb16UPS_420_422_CFG0_cswap_regs                    2
    #define       bUPS_420_422_CFG0_cswap_regs                 1
    #define   MSK32UPS_420_422_CFG0_cswap_regs                    0x00000004

    #define     BA_UPS_420_422_CFG0_yshift_regs                0x0000
    #define     B16UPS_420_422_CFG0_yshift_regs                0x0000
    #define   LSb32UPS_420_422_CFG0_yshift_regs                   3
    #define   LSb16UPS_420_422_CFG0_yshift_regs                   3
    #define       bUPS_420_422_CFG0_yshift_regs                1
    #define   MSK32UPS_420_422_CFG0_yshift_regs                   0x00000008

    #define     BA_UPS_420_422_CFG0_cshift_regs                0x0000
    #define     B16UPS_420_422_CFG0_cshift_regs                0x0000
    #define   LSb32UPS_420_422_CFG0_cshift_regs                   4
    #define   LSb16UPS_420_422_CFG0_cshift_regs                   4
    #define       bUPS_420_422_CFG0_cshift_regs                1
    #define   MSK32UPS_420_422_CFG0_cshift_regs                   0x00000010

    #define     BA_UPS_420_422_CFG0_sp_en                      0x0000
    #define     B16UPS_420_422_CFG0_sp_en                      0x0000
    #define   LSb32UPS_420_422_CFG0_sp_en                         5
    #define   LSb16UPS_420_422_CFG0_sp_en                         5
    #define       bUPS_420_422_CFG0_sp_en                      1
    #define   MSK32UPS_420_422_CFG0_sp_en                         0x00000020

    #define     BA_UPS_420_422_CFG0_dat8_en                    0x0000
    #define     B16UPS_420_422_CFG0_dat8_en                    0x0000
    #define   LSb32UPS_420_422_CFG0_dat8_en                       6
    #define   LSb16UPS_420_422_CFG0_dat8_en                       6
    #define       bUPS_420_422_CFG0_dat8_en                    1
    #define   MSK32UPS_420_422_CFG0_dat8_en                       0x00000040

    #define     BA_UPS_420_422_CFG0_sft_rst                    0x0000
    #define     B16UPS_420_422_CFG0_sft_rst                    0x0000
    #define   LSb32UPS_420_422_CFG0_sft_rst                       7
    #define   LSb16UPS_420_422_CFG0_sft_rst                       7
    #define       bUPS_420_422_CFG0_sft_rst                    1
    #define   MSK32UPS_420_422_CFG0_sft_rst                       0x00000080

    #define     BA_UPS_420_422_CFG0_use_blank                  0x0001
    #define     B16UPS_420_422_CFG0_use_blank                  0x0000
    #define   LSb32UPS_420_422_CFG0_use_blank                     8
    #define   LSb16UPS_420_422_CFG0_use_blank                     8
    #define       bUPS_420_422_CFG0_use_blank                  1
    #define   MSK32UPS_420_422_CFG0_use_blank                     0x00000100

    #define     BA_UPS_420_422_CFG0_opt_malloc                 0x0001
    #define     B16UPS_420_422_CFG0_opt_malloc                 0x0000
    #define   LSb32UPS_420_422_CFG0_opt_malloc                    9
    #define   LSb16UPS_420_422_CFG0_opt_malloc                    9
    #define       bUPS_420_422_CFG0_opt_malloc                 1
    #define   MSK32UPS_420_422_CFG0_opt_malloc                    0x00000200

    #define     BA_UPS_420_422_CFG0_rsv0                       0x0001
    #define     B16UPS_420_422_CFG0_rsv0                       0x0000
    #define   LSb32UPS_420_422_CFG0_rsv0                          10
    #define   LSb16UPS_420_422_CFG0_rsv0                          10
    #define       bUPS_420_422_CFG0_rsv0                       9
    #define   MSK32UPS_420_422_CFG0_rsv0                          0x0007FC00

    #define     BA_UPS_420_422_CFG0_rsv1                       0x0002
    #define     B16UPS_420_422_CFG0_rsv1                       0x0002
    #define   LSb32UPS_420_422_CFG0_rsv1                          19
    #define   LSb16UPS_420_422_CFG0_rsv1                          3
    #define       bUPS_420_422_CFG0_rsv1                       9
    #define   MSK32UPS_420_422_CFG0_rsv1                          0x0FF80000

    #define     BA_UPS_420_422_CFG0_vfilter                    0x0003
    #define     B16UPS_420_422_CFG0_vfilter                    0x0002
    #define   LSb32UPS_420_422_CFG0_vfilter                       28
    #define   LSb16UPS_420_422_CFG0_vfilter                       12
    #define       bUPS_420_422_CFG0_vfilter                    1
    #define   MSK32UPS_420_422_CFG0_vfilter                       0x10000000

    #define     BA_UPS_420_422_CFG0_out422                     0x0003
    #define     B16UPS_420_422_CFG0_out422                     0x0002
    #define   LSb32UPS_420_422_CFG0_out422                        29
    #define   LSb16UPS_420_422_CFG0_out422                        13
    #define       bUPS_420_422_CFG0_out422                     1
    #define   MSK32UPS_420_422_CFG0_out422                        0x20000000

    #define     BA_UPS_420_422_CFG0_crop_blank                 0x0003
    #define     B16UPS_420_422_CFG0_crop_blank                 0x0002
    #define   LSb32UPS_420_422_CFG0_crop_blank                    30
    #define   LSb16UPS_420_422_CFG0_crop_blank                    14
    #define       bUPS_420_422_CFG0_crop_blank                 1
    #define   MSK32UPS_420_422_CFG0_crop_blank                    0x40000000

    #define     BA_UPS_420_422_CFG0_luma_rpt                   0x0003
    #define     B16UPS_420_422_CFG0_luma_rpt                   0x0002
    #define   LSb32UPS_420_422_CFG0_luma_rpt                      31
    #define   LSb16UPS_420_422_CFG0_luma_rpt                      15
    #define       bUPS_420_422_CFG0_luma_rpt                   1
    #define   MSK32UPS_420_422_CFG0_luma_rpt                      0x80000000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG1                            0x0004

    #define     BA_UPS_420_422_CFG1_ups_c0                     0x0004
    #define     B16UPS_420_422_CFG1_ups_c0                     0x0004
    #define   LSb32UPS_420_422_CFG1_ups_c0                        0
    #define   LSb16UPS_420_422_CFG1_ups_c0                        0
    #define       bUPS_420_422_CFG1_ups_c0                     13
    #define   MSK32UPS_420_422_CFG1_ups_c0                        0x00001FFF

    #define     BA_UPS_420_422_CFG1_ups_c1                     0x0005
    #define     B16UPS_420_422_CFG1_ups_c1                     0x0004
    #define   LSb32UPS_420_422_CFG1_ups_c1                        13
    #define   LSb16UPS_420_422_CFG1_ups_c1                        13
    #define       bUPS_420_422_CFG1_ups_c1                     13
    #define   MSK32UPS_420_422_CFG1_ups_c1                        0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG2                            0x0008

    #define     BA_UPS_420_422_CFG2_ups_c2                     0x0008
    #define     B16UPS_420_422_CFG2_ups_c2                     0x0008
    #define   LSb32UPS_420_422_CFG2_ups_c2                        0
    #define   LSb16UPS_420_422_CFG2_ups_c2                        0
    #define       bUPS_420_422_CFG2_ups_c2                     13
    #define   MSK32UPS_420_422_CFG2_ups_c2                        0x00001FFF

    #define     BA_UPS_420_422_CFG2_ups_c3                     0x0009
    #define     B16UPS_420_422_CFG2_ups_c3                     0x0008
    #define   LSb32UPS_420_422_CFG2_ups_c3                        13
    #define   LSb16UPS_420_422_CFG2_ups_c3                        13
    #define       bUPS_420_422_CFG2_ups_c3                     13
    #define   MSK32UPS_420_422_CFG2_ups_c3                        0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG3                            0x000C

    #define     BA_UPS_420_422_CFG3_ups_c4                     0x000C
    #define     B16UPS_420_422_CFG3_ups_c4                     0x000C
    #define   LSb32UPS_420_422_CFG3_ups_c4                        0
    #define   LSb16UPS_420_422_CFG3_ups_c4                        0
    #define       bUPS_420_422_CFG3_ups_c4                     13
    #define   MSK32UPS_420_422_CFG3_ups_c4                        0x00001FFF

    #define     BA_UPS_420_422_CFG3_ups_c5                     0x000D
    #define     B16UPS_420_422_CFG3_ups_c5                     0x000C
    #define   LSb32UPS_420_422_CFG3_ups_c5                        13
    #define   LSb16UPS_420_422_CFG3_ups_c5                        13
    #define       bUPS_420_422_CFG3_ups_c5                     13
    #define   MSK32UPS_420_422_CFG3_ups_c5                        0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG4                            0x0010

    #define     BA_UPS_420_422_CFG4_ups_c6                     0x0010
    #define     B16UPS_420_422_CFG4_ups_c6                     0x0010
    #define   LSb32UPS_420_422_CFG4_ups_c6                        0
    #define   LSb16UPS_420_422_CFG4_ups_c6                        0
    #define       bUPS_420_422_CFG4_ups_c6                     13
    #define   MSK32UPS_420_422_CFG4_ups_c6                        0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG5                            0x0014

    #define     BA_UPS_420_422_CFG5_hres_regs                  0x0014
    #define     B16UPS_420_422_CFG5_hres_regs                  0x0014
    #define   LSb32UPS_420_422_CFG5_hres_regs                     0
    #define   LSb16UPS_420_422_CFG5_hres_regs                     0
    #define       bUPS_420_422_CFG5_hres_regs                  13
    #define   MSK32UPS_420_422_CFG5_hres_regs                     0x00001FFF

    #define     BA_UPS_420_422_CFG5_htot_regs                  0x0015
    #define     B16UPS_420_422_CFG5_htot_regs                  0x0014
    #define   LSb32UPS_420_422_CFG5_htot_regs                     13
    #define   LSb16UPS_420_422_CFG5_htot_regs                     13
    #define       bUPS_420_422_CFG5_htot_regs                  13
    #define   MSK32UPS_420_422_CFG5_htot_regs                     0x03FFE000

    #define     BA_UPS_420_422_CFG5_auto_pixcnt                0x0017
    #define     B16UPS_420_422_CFG5_auto_pixcnt                0x0016
    #define   LSb32UPS_420_422_CFG5_auto_pixcnt                   26
    #define   LSb16UPS_420_422_CFG5_auto_pixcnt                   10
    #define       bUPS_420_422_CFG5_auto_pixcnt                1
    #define   MSK32UPS_420_422_CFG5_auto_pixcnt                   0x04000000

    #define     BA_UPS_420_422_CFG5_power_redn                 0x0017
    #define     B16UPS_420_422_CFG5_power_redn                 0x0016
    #define   LSb32UPS_420_422_CFG5_power_redn                    27
    #define   LSb16UPS_420_422_CFG5_power_redn                    11
    #define       bUPS_420_422_CFG5_power_redn                 1
    #define   MSK32UPS_420_422_CFG5_power_redn                    0x08000000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG6                            0x0018

    #define     BA_UPS_420_422_CFG6_Rsv0                       0x0018
    #define     B16UPS_420_422_CFG6_Rsv0                       0x0018
    #define   LSb32UPS_420_422_CFG6_Rsv0                          0
    #define   LSb16UPS_420_422_CFG6_Rsv0                          0
    #define       bUPS_420_422_CFG6_Rsv0                       8
    #define   MSK32UPS_420_422_CFG6_Rsv0                          0x000000FF

    #define     BA_UPS_420_422_CFG6_top_crop                   0x0019
    #define     B16UPS_420_422_CFG6_top_crop                   0x0018
    #define   LSb32UPS_420_422_CFG6_top_crop                      8
    #define   LSb16UPS_420_422_CFG6_top_crop                      8
    #define       bUPS_420_422_CFG6_top_crop                   6
    #define   MSK32UPS_420_422_CFG6_top_crop                      0x00003F00

    #define     BA_UPS_420_422_CFG6_bot_crop                   0x0019
    #define     B16UPS_420_422_CFG6_bot_crop                   0x0018
    #define   LSb32UPS_420_422_CFG6_bot_crop                      14
    #define   LSb16UPS_420_422_CFG6_bot_crop                      14
    #define       bUPS_420_422_CFG6_bot_crop                   6
    #define   MSK32UPS_420_422_CFG6_bot_crop                      0x000FC000

    #define     BA_UPS_420_422_CFG6_left_crop                  0x001A
    #define     B16UPS_420_422_CFG6_left_crop                  0x001A
    #define   LSb32UPS_420_422_CFG6_left_crop                     20
    #define   LSb16UPS_420_422_CFG6_left_crop                     4
    #define       bUPS_420_422_CFG6_left_crop                  6
    #define   MSK32UPS_420_422_CFG6_left_crop                     0x03F00000

    #define     BA_UPS_420_422_CFG6_right_crop                 0x001B
    #define     B16UPS_420_422_CFG6_right_crop                 0x001A
    #define   LSb32UPS_420_422_CFG6_right_crop                    26
    #define   LSb16UPS_420_422_CFG6_right_crop                    10
    #define       bUPS_420_422_CFG6_right_crop                 6
    #define   MSK32UPS_420_422_CFG6_right_crop                    0xFC000000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG7                            0x001C

    #define     BA_UPS_420_422_CFG7_vres_regs                  0x001C
    #define     B16UPS_420_422_CFG7_vres_regs                  0x001C
    #define   LSb32UPS_420_422_CFG7_vres_regs                     0
    #define   LSb16UPS_420_422_CFG7_vres_regs                     0
    #define       bUPS_420_422_CFG7_vres_regs                  13
    #define   MSK32UPS_420_422_CFG7_vres_regs                     0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG8                            0x0020

    #define     BA_UPS_420_422_CFG8_pdwn_regs                  0x0020
    #define     B16UPS_420_422_CFG8_pdwn_regs                  0x0020
    #define   LSb32UPS_420_422_CFG8_pdwn_regs                     0
    #define   LSb16UPS_420_422_CFG8_pdwn_regs                     0
    #define       bUPS_420_422_CFG8_pdwn_regs                  1
    #define   MSK32UPS_420_422_CFG8_pdwn_regs                     0x00000001

    #define     BA_UPS_420_422_CFG8_pdlvmc_regs                0x0020
    #define     B16UPS_420_422_CFG8_pdlvmc_regs                0x0020
    #define   LSb32UPS_420_422_CFG8_pdlvmc_regs                   1
    #define   LSb16UPS_420_422_CFG8_pdlvmc_regs                   1
    #define       bUPS_420_422_CFG8_pdlvmc_regs                1
    #define   MSK32UPS_420_422_CFG8_pdlvmc_regs                   0x00000002

    #define     BA_UPS_420_422_CFG8_pdfvssm_regs               0x0020
    #define     B16UPS_420_422_CFG8_pdfvssm_regs               0x0020
    #define   LSb32UPS_420_422_CFG8_pdfvssm_regs                  2
    #define   LSb16UPS_420_422_CFG8_pdfvssm_regs                  2
    #define       bUPS_420_422_CFG8_pdfvssm_regs               1
    #define   MSK32UPS_420_422_CFG8_pdfvssm_regs                  0x00000004

    #define     BA_UPS_420_422_CFG8_dpwr_regs                  0x0020
    #define     B16UPS_420_422_CFG8_dpwr_regs                  0x0020
    #define   LSb32UPS_420_422_CFG8_dpwr_regs                     3
    #define   LSb16UPS_420_422_CFG8_dpwr_regs                     3
    #define       bUPS_420_422_CFG8_dpwr_regs                  2
    #define   MSK32UPS_420_422_CFG8_dpwr_regs                     0x00000018
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG9                            0x0024

    #define     BA_UPS_420_422_CFG9_yblank_regs                0x0024
    #define     B16UPS_420_422_CFG9_yblank_regs                0x0024
    #define   LSb32UPS_420_422_CFG9_yblank_regs                   0
    #define   LSb16UPS_420_422_CFG9_yblank_regs                   0
    #define       bUPS_420_422_CFG9_yblank_regs                12
    #define   MSK32UPS_420_422_CFG9_yblank_regs                   0x00000FFF

    #define     BA_UPS_420_422_CFG9_cblank_regs                0x0025
    #define     B16UPS_420_422_CFG9_cblank_regs                0x0024
    #define   LSb32UPS_420_422_CFG9_cblank_regs                   12
    #define   LSb16UPS_420_422_CFG9_cblank_regs                   12
    #define       bUPS_420_422_CFG9_cblank_regs                12
    #define   MSK32UPS_420_422_CFG9_cblank_regs                   0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_CFG10                           0x0028

    #define     BA_UPS_420_422_CFG10_tile_en                   0x0028
    #define     B16UPS_420_422_CFG10_tile_en                   0x0028
    #define   LSb32UPS_420_422_CFG10_tile_en                      0
    #define   LSb16UPS_420_422_CFG10_tile_en                      0
    #define       bUPS_420_422_CFG10_tile_en                   1
    #define   MSK32UPS_420_422_CFG10_tile_en                      0x00000001

    #define     BA_UPS_420_422_CFG10_rsv0                      0x0028
    #define     B16UPS_420_422_CFG10_rsv0                      0x0028
    #define   LSb32UPS_420_422_CFG10_rsv0                         1
    #define   LSb16UPS_420_422_CFG10_rsv0                         1
    #define       bUPS_420_422_CFG10_rsv0                      3
    #define   MSK32UPS_420_422_CFG10_rsv0                         0x0000000E

    #define     BA_UPS_420_422_CFG10_tile_depth                0x0028
    #define     B16UPS_420_422_CFG10_tile_depth                0x0028
    #define   LSb32UPS_420_422_CFG10_tile_depth                   4
    #define   LSb16UPS_420_422_CFG10_tile_depth                   4
    #define       bUPS_420_422_CFG10_tile_depth                8
    #define   MSK32UPS_420_422_CFG10_tile_depth                   0x00000FF0

    #define     BA_UPS_420_422_CFG10_tile_width                0x0029
    #define     B16UPS_420_422_CFG10_tile_width                0x0028
    #define   LSb32UPS_420_422_CFG10_tile_width                   12
    #define   LSb16UPS_420_422_CFG10_tile_width                   12
    #define       bUPS_420_422_CFG10_tile_width                8
    #define   MSK32UPS_420_422_CFG10_tile_width                   0x000FF000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_UPS_420_422 {
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG0_enable(r32)                _BFGET_(r32, 0, 0)
    #define   SET32UPS_420_422_CFG0_enable(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16UPS_420_422_CFG0_enable(r16)                _BFGET_(r16, 0, 0)
    #define   SET16UPS_420_422_CFG0_enable(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32UPS_420_422_CFG0_msbswap(r32)               _BFGET_(r32, 1, 1)
    #define   SET32UPS_420_422_CFG0_msbswap(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16UPS_420_422_CFG0_msbswap(r16)               _BFGET_(r16, 1, 1)
    #define   SET16UPS_420_422_CFG0_msbswap(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32UPS_420_422_CFG0_cswap_regs(r32)            _BFGET_(r32, 2, 2)
    #define   SET32UPS_420_422_CFG0_cswap_regs(r32,v)          _BFSET_(r32, 2, 2,v)
    #define   GET16UPS_420_422_CFG0_cswap_regs(r16)            _BFGET_(r16, 2, 2)
    #define   SET16UPS_420_422_CFG0_cswap_regs(r16,v)          _BFSET_(r16, 2, 2,v)

    #define   GET32UPS_420_422_CFG0_yshift_regs(r32)           _BFGET_(r32, 3, 3)
    #define   SET32UPS_420_422_CFG0_yshift_regs(r32,v)         _BFSET_(r32, 3, 3,v)
    #define   GET16UPS_420_422_CFG0_yshift_regs(r16)           _BFGET_(r16, 3, 3)
    #define   SET16UPS_420_422_CFG0_yshift_regs(r16,v)         _BFSET_(r16, 3, 3,v)

    #define   GET32UPS_420_422_CFG0_cshift_regs(r32)           _BFGET_(r32, 4, 4)
    #define   SET32UPS_420_422_CFG0_cshift_regs(r32,v)         _BFSET_(r32, 4, 4,v)
    #define   GET16UPS_420_422_CFG0_cshift_regs(r16)           _BFGET_(r16, 4, 4)
    #define   SET16UPS_420_422_CFG0_cshift_regs(r16,v)         _BFSET_(r16, 4, 4,v)

    #define   GET32UPS_420_422_CFG0_sp_en(r32)                 _BFGET_(r32, 5, 5)
    #define   SET32UPS_420_422_CFG0_sp_en(r32,v)               _BFSET_(r32, 5, 5,v)
    #define   GET16UPS_420_422_CFG0_sp_en(r16)                 _BFGET_(r16, 5, 5)
    #define   SET16UPS_420_422_CFG0_sp_en(r16,v)               _BFSET_(r16, 5, 5,v)

    #define   GET32UPS_420_422_CFG0_dat8_en(r32)               _BFGET_(r32, 6, 6)
    #define   SET32UPS_420_422_CFG0_dat8_en(r32,v)             _BFSET_(r32, 6, 6,v)
    #define   GET16UPS_420_422_CFG0_dat8_en(r16)               _BFGET_(r16, 6, 6)
    #define   SET16UPS_420_422_CFG0_dat8_en(r16,v)             _BFSET_(r16, 6, 6,v)

    #define   GET32UPS_420_422_CFG0_sft_rst(r32)               _BFGET_(r32, 7, 7)
    #define   SET32UPS_420_422_CFG0_sft_rst(r32,v)             _BFSET_(r32, 7, 7,v)
    #define   GET16UPS_420_422_CFG0_sft_rst(r16)               _BFGET_(r16, 7, 7)
    #define   SET16UPS_420_422_CFG0_sft_rst(r16,v)             _BFSET_(r16, 7, 7,v)

    #define   GET32UPS_420_422_CFG0_use_blank(r32)             _BFGET_(r32, 8, 8)
    #define   SET32UPS_420_422_CFG0_use_blank(r32,v)           _BFSET_(r32, 8, 8,v)
    #define   GET16UPS_420_422_CFG0_use_blank(r16)             _BFGET_(r16, 8, 8)
    #define   SET16UPS_420_422_CFG0_use_blank(r16,v)           _BFSET_(r16, 8, 8,v)

    #define   GET32UPS_420_422_CFG0_opt_malloc(r32)            _BFGET_(r32, 9, 9)
    #define   SET32UPS_420_422_CFG0_opt_malloc(r32,v)          _BFSET_(r32, 9, 9,v)
    #define   GET16UPS_420_422_CFG0_opt_malloc(r16)            _BFGET_(r16, 9, 9)
    #define   SET16UPS_420_422_CFG0_opt_malloc(r16,v)          _BFSET_(r16, 9, 9,v)

    #define   GET32UPS_420_422_CFG0_rsv0(r32)                  _BFGET_(r32,18,10)
    #define   SET32UPS_420_422_CFG0_rsv0(r32,v)                _BFSET_(r32,18,10,v)

    #define   GET32UPS_420_422_CFG0_rsv1(r32)                  _BFGET_(r32,27,19)
    #define   SET32UPS_420_422_CFG0_rsv1(r32,v)                _BFSET_(r32,27,19,v)
    #define   GET16UPS_420_422_CFG0_rsv1(r16)                  _BFGET_(r16,11, 3)
    #define   SET16UPS_420_422_CFG0_rsv1(r16,v)                _BFSET_(r16,11, 3,v)

    #define   GET32UPS_420_422_CFG0_vfilter(r32)               _BFGET_(r32,28,28)
    #define   SET32UPS_420_422_CFG0_vfilter(r32,v)             _BFSET_(r32,28,28,v)
    #define   GET16UPS_420_422_CFG0_vfilter(r16)               _BFGET_(r16,12,12)
    #define   SET16UPS_420_422_CFG0_vfilter(r16,v)             _BFSET_(r16,12,12,v)

    #define   GET32UPS_420_422_CFG0_out422(r32)                _BFGET_(r32,29,29)
    #define   SET32UPS_420_422_CFG0_out422(r32,v)              _BFSET_(r32,29,29,v)
    #define   GET16UPS_420_422_CFG0_out422(r16)                _BFGET_(r16,13,13)
    #define   SET16UPS_420_422_CFG0_out422(r16,v)              _BFSET_(r16,13,13,v)

    #define   GET32UPS_420_422_CFG0_crop_blank(r32)            _BFGET_(r32,30,30)
    #define   SET32UPS_420_422_CFG0_crop_blank(r32,v)          _BFSET_(r32,30,30,v)
    #define   GET16UPS_420_422_CFG0_crop_blank(r16)            _BFGET_(r16,14,14)
    #define   SET16UPS_420_422_CFG0_crop_blank(r16,v)          _BFSET_(r16,14,14,v)

    #define   GET32UPS_420_422_CFG0_luma_rpt(r32)              _BFGET_(r32,31,31)
    #define   SET32UPS_420_422_CFG0_luma_rpt(r32,v)            _BFSET_(r32,31,31,v)
    #define   GET16UPS_420_422_CFG0_luma_rpt(r16)              _BFGET_(r16,15,15)
    #define   SET16UPS_420_422_CFG0_luma_rpt(r16,v)            _BFSET_(r16,15,15,v)

    #define     w32UPS_420_422_CFG0                            {\
            UNSG32 uCFG0_enable                                :  1;\
            UNSG32 uCFG0_msbswap                               :  1;\
            UNSG32 uCFG0_cswap_regs                            :  1;\
            UNSG32 uCFG0_yshift_regs                           :  1;\
            UNSG32 uCFG0_cshift_regs                           :  1;\
            UNSG32 uCFG0_sp_en                                 :  1;\
            UNSG32 uCFG0_dat8_en                               :  1;\
            UNSG32 uCFG0_sft_rst                               :  1;\
            UNSG32 uCFG0_use_blank                             :  1;\
            UNSG32 uCFG0_opt_malloc                            :  1;\
            UNSG32 uCFG0_rsv0                                  :  9;\
            UNSG32 uCFG0_rsv1                                  :  9;\
            UNSG32 uCFG0_vfilter                               :  1;\
            UNSG32 uCFG0_out422                                :  1;\
            UNSG32 uCFG0_crop_blank                            :  1;\
            UNSG32 uCFG0_luma_rpt                              :  1;\
          }
    union { UNSG32 u32UPS_420_422_CFG0;
            struct w32UPS_420_422_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG1_ups_c0(r32)                _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG1_ups_c0(r32,v)              _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG1_ups_c0(r16)                _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG1_ups_c0(r16,v)              _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_CFG1_ups_c1(r32)                _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_CFG1_ups_c1(r32,v)              _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_CFG1                            {\
            UNSG32 uCFG1_ups_c0                                : 13;\
            UNSG32 uCFG1_ups_c1                                : 13;\
            UNSG32 RSVDx4_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_CFG1;
            struct w32UPS_420_422_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG2_ups_c2(r32)                _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG2_ups_c2(r32,v)              _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG2_ups_c2(r16)                _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG2_ups_c2(r16,v)              _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_CFG2_ups_c3(r32)                _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_CFG2_ups_c3(r32,v)              _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_CFG2                            {\
            UNSG32 uCFG2_ups_c2                                : 13;\
            UNSG32 uCFG2_ups_c3                                : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_CFG2;
            struct w32UPS_420_422_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG3_ups_c4(r32)                _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG3_ups_c4(r32,v)              _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG3_ups_c4(r16)                _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG3_ups_c4(r16,v)              _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_CFG3_ups_c5(r32)                _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_CFG3_ups_c5(r32,v)              _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_CFG3                            {\
            UNSG32 uCFG3_ups_c4                                : 13;\
            UNSG32 uCFG3_ups_c5                                : 13;\
            UNSG32 RSVDxC_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_CFG3;
            struct w32UPS_420_422_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG4_ups_c6(r32)                _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG4_ups_c6(r32,v)              _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG4_ups_c6(r16)                _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG4_ups_c6(r16,v)              _BFSET_(r16,12, 0,v)

    #define     w32UPS_420_422_CFG4                            {\
            UNSG32 uCFG4_ups_c6                                : 13;\
            UNSG32 RSVDx10_b13                                 : 19;\
          }
    union { UNSG32 u32UPS_420_422_CFG4;
            struct w32UPS_420_422_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG5_hres_regs(r32)             _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG5_hres_regs(r32,v)           _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG5_hres_regs(r16)             _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG5_hres_regs(r16,v)           _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_CFG5_htot_regs(r32)             _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_CFG5_htot_regs(r32,v)           _BFSET_(r32,25,13,v)

    #define   GET32UPS_420_422_CFG5_auto_pixcnt(r32)           _BFGET_(r32,26,26)
    #define   SET32UPS_420_422_CFG5_auto_pixcnt(r32,v)         _BFSET_(r32,26,26,v)
    #define   GET16UPS_420_422_CFG5_auto_pixcnt(r16)           _BFGET_(r16,10,10)
    #define   SET16UPS_420_422_CFG5_auto_pixcnt(r16,v)         _BFSET_(r16,10,10,v)

    #define   GET32UPS_420_422_CFG5_power_redn(r32)            _BFGET_(r32,27,27)
    #define   SET32UPS_420_422_CFG5_power_redn(r32,v)          _BFSET_(r32,27,27,v)
    #define   GET16UPS_420_422_CFG5_power_redn(r16)            _BFGET_(r16,11,11)
    #define   SET16UPS_420_422_CFG5_power_redn(r16,v)          _BFSET_(r16,11,11,v)

    #define     w32UPS_420_422_CFG5                            {\
            UNSG32 uCFG5_hres_regs                             : 13;\
            UNSG32 uCFG5_htot_regs                             : 13;\
            UNSG32 uCFG5_auto_pixcnt                           :  1;\
            UNSG32 uCFG5_power_redn                            :  1;\
            UNSG32 RSVDx14_b28                                 :  4;\
          }
    union { UNSG32 u32UPS_420_422_CFG5;
            struct w32UPS_420_422_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG6_Rsv0(r32)                  _BFGET_(r32, 7, 0)
    #define   SET32UPS_420_422_CFG6_Rsv0(r32,v)                _BFSET_(r32, 7, 0,v)
    #define   GET16UPS_420_422_CFG6_Rsv0(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16UPS_420_422_CFG6_Rsv0(r16,v)                _BFSET_(r16, 7, 0,v)

    #define   GET32UPS_420_422_CFG6_top_crop(r32)              _BFGET_(r32,13, 8)
    #define   SET32UPS_420_422_CFG6_top_crop(r32,v)            _BFSET_(r32,13, 8,v)
    #define   GET16UPS_420_422_CFG6_top_crop(r16)              _BFGET_(r16,13, 8)
    #define   SET16UPS_420_422_CFG6_top_crop(r16,v)            _BFSET_(r16,13, 8,v)

    #define   GET32UPS_420_422_CFG6_bot_crop(r32)              _BFGET_(r32,19,14)
    #define   SET32UPS_420_422_CFG6_bot_crop(r32,v)            _BFSET_(r32,19,14,v)

    #define   GET32UPS_420_422_CFG6_left_crop(r32)             _BFGET_(r32,25,20)
    #define   SET32UPS_420_422_CFG6_left_crop(r32,v)           _BFSET_(r32,25,20,v)
    #define   GET16UPS_420_422_CFG6_left_crop(r16)             _BFGET_(r16, 9, 4)
    #define   SET16UPS_420_422_CFG6_left_crop(r16,v)           _BFSET_(r16, 9, 4,v)

    #define   GET32UPS_420_422_CFG6_right_crop(r32)            _BFGET_(r32,31,26)
    #define   SET32UPS_420_422_CFG6_right_crop(r32,v)          _BFSET_(r32,31,26,v)
    #define   GET16UPS_420_422_CFG6_right_crop(r16)            _BFGET_(r16,15,10)
    #define   SET16UPS_420_422_CFG6_right_crop(r16,v)          _BFSET_(r16,15,10,v)

    #define     w32UPS_420_422_CFG6                            {\
            UNSG32 uCFG6_Rsv0                                  :  8;\
            UNSG32 uCFG6_top_crop                              :  6;\
            UNSG32 uCFG6_bot_crop                              :  6;\
            UNSG32 uCFG6_left_crop                             :  6;\
            UNSG32 uCFG6_right_crop                            :  6;\
          }
    union { UNSG32 u32UPS_420_422_CFG6;
            struct w32UPS_420_422_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG7_vres_regs(r32)             _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_CFG7_vres_regs(r32,v)           _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_CFG7_vres_regs(r16)             _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_CFG7_vres_regs(r16,v)           _BFSET_(r16,12, 0,v)

    #define     w32UPS_420_422_CFG7                            {\
            UNSG32 uCFG7_vres_regs                             : 13;\
            UNSG32 RSVDx1C_b13                                 : 19;\
          }
    union { UNSG32 u32UPS_420_422_CFG7;
            struct w32UPS_420_422_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG8_pdwn_regs(r32)             _BFGET_(r32, 0, 0)
    #define   SET32UPS_420_422_CFG8_pdwn_regs(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16UPS_420_422_CFG8_pdwn_regs(r16)             _BFGET_(r16, 0, 0)
    #define   SET16UPS_420_422_CFG8_pdwn_regs(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32UPS_420_422_CFG8_pdlvmc_regs(r32)           _BFGET_(r32, 1, 1)
    #define   SET32UPS_420_422_CFG8_pdlvmc_regs(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16UPS_420_422_CFG8_pdlvmc_regs(r16)           _BFGET_(r16, 1, 1)
    #define   SET16UPS_420_422_CFG8_pdlvmc_regs(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32UPS_420_422_CFG8_pdfvssm_regs(r32)          _BFGET_(r32, 2, 2)
    #define   SET32UPS_420_422_CFG8_pdfvssm_regs(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16UPS_420_422_CFG8_pdfvssm_regs(r16)          _BFGET_(r16, 2, 2)
    #define   SET16UPS_420_422_CFG8_pdfvssm_regs(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32UPS_420_422_CFG8_dpwr_regs(r32)             _BFGET_(r32, 4, 3)
    #define   SET32UPS_420_422_CFG8_dpwr_regs(r32,v)           _BFSET_(r32, 4, 3,v)
    #define   GET16UPS_420_422_CFG8_dpwr_regs(r16)             _BFGET_(r16, 4, 3)
    #define   SET16UPS_420_422_CFG8_dpwr_regs(r16,v)           _BFSET_(r16, 4, 3,v)

    #define     w32UPS_420_422_CFG8                            {\
            UNSG32 uCFG8_pdwn_regs                             :  1;\
            UNSG32 uCFG8_pdlvmc_regs                           :  1;\
            UNSG32 uCFG8_pdfvssm_regs                          :  1;\
            UNSG32 uCFG8_dpwr_regs                             :  2;\
            UNSG32 RSVDx20_b5                                  : 27;\
          }
    union { UNSG32 u32UPS_420_422_CFG8;
            struct w32UPS_420_422_CFG8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG9_yblank_regs(r32)           _BFGET_(r32,11, 0)
    #define   SET32UPS_420_422_CFG9_yblank_regs(r32,v)         _BFSET_(r32,11, 0,v)
    #define   GET16UPS_420_422_CFG9_yblank_regs(r16)           _BFGET_(r16,11, 0)
    #define   SET16UPS_420_422_CFG9_yblank_regs(r16,v)         _BFSET_(r16,11, 0,v)

    #define   GET32UPS_420_422_CFG9_cblank_regs(r32)           _BFGET_(r32,23,12)
    #define   SET32UPS_420_422_CFG9_cblank_regs(r32,v)         _BFSET_(r32,23,12,v)

    #define     w32UPS_420_422_CFG9                            {\
            UNSG32 uCFG9_yblank_regs                           : 12;\
            UNSG32 uCFG9_cblank_regs                           : 12;\
            UNSG32 RSVDx24_b24                                 :  8;\
          }
    union { UNSG32 u32UPS_420_422_CFG9;
            struct w32UPS_420_422_CFG9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_CFG10_tile_en(r32)              _BFGET_(r32, 0, 0)
    #define   SET32UPS_420_422_CFG10_tile_en(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16UPS_420_422_CFG10_tile_en(r16)              _BFGET_(r16, 0, 0)
    #define   SET16UPS_420_422_CFG10_tile_en(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32UPS_420_422_CFG10_rsv0(r32)                 _BFGET_(r32, 3, 1)
    #define   SET32UPS_420_422_CFG10_rsv0(r32,v)               _BFSET_(r32, 3, 1,v)
    #define   GET16UPS_420_422_CFG10_rsv0(r16)                 _BFGET_(r16, 3, 1)
    #define   SET16UPS_420_422_CFG10_rsv0(r16,v)               _BFSET_(r16, 3, 1,v)

    #define   GET32UPS_420_422_CFG10_tile_depth(r32)           _BFGET_(r32,11, 4)
    #define   SET32UPS_420_422_CFG10_tile_depth(r32,v)         _BFSET_(r32,11, 4,v)
    #define   GET16UPS_420_422_CFG10_tile_depth(r16)           _BFGET_(r16,11, 4)
    #define   SET16UPS_420_422_CFG10_tile_depth(r16,v)         _BFSET_(r16,11, 4,v)

    #define   GET32UPS_420_422_CFG10_tile_width(r32)           _BFGET_(r32,19,12)
    #define   SET32UPS_420_422_CFG10_tile_width(r32,v)         _BFSET_(r32,19,12,v)

    #define     w32UPS_420_422_CFG10                           {\
            UNSG32 uCFG10_tile_en                              :  1;\
            UNSG32 uCFG10_rsv0                                 :  3;\
            UNSG32 uCFG10_tile_depth                           :  8;\
            UNSG32 uCFG10_tile_width                           :  8;\
            UNSG32 RSVDx28_b20                                 : 12;\
          }
    union { UNSG32 u32UPS_420_422_CFG10;
            struct w32UPS_420_422_CFG10;
          };
    ///////////////////////////////////////////////////////////
    } SIE_UPS_420_422;

    typedef union  T32UPS_420_422_CFG0
          { UNSG32 u32;
            struct w32UPS_420_422_CFG0;
                 } T32UPS_420_422_CFG0;
    typedef union  T32UPS_420_422_CFG1
          { UNSG32 u32;
            struct w32UPS_420_422_CFG1;
                 } T32UPS_420_422_CFG1;
    typedef union  T32UPS_420_422_CFG2
          { UNSG32 u32;
            struct w32UPS_420_422_CFG2;
                 } T32UPS_420_422_CFG2;
    typedef union  T32UPS_420_422_CFG3
          { UNSG32 u32;
            struct w32UPS_420_422_CFG3;
                 } T32UPS_420_422_CFG3;
    typedef union  T32UPS_420_422_CFG4
          { UNSG32 u32;
            struct w32UPS_420_422_CFG4;
                 } T32UPS_420_422_CFG4;
    typedef union  T32UPS_420_422_CFG5
          { UNSG32 u32;
            struct w32UPS_420_422_CFG5;
                 } T32UPS_420_422_CFG5;
    typedef union  T32UPS_420_422_CFG6
          { UNSG32 u32;
            struct w32UPS_420_422_CFG6;
                 } T32UPS_420_422_CFG6;
    typedef union  T32UPS_420_422_CFG7
          { UNSG32 u32;
            struct w32UPS_420_422_CFG7;
                 } T32UPS_420_422_CFG7;
    typedef union  T32UPS_420_422_CFG8
          { UNSG32 u32;
            struct w32UPS_420_422_CFG8;
                 } T32UPS_420_422_CFG8;
    typedef union  T32UPS_420_422_CFG9
          { UNSG32 u32;
            struct w32UPS_420_422_CFG9;
                 } T32UPS_420_422_CFG9;
    typedef union  T32UPS_420_422_CFG10
          { UNSG32 u32;
            struct w32UPS_420_422_CFG10;
                 } T32UPS_420_422_CFG10;
    ///////////////////////////////////////////////////////////

    typedef union  TUPS_420_422_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG0;
                   };
                 } TUPS_420_422_CFG0;
    typedef union  TUPS_420_422_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG1;
                   };
                 } TUPS_420_422_CFG1;
    typedef union  TUPS_420_422_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG2;
                   };
                 } TUPS_420_422_CFG2;
    typedef union  TUPS_420_422_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG3;
                   };
                 } TUPS_420_422_CFG3;
    typedef union  TUPS_420_422_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG4;
                   };
                 } TUPS_420_422_CFG4;
    typedef union  TUPS_420_422_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG5;
                   };
                 } TUPS_420_422_CFG5;
    typedef union  TUPS_420_422_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG6;
                   };
                 } TUPS_420_422_CFG6;
    typedef union  TUPS_420_422_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG7;
                   };
                 } TUPS_420_422_CFG7;
    typedef union  TUPS_420_422_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG8;
                   };
                 } TUPS_420_422_CFG8;
    typedef union  TUPS_420_422_CFG9
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG9;
                   };
                 } TUPS_420_422_CFG9;
    typedef union  TUPS_420_422_CFG10
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_CFG10;
                   };
                 } TUPS_420_422_CFG10;

    ///////////////////////////////////////////////////////////
     SIGN32 UPS_420_422_drvrd(SIE_UPS_420_422 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 UPS_420_422_drvwr(SIE_UPS_420_422 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void UPS_420_422_reset(SIE_UPS_420_422 *p);
     SIGN32 UPS_420_422_cmp  (SIE_UPS_420_422 *p, SIE_UPS_420_422 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define UPS_420_422_check(p,pie,pfx,hLOG) UPS_420_422_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define UPS_420_422_print(p,    pfx,hLOG) UPS_420_422_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: UPS_420_422
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ADPSCL                  biu              (4,4)
///     ###
///     * Register specification of interface ADPSCL
///     * Defines the size of the adpscl
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 8  even                      0x80
///                                    ###
///                                    * Initial Phase of the vertical DDA counter for even field.
///                                    ###
///               %unsigned 8  odd                       0x80
///                                    ###
///                                    * Initial Phase of the vertical DDA counter for odd field.
///                                    ###
///               %unsigned 8  hinitph                   0x80
///                                    ###
///                                    * Initial Phase of the horizontal DDA counter.
///                                    ###
///               %unsigned 8  ctrl0                     0x0
///                                    ###
///                                    * [1:0]: avg4 filter select. : Choose one of four set of filter coefficients for Avg_4pix() functions.
///                                    * [2]: CSC enable : Not Used in bg4ct.
///                                    * [3]: HNL enable :
///                                    * [4]: ups enable : At the input of scaler (If UPS is part of the implementation).
///                                    * [5]: dns enable : At the output of scaler (If DNS is part of the implementation).
///                                    * [6]: dgnl_en : Enable/disable adaptive scaling, i.e., diagonal direction scaling
///                                    * [7]: split screen enable : 1: Evenly split the screen into left and right part with enable/disable adaptive scaling
///                                    ###
///     @ 0x00004 CFG1                 (P)
///               %unsigned 12 ivres                     0x1E0
///                                    ###
///                                    * Input Y resolution
///                                    ###
///               %unsigned 12 ovres                     0x1E0
///                                    ###
///                                    * Output Y resolution
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 13 ihres                     0x2D0
///                                    ###
///                                    * Input X resolution
///                                    ###
///               %unsigned 13 ohres                     0x2D0
///                                    ###
///                                    * Output X resolution
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %unsigned 25 vratio                    0x100000
///                                    ###
///                                    * Vertical DDA Increment = (Input Y resolution * 2^20)/ output Y resolution
///                                    ###
///               %unsigned 3  rsv0                      0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 1  mbp_align                 0x0
///                                    ###
///                                    * Controls 'Most bottom pixel align' mode
///                                    * Must be 0 if Vertically '1:1 or upscale'.
///                                    * 1: the most bottom pixel of input image is used to interpolate the most bottom pixel of output image.
///                                    * 0: image is processed as normal.
///                                    ###
///               %%        3          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %unsigned 25 hratio                    0x100000
///                                    ###
///                                    * Horizontal DDA Increment = (Input X resolution * 2^20)/ output X resolution
///                                    ###
///               %unsigned 3  rsv0                      0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 1  mrp_align                 0x0
///                                    ###
///                                    * Controls 'Most right pixel align' mode
///                                    * Must be 0 if Horizontally '1:1 or upscale'.
///                                    * 1: the most right pixel of input image is used to interpolate the most right pixel of output image.
///                                    * 0: image is processed as normal.
///                                    * HNL Down scaling: step size shouldn't exceed 5-bit value.
///                                    ###
///               %%        3          # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 11 memsize                   0x2CF
///                                    ###
///                                    * Last address in the circular line buffer memory
///                                    * Memory line buffer storage is 3 lines of 1920 for Offline Scaler.
///                                    * Memsize value (if max hres is 1920) : 0x23F
///                                    * Memsize value (if max hres is 3840) : 0x47F
///                                    * Memsize value (if max hres is 960+128) : 0x14A
///                                    ###
///               %unsigned 16 vwrap                     0x0
///                                    ###
///                                    * The number of scalar clocks the vertical scaling controller waits after its pipe is flushed and before issuing a line-reset signal. This reset signal used to reset the horizontal scalar following the vertical scalar and the memory read logic. If left at the default value of zero, the hardware internally takes care of the wrapback conditions. (Recommended) otherwise, for a non zero value programmed in this register, the internal calculation s in the hardware are overridden by the non zero programmed value.
///                                    ###
///               %%        5          # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 1  ups_cswap                 0x0
///                                    ###
///                                    * 0: normal scan operation
///                                    * 1: chroma value Cb and Cr are swapped when inverse scan option is enabled.
///                                    * Note: valid for all the ups inside the scaler.
///                                    ###
///               %unsigned 1  ups_cshift                0x0
///                                    ###
///                                    * 0: no delays in the chroma samples for the filter taps.
///                                    * 1: chroma samples are delayed.
///                                    * Note: valid for all the ups inside the scaler.
///                                    ###
///               %unsigned 1  ups_yshift                0x0
///                                    ###
///                                    * 0: no delays in the luma output samples.
///                                    * 1: advances luma value by one clock.
///                                    * Note: valid for all the ups inside the scaler.
///                                    ###
///               %unsigned 12 ups_yblank                0x0
///                                    ###
///                                    * Blank pixel value for luma
///                                    * Note: valid for all the ups inside the scaler.
///                                    * For 10b/8b design, only the LS 10/8 bits of the field are used.
///                                    ###
///               %unsigned 8  fstall                    0x0
///                                    ###
///                                    * fstall_th[6:0]: threshold modification value for forward stall.
///                                    * fstall[7]: Enable forward stall for scalar.
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * Forward stall MAY be disabled (if pftch=1) if
///                                    * Horizontal Up & vertical down, or
///                                    * other vertical downscale with scaling ratio AROUND less than 13%.
///                                    ###
///               %unsigned 8  bstall                    0x0
///                                    ###
///                                    * bstall_th[6:0]: threshold modification value for backward stall.
///                                    * bstall[7]: Enable backward stall for scalar.
///                                    * 0: Disable
///                                    * 1: Enable
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x0001C CFG7                 (P)
///               %unsigned 12 ups_cblank                0x200
///                                    ###
///                                    * Blank pixel value from chroma.
///                                    * Note: valid for all the ups inside the scaler.
///                                    * For 10b/8b design, only the LS 10/8 bits of the field are used.
///                                    ###
///               %unsigned 3  htap_offset               0x0
///                                    ###
///                                    * Tap offset in hscalr. Indicates change in the number of blank pixels at the beginning of the line from the normal calculations.
///                                    ###
///               %unsigned 8  vtap_offset               0x0
///                                    ###
///                                    * Vertical tap offset. Delays the start of vertical scaling of/for the odd field   by those many number of lines.
///                                    ###
///               %%        9          # Stuffing bits...
///     @ 0x00020 CFG8                 (P)
///               %unsigned 25 init_ratio                0x100000
///                                    ###
///                                    * Intial DDA increment
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00024 CFG9                 (P)
///               %unsigned 25 inc_ratio                 0x0
///                                    ###
///                                    * Increment to DDA increment
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00028 CFG10                (P)
///               %unsigned 13 nlcres                    0x0
///                                    ###
///                                    * Central undistorted   width of the output image in non linear 3 zone scaling.
///                                    * HNL Down scaling: step size shouldn't exceed 5-bit value.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x0002C CFG11                (P)
///               %unsigned 12 avg4_coeff0               0x840
///                                    ###
///                                    * Coefficient for calculating average of for pixel. Not used.
///                                    ###
///               %unsigned 12 avg4_coeff1               0x240
///                                    ###
///                                    * Coefficient for calculating average of for pixel. Not used.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00030 CFG12                (P)
///               %unsigned 12 avg4_coeff2               0x240
///                                    ###
///                                    * Coefficient for calculating average of for pixel. Not used.
///                                    ###
///               %unsigned 12 avg4_coeff3               0x840
///                                    ###
///                                    * Coefficient for calculating average of for pixel. Not used.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00034 CFG15                (P)
///               %unsigned 8  ctrl1                     0x0
///                                    ###
///                                    * [0]: sel_1D_adp: select between 1D scalar and adaptive scalar
///                                    * 0: adaptive scalar
///                                    * 1: 1D scalar
///                                    * [1]: up_down: select between up scalar or down scalar.
///                                    * 0: up scalar
///                                    * 1: down scalar
///                                    * [2]:UPS enable at the input of vscale(Used for adaptive scaler mode)
///                                    * [3]:UPS enable at the output of vscale(Used for 1D scaler mode)
///                                    * [4]:Select coefficient of UPS at the input of vscale(Used for adaptive scaler mode).
///                                    * 0 : {80, 0, -304, 0, 1248, 2048, 1248}
///                                    * 1 : {0, 0, 0, 0, 1024, 2048, 1024}
///                                    ###
///               %unsigned 5  hctrl                     0xB
///                                    ###
///                                    * Frac[3:0]: number of fractional bits in the horizontal coefficients (8-12d).
///                                    * sign[4]: stores the format of the scalar horizontal coefficients.
///                                    * 0: Unsigned 12 bit coefficients.
///                                    * 1: signed 12 bit coefficient in sign magnitude format.
///                                    ###
///               %unsigned 5  vctrl                     0xB
///                                    ###
///                                    * Frac[3:0]: number of fractional bits in the vertical coefficients (8-12d).
///                                    * sign[4]: stores the format of the scalar vertical coefficients.
///                                    * 0: Unsigned 12 bit coefficients.
///                                    * 1: signed 12 bit coefficient in sign magnitude format.
///                                    ###
///               %unsigned 4  crop                      0x0
///                                    ###
///                                    * Crops the max first 3 pixel and/or max last 3 pixel before the H-scaler (after 422->444 conversion)
///                                    * [1: 0]: Crop control for first pixels.
///                                    * 00 : No Cropping.
///                                    * 01 : first 1 pixel crop.
///                                    * 10 : first 2 pixel crop.
///                                    * 11 : first 3 pixel crop.
///                                    * [3: 2]: Crop control for last pixels.
///                                    * 00 : No Cropping.
///                                    * 01 : Last 1 pixel crop.
///                                    * 10 : Last 2 pixel crop.
///                                    * 11 : Last 3 pixel crop.
///                                    ###
///               %unsigned 1  hscl11                    0x0
///                                    ###
///                                    * 1: overwrites HLUT coefficients with that of 1:1 case (In particular, 1:1 case, where the horizontal scaling filter unalters the pixel value).
///                                    * 0: no HLUT coefficient overwriting.
///                                    * So if no horizontal scaling and hscale filter is expected to unalter the pixel value, this bit can be enabled and then programming of HLUT coefficients can be skipped.
///                                    * Other Requirements:
///                                    * sel_1D_adp=1 ie., select 1D scaler.
///                                    * 'hctrl' field has to be programmed with '1: signed 12 bit coefficient in sign magnitude format'.
///                                    ###
///               %unsigned 1  vscl11                    0x0
///                                    ###
///                                    * 1: overwrites VLUT coefficients with that of 1:1 case (In particular, 1:1 case, where the horizontal scaling filter unalters the pixel value).
///                                    * 0: no VLUT coefficient overwriting.
///                                    * So if no vertical scaling and vscale filter is expected to unalter the pixel value, this bit can be enabled and then programming of VLUT coefficients can be skipped.
///                                    * Other Requirements:
///                                    * sel_1D_adp=1 i.e., select 1D scaler.
///                                    * 'vctrl' field has to be programmed with '1: signed 12 bit coefficient in sign magnitude format'
///                                    ###
///               %unsigned 1  bypass                    0x0
///                                    ###
///                                    * Only valid if the scaler supports YUV422 i/p to YUV444 o/p. Else to be programmed 0.
///                                    * 1: bypass everything except for UPS422-444 at the input of scaler.
///                                    * 0: no-bypass
///                                    * For the UPS only bypass operation,
///                                    * UPS at the input of scaler should be enabled,
///                                    * the UPS related registers should be programmed,
///                                    * I/O resolution registers should be prorammed.
///                                    * All the ADPSCL_FRC related registers should be programmed (dly_lrst_de and dly_de_lrst though may be programmed to minimal value).
///                                    ###
///               %unsigned 1  frndsel                   0x0
///                                    ###
///                                    * Controls flagging of frame end i.e., frnd=1.
///                                    * Makes sure that frame output to downstream completes and input frame read is completed from upstream.
///                                    * 1: for downscale case with Vscale at first position .
///                                    * 0: for all other cases(default).
///                                    * Note: frnd flagging is not available if bypass=1 (provided bypass mode is valid), as during bypass mode, none of the non- UPS422-444 logic is functional.
///                                    ###
///               %unsigned 1  hvdcp                     0x0
///                                    ###
///                                    * HSCALE-VSCALE de-coupling selection.
///                                    * =0 disables decoupling.
///                                    * =1 enables decoupling.
///                                    * Enabling decoupling improves HSCALE's request valid mechanism, and allows to interchange H-V scaler's position.
///                                    * Can be enabled for all H-downscale.
///                                    * Can be enabled for H-upscale cases only if ctrl1 register's field up_down =1.
///                                    * frc's dly_de_lrst may be required to re-adjust when hvdcp=1 and when up_down =1. So it is recommended to enable frc's auto_lrst for that combination.
///                                    * For more info, refer to IP design doc.
///                                    ###
///               %unsigned 1  pa_impv_en                0x0
///                                    ###
///                                    * PA based improved RTL logic selection
///                                    * =0 disables PA based improved RTL logic
///                                    * =1 enables PA based improved RTL logic(default)
///                                    ###
///               %unsigned 4  mask_hvswap_en            0x0
///                                    ###
///                                    * [0] : Frame end signal generation.
///                                    * 0 : Enhanced (default).
///                                    * 1 : basic.
///                                    * [1] : scaler input data control.
///                                    * 0 : for HVSWAP OFF(default).
///                                    * 1 : for HVSWAP ON.
///                                    * [3:2] : Reserved.
///                                    ###
///     @ 0x00038 CFG16                (P)
///               %unsigned 1  en_n                      0x0
///                                    ###
///                                    * Enable n lines control logic for scaler.
///                                    ###
///               %unsigned 1  xbstall_en                0x0
///                                    ###
///                                    * It need to be enable to delay the writing to line buffer to support n lines for upscale.
///                                    ###
///               %unsigned 14 xbstall_dly               0x0
///                                    ###
///                                    * xbstall_dly[13] : Sign of delay.
///                                    * 0 : Delay = ohres - (ihres +xbstall_dly[12:0]).
///                                    * 1 : Delay = ohres - (ihres -xbstall_dly[12:0]).
///                                    ###
///               %unsigned 8  ovf_margin                0x0
///                                    ###
///                                    * Programmable margin below fifo_depth, to prevent scaler getting internal overflow. Once the scaler memory content hits the threshold decided by the margin, upstream data flow is stalled irrespective of whether backward stall is enabled or not.
///                                    * Higher the value, more is the margin
///                                    * 0: if pftch=0.
///                                    * Currently, a value of of 0x0A suffices for all V downscale cases.
///                                    ###
///               %unsigned 8  udf_margin                0x0
///                                    ###
///                                    * Programmable margin over minimum data required to start downstream data, to prevent scaler getting internal underflow. Once the scaler memory content hits threshold decided by the margin, downstream data flow is stalled irrespective of whether forward stall is enabled or not.
///                                    * Higher the value, more is the margin
///                                    * 0: if pftch=0.
///                                    * Currently, a value of of 0x14 suffices for all V downscale cases.
///                                    ###
///     @ 0x0003C CFG17                (P)
///               %unsigned 10 lsize                     0xC0
///                                    ###
///                                    * It is number of address needed to fit a line in line memory.
///                                    * For Adaptive scaler
///                                    * Lsize = ihres/10 + (ihres%10?1:0)
///                                    * For 1D scaler
///                                    * HVSWAP OFF:
///                                    * Lsize = min(ihres,ohres)/10 + (min(ihres,ohres)%10?1:0)
///                                    * HVSWAP ON:
///                                    * Lsize= max(ihres,ohres)/10 + (max(ihres,ohres)%10?1:0)
///                                    ###
///               %unsigned 10 lsize_A                   0xC0
///                                    ###
///                                    * It is number of address needed to fit a line in line memory. This is for alpha channel. Not needed for bg4ct.
///                                    * For Adaptive scaler
///                                    * Lsize = ihres/10 + (ihres%10?1:0)
///                                    * For 1D scaler
///                                    * Lsize = min(ihres,ohres)/10 + (min(ihres,ohres)%10?1:0)
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x00040 CFG18                (P)
///               %unsigned 1  fifo_mode                 0x0
///                                    ###
///                                    * Can optionally be set only for 'horizontal-only upsale mode', 'horizontal-only downscale mode' and 'bypass (no scaling mode)', where line buffer memory is used as rate control FIFO. (vtaps=1 coeff LUTs are to be programmed). All other scaler registers have to be programmed accordingly.
///                                    * =1 enables scaler's circular line buffer memory to be used as programmable depth FIFO.
///                                    * =0 is normal operation of 1 line storage.
///                                    ###
///               %unsigned 15 fifo_depth                0x0
///                                    ###
///                                    * Valid only if fifo_mode=1or pftch=1..
///                                    * Max memory occupancy (in pixels) in fifo_mode.
///                                    * Upstream (input) is stalled if memory occupancy >= fifo_depth.
///                                    * Max value calculation:
///                                    * wls = floor( (memsize+1) / lsize )   
///                                    * pls = ( (memsize+1) - (lsize*wls) ) * 10   
///                                    * fcp = wls * min(ihres, ohres) + pls.
///                                    * 1) For pftch=1, fifo_depth=fcp.
///                                    * 2) For fifo_mode,
///                                    * a) Max fifo_depth = fcp - 100.
///                                    * b) Min fifo_depth = min(ihres, ohres)
///                                    ###
///               %unsigned 15 fifo_dfst                 0x0
///                                    ###
///                                    * Valid only if fifo_mode=1.
///                                    * Min FIFO/memory occupancy (in pixels) required to start downstream frame.
///                                    * Range: [ min(ihres, ohres), fifo_depth ]
///                                    ###
///               %unsigned 1  pftch                     0x0
///                                    ###
///                                    * =1if en_n=1 and vertically small downscale cases if vertical tap reduction is to be avoided.
///                                    * =0 otherwise.
///                                    * Related register fields: fifo_depth, ovf_margin, udf_margin.
///                                    ###
///     @ 0x00044 CFG19                (P)
///               %unsigned 8  scl_after_crop_h          0x0
///                                    ###
///                                    * No. of pixels cropped horizontally after image is scaled to ohres x ovres.
///                                    * [3:0]: right crop pixels
///                                    * [7:4]: left crop pixels
///                                    ###
///               %unsigned 8  scl_after_crop_v          0x0
///                                    ###
///                                    * No. of pixels cropped vertically after image is scaled to ohres x ovres.
///                                    * [3:0]: bottom crop pixels
///                                    * [7:4]: top crop pixels
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00048 CFG20                (P)
///               %unsigned 1  lb_pdwn_regs              0x0
///                                    ###
///                                    * Wired to Line buffer SRAMs' pdwn ports.
///                                    ###
///               %unsigned 1  lb_pdlvmc_regs            0x0
///                                    ###
///                                    * Wired to Line buffer SRAMs' pdlvmc ports.
///                                    ###
///               %unsigned 1  lb_pdfvssm_regs           0x0
///                                    ###
///                                    * Wired to Line buffer SRAMs' pdfvssm ports.
///                                    ###
///               %unsigned 1  reserved0                 0x0
///                                    ###
///                                    * Reserved bit
///                                    ###
///               %unsigned 1  lut_pdwn_regs             0x0
///                                    ###
///                                    * Wired to coeff LUT SRAMs' pdwn ports.
///                                    ###
///               %unsigned 1  lut_pdlvmc_regs           0x0
///                                    ###
///                                    * Wired to coeff LUT SRAMs' pdlvmc ports.
///                                    ###
///               %unsigned 1  lut_pdfvssm_regs          0x0
///                                    ###
///                                    * Wired to coeff LUT SRAMs' pdfvssm ports.
///                                    ###
///               %unsigned 1  reserved1                 0x0
///                                    ###
///                                    * Reserved bit
///                                    ###
///               %unsigned 3  dpwr_regs                 0x3
///                                    ###
///                                    * Internal dynamic power control.
///                                    * Bit[2] - cg_en: unused. Must be 0. (controls clock to internal logic).
///                                    * Bit[1] - ctrl_lb_cen: Controls CEN to Line buffer SRAMS.
///                                    * Bit[0] - ctrl_lut_cen: control's CEN to LUT SRAMs.
///                                    ###
///               %unsigned 1  Reserved2                 0x0
///                                    ###
///                                    * Reserved bit.
///                                    * End of adpscl register group
///                                    ###
///               %%        20         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      76B, bits:     476b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ADPSCL
#define h_ADPSCL (){}

    #define     RA_ADPSCL_CFG0                                 0x0000

    #define     BA_ADPSCL_CFG0_even                            0x0000
    #define     B16ADPSCL_CFG0_even                            0x0000
    #define   LSb32ADPSCL_CFG0_even                               0
    #define   LSb16ADPSCL_CFG0_even                               0
    #define       bADPSCL_CFG0_even                            8
    #define   MSK32ADPSCL_CFG0_even                               0x000000FF

    #define     BA_ADPSCL_CFG0_odd                             0x0001
    #define     B16ADPSCL_CFG0_odd                             0x0000
    #define   LSb32ADPSCL_CFG0_odd                                8
    #define   LSb16ADPSCL_CFG0_odd                                8
    #define       bADPSCL_CFG0_odd                             8
    #define   MSK32ADPSCL_CFG0_odd                                0x0000FF00

    #define     BA_ADPSCL_CFG0_hinitph                         0x0002
    #define     B16ADPSCL_CFG0_hinitph                         0x0002
    #define   LSb32ADPSCL_CFG0_hinitph                            16
    #define   LSb16ADPSCL_CFG0_hinitph                            0
    #define       bADPSCL_CFG0_hinitph                         8
    #define   MSK32ADPSCL_CFG0_hinitph                            0x00FF0000

    #define     BA_ADPSCL_CFG0_ctrl0                           0x0003
    #define     B16ADPSCL_CFG0_ctrl0                           0x0002
    #define   LSb32ADPSCL_CFG0_ctrl0                              24
    #define   LSb16ADPSCL_CFG0_ctrl0                              8
    #define       bADPSCL_CFG0_ctrl0                           8
    #define   MSK32ADPSCL_CFG0_ctrl0                              0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG1                                 0x0004

    #define     BA_ADPSCL_CFG1_ivres                           0x0004
    #define     B16ADPSCL_CFG1_ivres                           0x0004
    #define   LSb32ADPSCL_CFG1_ivres                              0
    #define   LSb16ADPSCL_CFG1_ivres                              0
    #define       bADPSCL_CFG1_ivres                           12
    #define   MSK32ADPSCL_CFG1_ivres                              0x00000FFF

    #define     BA_ADPSCL_CFG1_ovres                           0x0005
    #define     B16ADPSCL_CFG1_ovres                           0x0004
    #define   LSb32ADPSCL_CFG1_ovres                              12
    #define   LSb16ADPSCL_CFG1_ovres                              12
    #define       bADPSCL_CFG1_ovres                           12
    #define   MSK32ADPSCL_CFG1_ovres                              0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG2                                 0x0008

    #define     BA_ADPSCL_CFG2_ihres                           0x0008
    #define     B16ADPSCL_CFG2_ihres                           0x0008
    #define   LSb32ADPSCL_CFG2_ihres                              0
    #define   LSb16ADPSCL_CFG2_ihres                              0
    #define       bADPSCL_CFG2_ihres                           13
    #define   MSK32ADPSCL_CFG2_ihres                              0x00001FFF

    #define     BA_ADPSCL_CFG2_ohres                           0x0009
    #define     B16ADPSCL_CFG2_ohres                           0x0008
    #define   LSb32ADPSCL_CFG2_ohres                              13
    #define   LSb16ADPSCL_CFG2_ohres                              13
    #define       bADPSCL_CFG2_ohres                           13
    #define   MSK32ADPSCL_CFG2_ohres                              0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG3                                 0x000C

    #define     BA_ADPSCL_CFG3_vratio                          0x000C
    #define     B16ADPSCL_CFG3_vratio                          0x000C
    #define   LSb32ADPSCL_CFG3_vratio                             0
    #define   LSb16ADPSCL_CFG3_vratio                             0
    #define       bADPSCL_CFG3_vratio                          25
    #define   MSK32ADPSCL_CFG3_vratio                             0x01FFFFFF

    #define     BA_ADPSCL_CFG3_rsv0                            0x000F
    #define     B16ADPSCL_CFG3_rsv0                            0x000E
    #define   LSb32ADPSCL_CFG3_rsv0                               25
    #define   LSb16ADPSCL_CFG3_rsv0                               9
    #define       bADPSCL_CFG3_rsv0                            3
    #define   MSK32ADPSCL_CFG3_rsv0                               0x0E000000

    #define     BA_ADPSCL_CFG3_mbp_align                       0x000F
    #define     B16ADPSCL_CFG3_mbp_align                       0x000E
    #define   LSb32ADPSCL_CFG3_mbp_align                          28
    #define   LSb16ADPSCL_CFG3_mbp_align                          12
    #define       bADPSCL_CFG3_mbp_align                       1
    #define   MSK32ADPSCL_CFG3_mbp_align                          0x10000000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG4                                 0x0010

    #define     BA_ADPSCL_CFG4_hratio                          0x0010
    #define     B16ADPSCL_CFG4_hratio                          0x0010
    #define   LSb32ADPSCL_CFG4_hratio                             0
    #define   LSb16ADPSCL_CFG4_hratio                             0
    #define       bADPSCL_CFG4_hratio                          25
    #define   MSK32ADPSCL_CFG4_hratio                             0x01FFFFFF

    #define     BA_ADPSCL_CFG4_rsv0                            0x0013
    #define     B16ADPSCL_CFG4_rsv0                            0x0012
    #define   LSb32ADPSCL_CFG4_rsv0                               25
    #define   LSb16ADPSCL_CFG4_rsv0                               9
    #define       bADPSCL_CFG4_rsv0                            3
    #define   MSK32ADPSCL_CFG4_rsv0                               0x0E000000

    #define     BA_ADPSCL_CFG4_mrp_align                       0x0013
    #define     B16ADPSCL_CFG4_mrp_align                       0x0012
    #define   LSb32ADPSCL_CFG4_mrp_align                          28
    #define   LSb16ADPSCL_CFG4_mrp_align                          12
    #define       bADPSCL_CFG4_mrp_align                       1
    #define   MSK32ADPSCL_CFG4_mrp_align                          0x10000000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG5                                 0x0014

    #define     BA_ADPSCL_CFG5_memsize                         0x0014
    #define     B16ADPSCL_CFG5_memsize                         0x0014
    #define   LSb32ADPSCL_CFG5_memsize                            0
    #define   LSb16ADPSCL_CFG5_memsize                            0
    #define       bADPSCL_CFG5_memsize                         11
    #define   MSK32ADPSCL_CFG5_memsize                            0x000007FF

    #define     BA_ADPSCL_CFG5_vwrap                           0x0015
    #define     B16ADPSCL_CFG5_vwrap                           0x0014
    #define   LSb32ADPSCL_CFG5_vwrap                              11
    #define   LSb16ADPSCL_CFG5_vwrap                              11
    #define       bADPSCL_CFG5_vwrap                           16
    #define   MSK32ADPSCL_CFG5_vwrap                              0x07FFF800
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG6                                 0x0018

    #define     BA_ADPSCL_CFG6_ups_cswap                       0x0018
    #define     B16ADPSCL_CFG6_ups_cswap                       0x0018
    #define   LSb32ADPSCL_CFG6_ups_cswap                          0
    #define   LSb16ADPSCL_CFG6_ups_cswap                          0
    #define       bADPSCL_CFG6_ups_cswap                       1
    #define   MSK32ADPSCL_CFG6_ups_cswap                          0x00000001

    #define     BA_ADPSCL_CFG6_ups_cshift                      0x0018
    #define     B16ADPSCL_CFG6_ups_cshift                      0x0018
    #define   LSb32ADPSCL_CFG6_ups_cshift                         1
    #define   LSb16ADPSCL_CFG6_ups_cshift                         1
    #define       bADPSCL_CFG6_ups_cshift                      1
    #define   MSK32ADPSCL_CFG6_ups_cshift                         0x00000002

    #define     BA_ADPSCL_CFG6_ups_yshift                      0x0018
    #define     B16ADPSCL_CFG6_ups_yshift                      0x0018
    #define   LSb32ADPSCL_CFG6_ups_yshift                         2
    #define   LSb16ADPSCL_CFG6_ups_yshift                         2
    #define       bADPSCL_CFG6_ups_yshift                      1
    #define   MSK32ADPSCL_CFG6_ups_yshift                         0x00000004

    #define     BA_ADPSCL_CFG6_ups_yblank                      0x0018
    #define     B16ADPSCL_CFG6_ups_yblank                      0x0018
    #define   LSb32ADPSCL_CFG6_ups_yblank                         3
    #define   LSb16ADPSCL_CFG6_ups_yblank                         3
    #define       bADPSCL_CFG6_ups_yblank                      12
    #define   MSK32ADPSCL_CFG6_ups_yblank                         0x00007FF8

    #define     BA_ADPSCL_CFG6_fstall                          0x0019
    #define     B16ADPSCL_CFG6_fstall                          0x0018
    #define   LSb32ADPSCL_CFG6_fstall                             15
    #define   LSb16ADPSCL_CFG6_fstall                             15
    #define       bADPSCL_CFG6_fstall                          8
    #define   MSK32ADPSCL_CFG6_fstall                             0x007F8000

    #define     BA_ADPSCL_CFG6_bstall                          0x001A
    #define     B16ADPSCL_CFG6_bstall                          0x001A
    #define   LSb32ADPSCL_CFG6_bstall                             23
    #define   LSb16ADPSCL_CFG6_bstall                             7
    #define       bADPSCL_CFG6_bstall                          8
    #define   MSK32ADPSCL_CFG6_bstall                             0x7F800000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG7                                 0x001C

    #define     BA_ADPSCL_CFG7_ups_cblank                      0x001C
    #define     B16ADPSCL_CFG7_ups_cblank                      0x001C
    #define   LSb32ADPSCL_CFG7_ups_cblank                         0
    #define   LSb16ADPSCL_CFG7_ups_cblank                         0
    #define       bADPSCL_CFG7_ups_cblank                      12
    #define   MSK32ADPSCL_CFG7_ups_cblank                         0x00000FFF

    #define     BA_ADPSCL_CFG7_htap_offset                     0x001D
    #define     B16ADPSCL_CFG7_htap_offset                     0x001C
    #define   LSb32ADPSCL_CFG7_htap_offset                        12
    #define   LSb16ADPSCL_CFG7_htap_offset                        12
    #define       bADPSCL_CFG7_htap_offset                     3
    #define   MSK32ADPSCL_CFG7_htap_offset                        0x00007000

    #define     BA_ADPSCL_CFG7_vtap_offset                     0x001D
    #define     B16ADPSCL_CFG7_vtap_offset                     0x001C
    #define   LSb32ADPSCL_CFG7_vtap_offset                        15
    #define   LSb16ADPSCL_CFG7_vtap_offset                        15
    #define       bADPSCL_CFG7_vtap_offset                     8
    #define   MSK32ADPSCL_CFG7_vtap_offset                        0x007F8000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG8                                 0x0020

    #define     BA_ADPSCL_CFG8_init_ratio                      0x0020
    #define     B16ADPSCL_CFG8_init_ratio                      0x0020
    #define   LSb32ADPSCL_CFG8_init_ratio                         0
    #define   LSb16ADPSCL_CFG8_init_ratio                         0
    #define       bADPSCL_CFG8_init_ratio                      25
    #define   MSK32ADPSCL_CFG8_init_ratio                         0x01FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG9                                 0x0024

    #define     BA_ADPSCL_CFG9_inc_ratio                       0x0024
    #define     B16ADPSCL_CFG9_inc_ratio                       0x0024
    #define   LSb32ADPSCL_CFG9_inc_ratio                          0
    #define   LSb16ADPSCL_CFG9_inc_ratio                          0
    #define       bADPSCL_CFG9_inc_ratio                       25
    #define   MSK32ADPSCL_CFG9_inc_ratio                          0x01FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG10                                0x0028

    #define     BA_ADPSCL_CFG10_nlcres                         0x0028
    #define     B16ADPSCL_CFG10_nlcres                         0x0028
    #define   LSb32ADPSCL_CFG10_nlcres                            0
    #define   LSb16ADPSCL_CFG10_nlcres                            0
    #define       bADPSCL_CFG10_nlcres                         13
    #define   MSK32ADPSCL_CFG10_nlcres                            0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG11                                0x002C

    #define     BA_ADPSCL_CFG11_avg4_coeff0                    0x002C
    #define     B16ADPSCL_CFG11_avg4_coeff0                    0x002C
    #define   LSb32ADPSCL_CFG11_avg4_coeff0                       0
    #define   LSb16ADPSCL_CFG11_avg4_coeff0                       0
    #define       bADPSCL_CFG11_avg4_coeff0                    12
    #define   MSK32ADPSCL_CFG11_avg4_coeff0                       0x00000FFF

    #define     BA_ADPSCL_CFG11_avg4_coeff1                    0x002D
    #define     B16ADPSCL_CFG11_avg4_coeff1                    0x002C
    #define   LSb32ADPSCL_CFG11_avg4_coeff1                       12
    #define   LSb16ADPSCL_CFG11_avg4_coeff1                       12
    #define       bADPSCL_CFG11_avg4_coeff1                    12
    #define   MSK32ADPSCL_CFG11_avg4_coeff1                       0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG12                                0x0030

    #define     BA_ADPSCL_CFG12_avg4_coeff2                    0x0030
    #define     B16ADPSCL_CFG12_avg4_coeff2                    0x0030
    #define   LSb32ADPSCL_CFG12_avg4_coeff2                       0
    #define   LSb16ADPSCL_CFG12_avg4_coeff2                       0
    #define       bADPSCL_CFG12_avg4_coeff2                    12
    #define   MSK32ADPSCL_CFG12_avg4_coeff2                       0x00000FFF

    #define     BA_ADPSCL_CFG12_avg4_coeff3                    0x0031
    #define     B16ADPSCL_CFG12_avg4_coeff3                    0x0030
    #define   LSb32ADPSCL_CFG12_avg4_coeff3                       12
    #define   LSb16ADPSCL_CFG12_avg4_coeff3                       12
    #define       bADPSCL_CFG12_avg4_coeff3                    12
    #define   MSK32ADPSCL_CFG12_avg4_coeff3                       0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG15                                0x0034

    #define     BA_ADPSCL_CFG15_ctrl1                          0x0034
    #define     B16ADPSCL_CFG15_ctrl1                          0x0034
    #define   LSb32ADPSCL_CFG15_ctrl1                             0
    #define   LSb16ADPSCL_CFG15_ctrl1                             0
    #define       bADPSCL_CFG15_ctrl1                          8
    #define   MSK32ADPSCL_CFG15_ctrl1                             0x000000FF

    #define     BA_ADPSCL_CFG15_hctrl                          0x0035
    #define     B16ADPSCL_CFG15_hctrl                          0x0034
    #define   LSb32ADPSCL_CFG15_hctrl                             8
    #define   LSb16ADPSCL_CFG15_hctrl                             8
    #define       bADPSCL_CFG15_hctrl                          5
    #define   MSK32ADPSCL_CFG15_hctrl                             0x00001F00

    #define     BA_ADPSCL_CFG15_vctrl                          0x0035
    #define     B16ADPSCL_CFG15_vctrl                          0x0034
    #define   LSb32ADPSCL_CFG15_vctrl                             13
    #define   LSb16ADPSCL_CFG15_vctrl                             13
    #define       bADPSCL_CFG15_vctrl                          5
    #define   MSK32ADPSCL_CFG15_vctrl                             0x0003E000

    #define     BA_ADPSCL_CFG15_crop                           0x0036
    #define     B16ADPSCL_CFG15_crop                           0x0036
    #define   LSb32ADPSCL_CFG15_crop                              18
    #define   LSb16ADPSCL_CFG15_crop                              2
    #define       bADPSCL_CFG15_crop                           4
    #define   MSK32ADPSCL_CFG15_crop                              0x003C0000

    #define     BA_ADPSCL_CFG15_hscl11                         0x0036
    #define     B16ADPSCL_CFG15_hscl11                         0x0036
    #define   LSb32ADPSCL_CFG15_hscl11                            22
    #define   LSb16ADPSCL_CFG15_hscl11                            6
    #define       bADPSCL_CFG15_hscl11                         1
    #define   MSK32ADPSCL_CFG15_hscl11                            0x00400000

    #define     BA_ADPSCL_CFG15_vscl11                         0x0036
    #define     B16ADPSCL_CFG15_vscl11                         0x0036
    #define   LSb32ADPSCL_CFG15_vscl11                            23
    #define   LSb16ADPSCL_CFG15_vscl11                            7
    #define       bADPSCL_CFG15_vscl11                         1
    #define   MSK32ADPSCL_CFG15_vscl11                            0x00800000

    #define     BA_ADPSCL_CFG15_bypass                         0x0037
    #define     B16ADPSCL_CFG15_bypass                         0x0036
    #define   LSb32ADPSCL_CFG15_bypass                            24
    #define   LSb16ADPSCL_CFG15_bypass                            8
    #define       bADPSCL_CFG15_bypass                         1
    #define   MSK32ADPSCL_CFG15_bypass                            0x01000000

    #define     BA_ADPSCL_CFG15_frndsel                        0x0037
    #define     B16ADPSCL_CFG15_frndsel                        0x0036
    #define   LSb32ADPSCL_CFG15_frndsel                           25
    #define   LSb16ADPSCL_CFG15_frndsel                           9
    #define       bADPSCL_CFG15_frndsel                        1
    #define   MSK32ADPSCL_CFG15_frndsel                           0x02000000

    #define     BA_ADPSCL_CFG15_hvdcp                          0x0037
    #define     B16ADPSCL_CFG15_hvdcp                          0x0036
    #define   LSb32ADPSCL_CFG15_hvdcp                             26
    #define   LSb16ADPSCL_CFG15_hvdcp                             10
    #define       bADPSCL_CFG15_hvdcp                          1
    #define   MSK32ADPSCL_CFG15_hvdcp                             0x04000000

    #define     BA_ADPSCL_CFG15_pa_impv_en                     0x0037
    #define     B16ADPSCL_CFG15_pa_impv_en                     0x0036
    #define   LSb32ADPSCL_CFG15_pa_impv_en                        27
    #define   LSb16ADPSCL_CFG15_pa_impv_en                        11
    #define       bADPSCL_CFG15_pa_impv_en                     1
    #define   MSK32ADPSCL_CFG15_pa_impv_en                        0x08000000

    #define     BA_ADPSCL_CFG15_mask_hvswap_en                 0x0037
    #define     B16ADPSCL_CFG15_mask_hvswap_en                 0x0036
    #define   LSb32ADPSCL_CFG15_mask_hvswap_en                    28
    #define   LSb16ADPSCL_CFG15_mask_hvswap_en                    12
    #define       bADPSCL_CFG15_mask_hvswap_en                 4
    #define   MSK32ADPSCL_CFG15_mask_hvswap_en                    0xF0000000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG16                                0x0038

    #define     BA_ADPSCL_CFG16_en_n                           0x0038
    #define     B16ADPSCL_CFG16_en_n                           0x0038
    #define   LSb32ADPSCL_CFG16_en_n                              0
    #define   LSb16ADPSCL_CFG16_en_n                              0
    #define       bADPSCL_CFG16_en_n                           1
    #define   MSK32ADPSCL_CFG16_en_n                              0x00000001

    #define     BA_ADPSCL_CFG16_xbstall_en                     0x0038
    #define     B16ADPSCL_CFG16_xbstall_en                     0x0038
    #define   LSb32ADPSCL_CFG16_xbstall_en                        1
    #define   LSb16ADPSCL_CFG16_xbstall_en                        1
    #define       bADPSCL_CFG16_xbstall_en                     1
    #define   MSK32ADPSCL_CFG16_xbstall_en                        0x00000002

    #define     BA_ADPSCL_CFG16_xbstall_dly                    0x0038
    #define     B16ADPSCL_CFG16_xbstall_dly                    0x0038
    #define   LSb32ADPSCL_CFG16_xbstall_dly                       2
    #define   LSb16ADPSCL_CFG16_xbstall_dly                       2
    #define       bADPSCL_CFG16_xbstall_dly                    14
    #define   MSK32ADPSCL_CFG16_xbstall_dly                       0x0000FFFC

    #define     BA_ADPSCL_CFG16_ovf_margin                     0x003A
    #define     B16ADPSCL_CFG16_ovf_margin                     0x003A
    #define   LSb32ADPSCL_CFG16_ovf_margin                        16
    #define   LSb16ADPSCL_CFG16_ovf_margin                        0
    #define       bADPSCL_CFG16_ovf_margin                     8
    #define   MSK32ADPSCL_CFG16_ovf_margin                        0x00FF0000

    #define     BA_ADPSCL_CFG16_udf_margin                     0x003B
    #define     B16ADPSCL_CFG16_udf_margin                     0x003A
    #define   LSb32ADPSCL_CFG16_udf_margin                        24
    #define   LSb16ADPSCL_CFG16_udf_margin                        8
    #define       bADPSCL_CFG16_udf_margin                     8
    #define   MSK32ADPSCL_CFG16_udf_margin                        0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG17                                0x003C

    #define     BA_ADPSCL_CFG17_lsize                          0x003C
    #define     B16ADPSCL_CFG17_lsize                          0x003C
    #define   LSb32ADPSCL_CFG17_lsize                             0
    #define   LSb16ADPSCL_CFG17_lsize                             0
    #define       bADPSCL_CFG17_lsize                          10
    #define   MSK32ADPSCL_CFG17_lsize                             0x000003FF

    #define     BA_ADPSCL_CFG17_lsize_A                        0x003D
    #define     B16ADPSCL_CFG17_lsize_A                        0x003C
    #define   LSb32ADPSCL_CFG17_lsize_A                           10
    #define   LSb16ADPSCL_CFG17_lsize_A                           10
    #define       bADPSCL_CFG17_lsize_A                        10
    #define   MSK32ADPSCL_CFG17_lsize_A                           0x000FFC00
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG18                                0x0040

    #define     BA_ADPSCL_CFG18_fifo_mode                      0x0040
    #define     B16ADPSCL_CFG18_fifo_mode                      0x0040
    #define   LSb32ADPSCL_CFG18_fifo_mode                         0
    #define   LSb16ADPSCL_CFG18_fifo_mode                         0
    #define       bADPSCL_CFG18_fifo_mode                      1
    #define   MSK32ADPSCL_CFG18_fifo_mode                         0x00000001

    #define     BA_ADPSCL_CFG18_fifo_depth                     0x0040
    #define     B16ADPSCL_CFG18_fifo_depth                     0x0040
    #define   LSb32ADPSCL_CFG18_fifo_depth                        1
    #define   LSb16ADPSCL_CFG18_fifo_depth                        1
    #define       bADPSCL_CFG18_fifo_depth                     15
    #define   MSK32ADPSCL_CFG18_fifo_depth                        0x0000FFFE

    #define     BA_ADPSCL_CFG18_fifo_dfst                      0x0042
    #define     B16ADPSCL_CFG18_fifo_dfst                      0x0042
    #define   LSb32ADPSCL_CFG18_fifo_dfst                         16
    #define   LSb16ADPSCL_CFG18_fifo_dfst                         0
    #define       bADPSCL_CFG18_fifo_dfst                      15
    #define   MSK32ADPSCL_CFG18_fifo_dfst                         0x7FFF0000

    #define     BA_ADPSCL_CFG18_pftch                          0x0043
    #define     B16ADPSCL_CFG18_pftch                          0x0042
    #define   LSb32ADPSCL_CFG18_pftch                             31
    #define   LSb16ADPSCL_CFG18_pftch                             15
    #define       bADPSCL_CFG18_pftch                          1
    #define   MSK32ADPSCL_CFG18_pftch                             0x80000000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG19                                0x0044

    #define     BA_ADPSCL_CFG19_scl_after_crop_h               0x0044
    #define     B16ADPSCL_CFG19_scl_after_crop_h               0x0044
    #define   LSb32ADPSCL_CFG19_scl_after_crop_h                  0
    #define   LSb16ADPSCL_CFG19_scl_after_crop_h                  0
    #define       bADPSCL_CFG19_scl_after_crop_h               8
    #define   MSK32ADPSCL_CFG19_scl_after_crop_h                  0x000000FF

    #define     BA_ADPSCL_CFG19_scl_after_crop_v               0x0045
    #define     B16ADPSCL_CFG19_scl_after_crop_v               0x0044
    #define   LSb32ADPSCL_CFG19_scl_after_crop_v                  8
    #define   LSb16ADPSCL_CFG19_scl_after_crop_v                  8
    #define       bADPSCL_CFG19_scl_after_crop_v               8
    #define   MSK32ADPSCL_CFG19_scl_after_crop_v                  0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CFG20                                0x0048

    #define     BA_ADPSCL_CFG20_lb_pdwn_regs                   0x0048
    #define     B16ADPSCL_CFG20_lb_pdwn_regs                   0x0048
    #define   LSb32ADPSCL_CFG20_lb_pdwn_regs                      0
    #define   LSb16ADPSCL_CFG20_lb_pdwn_regs                      0
    #define       bADPSCL_CFG20_lb_pdwn_regs                   1
    #define   MSK32ADPSCL_CFG20_lb_pdwn_regs                      0x00000001

    #define     BA_ADPSCL_CFG20_lb_pdlvmc_regs                 0x0048
    #define     B16ADPSCL_CFG20_lb_pdlvmc_regs                 0x0048
    #define   LSb32ADPSCL_CFG20_lb_pdlvmc_regs                    1
    #define   LSb16ADPSCL_CFG20_lb_pdlvmc_regs                    1
    #define       bADPSCL_CFG20_lb_pdlvmc_regs                 1
    #define   MSK32ADPSCL_CFG20_lb_pdlvmc_regs                    0x00000002

    #define     BA_ADPSCL_CFG20_lb_pdfvssm_regs                0x0048
    #define     B16ADPSCL_CFG20_lb_pdfvssm_regs                0x0048
    #define   LSb32ADPSCL_CFG20_lb_pdfvssm_regs                   2
    #define   LSb16ADPSCL_CFG20_lb_pdfvssm_regs                   2
    #define       bADPSCL_CFG20_lb_pdfvssm_regs                1
    #define   MSK32ADPSCL_CFG20_lb_pdfvssm_regs                   0x00000004

    #define     BA_ADPSCL_CFG20_reserved0                      0x0048
    #define     B16ADPSCL_CFG20_reserved0                      0x0048
    #define   LSb32ADPSCL_CFG20_reserved0                         3
    #define   LSb16ADPSCL_CFG20_reserved0                         3
    #define       bADPSCL_CFG20_reserved0                      1
    #define   MSK32ADPSCL_CFG20_reserved0                         0x00000008

    #define     BA_ADPSCL_CFG20_lut_pdwn_regs                  0x0048
    #define     B16ADPSCL_CFG20_lut_pdwn_regs                  0x0048
    #define   LSb32ADPSCL_CFG20_lut_pdwn_regs                     4
    #define   LSb16ADPSCL_CFG20_lut_pdwn_regs                     4
    #define       bADPSCL_CFG20_lut_pdwn_regs                  1
    #define   MSK32ADPSCL_CFG20_lut_pdwn_regs                     0x00000010

    #define     BA_ADPSCL_CFG20_lut_pdlvmc_regs                0x0048
    #define     B16ADPSCL_CFG20_lut_pdlvmc_regs                0x0048
    #define   LSb32ADPSCL_CFG20_lut_pdlvmc_regs                   5
    #define   LSb16ADPSCL_CFG20_lut_pdlvmc_regs                   5
    #define       bADPSCL_CFG20_lut_pdlvmc_regs                1
    #define   MSK32ADPSCL_CFG20_lut_pdlvmc_regs                   0x00000020

    #define     BA_ADPSCL_CFG20_lut_pdfvssm_regs               0x0048
    #define     B16ADPSCL_CFG20_lut_pdfvssm_regs               0x0048
    #define   LSb32ADPSCL_CFG20_lut_pdfvssm_regs                  6
    #define   LSb16ADPSCL_CFG20_lut_pdfvssm_regs                  6
    #define       bADPSCL_CFG20_lut_pdfvssm_regs               1
    #define   MSK32ADPSCL_CFG20_lut_pdfvssm_regs                  0x00000040

    #define     BA_ADPSCL_CFG20_reserved1                      0x0048
    #define     B16ADPSCL_CFG20_reserved1                      0x0048
    #define   LSb32ADPSCL_CFG20_reserved1                         7
    #define   LSb16ADPSCL_CFG20_reserved1                         7
    #define       bADPSCL_CFG20_reserved1                      1
    #define   MSK32ADPSCL_CFG20_reserved1                         0x00000080

    #define     BA_ADPSCL_CFG20_dpwr_regs                      0x0049
    #define     B16ADPSCL_CFG20_dpwr_regs                      0x0048
    #define   LSb32ADPSCL_CFG20_dpwr_regs                         8
    #define   LSb16ADPSCL_CFG20_dpwr_regs                         8
    #define       bADPSCL_CFG20_dpwr_regs                      3
    #define   MSK32ADPSCL_CFG20_dpwr_regs                         0x00000700

    #define     BA_ADPSCL_CFG20_Reserved2                      0x0049
    #define     B16ADPSCL_CFG20_Reserved2                      0x0048
    #define   LSb32ADPSCL_CFG20_Reserved2                         11
    #define   LSb16ADPSCL_CFG20_Reserved2                         11
    #define       bADPSCL_CFG20_Reserved2                      1
    #define   MSK32ADPSCL_CFG20_Reserved2                         0x00000800
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ADPSCL {
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG0_even(r32)                       _BFGET_(r32, 7, 0)
    #define   SET32ADPSCL_CFG0_even(r32,v)                     _BFSET_(r32, 7, 0,v)
    #define   GET16ADPSCL_CFG0_even(r16)                       _BFGET_(r16, 7, 0)
    #define   SET16ADPSCL_CFG0_even(r16,v)                     _BFSET_(r16, 7, 0,v)

    #define   GET32ADPSCL_CFG0_odd(r32)                        _BFGET_(r32,15, 8)
    #define   SET32ADPSCL_CFG0_odd(r32,v)                      _BFSET_(r32,15, 8,v)
    #define   GET16ADPSCL_CFG0_odd(r16)                        _BFGET_(r16,15, 8)
    #define   SET16ADPSCL_CFG0_odd(r16,v)                      _BFSET_(r16,15, 8,v)

    #define   GET32ADPSCL_CFG0_hinitph(r32)                    _BFGET_(r32,23,16)
    #define   SET32ADPSCL_CFG0_hinitph(r32,v)                  _BFSET_(r32,23,16,v)
    #define   GET16ADPSCL_CFG0_hinitph(r16)                    _BFGET_(r16, 7, 0)
    #define   SET16ADPSCL_CFG0_hinitph(r16,v)                  _BFSET_(r16, 7, 0,v)

    #define   GET32ADPSCL_CFG0_ctrl0(r32)                      _BFGET_(r32,31,24)
    #define   SET32ADPSCL_CFG0_ctrl0(r32,v)                    _BFSET_(r32,31,24,v)
    #define   GET16ADPSCL_CFG0_ctrl0(r16)                      _BFGET_(r16,15, 8)
    #define   SET16ADPSCL_CFG0_ctrl0(r16,v)                    _BFSET_(r16,15, 8,v)

    #define     w32ADPSCL_CFG0                                 {\
            UNSG32 uCFG0_even                                  :  8;\
            UNSG32 uCFG0_odd                                   :  8;\
            UNSG32 uCFG0_hinitph                               :  8;\
            UNSG32 uCFG0_ctrl0                                 :  8;\
          }
    union { UNSG32 u32ADPSCL_CFG0;
            struct w32ADPSCL_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG1_ivres(r32)                      _BFGET_(r32,11, 0)
    #define   SET32ADPSCL_CFG1_ivres(r32,v)                    _BFSET_(r32,11, 0,v)
    #define   GET16ADPSCL_CFG1_ivres(r16)                      _BFGET_(r16,11, 0)
    #define   SET16ADPSCL_CFG1_ivres(r16,v)                    _BFSET_(r16,11, 0,v)

    #define   GET32ADPSCL_CFG1_ovres(r32)                      _BFGET_(r32,23,12)
    #define   SET32ADPSCL_CFG1_ovres(r32,v)                    _BFSET_(r32,23,12,v)

    #define     w32ADPSCL_CFG1                                 {\
            UNSG32 uCFG1_ivres                                 : 12;\
            UNSG32 uCFG1_ovres                                 : 12;\
            UNSG32 RSVDx4_b24                                  :  8;\
          }
    union { UNSG32 u32ADPSCL_CFG1;
            struct w32ADPSCL_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG2_ihres(r32)                      _BFGET_(r32,12, 0)
    #define   SET32ADPSCL_CFG2_ihres(r32,v)                    _BFSET_(r32,12, 0,v)
    #define   GET16ADPSCL_CFG2_ihres(r16)                      _BFGET_(r16,12, 0)
    #define   SET16ADPSCL_CFG2_ihres(r16,v)                    _BFSET_(r16,12, 0,v)

    #define   GET32ADPSCL_CFG2_ohres(r32)                      _BFGET_(r32,25,13)
    #define   SET32ADPSCL_CFG2_ohres(r32,v)                    _BFSET_(r32,25,13,v)

    #define     w32ADPSCL_CFG2                                 {\
            UNSG32 uCFG2_ihres                                 : 13;\
            UNSG32 uCFG2_ohres                                 : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32ADPSCL_CFG2;
            struct w32ADPSCL_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG3_vratio(r32)                     _BFGET_(r32,24, 0)
    #define   SET32ADPSCL_CFG3_vratio(r32,v)                   _BFSET_(r32,24, 0,v)

    #define   GET32ADPSCL_CFG3_rsv0(r32)                       _BFGET_(r32,27,25)
    #define   SET32ADPSCL_CFG3_rsv0(r32,v)                     _BFSET_(r32,27,25,v)
    #define   GET16ADPSCL_CFG3_rsv0(r16)                       _BFGET_(r16,11, 9)
    #define   SET16ADPSCL_CFG3_rsv0(r16,v)                     _BFSET_(r16,11, 9,v)

    #define   GET32ADPSCL_CFG3_mbp_align(r32)                  _BFGET_(r32,28,28)
    #define   SET32ADPSCL_CFG3_mbp_align(r32,v)                _BFSET_(r32,28,28,v)
    #define   GET16ADPSCL_CFG3_mbp_align(r16)                  _BFGET_(r16,12,12)
    #define   SET16ADPSCL_CFG3_mbp_align(r16,v)                _BFSET_(r16,12,12,v)

    #define     w32ADPSCL_CFG3                                 {\
            UNSG32 uCFG3_vratio                                : 25;\
            UNSG32 uCFG3_rsv0                                  :  3;\
            UNSG32 uCFG3_mbp_align                             :  1;\
            UNSG32 RSVDxC_b29                                  :  3;\
          }
    union { UNSG32 u32ADPSCL_CFG3;
            struct w32ADPSCL_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG4_hratio(r32)                     _BFGET_(r32,24, 0)
    #define   SET32ADPSCL_CFG4_hratio(r32,v)                   _BFSET_(r32,24, 0,v)

    #define   GET32ADPSCL_CFG4_rsv0(r32)                       _BFGET_(r32,27,25)
    #define   SET32ADPSCL_CFG4_rsv0(r32,v)                     _BFSET_(r32,27,25,v)
    #define   GET16ADPSCL_CFG4_rsv0(r16)                       _BFGET_(r16,11, 9)
    #define   SET16ADPSCL_CFG4_rsv0(r16,v)                     _BFSET_(r16,11, 9,v)

    #define   GET32ADPSCL_CFG4_mrp_align(r32)                  _BFGET_(r32,28,28)
    #define   SET32ADPSCL_CFG4_mrp_align(r32,v)                _BFSET_(r32,28,28,v)
    #define   GET16ADPSCL_CFG4_mrp_align(r16)                  _BFGET_(r16,12,12)
    #define   SET16ADPSCL_CFG4_mrp_align(r16,v)                _BFSET_(r16,12,12,v)

    #define     w32ADPSCL_CFG4                                 {\
            UNSG32 uCFG4_hratio                                : 25;\
            UNSG32 uCFG4_rsv0                                  :  3;\
            UNSG32 uCFG4_mrp_align                             :  1;\
            UNSG32 RSVDx10_b29                                 :  3;\
          }
    union { UNSG32 u32ADPSCL_CFG4;
            struct w32ADPSCL_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG5_memsize(r32)                    _BFGET_(r32,10, 0)
    #define   SET32ADPSCL_CFG5_memsize(r32,v)                  _BFSET_(r32,10, 0,v)
    #define   GET16ADPSCL_CFG5_memsize(r16)                    _BFGET_(r16,10, 0)
    #define   SET16ADPSCL_CFG5_memsize(r16,v)                  _BFSET_(r16,10, 0,v)

    #define   GET32ADPSCL_CFG5_vwrap(r32)                      _BFGET_(r32,26,11)
    #define   SET32ADPSCL_CFG5_vwrap(r32,v)                    _BFSET_(r32,26,11,v)

    #define     w32ADPSCL_CFG5                                 {\
            UNSG32 uCFG5_memsize                               : 11;\
            UNSG32 uCFG5_vwrap                                 : 16;\
            UNSG32 RSVDx14_b27                                 :  5;\
          }
    union { UNSG32 u32ADPSCL_CFG5;
            struct w32ADPSCL_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG6_ups_cswap(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32ADPSCL_CFG6_ups_cswap(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16ADPSCL_CFG6_ups_cswap(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16ADPSCL_CFG6_ups_cswap(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32ADPSCL_CFG6_ups_cshift(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32ADPSCL_CFG6_ups_cshift(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16ADPSCL_CFG6_ups_cshift(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16ADPSCL_CFG6_ups_cshift(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32ADPSCL_CFG6_ups_yshift(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32ADPSCL_CFG6_ups_yshift(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16ADPSCL_CFG6_ups_yshift(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16ADPSCL_CFG6_ups_yshift(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32ADPSCL_CFG6_ups_yblank(r32)                 _BFGET_(r32,14, 3)
    #define   SET32ADPSCL_CFG6_ups_yblank(r32,v)               _BFSET_(r32,14, 3,v)
    #define   GET16ADPSCL_CFG6_ups_yblank(r16)                 _BFGET_(r16,14, 3)
    #define   SET16ADPSCL_CFG6_ups_yblank(r16,v)               _BFSET_(r16,14, 3,v)

    #define   GET32ADPSCL_CFG6_fstall(r32)                     _BFGET_(r32,22,15)
    #define   SET32ADPSCL_CFG6_fstall(r32,v)                   _BFSET_(r32,22,15,v)

    #define   GET32ADPSCL_CFG6_bstall(r32)                     _BFGET_(r32,30,23)
    #define   SET32ADPSCL_CFG6_bstall(r32,v)                   _BFSET_(r32,30,23,v)
    #define   GET16ADPSCL_CFG6_bstall(r16)                     _BFGET_(r16,14, 7)
    #define   SET16ADPSCL_CFG6_bstall(r16,v)                   _BFSET_(r16,14, 7,v)

    #define     w32ADPSCL_CFG6                                 {\
            UNSG32 uCFG6_ups_cswap                             :  1;\
            UNSG32 uCFG6_ups_cshift                            :  1;\
            UNSG32 uCFG6_ups_yshift                            :  1;\
            UNSG32 uCFG6_ups_yblank                            : 12;\
            UNSG32 uCFG6_fstall                                :  8;\
            UNSG32 uCFG6_bstall                                :  8;\
            UNSG32 RSVDx18_b31                                 :  1;\
          }
    union { UNSG32 u32ADPSCL_CFG6;
            struct w32ADPSCL_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG7_ups_cblank(r32)                 _BFGET_(r32,11, 0)
    #define   SET32ADPSCL_CFG7_ups_cblank(r32,v)               _BFSET_(r32,11, 0,v)
    #define   GET16ADPSCL_CFG7_ups_cblank(r16)                 _BFGET_(r16,11, 0)
    #define   SET16ADPSCL_CFG7_ups_cblank(r16,v)               _BFSET_(r16,11, 0,v)

    #define   GET32ADPSCL_CFG7_htap_offset(r32)                _BFGET_(r32,14,12)
    #define   SET32ADPSCL_CFG7_htap_offset(r32,v)              _BFSET_(r32,14,12,v)
    #define   GET16ADPSCL_CFG7_htap_offset(r16)                _BFGET_(r16,14,12)
    #define   SET16ADPSCL_CFG7_htap_offset(r16,v)              _BFSET_(r16,14,12,v)

    #define   GET32ADPSCL_CFG7_vtap_offset(r32)                _BFGET_(r32,22,15)
    #define   SET32ADPSCL_CFG7_vtap_offset(r32,v)              _BFSET_(r32,22,15,v)

    #define     w32ADPSCL_CFG7                                 {\
            UNSG32 uCFG7_ups_cblank                            : 12;\
            UNSG32 uCFG7_htap_offset                           :  3;\
            UNSG32 uCFG7_vtap_offset                           :  8;\
            UNSG32 RSVDx1C_b23                                 :  9;\
          }
    union { UNSG32 u32ADPSCL_CFG7;
            struct w32ADPSCL_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG8_init_ratio(r32)                 _BFGET_(r32,24, 0)
    #define   SET32ADPSCL_CFG8_init_ratio(r32,v)               _BFSET_(r32,24, 0,v)

    #define     w32ADPSCL_CFG8                                 {\
            UNSG32 uCFG8_init_ratio                            : 25;\
            UNSG32 RSVDx20_b25                                 :  7;\
          }
    union { UNSG32 u32ADPSCL_CFG8;
            struct w32ADPSCL_CFG8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG9_inc_ratio(r32)                  _BFGET_(r32,24, 0)
    #define   SET32ADPSCL_CFG9_inc_ratio(r32,v)                _BFSET_(r32,24, 0,v)

    #define     w32ADPSCL_CFG9                                 {\
            UNSG32 uCFG9_inc_ratio                             : 25;\
            UNSG32 RSVDx24_b25                                 :  7;\
          }
    union { UNSG32 u32ADPSCL_CFG9;
            struct w32ADPSCL_CFG9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG10_nlcres(r32)                    _BFGET_(r32,12, 0)
    #define   SET32ADPSCL_CFG10_nlcres(r32,v)                  _BFSET_(r32,12, 0,v)
    #define   GET16ADPSCL_CFG10_nlcres(r16)                    _BFGET_(r16,12, 0)
    #define   SET16ADPSCL_CFG10_nlcres(r16,v)                  _BFSET_(r16,12, 0,v)

    #define     w32ADPSCL_CFG10                                {\
            UNSG32 uCFG10_nlcres                               : 13;\
            UNSG32 RSVDx28_b13                                 : 19;\
          }
    union { UNSG32 u32ADPSCL_CFG10;
            struct w32ADPSCL_CFG10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG11_avg4_coeff0(r32)               _BFGET_(r32,11, 0)
    #define   SET32ADPSCL_CFG11_avg4_coeff0(r32,v)             _BFSET_(r32,11, 0,v)
    #define   GET16ADPSCL_CFG11_avg4_coeff0(r16)               _BFGET_(r16,11, 0)
    #define   SET16ADPSCL_CFG11_avg4_coeff0(r16,v)             _BFSET_(r16,11, 0,v)

    #define   GET32ADPSCL_CFG11_avg4_coeff1(r32)               _BFGET_(r32,23,12)
    #define   SET32ADPSCL_CFG11_avg4_coeff1(r32,v)             _BFSET_(r32,23,12,v)

    #define     w32ADPSCL_CFG11                                {\
            UNSG32 uCFG11_avg4_coeff0                          : 12;\
            UNSG32 uCFG11_avg4_coeff1                          : 12;\
            UNSG32 RSVDx2C_b24                                 :  8;\
          }
    union { UNSG32 u32ADPSCL_CFG11;
            struct w32ADPSCL_CFG11;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG12_avg4_coeff2(r32)               _BFGET_(r32,11, 0)
    #define   SET32ADPSCL_CFG12_avg4_coeff2(r32,v)             _BFSET_(r32,11, 0,v)
    #define   GET16ADPSCL_CFG12_avg4_coeff2(r16)               _BFGET_(r16,11, 0)
    #define   SET16ADPSCL_CFG12_avg4_coeff2(r16,v)             _BFSET_(r16,11, 0,v)

    #define   GET32ADPSCL_CFG12_avg4_coeff3(r32)               _BFGET_(r32,23,12)
    #define   SET32ADPSCL_CFG12_avg4_coeff3(r32,v)             _BFSET_(r32,23,12,v)

    #define     w32ADPSCL_CFG12                                {\
            UNSG32 uCFG12_avg4_coeff2                          : 12;\
            UNSG32 uCFG12_avg4_coeff3                          : 12;\
            UNSG32 RSVDx30_b24                                 :  8;\
          }
    union { UNSG32 u32ADPSCL_CFG12;
            struct w32ADPSCL_CFG12;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG15_ctrl1(r32)                     _BFGET_(r32, 7, 0)
    #define   SET32ADPSCL_CFG15_ctrl1(r32,v)                   _BFSET_(r32, 7, 0,v)
    #define   GET16ADPSCL_CFG15_ctrl1(r16)                     _BFGET_(r16, 7, 0)
    #define   SET16ADPSCL_CFG15_ctrl1(r16,v)                   _BFSET_(r16, 7, 0,v)

    #define   GET32ADPSCL_CFG15_hctrl(r32)                     _BFGET_(r32,12, 8)
    #define   SET32ADPSCL_CFG15_hctrl(r32,v)                   _BFSET_(r32,12, 8,v)
    #define   GET16ADPSCL_CFG15_hctrl(r16)                     _BFGET_(r16,12, 8)
    #define   SET16ADPSCL_CFG15_hctrl(r16,v)                   _BFSET_(r16,12, 8,v)

    #define   GET32ADPSCL_CFG15_vctrl(r32)                     _BFGET_(r32,17,13)
    #define   SET32ADPSCL_CFG15_vctrl(r32,v)                   _BFSET_(r32,17,13,v)

    #define   GET32ADPSCL_CFG15_crop(r32)                      _BFGET_(r32,21,18)
    #define   SET32ADPSCL_CFG15_crop(r32,v)                    _BFSET_(r32,21,18,v)
    #define   GET16ADPSCL_CFG15_crop(r16)                      _BFGET_(r16, 5, 2)
    #define   SET16ADPSCL_CFG15_crop(r16,v)                    _BFSET_(r16, 5, 2,v)

    #define   GET32ADPSCL_CFG15_hscl11(r32)                    _BFGET_(r32,22,22)
    #define   SET32ADPSCL_CFG15_hscl11(r32,v)                  _BFSET_(r32,22,22,v)
    #define   GET16ADPSCL_CFG15_hscl11(r16)                    _BFGET_(r16, 6, 6)
    #define   SET16ADPSCL_CFG15_hscl11(r16,v)                  _BFSET_(r16, 6, 6,v)

    #define   GET32ADPSCL_CFG15_vscl11(r32)                    _BFGET_(r32,23,23)
    #define   SET32ADPSCL_CFG15_vscl11(r32,v)                  _BFSET_(r32,23,23,v)
    #define   GET16ADPSCL_CFG15_vscl11(r16)                    _BFGET_(r16, 7, 7)
    #define   SET16ADPSCL_CFG15_vscl11(r16,v)                  _BFSET_(r16, 7, 7,v)

    #define   GET32ADPSCL_CFG15_bypass(r32)                    _BFGET_(r32,24,24)
    #define   SET32ADPSCL_CFG15_bypass(r32,v)                  _BFSET_(r32,24,24,v)
    #define   GET16ADPSCL_CFG15_bypass(r16)                    _BFGET_(r16, 8, 8)
    #define   SET16ADPSCL_CFG15_bypass(r16,v)                  _BFSET_(r16, 8, 8,v)

    #define   GET32ADPSCL_CFG15_frndsel(r32)                   _BFGET_(r32,25,25)
    #define   SET32ADPSCL_CFG15_frndsel(r32,v)                 _BFSET_(r32,25,25,v)
    #define   GET16ADPSCL_CFG15_frndsel(r16)                   _BFGET_(r16, 9, 9)
    #define   SET16ADPSCL_CFG15_frndsel(r16,v)                 _BFSET_(r16, 9, 9,v)

    #define   GET32ADPSCL_CFG15_hvdcp(r32)                     _BFGET_(r32,26,26)
    #define   SET32ADPSCL_CFG15_hvdcp(r32,v)                   _BFSET_(r32,26,26,v)
    #define   GET16ADPSCL_CFG15_hvdcp(r16)                     _BFGET_(r16,10,10)
    #define   SET16ADPSCL_CFG15_hvdcp(r16,v)                   _BFSET_(r16,10,10,v)

    #define   GET32ADPSCL_CFG15_pa_impv_en(r32)                _BFGET_(r32,27,27)
    #define   SET32ADPSCL_CFG15_pa_impv_en(r32,v)              _BFSET_(r32,27,27,v)
    #define   GET16ADPSCL_CFG15_pa_impv_en(r16)                _BFGET_(r16,11,11)
    #define   SET16ADPSCL_CFG15_pa_impv_en(r16,v)              _BFSET_(r16,11,11,v)

    #define   GET32ADPSCL_CFG15_mask_hvswap_en(r32)            _BFGET_(r32,31,28)
    #define   SET32ADPSCL_CFG15_mask_hvswap_en(r32,v)          _BFSET_(r32,31,28,v)
    #define   GET16ADPSCL_CFG15_mask_hvswap_en(r16)            _BFGET_(r16,15,12)
    #define   SET16ADPSCL_CFG15_mask_hvswap_en(r16,v)          _BFSET_(r16,15,12,v)

    #define     w32ADPSCL_CFG15                                {\
            UNSG32 uCFG15_ctrl1                                :  8;\
            UNSG32 uCFG15_hctrl                                :  5;\
            UNSG32 uCFG15_vctrl                                :  5;\
            UNSG32 uCFG15_crop                                 :  4;\
            UNSG32 uCFG15_hscl11                               :  1;\
            UNSG32 uCFG15_vscl11                               :  1;\
            UNSG32 uCFG15_bypass                               :  1;\
            UNSG32 uCFG15_frndsel                              :  1;\
            UNSG32 uCFG15_hvdcp                                :  1;\
            UNSG32 uCFG15_pa_impv_en                           :  1;\
            UNSG32 uCFG15_mask_hvswap_en                       :  4;\
          }
    union { UNSG32 u32ADPSCL_CFG15;
            struct w32ADPSCL_CFG15;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG16_en_n(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32ADPSCL_CFG16_en_n(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16ADPSCL_CFG16_en_n(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16ADPSCL_CFG16_en_n(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32ADPSCL_CFG16_xbstall_en(r32)                _BFGET_(r32, 1, 1)
    #define   SET32ADPSCL_CFG16_xbstall_en(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16ADPSCL_CFG16_xbstall_en(r16)                _BFGET_(r16, 1, 1)
    #define   SET16ADPSCL_CFG16_xbstall_en(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32ADPSCL_CFG16_xbstall_dly(r32)               _BFGET_(r32,15, 2)
    #define   SET32ADPSCL_CFG16_xbstall_dly(r32,v)             _BFSET_(r32,15, 2,v)
    #define   GET16ADPSCL_CFG16_xbstall_dly(r16)               _BFGET_(r16,15, 2)
    #define   SET16ADPSCL_CFG16_xbstall_dly(r16,v)             _BFSET_(r16,15, 2,v)

    #define   GET32ADPSCL_CFG16_ovf_margin(r32)                _BFGET_(r32,23,16)
    #define   SET32ADPSCL_CFG16_ovf_margin(r32,v)              _BFSET_(r32,23,16,v)
    #define   GET16ADPSCL_CFG16_ovf_margin(r16)                _BFGET_(r16, 7, 0)
    #define   SET16ADPSCL_CFG16_ovf_margin(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32ADPSCL_CFG16_udf_margin(r32)                _BFGET_(r32,31,24)
    #define   SET32ADPSCL_CFG16_udf_margin(r32,v)              _BFSET_(r32,31,24,v)
    #define   GET16ADPSCL_CFG16_udf_margin(r16)                _BFGET_(r16,15, 8)
    #define   SET16ADPSCL_CFG16_udf_margin(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32ADPSCL_CFG16                                {\
            UNSG32 uCFG16_en_n                                 :  1;\
            UNSG32 uCFG16_xbstall_en                           :  1;\
            UNSG32 uCFG16_xbstall_dly                          : 14;\
            UNSG32 uCFG16_ovf_margin                           :  8;\
            UNSG32 uCFG16_udf_margin                           :  8;\
          }
    union { UNSG32 u32ADPSCL_CFG16;
            struct w32ADPSCL_CFG16;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG17_lsize(r32)                     _BFGET_(r32, 9, 0)
    #define   SET32ADPSCL_CFG17_lsize(r32,v)                   _BFSET_(r32, 9, 0,v)
    #define   GET16ADPSCL_CFG17_lsize(r16)                     _BFGET_(r16, 9, 0)
    #define   SET16ADPSCL_CFG17_lsize(r16,v)                   _BFSET_(r16, 9, 0,v)

    #define   GET32ADPSCL_CFG17_lsize_A(r32)                   _BFGET_(r32,19,10)
    #define   SET32ADPSCL_CFG17_lsize_A(r32,v)                 _BFSET_(r32,19,10,v)

    #define     w32ADPSCL_CFG17                                {\
            UNSG32 uCFG17_lsize                                : 10;\
            UNSG32 uCFG17_lsize_A                              : 10;\
            UNSG32 RSVDx3C_b20                                 : 12;\
          }
    union { UNSG32 u32ADPSCL_CFG17;
            struct w32ADPSCL_CFG17;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG18_fifo_mode(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32ADPSCL_CFG18_fifo_mode(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16ADPSCL_CFG18_fifo_mode(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16ADPSCL_CFG18_fifo_mode(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32ADPSCL_CFG18_fifo_depth(r32)                _BFGET_(r32,15, 1)
    #define   SET32ADPSCL_CFG18_fifo_depth(r32,v)              _BFSET_(r32,15, 1,v)
    #define   GET16ADPSCL_CFG18_fifo_depth(r16)                _BFGET_(r16,15, 1)
    #define   SET16ADPSCL_CFG18_fifo_depth(r16,v)              _BFSET_(r16,15, 1,v)

    #define   GET32ADPSCL_CFG18_fifo_dfst(r32)                 _BFGET_(r32,30,16)
    #define   SET32ADPSCL_CFG18_fifo_dfst(r32,v)               _BFSET_(r32,30,16,v)
    #define   GET16ADPSCL_CFG18_fifo_dfst(r16)                 _BFGET_(r16,14, 0)
    #define   SET16ADPSCL_CFG18_fifo_dfst(r16,v)               _BFSET_(r16,14, 0,v)

    #define   GET32ADPSCL_CFG18_pftch(r32)                     _BFGET_(r32,31,31)
    #define   SET32ADPSCL_CFG18_pftch(r32,v)                   _BFSET_(r32,31,31,v)
    #define   GET16ADPSCL_CFG18_pftch(r16)                     _BFGET_(r16,15,15)
    #define   SET16ADPSCL_CFG18_pftch(r16,v)                   _BFSET_(r16,15,15,v)

    #define     w32ADPSCL_CFG18                                {\
            UNSG32 uCFG18_fifo_mode                            :  1;\
            UNSG32 uCFG18_fifo_depth                           : 15;\
            UNSG32 uCFG18_fifo_dfst                            : 15;\
            UNSG32 uCFG18_pftch                                :  1;\
          }
    union { UNSG32 u32ADPSCL_CFG18;
            struct w32ADPSCL_CFG18;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG19_scl_after_crop_h(r32)          _BFGET_(r32, 7, 0)
    #define   SET32ADPSCL_CFG19_scl_after_crop_h(r32,v)        _BFSET_(r32, 7, 0,v)
    #define   GET16ADPSCL_CFG19_scl_after_crop_h(r16)          _BFGET_(r16, 7, 0)
    #define   SET16ADPSCL_CFG19_scl_after_crop_h(r16,v)        _BFSET_(r16, 7, 0,v)

    #define   GET32ADPSCL_CFG19_scl_after_crop_v(r32)          _BFGET_(r32,15, 8)
    #define   SET32ADPSCL_CFG19_scl_after_crop_v(r32,v)        _BFSET_(r32,15, 8,v)
    #define   GET16ADPSCL_CFG19_scl_after_crop_v(r16)          _BFGET_(r16,15, 8)
    #define   SET16ADPSCL_CFG19_scl_after_crop_v(r16,v)        _BFSET_(r16,15, 8,v)

    #define     w32ADPSCL_CFG19                                {\
            UNSG32 uCFG19_scl_after_crop_h                     :  8;\
            UNSG32 uCFG19_scl_after_crop_v                     :  8;\
            UNSG32 RSVDx44_b16                                 : 16;\
          }
    union { UNSG32 u32ADPSCL_CFG19;
            struct w32ADPSCL_CFG19;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CFG20_lb_pdwn_regs(r32)              _BFGET_(r32, 0, 0)
    #define   SET32ADPSCL_CFG20_lb_pdwn_regs(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16ADPSCL_CFG20_lb_pdwn_regs(r16)              _BFGET_(r16, 0, 0)
    #define   SET16ADPSCL_CFG20_lb_pdwn_regs(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32ADPSCL_CFG20_lb_pdlvmc_regs(r32)            _BFGET_(r32, 1, 1)
    #define   SET32ADPSCL_CFG20_lb_pdlvmc_regs(r32,v)          _BFSET_(r32, 1, 1,v)
    #define   GET16ADPSCL_CFG20_lb_pdlvmc_regs(r16)            _BFGET_(r16, 1, 1)
    #define   SET16ADPSCL_CFG20_lb_pdlvmc_regs(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32ADPSCL_CFG20_lb_pdfvssm_regs(r32)           _BFGET_(r32, 2, 2)
    #define   SET32ADPSCL_CFG20_lb_pdfvssm_regs(r32,v)         _BFSET_(r32, 2, 2,v)
    #define   GET16ADPSCL_CFG20_lb_pdfvssm_regs(r16)           _BFGET_(r16, 2, 2)
    #define   SET16ADPSCL_CFG20_lb_pdfvssm_regs(r16,v)         _BFSET_(r16, 2, 2,v)

    #define   GET32ADPSCL_CFG20_reserved0(r32)                 _BFGET_(r32, 3, 3)
    #define   SET32ADPSCL_CFG20_reserved0(r32,v)               _BFSET_(r32, 3, 3,v)
    #define   GET16ADPSCL_CFG20_reserved0(r16)                 _BFGET_(r16, 3, 3)
    #define   SET16ADPSCL_CFG20_reserved0(r16,v)               _BFSET_(r16, 3, 3,v)

    #define   GET32ADPSCL_CFG20_lut_pdwn_regs(r32)             _BFGET_(r32, 4, 4)
    #define   SET32ADPSCL_CFG20_lut_pdwn_regs(r32,v)           _BFSET_(r32, 4, 4,v)
    #define   GET16ADPSCL_CFG20_lut_pdwn_regs(r16)             _BFGET_(r16, 4, 4)
    #define   SET16ADPSCL_CFG20_lut_pdwn_regs(r16,v)           _BFSET_(r16, 4, 4,v)

    #define   GET32ADPSCL_CFG20_lut_pdlvmc_regs(r32)           _BFGET_(r32, 5, 5)
    #define   SET32ADPSCL_CFG20_lut_pdlvmc_regs(r32,v)         _BFSET_(r32, 5, 5,v)
    #define   GET16ADPSCL_CFG20_lut_pdlvmc_regs(r16)           _BFGET_(r16, 5, 5)
    #define   SET16ADPSCL_CFG20_lut_pdlvmc_regs(r16,v)         _BFSET_(r16, 5, 5,v)

    #define   GET32ADPSCL_CFG20_lut_pdfvssm_regs(r32)          _BFGET_(r32, 6, 6)
    #define   SET32ADPSCL_CFG20_lut_pdfvssm_regs(r32,v)        _BFSET_(r32, 6, 6,v)
    #define   GET16ADPSCL_CFG20_lut_pdfvssm_regs(r16)          _BFGET_(r16, 6, 6)
    #define   SET16ADPSCL_CFG20_lut_pdfvssm_regs(r16,v)        _BFSET_(r16, 6, 6,v)

    #define   GET32ADPSCL_CFG20_reserved1(r32)                 _BFGET_(r32, 7, 7)
    #define   SET32ADPSCL_CFG20_reserved1(r32,v)               _BFSET_(r32, 7, 7,v)
    #define   GET16ADPSCL_CFG20_reserved1(r16)                 _BFGET_(r16, 7, 7)
    #define   SET16ADPSCL_CFG20_reserved1(r16,v)               _BFSET_(r16, 7, 7,v)

    #define   GET32ADPSCL_CFG20_dpwr_regs(r32)                 _BFGET_(r32,10, 8)
    #define   SET32ADPSCL_CFG20_dpwr_regs(r32,v)               _BFSET_(r32,10, 8,v)
    #define   GET16ADPSCL_CFG20_dpwr_regs(r16)                 _BFGET_(r16,10, 8)
    #define   SET16ADPSCL_CFG20_dpwr_regs(r16,v)               _BFSET_(r16,10, 8,v)

    #define   GET32ADPSCL_CFG20_Reserved2(r32)                 _BFGET_(r32,11,11)
    #define   SET32ADPSCL_CFG20_Reserved2(r32,v)               _BFSET_(r32,11,11,v)
    #define   GET16ADPSCL_CFG20_Reserved2(r16)                 _BFGET_(r16,11,11)
    #define   SET16ADPSCL_CFG20_Reserved2(r16,v)               _BFSET_(r16,11,11,v)

    #define     w32ADPSCL_CFG20                                {\
            UNSG32 uCFG20_lb_pdwn_regs                         :  1;\
            UNSG32 uCFG20_lb_pdlvmc_regs                       :  1;\
            UNSG32 uCFG20_lb_pdfvssm_regs                      :  1;\
            UNSG32 uCFG20_reserved0                            :  1;\
            UNSG32 uCFG20_lut_pdwn_regs                        :  1;\
            UNSG32 uCFG20_lut_pdlvmc_regs                      :  1;\
            UNSG32 uCFG20_lut_pdfvssm_regs                     :  1;\
            UNSG32 uCFG20_reserved1                            :  1;\
            UNSG32 uCFG20_dpwr_regs                            :  3;\
            UNSG32 uCFG20_Reserved2                            :  1;\
            UNSG32 RSVDx48_b12                                 : 20;\
          }
    union { UNSG32 u32ADPSCL_CFG20;
            struct w32ADPSCL_CFG20;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ADPSCL;

    typedef union  T32ADPSCL_CFG0
          { UNSG32 u32;
            struct w32ADPSCL_CFG0;
                 } T32ADPSCL_CFG0;
    typedef union  T32ADPSCL_CFG1
          { UNSG32 u32;
            struct w32ADPSCL_CFG1;
                 } T32ADPSCL_CFG1;
    typedef union  T32ADPSCL_CFG2
          { UNSG32 u32;
            struct w32ADPSCL_CFG2;
                 } T32ADPSCL_CFG2;
    typedef union  T32ADPSCL_CFG3
          { UNSG32 u32;
            struct w32ADPSCL_CFG3;
                 } T32ADPSCL_CFG3;
    typedef union  T32ADPSCL_CFG4
          { UNSG32 u32;
            struct w32ADPSCL_CFG4;
                 } T32ADPSCL_CFG4;
    typedef union  T32ADPSCL_CFG5
          { UNSG32 u32;
            struct w32ADPSCL_CFG5;
                 } T32ADPSCL_CFG5;
    typedef union  T32ADPSCL_CFG6
          { UNSG32 u32;
            struct w32ADPSCL_CFG6;
                 } T32ADPSCL_CFG6;
    typedef union  T32ADPSCL_CFG7
          { UNSG32 u32;
            struct w32ADPSCL_CFG7;
                 } T32ADPSCL_CFG7;
    typedef union  T32ADPSCL_CFG8
          { UNSG32 u32;
            struct w32ADPSCL_CFG8;
                 } T32ADPSCL_CFG8;
    typedef union  T32ADPSCL_CFG9
          { UNSG32 u32;
            struct w32ADPSCL_CFG9;
                 } T32ADPSCL_CFG9;
    typedef union  T32ADPSCL_CFG10
          { UNSG32 u32;
            struct w32ADPSCL_CFG10;
                 } T32ADPSCL_CFG10;
    typedef union  T32ADPSCL_CFG11
          { UNSG32 u32;
            struct w32ADPSCL_CFG11;
                 } T32ADPSCL_CFG11;
    typedef union  T32ADPSCL_CFG12
          { UNSG32 u32;
            struct w32ADPSCL_CFG12;
                 } T32ADPSCL_CFG12;
    typedef union  T32ADPSCL_CFG15
          { UNSG32 u32;
            struct w32ADPSCL_CFG15;
                 } T32ADPSCL_CFG15;
    typedef union  T32ADPSCL_CFG16
          { UNSG32 u32;
            struct w32ADPSCL_CFG16;
                 } T32ADPSCL_CFG16;
    typedef union  T32ADPSCL_CFG17
          { UNSG32 u32;
            struct w32ADPSCL_CFG17;
                 } T32ADPSCL_CFG17;
    typedef union  T32ADPSCL_CFG18
          { UNSG32 u32;
            struct w32ADPSCL_CFG18;
                 } T32ADPSCL_CFG18;
    typedef union  T32ADPSCL_CFG19
          { UNSG32 u32;
            struct w32ADPSCL_CFG19;
                 } T32ADPSCL_CFG19;
    typedef union  T32ADPSCL_CFG20
          { UNSG32 u32;
            struct w32ADPSCL_CFG20;
                 } T32ADPSCL_CFG20;
    ///////////////////////////////////////////////////////////

    typedef union  TADPSCL_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG0;
                   };
                 } TADPSCL_CFG0;
    typedef union  TADPSCL_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG1;
                   };
                 } TADPSCL_CFG1;
    typedef union  TADPSCL_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG2;
                   };
                 } TADPSCL_CFG2;
    typedef union  TADPSCL_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG3;
                   };
                 } TADPSCL_CFG3;
    typedef union  TADPSCL_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG4;
                   };
                 } TADPSCL_CFG4;
    typedef union  TADPSCL_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG5;
                   };
                 } TADPSCL_CFG5;
    typedef union  TADPSCL_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG6;
                   };
                 } TADPSCL_CFG6;
    typedef union  TADPSCL_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG7;
                   };
                 } TADPSCL_CFG7;
    typedef union  TADPSCL_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG8;
                   };
                 } TADPSCL_CFG8;
    typedef union  TADPSCL_CFG9
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG9;
                   };
                 } TADPSCL_CFG9;
    typedef union  TADPSCL_CFG10
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG10;
                   };
                 } TADPSCL_CFG10;
    typedef union  TADPSCL_CFG11
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG11;
                   };
                 } TADPSCL_CFG11;
    typedef union  TADPSCL_CFG12
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG12;
                   };
                 } TADPSCL_CFG12;
    typedef union  TADPSCL_CFG15
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG15;
                   };
                 } TADPSCL_CFG15;
    typedef union  TADPSCL_CFG16
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG16;
                   };
                 } TADPSCL_CFG16;
    typedef union  TADPSCL_CFG17
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG17;
                   };
                 } TADPSCL_CFG17;
    typedef union  TADPSCL_CFG18
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG18;
                   };
                 } TADPSCL_CFG18;
    typedef union  TADPSCL_CFG19
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG19;
                   };
                 } TADPSCL_CFG19;
    typedef union  TADPSCL_CFG20
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CFG20;
                   };
                 } TADPSCL_CFG20;

    ///////////////////////////////////////////////////////////
     SIGN32 ADPSCL_drvrd(SIE_ADPSCL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ADPSCL_drvwr(SIE_ADPSCL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ADPSCL_reset(SIE_ADPSCL *p);
     SIGN32 ADPSCL_cmp  (SIE_ADPSCL *p, SIE_ADPSCL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ADPSCL_check(p,pie,pfx,hLOG) ADPSCL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ADPSCL_print(p,    pfx,hLOG) ADPSCL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ADPSCL
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ADPSCL_CSC              biu              (4,4)
///     ###
///     * Register specification of interface ADPSCL_CSC
///     * Defines the size of the adpscl_csc
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 14 c0_sel                    0x200
///                                    ###
///                                    * Color space coefficients in -4.9 format
///                                    ###
///               %unsigned 14 c1_sel                    0x0
///                                    ###
///                                    * Color space coefficients in -4.9 format
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %unsigned 14 c2_sel                    0x0
///                                    ###
///                                    * Color space coefficients in -4.9 format
///                                    ###
///               %unsigned 14 c3_sel                    0x0
///                                    ###
///                                    * Color space coefficients in -4.9 format
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 14 c4_sel                    0x200
///                                    ###
///                                    * Color space coefficients in -4.9 format
///                                    ###
///               %unsigned 14 c5_sel                    0x0
///                                    ###
///                                    * Color space coefficients in -4.9 format
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %unsigned 14 c6_sel                    0x0
///                                    ###
///                                    * Color space coefficients in -4.9 format
///                                    ###
///               %unsigned 14 c7_sel                    0x0
///                                    ###
///                                    * Color space coefficients in -4.9 format
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %unsigned 14 c8_sel                    0x200
///                                    ###
///                                    * Color space coefficients in -4.9 format
///                                    ###
///               %unsigned 16 off0_sel                  0x0
///                                    ###
///                                    * Color space offsets in -11.4 format
///                                    ###
///               %%        2          # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 16 off1_sel                  0x0
///                                    ###
///                                    * Color space offsets in -11.4 format
///                                    ###
///               %unsigned 16 off2_sel                  0x0
///                                    ###
///                                    * Color space offsets in -11.4 format
///                                    * End of adpscl_csc register group
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      24B, bits:     174b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ADPSCL_CSC
#define h_ADPSCL_CSC (){}

    #define     RA_ADPSCL_CSC_CFG0                             0x0000

    #define     BA_ADPSCL_CSC_CFG0_c0_sel                      0x0000
    #define     B16ADPSCL_CSC_CFG0_c0_sel                      0x0000
    #define   LSb32ADPSCL_CSC_CFG0_c0_sel                         0
    #define   LSb16ADPSCL_CSC_CFG0_c0_sel                         0
    #define       bADPSCL_CSC_CFG0_c0_sel                      14
    #define   MSK32ADPSCL_CSC_CFG0_c0_sel                         0x00003FFF

    #define     BA_ADPSCL_CSC_CFG0_c1_sel                      0x0001
    #define     B16ADPSCL_CSC_CFG0_c1_sel                      0x0000
    #define   LSb32ADPSCL_CSC_CFG0_c1_sel                         14
    #define   LSb16ADPSCL_CSC_CFG0_c1_sel                         14
    #define       bADPSCL_CSC_CFG0_c1_sel                      14
    #define   MSK32ADPSCL_CSC_CFG0_c1_sel                         0x0FFFC000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CSC_CFG1                             0x0004

    #define     BA_ADPSCL_CSC_CFG1_c2_sel                      0x0004
    #define     B16ADPSCL_CSC_CFG1_c2_sel                      0x0004
    #define   LSb32ADPSCL_CSC_CFG1_c2_sel                         0
    #define   LSb16ADPSCL_CSC_CFG1_c2_sel                         0
    #define       bADPSCL_CSC_CFG1_c2_sel                      14
    #define   MSK32ADPSCL_CSC_CFG1_c2_sel                         0x00003FFF

    #define     BA_ADPSCL_CSC_CFG1_c3_sel                      0x0005
    #define     B16ADPSCL_CSC_CFG1_c3_sel                      0x0004
    #define   LSb32ADPSCL_CSC_CFG1_c3_sel                         14
    #define   LSb16ADPSCL_CSC_CFG1_c3_sel                         14
    #define       bADPSCL_CSC_CFG1_c3_sel                      14
    #define   MSK32ADPSCL_CSC_CFG1_c3_sel                         0x0FFFC000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CSC_CFG2                             0x0008

    #define     BA_ADPSCL_CSC_CFG2_c4_sel                      0x0008
    #define     B16ADPSCL_CSC_CFG2_c4_sel                      0x0008
    #define   LSb32ADPSCL_CSC_CFG2_c4_sel                         0
    #define   LSb16ADPSCL_CSC_CFG2_c4_sel                         0
    #define       bADPSCL_CSC_CFG2_c4_sel                      14
    #define   MSK32ADPSCL_CSC_CFG2_c4_sel                         0x00003FFF

    #define     BA_ADPSCL_CSC_CFG2_c5_sel                      0x0009
    #define     B16ADPSCL_CSC_CFG2_c5_sel                      0x0008
    #define   LSb32ADPSCL_CSC_CFG2_c5_sel                         14
    #define   LSb16ADPSCL_CSC_CFG2_c5_sel                         14
    #define       bADPSCL_CSC_CFG2_c5_sel                      14
    #define   MSK32ADPSCL_CSC_CFG2_c5_sel                         0x0FFFC000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CSC_CFG3                             0x000C

    #define     BA_ADPSCL_CSC_CFG3_c6_sel                      0x000C
    #define     B16ADPSCL_CSC_CFG3_c6_sel                      0x000C
    #define   LSb32ADPSCL_CSC_CFG3_c6_sel                         0
    #define   LSb16ADPSCL_CSC_CFG3_c6_sel                         0
    #define       bADPSCL_CSC_CFG3_c6_sel                      14
    #define   MSK32ADPSCL_CSC_CFG3_c6_sel                         0x00003FFF

    #define     BA_ADPSCL_CSC_CFG3_c7_sel                      0x000D
    #define     B16ADPSCL_CSC_CFG3_c7_sel                      0x000C
    #define   LSb32ADPSCL_CSC_CFG3_c7_sel                         14
    #define   LSb16ADPSCL_CSC_CFG3_c7_sel                         14
    #define       bADPSCL_CSC_CFG3_c7_sel                      14
    #define   MSK32ADPSCL_CSC_CFG3_c7_sel                         0x0FFFC000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CSC_CFG4                             0x0010

    #define     BA_ADPSCL_CSC_CFG4_c8_sel                      0x0010
    #define     B16ADPSCL_CSC_CFG4_c8_sel                      0x0010
    #define   LSb32ADPSCL_CSC_CFG4_c8_sel                         0
    #define   LSb16ADPSCL_CSC_CFG4_c8_sel                         0
    #define       bADPSCL_CSC_CFG4_c8_sel                      14
    #define   MSK32ADPSCL_CSC_CFG4_c8_sel                         0x00003FFF

    #define     BA_ADPSCL_CSC_CFG4_off0_sel                    0x0011
    #define     B16ADPSCL_CSC_CFG4_off0_sel                    0x0010
    #define   LSb32ADPSCL_CSC_CFG4_off0_sel                       14
    #define   LSb16ADPSCL_CSC_CFG4_off0_sel                       14
    #define       bADPSCL_CSC_CFG4_off0_sel                    16
    #define   MSK32ADPSCL_CSC_CFG4_off0_sel                       0x3FFFC000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_CSC_CFG5                             0x0014

    #define     BA_ADPSCL_CSC_CFG5_off1_sel                    0x0014
    #define     B16ADPSCL_CSC_CFG5_off1_sel                    0x0014
    #define   LSb32ADPSCL_CSC_CFG5_off1_sel                       0
    #define   LSb16ADPSCL_CSC_CFG5_off1_sel                       0
    #define       bADPSCL_CSC_CFG5_off1_sel                    16
    #define   MSK32ADPSCL_CSC_CFG5_off1_sel                       0x0000FFFF

    #define     BA_ADPSCL_CSC_CFG5_off2_sel                    0x0016
    #define     B16ADPSCL_CSC_CFG5_off2_sel                    0x0016
    #define   LSb32ADPSCL_CSC_CFG5_off2_sel                       16
    #define   LSb16ADPSCL_CSC_CFG5_off2_sel                       0
    #define       bADPSCL_CSC_CFG5_off2_sel                    16
    #define   MSK32ADPSCL_CSC_CFG5_off2_sel                       0xFFFF0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ADPSCL_CSC {
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CSC_CFG0_c0_sel(r32)                 _BFGET_(r32,13, 0)
    #define   SET32ADPSCL_CSC_CFG0_c0_sel(r32,v)               _BFSET_(r32,13, 0,v)
    #define   GET16ADPSCL_CSC_CFG0_c0_sel(r16)                 _BFGET_(r16,13, 0)
    #define   SET16ADPSCL_CSC_CFG0_c0_sel(r16,v)               _BFSET_(r16,13, 0,v)

    #define   GET32ADPSCL_CSC_CFG0_c1_sel(r32)                 _BFGET_(r32,27,14)
    #define   SET32ADPSCL_CSC_CFG0_c1_sel(r32,v)               _BFSET_(r32,27,14,v)

    #define     w32ADPSCL_CSC_CFG0                             {\
            UNSG32 uCFG0_c0_sel                                : 14;\
            UNSG32 uCFG0_c1_sel                                : 14;\
            UNSG32 RSVDx0_b28                                  :  4;\
          }
    union { UNSG32 u32ADPSCL_CSC_CFG0;
            struct w32ADPSCL_CSC_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CSC_CFG1_c2_sel(r32)                 _BFGET_(r32,13, 0)
    #define   SET32ADPSCL_CSC_CFG1_c2_sel(r32,v)               _BFSET_(r32,13, 0,v)
    #define   GET16ADPSCL_CSC_CFG1_c2_sel(r16)                 _BFGET_(r16,13, 0)
    #define   SET16ADPSCL_CSC_CFG1_c2_sel(r16,v)               _BFSET_(r16,13, 0,v)

    #define   GET32ADPSCL_CSC_CFG1_c3_sel(r32)                 _BFGET_(r32,27,14)
    #define   SET32ADPSCL_CSC_CFG1_c3_sel(r32,v)               _BFSET_(r32,27,14,v)

    #define     w32ADPSCL_CSC_CFG1                             {\
            UNSG32 uCFG1_c2_sel                                : 14;\
            UNSG32 uCFG1_c3_sel                                : 14;\
            UNSG32 RSVDx4_b28                                  :  4;\
          }
    union { UNSG32 u32ADPSCL_CSC_CFG1;
            struct w32ADPSCL_CSC_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CSC_CFG2_c4_sel(r32)                 _BFGET_(r32,13, 0)
    #define   SET32ADPSCL_CSC_CFG2_c4_sel(r32,v)               _BFSET_(r32,13, 0,v)
    #define   GET16ADPSCL_CSC_CFG2_c4_sel(r16)                 _BFGET_(r16,13, 0)
    #define   SET16ADPSCL_CSC_CFG2_c4_sel(r16,v)               _BFSET_(r16,13, 0,v)

    #define   GET32ADPSCL_CSC_CFG2_c5_sel(r32)                 _BFGET_(r32,27,14)
    #define   SET32ADPSCL_CSC_CFG2_c5_sel(r32,v)               _BFSET_(r32,27,14,v)

    #define     w32ADPSCL_CSC_CFG2                             {\
            UNSG32 uCFG2_c4_sel                                : 14;\
            UNSG32 uCFG2_c5_sel                                : 14;\
            UNSG32 RSVDx8_b28                                  :  4;\
          }
    union { UNSG32 u32ADPSCL_CSC_CFG2;
            struct w32ADPSCL_CSC_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CSC_CFG3_c6_sel(r32)                 _BFGET_(r32,13, 0)
    #define   SET32ADPSCL_CSC_CFG3_c6_sel(r32,v)               _BFSET_(r32,13, 0,v)
    #define   GET16ADPSCL_CSC_CFG3_c6_sel(r16)                 _BFGET_(r16,13, 0)
    #define   SET16ADPSCL_CSC_CFG3_c6_sel(r16,v)               _BFSET_(r16,13, 0,v)

    #define   GET32ADPSCL_CSC_CFG3_c7_sel(r32)                 _BFGET_(r32,27,14)
    #define   SET32ADPSCL_CSC_CFG3_c7_sel(r32,v)               _BFSET_(r32,27,14,v)

    #define     w32ADPSCL_CSC_CFG3                             {\
            UNSG32 uCFG3_c6_sel                                : 14;\
            UNSG32 uCFG3_c7_sel                                : 14;\
            UNSG32 RSVDxC_b28                                  :  4;\
          }
    union { UNSG32 u32ADPSCL_CSC_CFG3;
            struct w32ADPSCL_CSC_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CSC_CFG4_c8_sel(r32)                 _BFGET_(r32,13, 0)
    #define   SET32ADPSCL_CSC_CFG4_c8_sel(r32,v)               _BFSET_(r32,13, 0,v)
    #define   GET16ADPSCL_CSC_CFG4_c8_sel(r16)                 _BFGET_(r16,13, 0)
    #define   SET16ADPSCL_CSC_CFG4_c8_sel(r16,v)               _BFSET_(r16,13, 0,v)

    #define   GET32ADPSCL_CSC_CFG4_off0_sel(r32)               _BFGET_(r32,29,14)
    #define   SET32ADPSCL_CSC_CFG4_off0_sel(r32,v)             _BFSET_(r32,29,14,v)

    #define     w32ADPSCL_CSC_CFG4                             {\
            UNSG32 uCFG4_c8_sel                                : 14;\
            UNSG32 uCFG4_off0_sel                              : 16;\
            UNSG32 RSVDx10_b30                                 :  2;\
          }
    union { UNSG32 u32ADPSCL_CSC_CFG4;
            struct w32ADPSCL_CSC_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_CSC_CFG5_off1_sel(r32)               _BFGET_(r32,15, 0)
    #define   SET32ADPSCL_CSC_CFG5_off1_sel(r32,v)             _BFSET_(r32,15, 0,v)
    #define   GET16ADPSCL_CSC_CFG5_off1_sel(r16)               _BFGET_(r16,15, 0)
    #define   SET16ADPSCL_CSC_CFG5_off1_sel(r16,v)             _BFSET_(r16,15, 0,v)

    #define   GET32ADPSCL_CSC_CFG5_off2_sel(r32)               _BFGET_(r32,31,16)
    #define   SET32ADPSCL_CSC_CFG5_off2_sel(r32,v)             _BFSET_(r32,31,16,v)
    #define   GET16ADPSCL_CSC_CFG5_off2_sel(r16)               _BFGET_(r16,15, 0)
    #define   SET16ADPSCL_CSC_CFG5_off2_sel(r16,v)             _BFSET_(r16,15, 0,v)

    #define     w32ADPSCL_CSC_CFG5                             {\
            UNSG32 uCFG5_off1_sel                              : 16;\
            UNSG32 uCFG5_off2_sel                              : 16;\
          }
    union { UNSG32 u32ADPSCL_CSC_CFG5;
            struct w32ADPSCL_CSC_CFG5;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ADPSCL_CSC;

    typedef union  T32ADPSCL_CSC_CFG0
          { UNSG32 u32;
            struct w32ADPSCL_CSC_CFG0;
                 } T32ADPSCL_CSC_CFG0;
    typedef union  T32ADPSCL_CSC_CFG1
          { UNSG32 u32;
            struct w32ADPSCL_CSC_CFG1;
                 } T32ADPSCL_CSC_CFG1;
    typedef union  T32ADPSCL_CSC_CFG2
          { UNSG32 u32;
            struct w32ADPSCL_CSC_CFG2;
                 } T32ADPSCL_CSC_CFG2;
    typedef union  T32ADPSCL_CSC_CFG3
          { UNSG32 u32;
            struct w32ADPSCL_CSC_CFG3;
                 } T32ADPSCL_CSC_CFG3;
    typedef union  T32ADPSCL_CSC_CFG4
          { UNSG32 u32;
            struct w32ADPSCL_CSC_CFG4;
                 } T32ADPSCL_CSC_CFG4;
    typedef union  T32ADPSCL_CSC_CFG5
          { UNSG32 u32;
            struct w32ADPSCL_CSC_CFG5;
                 } T32ADPSCL_CSC_CFG5;
    ///////////////////////////////////////////////////////////

    typedef union  TADPSCL_CSC_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CSC_CFG0;
                   };
                 } TADPSCL_CSC_CFG0;
    typedef union  TADPSCL_CSC_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CSC_CFG1;
                   };
                 } TADPSCL_CSC_CFG1;
    typedef union  TADPSCL_CSC_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CSC_CFG2;
                   };
                 } TADPSCL_CSC_CFG2;
    typedef union  TADPSCL_CSC_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CSC_CFG3;
                   };
                 } TADPSCL_CSC_CFG3;
    typedef union  TADPSCL_CSC_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CSC_CFG4;
                   };
                 } TADPSCL_CSC_CFG4;
    typedef union  TADPSCL_CSC_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_CSC_CFG5;
                   };
                 } TADPSCL_CSC_CFG5;

    ///////////////////////////////////////////////////////////
     SIGN32 ADPSCL_CSC_drvrd(SIE_ADPSCL_CSC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ADPSCL_CSC_drvwr(SIE_ADPSCL_CSC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ADPSCL_CSC_reset(SIE_ADPSCL_CSC *p);
     SIGN32 ADPSCL_CSC_cmp  (SIE_ADPSCL_CSC *p, SIE_ADPSCL_CSC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ADPSCL_CSC_check(p,pie,pfx,hLOG) ADPSCL_CSC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ADPSCL_CSC_print(p,    pfx,hLOG) ADPSCL_CSC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ADPSCL_CSC
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ADPSCL_DNS              biu              (4,4)
///     ###
///     * Register specification of interface ADPSCL_DNS
///     * Defines the size of the adpscl_dns
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 13 c0                        0x0
///                                    ###
///                                    * Chroma downsampler coeff0 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    ###
///               %unsigned 13 c1                        0x0
///                                    ###
///                                    * Chroma downsampler coeff1 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %unsigned 13 c2                        0x0
///                                    ###
///                                    * Chroma downsampler coeff2 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    ###
///               %unsigned 13 c3                        0x0
///                                    ###
///                                    * Chroma downsampler coeff3 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 13 c4                        0x0
///                                    ###
///                                    * Chroma downsampler coeff4 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    ###
///               %unsigned 13 c5                        0x1000
///                                    ###
///                                    * Chroma downsampler coeff5 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    * End of adpscl_dns register group
///                                    ###
///               %%        6          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      78b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ADPSCL_DNS
#define h_ADPSCL_DNS (){}

    #define     RA_ADPSCL_DNS_CFG0                             0x0000

    #define     BA_ADPSCL_DNS_CFG0_c0                          0x0000
    #define     B16ADPSCL_DNS_CFG0_c0                          0x0000
    #define   LSb32ADPSCL_DNS_CFG0_c0                             0
    #define   LSb16ADPSCL_DNS_CFG0_c0                             0
    #define       bADPSCL_DNS_CFG0_c0                          13
    #define   MSK32ADPSCL_DNS_CFG0_c0                             0x00001FFF

    #define     BA_ADPSCL_DNS_CFG0_c1                          0x0001
    #define     B16ADPSCL_DNS_CFG0_c1                          0x0000
    #define   LSb32ADPSCL_DNS_CFG0_c1                             13
    #define   LSb16ADPSCL_DNS_CFG0_c1                             13
    #define       bADPSCL_DNS_CFG0_c1                          13
    #define   MSK32ADPSCL_DNS_CFG0_c1                             0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_DNS_CFG1                             0x0004

    #define     BA_ADPSCL_DNS_CFG1_c2                          0x0004
    #define     B16ADPSCL_DNS_CFG1_c2                          0x0004
    #define   LSb32ADPSCL_DNS_CFG1_c2                             0
    #define   LSb16ADPSCL_DNS_CFG1_c2                             0
    #define       bADPSCL_DNS_CFG1_c2                          13
    #define   MSK32ADPSCL_DNS_CFG1_c2                             0x00001FFF

    #define     BA_ADPSCL_DNS_CFG1_c3                          0x0005
    #define     B16ADPSCL_DNS_CFG1_c3                          0x0004
    #define   LSb32ADPSCL_DNS_CFG1_c3                             13
    #define   LSb16ADPSCL_DNS_CFG1_c3                             13
    #define       bADPSCL_DNS_CFG1_c3                          13
    #define   MSK32ADPSCL_DNS_CFG1_c3                             0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_DNS_CFG2                             0x0008

    #define     BA_ADPSCL_DNS_CFG2_c4                          0x0008
    #define     B16ADPSCL_DNS_CFG2_c4                          0x0008
    #define   LSb32ADPSCL_DNS_CFG2_c4                             0
    #define   LSb16ADPSCL_DNS_CFG2_c4                             0
    #define       bADPSCL_DNS_CFG2_c4                          13
    #define   MSK32ADPSCL_DNS_CFG2_c4                             0x00001FFF

    #define     BA_ADPSCL_DNS_CFG2_c5                          0x0009
    #define     B16ADPSCL_DNS_CFG2_c5                          0x0008
    #define   LSb32ADPSCL_DNS_CFG2_c5                             13
    #define   LSb16ADPSCL_DNS_CFG2_c5                             13
    #define       bADPSCL_DNS_CFG2_c5                          13
    #define   MSK32ADPSCL_DNS_CFG2_c5                             0x03FFE000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ADPSCL_DNS {
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_DNS_CFG0_c0(r32)                     _BFGET_(r32,12, 0)
    #define   SET32ADPSCL_DNS_CFG0_c0(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16ADPSCL_DNS_CFG0_c0(r16)                     _BFGET_(r16,12, 0)
    #define   SET16ADPSCL_DNS_CFG0_c0(r16,v)                   _BFSET_(r16,12, 0,v)

    #define   GET32ADPSCL_DNS_CFG0_c1(r32)                     _BFGET_(r32,25,13)
    #define   SET32ADPSCL_DNS_CFG0_c1(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32ADPSCL_DNS_CFG0                             {\
            UNSG32 uCFG0_c0                                    : 13;\
            UNSG32 uCFG0_c1                                    : 13;\
            UNSG32 RSVDx0_b26                                  :  6;\
          }
    union { UNSG32 u32ADPSCL_DNS_CFG0;
            struct w32ADPSCL_DNS_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_DNS_CFG1_c2(r32)                     _BFGET_(r32,12, 0)
    #define   SET32ADPSCL_DNS_CFG1_c2(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16ADPSCL_DNS_CFG1_c2(r16)                     _BFGET_(r16,12, 0)
    #define   SET16ADPSCL_DNS_CFG1_c2(r16,v)                   _BFSET_(r16,12, 0,v)

    #define   GET32ADPSCL_DNS_CFG1_c3(r32)                     _BFGET_(r32,25,13)
    #define   SET32ADPSCL_DNS_CFG1_c3(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32ADPSCL_DNS_CFG1                             {\
            UNSG32 uCFG1_c2                                    : 13;\
            UNSG32 uCFG1_c3                                    : 13;\
            UNSG32 RSVDx4_b26                                  :  6;\
          }
    union { UNSG32 u32ADPSCL_DNS_CFG1;
            struct w32ADPSCL_DNS_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_DNS_CFG2_c4(r32)                     _BFGET_(r32,12, 0)
    #define   SET32ADPSCL_DNS_CFG2_c4(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16ADPSCL_DNS_CFG2_c4(r16)                     _BFGET_(r16,12, 0)
    #define   SET16ADPSCL_DNS_CFG2_c4(r16,v)                   _BFSET_(r16,12, 0,v)

    #define   GET32ADPSCL_DNS_CFG2_c5(r32)                     _BFGET_(r32,25,13)
    #define   SET32ADPSCL_DNS_CFG2_c5(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32ADPSCL_DNS_CFG2                             {\
            UNSG32 uCFG2_c4                                    : 13;\
            UNSG32 uCFG2_c5                                    : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32ADPSCL_DNS_CFG2;
            struct w32ADPSCL_DNS_CFG2;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ADPSCL_DNS;

    typedef union  T32ADPSCL_DNS_CFG0
          { UNSG32 u32;
            struct w32ADPSCL_DNS_CFG0;
                 } T32ADPSCL_DNS_CFG0;
    typedef union  T32ADPSCL_DNS_CFG1
          { UNSG32 u32;
            struct w32ADPSCL_DNS_CFG1;
                 } T32ADPSCL_DNS_CFG1;
    typedef union  T32ADPSCL_DNS_CFG2
          { UNSG32 u32;
            struct w32ADPSCL_DNS_CFG2;
                 } T32ADPSCL_DNS_CFG2;
    ///////////////////////////////////////////////////////////

    typedef union  TADPSCL_DNS_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_DNS_CFG0;
                   };
                 } TADPSCL_DNS_CFG0;
    typedef union  TADPSCL_DNS_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_DNS_CFG1;
                   };
                 } TADPSCL_DNS_CFG1;
    typedef union  TADPSCL_DNS_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_DNS_CFG2;
                   };
                 } TADPSCL_DNS_CFG2;

    ///////////////////////////////////////////////////////////
     SIGN32 ADPSCL_DNS_drvrd(SIE_ADPSCL_DNS *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ADPSCL_DNS_drvwr(SIE_ADPSCL_DNS *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ADPSCL_DNS_reset(SIE_ADPSCL_DNS *p);
     SIGN32 ADPSCL_DNS_cmp  (SIE_ADPSCL_DNS *p, SIE_ADPSCL_DNS *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ADPSCL_DNS_check(p,pie,pfx,hLOG) ADPSCL_DNS_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ADPSCL_DNS_print(p,    pfx,hLOG) ADPSCL_DNS_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ADPSCL_DNS
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ADPSCL_UPS              biu              (4,4)
///     ###
///     * Register specification of interface ADPSCL_UPS
///     * Defines the size of the adpscl_ups
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 13 c0                        0x50
///                                    ###
///                                    * Chroma upsampler coeff0 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    ###
///               %unsigned 13 c1                        0x0
///                                    ###
///                                    * Chroma upsampler coeff1 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %unsigned 13 c2                        0x1130
///                                    ###
///                                    * Chroma upsampler coeff2 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    ###
///               %unsigned 13 c3                        0x0
///                                    ###
///                                    * Chroma upsampler coeff3 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 13 c4                        0x4E0
///                                    ###
///                                    * Chroma upsampler coeff4 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    ###
///               %unsigned 13 c5                        0x800
///                                    ###
///                                    * Chroma upsampler coeff5 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %unsigned 13 c6                        0x4E0
///                                    ###
///                                    * Chroma upsampler coeff6 in sign magnitude format
///                                    * Bit 12 is sign. 0 for positive and 1 for negative coefficient. [11:0] is magnitude.
///                                    * End of adpscl_ups register group
///                                    ###
///               %%        19         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      16B, bits:      91b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ADPSCL_UPS
#define h_ADPSCL_UPS (){}

    #define     RA_ADPSCL_UPS_CFG0                             0x0000

    #define     BA_ADPSCL_UPS_CFG0_c0                          0x0000
    #define     B16ADPSCL_UPS_CFG0_c0                          0x0000
    #define   LSb32ADPSCL_UPS_CFG0_c0                             0
    #define   LSb16ADPSCL_UPS_CFG0_c0                             0
    #define       bADPSCL_UPS_CFG0_c0                          13
    #define   MSK32ADPSCL_UPS_CFG0_c0                             0x00001FFF

    #define     BA_ADPSCL_UPS_CFG0_c1                          0x0001
    #define     B16ADPSCL_UPS_CFG0_c1                          0x0000
    #define   LSb32ADPSCL_UPS_CFG0_c1                             13
    #define   LSb16ADPSCL_UPS_CFG0_c1                             13
    #define       bADPSCL_UPS_CFG0_c1                          13
    #define   MSK32ADPSCL_UPS_CFG0_c1                             0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_UPS_CFG1                             0x0004

    #define     BA_ADPSCL_UPS_CFG1_c2                          0x0004
    #define     B16ADPSCL_UPS_CFG1_c2                          0x0004
    #define   LSb32ADPSCL_UPS_CFG1_c2                             0
    #define   LSb16ADPSCL_UPS_CFG1_c2                             0
    #define       bADPSCL_UPS_CFG1_c2                          13
    #define   MSK32ADPSCL_UPS_CFG1_c2                             0x00001FFF

    #define     BA_ADPSCL_UPS_CFG1_c3                          0x0005
    #define     B16ADPSCL_UPS_CFG1_c3                          0x0004
    #define   LSb32ADPSCL_UPS_CFG1_c3                             13
    #define   LSb16ADPSCL_UPS_CFG1_c3                             13
    #define       bADPSCL_UPS_CFG1_c3                          13
    #define   MSK32ADPSCL_UPS_CFG1_c3                             0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_UPS_CFG2                             0x0008

    #define     BA_ADPSCL_UPS_CFG2_c4                          0x0008
    #define     B16ADPSCL_UPS_CFG2_c4                          0x0008
    #define   LSb32ADPSCL_UPS_CFG2_c4                             0
    #define   LSb16ADPSCL_UPS_CFG2_c4                             0
    #define       bADPSCL_UPS_CFG2_c4                          13
    #define   MSK32ADPSCL_UPS_CFG2_c4                             0x00001FFF

    #define     BA_ADPSCL_UPS_CFG2_c5                          0x0009
    #define     B16ADPSCL_UPS_CFG2_c5                          0x0008
    #define   LSb32ADPSCL_UPS_CFG2_c5                             13
    #define   LSb16ADPSCL_UPS_CFG2_c5                             13
    #define       bADPSCL_UPS_CFG2_c5                          13
    #define   MSK32ADPSCL_UPS_CFG2_c5                             0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_UPS_CFG3                             0x000C

    #define     BA_ADPSCL_UPS_CFG3_c6                          0x000C
    #define     B16ADPSCL_UPS_CFG3_c6                          0x000C
    #define   LSb32ADPSCL_UPS_CFG3_c6                             0
    #define   LSb16ADPSCL_UPS_CFG3_c6                             0
    #define       bADPSCL_UPS_CFG3_c6                          13
    #define   MSK32ADPSCL_UPS_CFG3_c6                             0x00001FFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ADPSCL_UPS {
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_UPS_CFG0_c0(r32)                     _BFGET_(r32,12, 0)
    #define   SET32ADPSCL_UPS_CFG0_c0(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16ADPSCL_UPS_CFG0_c0(r16)                     _BFGET_(r16,12, 0)
    #define   SET16ADPSCL_UPS_CFG0_c0(r16,v)                   _BFSET_(r16,12, 0,v)

    #define   GET32ADPSCL_UPS_CFG0_c1(r32)                     _BFGET_(r32,25,13)
    #define   SET32ADPSCL_UPS_CFG0_c1(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32ADPSCL_UPS_CFG0                             {\
            UNSG32 uCFG0_c0                                    : 13;\
            UNSG32 uCFG0_c1                                    : 13;\
            UNSG32 RSVDx0_b26                                  :  6;\
          }
    union { UNSG32 u32ADPSCL_UPS_CFG0;
            struct w32ADPSCL_UPS_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_UPS_CFG1_c2(r32)                     _BFGET_(r32,12, 0)
    #define   SET32ADPSCL_UPS_CFG1_c2(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16ADPSCL_UPS_CFG1_c2(r16)                     _BFGET_(r16,12, 0)
    #define   SET16ADPSCL_UPS_CFG1_c2(r16,v)                   _BFSET_(r16,12, 0,v)

    #define   GET32ADPSCL_UPS_CFG1_c3(r32)                     _BFGET_(r32,25,13)
    #define   SET32ADPSCL_UPS_CFG1_c3(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32ADPSCL_UPS_CFG1                             {\
            UNSG32 uCFG1_c2                                    : 13;\
            UNSG32 uCFG1_c3                                    : 13;\
            UNSG32 RSVDx4_b26                                  :  6;\
          }
    union { UNSG32 u32ADPSCL_UPS_CFG1;
            struct w32ADPSCL_UPS_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_UPS_CFG2_c4(r32)                     _BFGET_(r32,12, 0)
    #define   SET32ADPSCL_UPS_CFG2_c4(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16ADPSCL_UPS_CFG2_c4(r16)                     _BFGET_(r16,12, 0)
    #define   SET16ADPSCL_UPS_CFG2_c4(r16,v)                   _BFSET_(r16,12, 0,v)

    #define   GET32ADPSCL_UPS_CFG2_c5(r32)                     _BFGET_(r32,25,13)
    #define   SET32ADPSCL_UPS_CFG2_c5(r32,v)                   _BFSET_(r32,25,13,v)

    #define     w32ADPSCL_UPS_CFG2                             {\
            UNSG32 uCFG2_c4                                    : 13;\
            UNSG32 uCFG2_c5                                    : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32ADPSCL_UPS_CFG2;
            struct w32ADPSCL_UPS_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_UPS_CFG3_c6(r32)                     _BFGET_(r32,12, 0)
    #define   SET32ADPSCL_UPS_CFG3_c6(r32,v)                   _BFSET_(r32,12, 0,v)
    #define   GET16ADPSCL_UPS_CFG3_c6(r16)                     _BFGET_(r16,12, 0)
    #define   SET16ADPSCL_UPS_CFG3_c6(r16,v)                   _BFSET_(r16,12, 0,v)

    #define     w32ADPSCL_UPS_CFG3                             {\
            UNSG32 uCFG3_c6                                    : 13;\
            UNSG32 RSVDxC_b13                                  : 19;\
          }
    union { UNSG32 u32ADPSCL_UPS_CFG3;
            struct w32ADPSCL_UPS_CFG3;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ADPSCL_UPS;

    typedef union  T32ADPSCL_UPS_CFG0
          { UNSG32 u32;
            struct w32ADPSCL_UPS_CFG0;
                 } T32ADPSCL_UPS_CFG0;
    typedef union  T32ADPSCL_UPS_CFG1
          { UNSG32 u32;
            struct w32ADPSCL_UPS_CFG1;
                 } T32ADPSCL_UPS_CFG1;
    typedef union  T32ADPSCL_UPS_CFG2
          { UNSG32 u32;
            struct w32ADPSCL_UPS_CFG2;
                 } T32ADPSCL_UPS_CFG2;
    typedef union  T32ADPSCL_UPS_CFG3
          { UNSG32 u32;
            struct w32ADPSCL_UPS_CFG3;
                 } T32ADPSCL_UPS_CFG3;
    ///////////////////////////////////////////////////////////

    typedef union  TADPSCL_UPS_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_UPS_CFG0;
                   };
                 } TADPSCL_UPS_CFG0;
    typedef union  TADPSCL_UPS_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_UPS_CFG1;
                   };
                 } TADPSCL_UPS_CFG1;
    typedef union  TADPSCL_UPS_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_UPS_CFG2;
                   };
                 } TADPSCL_UPS_CFG2;
    typedef union  TADPSCL_UPS_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_UPS_CFG3;
                   };
                 } TADPSCL_UPS_CFG3;

    ///////////////////////////////////////////////////////////
     SIGN32 ADPSCL_UPS_drvrd(SIE_ADPSCL_UPS *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ADPSCL_UPS_drvwr(SIE_ADPSCL_UPS *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ADPSCL_UPS_reset(SIE_ADPSCL_UPS *p);
     SIGN32 ADPSCL_UPS_cmp  (SIE_ADPSCL_UPS *p, SIE_ADPSCL_UPS *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ADPSCL_UPS_check(p,pie,pfx,hLOG) ADPSCL_UPS_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ADPSCL_UPS_print(p,    pfx,hLOG) ADPSCL_UPS_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ADPSCL_UPS
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ADPSCL_COEFF            biu              (4,4)
///     ###
///     * Register specification of interface ADPSCL_COEFF
///     * Defines the size of the adpscl_coeff
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 4  htap                      0x4
///                                    ###
///                                    * Number of horizontal tap for horizontal 1D scaler. For Adaptive scaler this should be 4.
///                                    ###
///               %unsigned 4  vtap                      0x4
///                                    ###
///                                    * Number of vertical tap for vertical 1D scaler. For Adaptive scaler this should be 4.
///                                    ###
///               %unsigned 5  coeff_index               0x0
///                                    ###
///                                    * Register to indicate the current programming location/phase of coefficient table
///                                    ###
///               %unsigned 1  coeff_hvsel               0x0
///                                    ###
///                                    * Bit to indicate programming of horizontal or vertical scaling coefficients.1: Horizontal table0: Vertical table
///                                    ###
///               %unsigned 1  coeffload                 0x0
///                                    ###
///                                    * Initiates loading of scaler coefficients from the microprocessor addresses (ADPSCL_COEFF0 - ADPSCL_COEFF11) to the appropriate hardware table location.
///                                    ###
///               %unsigned 1  coeffread                 0x0
///                                    ###
///                                    * Initiates Reading of scaler coefficients from the microprocessor addresses (ADPSCL_COEFF0 - ADPSCL_COEFF11) to the appropriate hardware table location.
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00004 CFG1                 (RW)
///               %unsigned 12 coeff0                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff0[12] : signcoeff0[11:0] : magnitude
///                                    ###
///               %unsigned 12 coeff1                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff1[12] : signcoeff1[11:0] : magnitude
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00008 CFG2                 (RW)
///               %unsigned 12 coeff2                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff2[12] : signcoeff211:0] : magnitude
///                                    ###
///               %unsigned 12 coeff3                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff3[12] : signcoeff3[11:0] : magnitude
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x0000C CFG3                 (RW)
///               %unsigned 12 coeff4                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff4[12] : signcoeff4[1:0] : magnitude
///                                    ###
///               %unsigned 12 coeff5                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff5[12] : signcoeff5[11:0] : magnitude
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00010 CFG4                 (RW)
///               %unsigned 12 coeff6                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff6[12] : signcoeff6[1:0] : magnitude
///                                    ###
///               %unsigned 12 coeff7                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff7[12] : signcoeff7[11:0] : magnitude
///                                    * End of adpscl_coeff register group
///                                    ###
///               %%        8          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      20B, bits:     112b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ADPSCL_COEFF
#define h_ADPSCL_COEFF (){}

    #define     RA_ADPSCL_COEFF_CFG0                           0x0000

    #define     BA_ADPSCL_COEFF_CFG0_htap                      0x0000
    #define     B16ADPSCL_COEFF_CFG0_htap                      0x0000
    #define   LSb32ADPSCL_COEFF_CFG0_htap                         0
    #define   LSb16ADPSCL_COEFF_CFG0_htap                         0
    #define       bADPSCL_COEFF_CFG0_htap                      4
    #define   MSK32ADPSCL_COEFF_CFG0_htap                         0x0000000F

    #define     BA_ADPSCL_COEFF_CFG0_vtap                      0x0000
    #define     B16ADPSCL_COEFF_CFG0_vtap                      0x0000
    #define   LSb32ADPSCL_COEFF_CFG0_vtap                         4
    #define   LSb16ADPSCL_COEFF_CFG0_vtap                         4
    #define       bADPSCL_COEFF_CFG0_vtap                      4
    #define   MSK32ADPSCL_COEFF_CFG0_vtap                         0x000000F0

    #define     BA_ADPSCL_COEFF_CFG0_coeff_index               0x0001
    #define     B16ADPSCL_COEFF_CFG0_coeff_index               0x0000
    #define   LSb32ADPSCL_COEFF_CFG0_coeff_index                  8
    #define   LSb16ADPSCL_COEFF_CFG0_coeff_index                  8
    #define       bADPSCL_COEFF_CFG0_coeff_index               5
    #define   MSK32ADPSCL_COEFF_CFG0_coeff_index                  0x00001F00

    #define     BA_ADPSCL_COEFF_CFG0_coeff_hvsel               0x0001
    #define     B16ADPSCL_COEFF_CFG0_coeff_hvsel               0x0000
    #define   LSb32ADPSCL_COEFF_CFG0_coeff_hvsel                  13
    #define   LSb16ADPSCL_COEFF_CFG0_coeff_hvsel                  13
    #define       bADPSCL_COEFF_CFG0_coeff_hvsel               1
    #define   MSK32ADPSCL_COEFF_CFG0_coeff_hvsel                  0x00002000

    #define     BA_ADPSCL_COEFF_CFG0_coeffload                 0x0001
    #define     B16ADPSCL_COEFF_CFG0_coeffload                 0x0000
    #define   LSb32ADPSCL_COEFF_CFG0_coeffload                    14
    #define   LSb16ADPSCL_COEFF_CFG0_coeffload                    14
    #define       bADPSCL_COEFF_CFG0_coeffload                 1
    #define   MSK32ADPSCL_COEFF_CFG0_coeffload                    0x00004000

    #define     BA_ADPSCL_COEFF_CFG0_coeffread                 0x0001
    #define     B16ADPSCL_COEFF_CFG0_coeffread                 0x0000
    #define   LSb32ADPSCL_COEFF_CFG0_coeffread                    15
    #define   LSb16ADPSCL_COEFF_CFG0_coeffread                    15
    #define       bADPSCL_COEFF_CFG0_coeffread                 1
    #define   MSK32ADPSCL_COEFF_CFG0_coeffread                    0x00008000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_COEFF_CFG1                           0x0004

    #define     BA_ADPSCL_COEFF_CFG1_coeff0                    0x0004
    #define     B16ADPSCL_COEFF_CFG1_coeff0                    0x0004
    #define   LSb32ADPSCL_COEFF_CFG1_coeff0                       0
    #define   LSb16ADPSCL_COEFF_CFG1_coeff0                       0
    #define       bADPSCL_COEFF_CFG1_coeff0                    12
    #define   MSK32ADPSCL_COEFF_CFG1_coeff0                       0x00000FFF

    #define     BA_ADPSCL_COEFF_CFG1_coeff1                    0x0005
    #define     B16ADPSCL_COEFF_CFG1_coeff1                    0x0004
    #define   LSb32ADPSCL_COEFF_CFG1_coeff1                       12
    #define   LSb16ADPSCL_COEFF_CFG1_coeff1                       12
    #define       bADPSCL_COEFF_CFG1_coeff1                    12
    #define   MSK32ADPSCL_COEFF_CFG1_coeff1                       0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_COEFF_CFG2                           0x0008

    #define     BA_ADPSCL_COEFF_CFG2_coeff2                    0x0008
    #define     B16ADPSCL_COEFF_CFG2_coeff2                    0x0008
    #define   LSb32ADPSCL_COEFF_CFG2_coeff2                       0
    #define   LSb16ADPSCL_COEFF_CFG2_coeff2                       0
    #define       bADPSCL_COEFF_CFG2_coeff2                    12
    #define   MSK32ADPSCL_COEFF_CFG2_coeff2                       0x00000FFF

    #define     BA_ADPSCL_COEFF_CFG2_coeff3                    0x0009
    #define     B16ADPSCL_COEFF_CFG2_coeff3                    0x0008
    #define   LSb32ADPSCL_COEFF_CFG2_coeff3                       12
    #define   LSb16ADPSCL_COEFF_CFG2_coeff3                       12
    #define       bADPSCL_COEFF_CFG2_coeff3                    12
    #define   MSK32ADPSCL_COEFF_CFG2_coeff3                       0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_COEFF_CFG3                           0x000C

    #define     BA_ADPSCL_COEFF_CFG3_coeff4                    0x000C
    #define     B16ADPSCL_COEFF_CFG3_coeff4                    0x000C
    #define   LSb32ADPSCL_COEFF_CFG3_coeff4                       0
    #define   LSb16ADPSCL_COEFF_CFG3_coeff4                       0
    #define       bADPSCL_COEFF_CFG3_coeff4                    12
    #define   MSK32ADPSCL_COEFF_CFG3_coeff4                       0x00000FFF

    #define     BA_ADPSCL_COEFF_CFG3_coeff5                    0x000D
    #define     B16ADPSCL_COEFF_CFG3_coeff5                    0x000C
    #define   LSb32ADPSCL_COEFF_CFG3_coeff5                       12
    #define   LSb16ADPSCL_COEFF_CFG3_coeff5                       12
    #define       bADPSCL_COEFF_CFG3_coeff5                    12
    #define   MSK32ADPSCL_COEFF_CFG3_coeff5                       0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_COEFF_CFG4                           0x0010

    #define     BA_ADPSCL_COEFF_CFG4_coeff6                    0x0010
    #define     B16ADPSCL_COEFF_CFG4_coeff6                    0x0010
    #define   LSb32ADPSCL_COEFF_CFG4_coeff6                       0
    #define   LSb16ADPSCL_COEFF_CFG4_coeff6                       0
    #define       bADPSCL_COEFF_CFG4_coeff6                    12
    #define   MSK32ADPSCL_COEFF_CFG4_coeff6                       0x00000FFF

    #define     BA_ADPSCL_COEFF_CFG4_coeff7                    0x0011
    #define     B16ADPSCL_COEFF_CFG4_coeff7                    0x0010
    #define   LSb32ADPSCL_COEFF_CFG4_coeff7                       12
    #define   LSb16ADPSCL_COEFF_CFG4_coeff7                       12
    #define       bADPSCL_COEFF_CFG4_coeff7                    12
    #define   MSK32ADPSCL_COEFF_CFG4_coeff7                       0x00FFF000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ADPSCL_COEFF {
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_COEFF_CFG0_htap(r32)                 _BFGET_(r32, 3, 0)
    #define   SET32ADPSCL_COEFF_CFG0_htap(r32,v)               _BFSET_(r32, 3, 0,v)
    #define   GET16ADPSCL_COEFF_CFG0_htap(r16)                 _BFGET_(r16, 3, 0)
    #define   SET16ADPSCL_COEFF_CFG0_htap(r16,v)               _BFSET_(r16, 3, 0,v)

    #define   GET32ADPSCL_COEFF_CFG0_vtap(r32)                 _BFGET_(r32, 7, 4)
    #define   SET32ADPSCL_COEFF_CFG0_vtap(r32,v)               _BFSET_(r32, 7, 4,v)
    #define   GET16ADPSCL_COEFF_CFG0_vtap(r16)                 _BFGET_(r16, 7, 4)
    #define   SET16ADPSCL_COEFF_CFG0_vtap(r16,v)               _BFSET_(r16, 7, 4,v)

    #define   GET32ADPSCL_COEFF_CFG0_coeff_index(r32)          _BFGET_(r32,12, 8)
    #define   SET32ADPSCL_COEFF_CFG0_coeff_index(r32,v)        _BFSET_(r32,12, 8,v)
    #define   GET16ADPSCL_COEFF_CFG0_coeff_index(r16)          _BFGET_(r16,12, 8)
    #define   SET16ADPSCL_COEFF_CFG0_coeff_index(r16,v)        _BFSET_(r16,12, 8,v)

    #define   GET32ADPSCL_COEFF_CFG0_coeff_hvsel(r32)          _BFGET_(r32,13,13)
    #define   SET32ADPSCL_COEFF_CFG0_coeff_hvsel(r32,v)        _BFSET_(r32,13,13,v)
    #define   GET16ADPSCL_COEFF_CFG0_coeff_hvsel(r16)          _BFGET_(r16,13,13)
    #define   SET16ADPSCL_COEFF_CFG0_coeff_hvsel(r16,v)        _BFSET_(r16,13,13,v)

    #define   GET32ADPSCL_COEFF_CFG0_coeffload(r32)            _BFGET_(r32,14,14)
    #define   SET32ADPSCL_COEFF_CFG0_coeffload(r32,v)          _BFSET_(r32,14,14,v)
    #define   GET16ADPSCL_COEFF_CFG0_coeffload(r16)            _BFGET_(r16,14,14)
    #define   SET16ADPSCL_COEFF_CFG0_coeffload(r16,v)          _BFSET_(r16,14,14,v)

    #define   GET32ADPSCL_COEFF_CFG0_coeffread(r32)            _BFGET_(r32,15,15)
    #define   SET32ADPSCL_COEFF_CFG0_coeffread(r32,v)          _BFSET_(r32,15,15,v)
    #define   GET16ADPSCL_COEFF_CFG0_coeffread(r16)            _BFGET_(r16,15,15)
    #define   SET16ADPSCL_COEFF_CFG0_coeffread(r16,v)          _BFSET_(r16,15,15,v)

    #define     w32ADPSCL_COEFF_CFG0                           {\
            UNSG32 uCFG0_htap                                  :  4;\
            UNSG32 uCFG0_vtap                                  :  4;\
            UNSG32 uCFG0_coeff_index                           :  5;\
            UNSG32 uCFG0_coeff_hvsel                           :  1;\
            UNSG32 uCFG0_coeffload                             :  1;\
            UNSG32 uCFG0_coeffread                             :  1;\
            UNSG32 RSVDx0_b16                                  : 16;\
          }
    union { UNSG32 u32ADPSCL_COEFF_CFG0;
            struct w32ADPSCL_COEFF_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_COEFF_CFG1_coeff0(r32)               _BFGET_(r32,11, 0)
    #define   SET32ADPSCL_COEFF_CFG1_coeff0(r32,v)             _BFSET_(r32,11, 0,v)
    #define   GET16ADPSCL_COEFF_CFG1_coeff0(r16)               _BFGET_(r16,11, 0)
    #define   SET16ADPSCL_COEFF_CFG1_coeff0(r16,v)             _BFSET_(r16,11, 0,v)

    #define   GET32ADPSCL_COEFF_CFG1_coeff1(r32)               _BFGET_(r32,23,12)
    #define   SET32ADPSCL_COEFF_CFG1_coeff1(r32,v)             _BFSET_(r32,23,12,v)

    #define     w32ADPSCL_COEFF_CFG1                           {\
            UNSG32 uCFG1_coeff0                                : 12;\
            UNSG32 uCFG1_coeff1                                : 12;\
            UNSG32 RSVDx4_b24                                  :  8;\
          }
    union { UNSG32 u32ADPSCL_COEFF_CFG1;
            struct w32ADPSCL_COEFF_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_COEFF_CFG2_coeff2(r32)               _BFGET_(r32,11, 0)
    #define   SET32ADPSCL_COEFF_CFG2_coeff2(r32,v)             _BFSET_(r32,11, 0,v)
    #define   GET16ADPSCL_COEFF_CFG2_coeff2(r16)               _BFGET_(r16,11, 0)
    #define   SET16ADPSCL_COEFF_CFG2_coeff2(r16,v)             _BFSET_(r16,11, 0,v)

    #define   GET32ADPSCL_COEFF_CFG2_coeff3(r32)               _BFGET_(r32,23,12)
    #define   SET32ADPSCL_COEFF_CFG2_coeff3(r32,v)             _BFSET_(r32,23,12,v)

    #define     w32ADPSCL_COEFF_CFG2                           {\
            UNSG32 uCFG2_coeff2                                : 12;\
            UNSG32 uCFG2_coeff3                                : 12;\
            UNSG32 RSVDx8_b24                                  :  8;\
          }
    union { UNSG32 u32ADPSCL_COEFF_CFG2;
            struct w32ADPSCL_COEFF_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_COEFF_CFG3_coeff4(r32)               _BFGET_(r32,11, 0)
    #define   SET32ADPSCL_COEFF_CFG3_coeff4(r32,v)             _BFSET_(r32,11, 0,v)
    #define   GET16ADPSCL_COEFF_CFG3_coeff4(r16)               _BFGET_(r16,11, 0)
    #define   SET16ADPSCL_COEFF_CFG3_coeff4(r16,v)             _BFSET_(r16,11, 0,v)

    #define   GET32ADPSCL_COEFF_CFG3_coeff5(r32)               _BFGET_(r32,23,12)
    #define   SET32ADPSCL_COEFF_CFG3_coeff5(r32,v)             _BFSET_(r32,23,12,v)

    #define     w32ADPSCL_COEFF_CFG3                           {\
            UNSG32 uCFG3_coeff4                                : 12;\
            UNSG32 uCFG3_coeff5                                : 12;\
            UNSG32 RSVDxC_b24                                  :  8;\
          }
    union { UNSG32 u32ADPSCL_COEFF_CFG3;
            struct w32ADPSCL_COEFF_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_COEFF_CFG4_coeff6(r32)               _BFGET_(r32,11, 0)
    #define   SET32ADPSCL_COEFF_CFG4_coeff6(r32,v)             _BFSET_(r32,11, 0,v)
    #define   GET16ADPSCL_COEFF_CFG4_coeff6(r16)               _BFGET_(r16,11, 0)
    #define   SET16ADPSCL_COEFF_CFG4_coeff6(r16,v)             _BFSET_(r16,11, 0,v)

    #define   GET32ADPSCL_COEFF_CFG4_coeff7(r32)               _BFGET_(r32,23,12)
    #define   SET32ADPSCL_COEFF_CFG4_coeff7(r32,v)             _BFSET_(r32,23,12,v)

    #define     w32ADPSCL_COEFF_CFG4                           {\
            UNSG32 uCFG4_coeff6                                : 12;\
            UNSG32 uCFG4_coeff7                                : 12;\
            UNSG32 RSVDx10_b24                                 :  8;\
          }
    union { UNSG32 u32ADPSCL_COEFF_CFG4;
            struct w32ADPSCL_COEFF_CFG4;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ADPSCL_COEFF;

    typedef union  T32ADPSCL_COEFF_CFG0
          { UNSG32 u32;
            struct w32ADPSCL_COEFF_CFG0;
                 } T32ADPSCL_COEFF_CFG0;
    typedef union  T32ADPSCL_COEFF_CFG1
          { UNSG32 u32;
            struct w32ADPSCL_COEFF_CFG1;
                 } T32ADPSCL_COEFF_CFG1;
    typedef union  T32ADPSCL_COEFF_CFG2
          { UNSG32 u32;
            struct w32ADPSCL_COEFF_CFG2;
                 } T32ADPSCL_COEFF_CFG2;
    typedef union  T32ADPSCL_COEFF_CFG3
          { UNSG32 u32;
            struct w32ADPSCL_COEFF_CFG3;
                 } T32ADPSCL_COEFF_CFG3;
    typedef union  T32ADPSCL_COEFF_CFG4
          { UNSG32 u32;
            struct w32ADPSCL_COEFF_CFG4;
                 } T32ADPSCL_COEFF_CFG4;
    ///////////////////////////////////////////////////////////

    typedef union  TADPSCL_COEFF_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_COEFF_CFG0;
                   };
                 } TADPSCL_COEFF_CFG0;
    typedef union  TADPSCL_COEFF_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_COEFF_CFG1;
                   };
                 } TADPSCL_COEFF_CFG1;
    typedef union  TADPSCL_COEFF_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_COEFF_CFG2;
                   };
                 } TADPSCL_COEFF_CFG2;
    typedef union  TADPSCL_COEFF_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_COEFF_CFG3;
                   };
                 } TADPSCL_COEFF_CFG3;
    typedef union  TADPSCL_COEFF_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_COEFF_CFG4;
                   };
                 } TADPSCL_COEFF_CFG4;

    ///////////////////////////////////////////////////////////
     SIGN32 ADPSCL_COEFF_drvrd(SIE_ADPSCL_COEFF *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ADPSCL_COEFF_drvwr(SIE_ADPSCL_COEFF *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ADPSCL_COEFF_reset(SIE_ADPSCL_COEFF *p);
     SIGN32 ADPSCL_COEFF_cmp  (SIE_ADPSCL_COEFF *p, SIE_ADPSCL_COEFF *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ADPSCL_COEFF_check(p,pie,pfx,hLOG) ADPSCL_COEFF_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ADPSCL_COEFF_print(p,    pfx,hLOG) ADPSCL_COEFF_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ADPSCL_COEFF
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ADPSCL_FRC              biu              (4,4)
///     ###
///     * Register specification of interface ADPSCL_FRC
///     * Defines the size of the adpscl_frc
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 8  sclclk_ctrl               0x80
///                                    ###
///                                    * ADPSCLCLK_CTRL_REGS
///                                    * Clock puncture value.
///                                    * The Scaler is capable of generating its output in large burst. In Slot1 mode, this can create load on SDRAM bandwidth. This register can be used even-out the load on SDRAM bandwidth. This register controls the data request to Scaler by puncturing the clock to the request generating logic, hence reducing the rate at which Scaler pumps the data out. Default value of this register is 128 (also the maximum allowed value), which means no puncturing, hence full load on bandwidth. Lower the value of this register, lower is the pressure on SDRAM bandwidth. For example, if the Scaler is downscaling a frame by 2, the puncture value should be at least greater than 64.
///                                    ###
///               %unsigned 8  sclclk_ctrl1              0x80
///                                    ###
///                                    * ADPSCLCLK_CTRL1_REGS
///                                    ###
///               %unsigned 8  ctrl0                     0x0
///                                    ###
///                                    * ADPCTRL0_REGS
///                                    * Not used.
///                                    * frc_mode[1:0]
///                                    * 00 : Sync mode (Only for MAIN and AUX)
///                                    * 01 : No scaler (Bypass scaling)
///                                    * 10 : Scaler occupies Slot1 (Before memory)
///                                    * 11 : Scaler occupies Slot2 (After memory : Only for MAIN and PIP)
///                                    * mosaic_mode[2]
///                                    * 0 : Mosaic Off (always off for AUX)
///                                    * 1 : Mosaic On
///                                    * bit_mode[3] : 24/16 bit modes (Can be overridden by FRC_PACKMODE register, address offset 0x2A)
///                                    * 1 : 24 bit mode
///                                    * 0 : 16 bit mode (Always 16 bit for AUX)
///                                    * sp_mode[7:4] : Special tearless modes
///                                    * 0000 : Normal tearless.
///                                    * 0001 : Smooth movie mode. 3:2 to 3:3 conversion based on film flag from deinterlacer.
///                                    * 0010 : Smooth movie mode. 3:2 to 1:1 conversion based on film flag from deinterlacer.
///                                    * 0011 : Stable output vsync mode on interlaced input with four frame buffers.
///                                    * 0100 : Stable output vsync mode on interlaced input with three frame buffers.
///                                    * 0101 : Stable output vsync mode on progressive input with two frame buffers.
///                                    * 0111 : Interlacing the progressive input frames into fields. This mode also needs FRC_SDRAM_MOS_LOFF register to be programmed as the number of SDRAM words corresponding to the size of one line of the input frame.
///                                    * 1010 : Smooth movie mode. 3:2 to 2:2 conversion based on film flag from deinterlacer.
///                                    * others – Reserved.
///                                    ###
///               %unsigned 8  ctrl1                     0x0
///                                    ###
///                                    * ADPCTRL1_REGS
///                                    * Not used.
///                                    * load_read[0]
///                                    * 0 to 1 transition loads tearless modes on SDRAM read control
///                                    * load_write[1]
///                                    * 0 to 1 transition loads tearless modes on SDRAM write control
///                                    * read_ctrl[2]
///                                    * 0 : Loads tearless modes on SDRAM read control immediately
///                                    * 1 : Loads tearless modes on SDRAM read control on frame reset
///                                    * write_ctrl[3]
///                                    * 0 : Loads tearless modes on SDRAM write control immediately
///                                    * 1 : Loads tearless modes on SDRAM write control on frame reset
///                                    * freeze[4] : Freeze modes
///                                    * 0 : No freeze
///                                    * 1 : Freeze
///                                    * inv_fe_fld[5] : Invert FE field
///                                    * inv_be_fld[6] : Invert BE Field
///                                    * be_frst_shft_en[7] : Enable BE Frame Reset Shift
///                                    ###
///     @ 0x00004 CFG1                 (P)
///               %unsigned 8  ctrl2                     0x0
///                                    ###
///                                    * ADPCTRL2_REGS
///                                    * Not used.
///                                    * tearless_read_ctrl[3:0]
///                                    * Tearless modes for SDRAM read control
///                                    * 0000 : Read from 0th frame buffer
///                                    * 0001 : Read from 1st frame buffer
///                                    * 0010 : Read from 2nd frame buffer
///                                    * 0011 : Read in 0-1-2-0 sequence (when read frame rate is slower than write frame rate, applicable for tearless mode only)
///                                    * 0100 : Read in tearless mode (keeping one frame distance with write pointer)
///                                    * NOTE : tearless write ctrl must be programmed to 0011 when tearless read control is 0100
///                                    * tearless_write_ctrl[7:4]
///                                    * Tearless modes for SDRAM write control
///                                    * 0000 : Write to 0th frame buffer
///                                    * 0001 : Write to 1st frame buffer
///                                    * 0010 : Write to 2nd frame buffer
///                                    * 0011 : Write in 0-1-2-0 sequence (when write frame rate is slower than read frame rate, applicable for tearless mode only)
///                                    * 0100 : Write in tearless mode (keeping one frame distance with read pointer)
///                                    * NOTE : tearless read ctrl must be programmed to 0011 when tearless write control is 0100
///                                    ###
///               %unsigned 8  dly_frst_de               0x40
///                                    ###
///                                    * Controls delay between frame reset and data-enable supplied to Scaler (Only in Slot2)
///                                    ###
///               %unsigned 10 dly_de_lrst               0x28
///                                    ###
///                                    * Controls delay between data-enable and line reset supplied to Scaler (Only in Slot2)
///                                    ###
///               %unsigned 1  auto_lrst                 0x0
///                                    ###
///                                    * Select lrst (line reset) generation.
///                                    * =0 : lrst generation depends on programmed dly_de_lrst.
///                                    * =1 : lrst generation is automatic. Should be enabled if HSCALE is placed before VSCALE (i.e., SCL's up_down=1)
///                                    ###
///               %%        5          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 12 bevres                    0x0
///                                    ###
///                                    * If FRC is in No-scaler or Slot1 mode, program this to Back-end vertical resolution, else, program to Front-end vertical resolution
///                                    ###
///               %unsigned 12 fevres                    0x0
///                                    ###
///                                    * If FRC is in No-scaler or Slot2 mode, program this to Front-end vertical resolution else program to Back-end vertical resolution
///                                    ###
///               %unsigned 8  dly_lrst_de               0x28
///                                    ###
///                                    * Controls delay between line reset and data-enable supplied to Scaler (Only in Slot2)
///                                    ###
///     @ 0x0000C CFG3                 (P)
///               %unsigned 13 behres                    0x0
///                                    ###
///                                    * If FRC is in No-scaler or Slot1 mode, program this to Back-end horizontal resolution, else, program to Front-end horizontal resolution
///                                    ###
///               %unsigned 2  clnt_ctrl                 0x3
///                                    ###
///                                    * Not used.
///                                    * ADPCLNT_CTRL_REGS
///                                    * frc_clnt_ctrl0[0] :
///                                    * FRC write client mask. By enabling this mask, the request from write client to SDRAM controller is masked, thereby preventing the FRC from writing any data into SDRAM.
///                                    * 0 : Mask disabled
///                                    * 1 : Mask enabled
///                                    * frc_clnt_ctrl1[1] :
///                                    * FRC read client mask. By enabling this mask, the request from read client to SDRAM controller is masked, thereby preventing the FRC from reading any data from SDRAM.
///                                    * 0 : Mask disabled
///                                    * 1 : Mask enabled
///                                    ###
///               %unsigned 8  ctrl                      0x0
///                                    ###
///                                    * Not used. ADPCTRL_REGS
///                                    ###
///               %unsigned 8  rff_ctrl                  0x0
///                                    ###
///                                    * Not used. ADPRFF_CTRL_REGS
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %unsigned 1  ols                       0x0
///                                    ###
///                                    * Controls off-line scaler mode for adaptive scalar
///                                    * 0 : ADPSCL4K Scaler works in in-line mode
///                                    * 1 : ADPSCL4K Scaler works in off-line mode
///                                    ###
///               %unsigned 1  wclient                   0x0
///                                    ###
///                                    * Enables the write to ADPSCL4K Scaler's write client in in-line mode. Make this bit 1 for the last frame of in-line scaling (the frame before moving to off-line scaling). This is to facilitate smooth in-line to off-line transition.
///                                    * 0 : No write generated to write client in in-line mode.
///                                    * 1 : send the scaler output to write client (the data from scaler is pulled at the CPCB rate).
///                                    * This bit is don't care when en bit of ols register is 1.
///                                    ###
///               %unsigned 1  luma_key_en               0x0
///                                    ###
///                                    * Must be 0 as no alpha scaling suport.
///                                    ###
///               %unsigned 10 luma_key_min              0x0
///               %unsigned 10 luma_key_max              0x0
///                                    ###
///                                    * Enable and min/max values for luma-key comparision. Can be ignored as no alpha scaling support.
///                                    ###
///               %%        9          # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 10 al_en_hit_al              0x0
///               %unsigned 12 al_en_non_hit_al          0xFF
///                                    ###
///                                    * If input pixel luma to ADPSCL4K scaler is in the range of min-max, alpha is hit_al; else alpha is non_hit_al. Can be ignored as no alpha scaling support.
///                                    ###
///               %%        10         # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 10 al_out_threshold          0x80
///                                    ###
///                                    * Threshold to compare the scaled alpha. If the scaled alpha is greater than or equal to threshold then scaled luma is unchanged, otherwise luma is replaced with zero_luma. Can be ignored as no alpha scaling support.
///                                    ###
///               %unsigned 10 al_out_zeroluma           0x0
///                                    ###
///                                    * Defines luma value to be replaced when scaled alpha is less than threshold. Can be ignored as no alpha scaling support.
///                                    * End of adpscl_frc register group
///                                    ###
///               %%        12         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     187b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ADPSCL_FRC
#define h_ADPSCL_FRC (){}

    #define     RA_ADPSCL_FRC_CFG0                             0x0000

    #define     BA_ADPSCL_FRC_CFG0_sclclk_ctrl                 0x0000
    #define     B16ADPSCL_FRC_CFG0_sclclk_ctrl                 0x0000
    #define   LSb32ADPSCL_FRC_CFG0_sclclk_ctrl                    0
    #define   LSb16ADPSCL_FRC_CFG0_sclclk_ctrl                    0
    #define       bADPSCL_FRC_CFG0_sclclk_ctrl                 8
    #define   MSK32ADPSCL_FRC_CFG0_sclclk_ctrl                    0x000000FF

    #define     BA_ADPSCL_FRC_CFG0_sclclk_ctrl1                0x0001
    #define     B16ADPSCL_FRC_CFG0_sclclk_ctrl1                0x0000
    #define   LSb32ADPSCL_FRC_CFG0_sclclk_ctrl1                   8
    #define   LSb16ADPSCL_FRC_CFG0_sclclk_ctrl1                   8
    #define       bADPSCL_FRC_CFG0_sclclk_ctrl1                8
    #define   MSK32ADPSCL_FRC_CFG0_sclclk_ctrl1                   0x0000FF00

    #define     BA_ADPSCL_FRC_CFG0_ctrl0                       0x0002
    #define     B16ADPSCL_FRC_CFG0_ctrl0                       0x0002
    #define   LSb32ADPSCL_FRC_CFG0_ctrl0                          16
    #define   LSb16ADPSCL_FRC_CFG0_ctrl0                          0
    #define       bADPSCL_FRC_CFG0_ctrl0                       8
    #define   MSK32ADPSCL_FRC_CFG0_ctrl0                          0x00FF0000

    #define     BA_ADPSCL_FRC_CFG0_ctrl1                       0x0003
    #define     B16ADPSCL_FRC_CFG0_ctrl1                       0x0002
    #define   LSb32ADPSCL_FRC_CFG0_ctrl1                          24
    #define   LSb16ADPSCL_FRC_CFG0_ctrl1                          8
    #define       bADPSCL_FRC_CFG0_ctrl1                       8
    #define   MSK32ADPSCL_FRC_CFG0_ctrl1                          0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_FRC_CFG1                             0x0004

    #define     BA_ADPSCL_FRC_CFG1_ctrl2                       0x0004
    #define     B16ADPSCL_FRC_CFG1_ctrl2                       0x0004
    #define   LSb32ADPSCL_FRC_CFG1_ctrl2                          0
    #define   LSb16ADPSCL_FRC_CFG1_ctrl2                          0
    #define       bADPSCL_FRC_CFG1_ctrl2                       8
    #define   MSK32ADPSCL_FRC_CFG1_ctrl2                          0x000000FF

    #define     BA_ADPSCL_FRC_CFG1_dly_frst_de                 0x0005
    #define     B16ADPSCL_FRC_CFG1_dly_frst_de                 0x0004
    #define   LSb32ADPSCL_FRC_CFG1_dly_frst_de                    8
    #define   LSb16ADPSCL_FRC_CFG1_dly_frst_de                    8
    #define       bADPSCL_FRC_CFG1_dly_frst_de                 8
    #define   MSK32ADPSCL_FRC_CFG1_dly_frst_de                    0x0000FF00

    #define     BA_ADPSCL_FRC_CFG1_dly_de_lrst                 0x0006
    #define     B16ADPSCL_FRC_CFG1_dly_de_lrst                 0x0006
    #define   LSb32ADPSCL_FRC_CFG1_dly_de_lrst                    16
    #define   LSb16ADPSCL_FRC_CFG1_dly_de_lrst                    0
    #define       bADPSCL_FRC_CFG1_dly_de_lrst                 10
    #define   MSK32ADPSCL_FRC_CFG1_dly_de_lrst                    0x03FF0000

    #define     BA_ADPSCL_FRC_CFG1_auto_lrst                   0x0007
    #define     B16ADPSCL_FRC_CFG1_auto_lrst                   0x0006
    #define   LSb32ADPSCL_FRC_CFG1_auto_lrst                      26
    #define   LSb16ADPSCL_FRC_CFG1_auto_lrst                      10
    #define       bADPSCL_FRC_CFG1_auto_lrst                   1
    #define   MSK32ADPSCL_FRC_CFG1_auto_lrst                      0x04000000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_FRC_CFG2                             0x0008

    #define     BA_ADPSCL_FRC_CFG2_bevres                      0x0008
    #define     B16ADPSCL_FRC_CFG2_bevres                      0x0008
    #define   LSb32ADPSCL_FRC_CFG2_bevres                         0
    #define   LSb16ADPSCL_FRC_CFG2_bevres                         0
    #define       bADPSCL_FRC_CFG2_bevres                      12
    #define   MSK32ADPSCL_FRC_CFG2_bevres                         0x00000FFF

    #define     BA_ADPSCL_FRC_CFG2_fevres                      0x0009
    #define     B16ADPSCL_FRC_CFG2_fevres                      0x0008
    #define   LSb32ADPSCL_FRC_CFG2_fevres                         12
    #define   LSb16ADPSCL_FRC_CFG2_fevres                         12
    #define       bADPSCL_FRC_CFG2_fevres                      12
    #define   MSK32ADPSCL_FRC_CFG2_fevres                         0x00FFF000

    #define     BA_ADPSCL_FRC_CFG2_dly_lrst_de                 0x000B
    #define     B16ADPSCL_FRC_CFG2_dly_lrst_de                 0x000A
    #define   LSb32ADPSCL_FRC_CFG2_dly_lrst_de                    24
    #define   LSb16ADPSCL_FRC_CFG2_dly_lrst_de                    8
    #define       bADPSCL_FRC_CFG2_dly_lrst_de                 8
    #define   MSK32ADPSCL_FRC_CFG2_dly_lrst_de                    0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_FRC_CFG3                             0x000C

    #define     BA_ADPSCL_FRC_CFG3_behres                      0x000C
    #define     B16ADPSCL_FRC_CFG3_behres                      0x000C
    #define   LSb32ADPSCL_FRC_CFG3_behres                         0
    #define   LSb16ADPSCL_FRC_CFG3_behres                         0
    #define       bADPSCL_FRC_CFG3_behres                      13
    #define   MSK32ADPSCL_FRC_CFG3_behres                         0x00001FFF

    #define     BA_ADPSCL_FRC_CFG3_clnt_ctrl                   0x000D
    #define     B16ADPSCL_FRC_CFG3_clnt_ctrl                   0x000C
    #define   LSb32ADPSCL_FRC_CFG3_clnt_ctrl                      13
    #define   LSb16ADPSCL_FRC_CFG3_clnt_ctrl                      13
    #define       bADPSCL_FRC_CFG3_clnt_ctrl                   2
    #define   MSK32ADPSCL_FRC_CFG3_clnt_ctrl                      0x00006000

    #define     BA_ADPSCL_FRC_CFG3_ctrl                        0x000D
    #define     B16ADPSCL_FRC_CFG3_ctrl                        0x000C
    #define   LSb32ADPSCL_FRC_CFG3_ctrl                           15
    #define   LSb16ADPSCL_FRC_CFG3_ctrl                           15
    #define       bADPSCL_FRC_CFG3_ctrl                        8
    #define   MSK32ADPSCL_FRC_CFG3_ctrl                           0x007F8000

    #define     BA_ADPSCL_FRC_CFG3_rff_ctrl                    0x000E
    #define     B16ADPSCL_FRC_CFG3_rff_ctrl                    0x000E
    #define   LSb32ADPSCL_FRC_CFG3_rff_ctrl                       23
    #define   LSb16ADPSCL_FRC_CFG3_rff_ctrl                       7
    #define       bADPSCL_FRC_CFG3_rff_ctrl                    8
    #define   MSK32ADPSCL_FRC_CFG3_rff_ctrl                       0x7F800000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_FRC_CFG4                             0x0010

    #define     BA_ADPSCL_FRC_CFG4_ols                         0x0010
    #define     B16ADPSCL_FRC_CFG4_ols                         0x0010
    #define   LSb32ADPSCL_FRC_CFG4_ols                            0
    #define   LSb16ADPSCL_FRC_CFG4_ols                            0
    #define       bADPSCL_FRC_CFG4_ols                         1
    #define   MSK32ADPSCL_FRC_CFG4_ols                            0x00000001

    #define     BA_ADPSCL_FRC_CFG4_wclient                     0x0010
    #define     B16ADPSCL_FRC_CFG4_wclient                     0x0010
    #define   LSb32ADPSCL_FRC_CFG4_wclient                        1
    #define   LSb16ADPSCL_FRC_CFG4_wclient                        1
    #define       bADPSCL_FRC_CFG4_wclient                     1
    #define   MSK32ADPSCL_FRC_CFG4_wclient                        0x00000002

    #define     BA_ADPSCL_FRC_CFG4_luma_key_en                 0x0010
    #define     B16ADPSCL_FRC_CFG4_luma_key_en                 0x0010
    #define   LSb32ADPSCL_FRC_CFG4_luma_key_en                    2
    #define   LSb16ADPSCL_FRC_CFG4_luma_key_en                    2
    #define       bADPSCL_FRC_CFG4_luma_key_en                 1
    #define   MSK32ADPSCL_FRC_CFG4_luma_key_en                    0x00000004

    #define     BA_ADPSCL_FRC_CFG4_luma_key_min                0x0010
    #define     B16ADPSCL_FRC_CFG4_luma_key_min                0x0010
    #define   LSb32ADPSCL_FRC_CFG4_luma_key_min                   3
    #define   LSb16ADPSCL_FRC_CFG4_luma_key_min                   3
    #define       bADPSCL_FRC_CFG4_luma_key_min                10
    #define   MSK32ADPSCL_FRC_CFG4_luma_key_min                   0x00001FF8

    #define     BA_ADPSCL_FRC_CFG4_luma_key_max                0x0011
    #define     B16ADPSCL_FRC_CFG4_luma_key_max                0x0010
    #define   LSb32ADPSCL_FRC_CFG4_luma_key_max                   13
    #define   LSb16ADPSCL_FRC_CFG4_luma_key_max                   13
    #define       bADPSCL_FRC_CFG4_luma_key_max                10
    #define   MSK32ADPSCL_FRC_CFG4_luma_key_max                   0x007FE000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_FRC_CFG5                             0x0014

    #define     BA_ADPSCL_FRC_CFG5_al_en_hit_al                0x0014
    #define     B16ADPSCL_FRC_CFG5_al_en_hit_al                0x0014
    #define   LSb32ADPSCL_FRC_CFG5_al_en_hit_al                   0
    #define   LSb16ADPSCL_FRC_CFG5_al_en_hit_al                   0
    #define       bADPSCL_FRC_CFG5_al_en_hit_al                10
    #define   MSK32ADPSCL_FRC_CFG5_al_en_hit_al                   0x000003FF

    #define     BA_ADPSCL_FRC_CFG5_al_en_non_hit_al            0x0015
    #define     B16ADPSCL_FRC_CFG5_al_en_non_hit_al            0x0014
    #define   LSb32ADPSCL_FRC_CFG5_al_en_non_hit_al               10
    #define   LSb16ADPSCL_FRC_CFG5_al_en_non_hit_al               10
    #define       bADPSCL_FRC_CFG5_al_en_non_hit_al            12
    #define   MSK32ADPSCL_FRC_CFG5_al_en_non_hit_al               0x003FFC00
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_FRC_CFG6                             0x0018

    #define     BA_ADPSCL_FRC_CFG6_al_out_threshold            0x0018
    #define     B16ADPSCL_FRC_CFG6_al_out_threshold            0x0018
    #define   LSb32ADPSCL_FRC_CFG6_al_out_threshold               0
    #define   LSb16ADPSCL_FRC_CFG6_al_out_threshold               0
    #define       bADPSCL_FRC_CFG6_al_out_threshold            10
    #define   MSK32ADPSCL_FRC_CFG6_al_out_threshold               0x000003FF

    #define     BA_ADPSCL_FRC_CFG6_al_out_zeroluma             0x0019
    #define     B16ADPSCL_FRC_CFG6_al_out_zeroluma             0x0018
    #define   LSb32ADPSCL_FRC_CFG6_al_out_zeroluma                10
    #define   LSb16ADPSCL_FRC_CFG6_al_out_zeroluma                10
    #define       bADPSCL_FRC_CFG6_al_out_zeroluma             10
    #define   MSK32ADPSCL_FRC_CFG6_al_out_zeroluma                0x000FFC00
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ADPSCL_FRC {
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_FRC_CFG0_sclclk_ctrl(r32)            _BFGET_(r32, 7, 0)
    #define   SET32ADPSCL_FRC_CFG0_sclclk_ctrl(r32,v)          _BFSET_(r32, 7, 0,v)
    #define   GET16ADPSCL_FRC_CFG0_sclclk_ctrl(r16)            _BFGET_(r16, 7, 0)
    #define   SET16ADPSCL_FRC_CFG0_sclclk_ctrl(r16,v)          _BFSET_(r16, 7, 0,v)

    #define   GET32ADPSCL_FRC_CFG0_sclclk_ctrl1(r32)           _BFGET_(r32,15, 8)
    #define   SET32ADPSCL_FRC_CFG0_sclclk_ctrl1(r32,v)         _BFSET_(r32,15, 8,v)
    #define   GET16ADPSCL_FRC_CFG0_sclclk_ctrl1(r16)           _BFGET_(r16,15, 8)
    #define   SET16ADPSCL_FRC_CFG0_sclclk_ctrl1(r16,v)         _BFSET_(r16,15, 8,v)

    #define   GET32ADPSCL_FRC_CFG0_ctrl0(r32)                  _BFGET_(r32,23,16)
    #define   SET32ADPSCL_FRC_CFG0_ctrl0(r32,v)                _BFSET_(r32,23,16,v)
    #define   GET16ADPSCL_FRC_CFG0_ctrl0(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16ADPSCL_FRC_CFG0_ctrl0(r16,v)                _BFSET_(r16, 7, 0,v)

    #define   GET32ADPSCL_FRC_CFG0_ctrl1(r32)                  _BFGET_(r32,31,24)
    #define   SET32ADPSCL_FRC_CFG0_ctrl1(r32,v)                _BFSET_(r32,31,24,v)
    #define   GET16ADPSCL_FRC_CFG0_ctrl1(r16)                  _BFGET_(r16,15, 8)
    #define   SET16ADPSCL_FRC_CFG0_ctrl1(r16,v)                _BFSET_(r16,15, 8,v)

    #define     w32ADPSCL_FRC_CFG0                             {\
            UNSG32 uCFG0_sclclk_ctrl                           :  8;\
            UNSG32 uCFG0_sclclk_ctrl1                          :  8;\
            UNSG32 uCFG0_ctrl0                                 :  8;\
            UNSG32 uCFG0_ctrl1                                 :  8;\
          }
    union { UNSG32 u32ADPSCL_FRC_CFG0;
            struct w32ADPSCL_FRC_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_FRC_CFG1_ctrl2(r32)                  _BFGET_(r32, 7, 0)
    #define   SET32ADPSCL_FRC_CFG1_ctrl2(r32,v)                _BFSET_(r32, 7, 0,v)
    #define   GET16ADPSCL_FRC_CFG1_ctrl2(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16ADPSCL_FRC_CFG1_ctrl2(r16,v)                _BFSET_(r16, 7, 0,v)

    #define   GET32ADPSCL_FRC_CFG1_dly_frst_de(r32)            _BFGET_(r32,15, 8)
    #define   SET32ADPSCL_FRC_CFG1_dly_frst_de(r32,v)          _BFSET_(r32,15, 8,v)
    #define   GET16ADPSCL_FRC_CFG1_dly_frst_de(r16)            _BFGET_(r16,15, 8)
    #define   SET16ADPSCL_FRC_CFG1_dly_frst_de(r16,v)          _BFSET_(r16,15, 8,v)

    #define   GET32ADPSCL_FRC_CFG1_dly_de_lrst(r32)            _BFGET_(r32,25,16)
    #define   SET32ADPSCL_FRC_CFG1_dly_de_lrst(r32,v)          _BFSET_(r32,25,16,v)
    #define   GET16ADPSCL_FRC_CFG1_dly_de_lrst(r16)            _BFGET_(r16, 9, 0)
    #define   SET16ADPSCL_FRC_CFG1_dly_de_lrst(r16,v)          _BFSET_(r16, 9, 0,v)

    #define   GET32ADPSCL_FRC_CFG1_auto_lrst(r32)              _BFGET_(r32,26,26)
    #define   SET32ADPSCL_FRC_CFG1_auto_lrst(r32,v)            _BFSET_(r32,26,26,v)
    #define   GET16ADPSCL_FRC_CFG1_auto_lrst(r16)              _BFGET_(r16,10,10)
    #define   SET16ADPSCL_FRC_CFG1_auto_lrst(r16,v)            _BFSET_(r16,10,10,v)

    #define     w32ADPSCL_FRC_CFG1                             {\
            UNSG32 uCFG1_ctrl2                                 :  8;\
            UNSG32 uCFG1_dly_frst_de                           :  8;\
            UNSG32 uCFG1_dly_de_lrst                           : 10;\
            UNSG32 uCFG1_auto_lrst                             :  1;\
            UNSG32 RSVDx4_b27                                  :  5;\
          }
    union { UNSG32 u32ADPSCL_FRC_CFG1;
            struct w32ADPSCL_FRC_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_FRC_CFG2_bevres(r32)                 _BFGET_(r32,11, 0)
    #define   SET32ADPSCL_FRC_CFG2_bevres(r32,v)               _BFSET_(r32,11, 0,v)
    #define   GET16ADPSCL_FRC_CFG2_bevres(r16)                 _BFGET_(r16,11, 0)
    #define   SET16ADPSCL_FRC_CFG2_bevres(r16,v)               _BFSET_(r16,11, 0,v)

    #define   GET32ADPSCL_FRC_CFG2_fevres(r32)                 _BFGET_(r32,23,12)
    #define   SET32ADPSCL_FRC_CFG2_fevres(r32,v)               _BFSET_(r32,23,12,v)

    #define   GET32ADPSCL_FRC_CFG2_dly_lrst_de(r32)            _BFGET_(r32,31,24)
    #define   SET32ADPSCL_FRC_CFG2_dly_lrst_de(r32,v)          _BFSET_(r32,31,24,v)
    #define   GET16ADPSCL_FRC_CFG2_dly_lrst_de(r16)            _BFGET_(r16,15, 8)
    #define   SET16ADPSCL_FRC_CFG2_dly_lrst_de(r16,v)          _BFSET_(r16,15, 8,v)

    #define     w32ADPSCL_FRC_CFG2                             {\
            UNSG32 uCFG2_bevres                                : 12;\
            UNSG32 uCFG2_fevres                                : 12;\
            UNSG32 uCFG2_dly_lrst_de                           :  8;\
          }
    union { UNSG32 u32ADPSCL_FRC_CFG2;
            struct w32ADPSCL_FRC_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_FRC_CFG3_behres(r32)                 _BFGET_(r32,12, 0)
    #define   SET32ADPSCL_FRC_CFG3_behres(r32,v)               _BFSET_(r32,12, 0,v)
    #define   GET16ADPSCL_FRC_CFG3_behres(r16)                 _BFGET_(r16,12, 0)
    #define   SET16ADPSCL_FRC_CFG3_behres(r16,v)               _BFSET_(r16,12, 0,v)

    #define   GET32ADPSCL_FRC_CFG3_clnt_ctrl(r32)              _BFGET_(r32,14,13)
    #define   SET32ADPSCL_FRC_CFG3_clnt_ctrl(r32,v)            _BFSET_(r32,14,13,v)
    #define   GET16ADPSCL_FRC_CFG3_clnt_ctrl(r16)              _BFGET_(r16,14,13)
    #define   SET16ADPSCL_FRC_CFG3_clnt_ctrl(r16,v)            _BFSET_(r16,14,13,v)

    #define   GET32ADPSCL_FRC_CFG3_ctrl(r32)                   _BFGET_(r32,22,15)
    #define   SET32ADPSCL_FRC_CFG3_ctrl(r32,v)                 _BFSET_(r32,22,15,v)

    #define   GET32ADPSCL_FRC_CFG3_rff_ctrl(r32)               _BFGET_(r32,30,23)
    #define   SET32ADPSCL_FRC_CFG3_rff_ctrl(r32,v)             _BFSET_(r32,30,23,v)
    #define   GET16ADPSCL_FRC_CFG3_rff_ctrl(r16)               _BFGET_(r16,14, 7)
    #define   SET16ADPSCL_FRC_CFG3_rff_ctrl(r16,v)             _BFSET_(r16,14, 7,v)

    #define     w32ADPSCL_FRC_CFG3                             {\
            UNSG32 uCFG3_behres                                : 13;\
            UNSG32 uCFG3_clnt_ctrl                             :  2;\
            UNSG32 uCFG3_ctrl                                  :  8;\
            UNSG32 uCFG3_rff_ctrl                              :  8;\
            UNSG32 RSVDxC_b31                                  :  1;\
          }
    union { UNSG32 u32ADPSCL_FRC_CFG3;
            struct w32ADPSCL_FRC_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_FRC_CFG4_ols(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32ADPSCL_FRC_CFG4_ols(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16ADPSCL_FRC_CFG4_ols(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16ADPSCL_FRC_CFG4_ols(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32ADPSCL_FRC_CFG4_wclient(r32)                _BFGET_(r32, 1, 1)
    #define   SET32ADPSCL_FRC_CFG4_wclient(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16ADPSCL_FRC_CFG4_wclient(r16)                _BFGET_(r16, 1, 1)
    #define   SET16ADPSCL_FRC_CFG4_wclient(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32ADPSCL_FRC_CFG4_luma_key_en(r32)            _BFGET_(r32, 2, 2)
    #define   SET32ADPSCL_FRC_CFG4_luma_key_en(r32,v)          _BFSET_(r32, 2, 2,v)
    #define   GET16ADPSCL_FRC_CFG4_luma_key_en(r16)            _BFGET_(r16, 2, 2)
    #define   SET16ADPSCL_FRC_CFG4_luma_key_en(r16,v)          _BFSET_(r16, 2, 2,v)

    #define   GET32ADPSCL_FRC_CFG4_luma_key_min(r32)           _BFGET_(r32,12, 3)
    #define   SET32ADPSCL_FRC_CFG4_luma_key_min(r32,v)         _BFSET_(r32,12, 3,v)
    #define   GET16ADPSCL_FRC_CFG4_luma_key_min(r16)           _BFGET_(r16,12, 3)
    #define   SET16ADPSCL_FRC_CFG4_luma_key_min(r16,v)         _BFSET_(r16,12, 3,v)

    #define   GET32ADPSCL_FRC_CFG4_luma_key_max(r32)           _BFGET_(r32,22,13)
    #define   SET32ADPSCL_FRC_CFG4_luma_key_max(r32,v)         _BFSET_(r32,22,13,v)

    #define     w32ADPSCL_FRC_CFG4                             {\
            UNSG32 uCFG4_ols                                   :  1;\
            UNSG32 uCFG4_wclient                               :  1;\
            UNSG32 uCFG4_luma_key_en                           :  1;\
            UNSG32 uCFG4_luma_key_min                          : 10;\
            UNSG32 uCFG4_luma_key_max                          : 10;\
            UNSG32 RSVDx10_b23                                 :  9;\
          }
    union { UNSG32 u32ADPSCL_FRC_CFG4;
            struct w32ADPSCL_FRC_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_FRC_CFG5_al_en_hit_al(r32)           _BFGET_(r32, 9, 0)
    #define   SET32ADPSCL_FRC_CFG5_al_en_hit_al(r32,v)         _BFSET_(r32, 9, 0,v)
    #define   GET16ADPSCL_FRC_CFG5_al_en_hit_al(r16)           _BFGET_(r16, 9, 0)
    #define   SET16ADPSCL_FRC_CFG5_al_en_hit_al(r16,v)         _BFSET_(r16, 9, 0,v)

    #define   GET32ADPSCL_FRC_CFG5_al_en_non_hit_al(r32)       _BFGET_(r32,21,10)
    #define   SET32ADPSCL_FRC_CFG5_al_en_non_hit_al(r32,v)     _BFSET_(r32,21,10,v)

    #define     w32ADPSCL_FRC_CFG5                             {\
            UNSG32 uCFG5_al_en_hit_al                          : 10;\
            UNSG32 uCFG5_al_en_non_hit_al                      : 12;\
            UNSG32 RSVDx14_b22                                 : 10;\
          }
    union { UNSG32 u32ADPSCL_FRC_CFG5;
            struct w32ADPSCL_FRC_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_FRC_CFG6_al_out_threshold(r32)       _BFGET_(r32, 9, 0)
    #define   SET32ADPSCL_FRC_CFG6_al_out_threshold(r32,v)     _BFSET_(r32, 9, 0,v)
    #define   GET16ADPSCL_FRC_CFG6_al_out_threshold(r16)       _BFGET_(r16, 9, 0)
    #define   SET16ADPSCL_FRC_CFG6_al_out_threshold(r16,v)     _BFSET_(r16, 9, 0,v)

    #define   GET32ADPSCL_FRC_CFG6_al_out_zeroluma(r32)        _BFGET_(r32,19,10)
    #define   SET32ADPSCL_FRC_CFG6_al_out_zeroluma(r32,v)      _BFSET_(r32,19,10,v)

    #define     w32ADPSCL_FRC_CFG6                             {\
            UNSG32 uCFG6_al_out_threshold                      : 10;\
            UNSG32 uCFG6_al_out_zeroluma                       : 10;\
            UNSG32 RSVDx18_b20                                 : 12;\
          }
    union { UNSG32 u32ADPSCL_FRC_CFG6;
            struct w32ADPSCL_FRC_CFG6;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ADPSCL_FRC;

    typedef union  T32ADPSCL_FRC_CFG0
          { UNSG32 u32;
            struct w32ADPSCL_FRC_CFG0;
                 } T32ADPSCL_FRC_CFG0;
    typedef union  T32ADPSCL_FRC_CFG1
          { UNSG32 u32;
            struct w32ADPSCL_FRC_CFG1;
                 } T32ADPSCL_FRC_CFG1;
    typedef union  T32ADPSCL_FRC_CFG2
          { UNSG32 u32;
            struct w32ADPSCL_FRC_CFG2;
                 } T32ADPSCL_FRC_CFG2;
    typedef union  T32ADPSCL_FRC_CFG3
          { UNSG32 u32;
            struct w32ADPSCL_FRC_CFG3;
                 } T32ADPSCL_FRC_CFG3;
    typedef union  T32ADPSCL_FRC_CFG4
          { UNSG32 u32;
            struct w32ADPSCL_FRC_CFG4;
                 } T32ADPSCL_FRC_CFG4;
    typedef union  T32ADPSCL_FRC_CFG5
          { UNSG32 u32;
            struct w32ADPSCL_FRC_CFG5;
                 } T32ADPSCL_FRC_CFG5;
    typedef union  T32ADPSCL_FRC_CFG6
          { UNSG32 u32;
            struct w32ADPSCL_FRC_CFG6;
                 } T32ADPSCL_FRC_CFG6;
    ///////////////////////////////////////////////////////////

    typedef union  TADPSCL_FRC_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_FRC_CFG0;
                   };
                 } TADPSCL_FRC_CFG0;
    typedef union  TADPSCL_FRC_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_FRC_CFG1;
                   };
                 } TADPSCL_FRC_CFG1;
    typedef union  TADPSCL_FRC_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_FRC_CFG2;
                   };
                 } TADPSCL_FRC_CFG2;
    typedef union  TADPSCL_FRC_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_FRC_CFG3;
                   };
                 } TADPSCL_FRC_CFG3;
    typedef union  TADPSCL_FRC_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_FRC_CFG4;
                   };
                 } TADPSCL_FRC_CFG4;
    typedef union  TADPSCL_FRC_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_FRC_CFG5;
                   };
                 } TADPSCL_FRC_CFG5;
    typedef union  TADPSCL_FRC_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_FRC_CFG6;
                   };
                 } TADPSCL_FRC_CFG6;

    ///////////////////////////////////////////////////////////
     SIGN32 ADPSCL_FRC_drvrd(SIE_ADPSCL_FRC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ADPSCL_FRC_drvwr(SIE_ADPSCL_FRC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ADPSCL_FRC_reset(SIE_ADPSCL_FRC *p);
     SIGN32 ADPSCL_FRC_cmp  (SIE_ADPSCL_FRC *p, SIE_ADPSCL_FRC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ADPSCL_FRC_check(p,pie,pfx,hLOG) ADPSCL_FRC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ADPSCL_FRC_print(p,    pfx,hLOG) ADPSCL_FRC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ADPSCL_FRC
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DINT                    biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 8  DIN_STM_CTRL1             0x0
///                                    ###
///                                    * Lvid[1:0] Luma control for video pixels
///                                    * 00- Motion adaptive
///                                    * 01- Forced spatial
///                                    * 10- Forced temporal
///                                    * 11- Reserved
///                                    * cvid[3:2] Chroma control for video pixels
///                                    * 00- Motion adaptive
///                                    * 01- Forced spatial
///                                    * 10- Forced temporal
///                                    * 11- Reserved
///                                    * lflm[5:4] Luma control for film pixels
///                                    * 00- Motion adaptive
///                                    * 01- Forced spatial
///                                    * 10- Forced temporal
///                                    * 11- Reserved
///                                    * cflm[7:6] Chroma control for film pixels
///                                    * 00- Motion adaptive
///                                    * 01- Forced spatial
///                                    * 10- Forced temporal
///                                    * 11- Reserved
///                                    ###
///               %unsigned 8  DIN_STM_CTRL2             0x20
///                                    ###
///                                    * lcm_sel_y[2:0] Luma/Chroma motion select for Luma in video mode
///                                    * 000- 100% luma motion
///                                    * 001- 75% luma motion and 25% chroma motion
///                                    * 010- 50% luma motion and 50% chroma motion
///                                    * 011- 25% luma motiona nd 75% chroma motion
///                                    * 100- 100% chroma motion
///                                    * 101- maximum of luma motion and chroma motion
///                                    * 110- Reserved
///                                    * 111- Reserved
///                                    * lcm_sel_c[5:3] Luma/Chroma motion select for Luma in video mode
///                                    * 000- 100% luma motion
///                                    * 001- 75% luma motion and 25% chroma motion
///                                    * 010- 50% luma motion and 50% chroma motion
///                                    * 011- 25% luma motiona nd 75% chroma motion
///                                    * 100- 100% chroma motion
///                                    * 101- maximum of luma motion and chroma motion
///                                    * 110- Reserved
///                                    * 111- Reserved
///                                    * tsel[7:6] Temporal tap select for video motion
///                                    * Average of next and previous field values
///                                    * Next field value
///                                    * Previous field value
///                                    * Select between next field value and previous filed value based on whichever
///                                    * gives less weave error.
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %unsigned 8  DIN_VI_CTRL               0x77
///                                    ###
///                                    * reject[0] This bit allows user to reject shallow minima which are far away from vertical direction.
///                                    * 0 : Disables rejection of far away shallow minima
///                                    * 1 : Enables rejection of far away shallow minima (default)
///                                    * en_slope[1] This bit enables the selection of minima, which has same slope as the centre correlation slope.
///                                    * 0 : Turn OFF this feature.
///                                    * 1 : Do the angle selection based on above description (default)
///                                    * en_var[2] This bit controls the selection of angle based on “mean of correlation values” and “variance measure”.
///                                    * 0 : Turn OFF this feature.
///                                    * 1 : Enables angle selection based on above defined metric (default)
///                                    * en_hpf[3] This bit controls the selection of angle based on high pass characteristics of the correlation window.
///                                    * 0 : Turn OFF this feature (default)
///                                    * 1 : Enables angle selection based on above defined metric
///                                    * en_diag[4] This bit controls the turning ON/OFF of vector interpolation.
///                                    * 0 : Perform spatial interpolation using vertically averaged pixels.
///                                    * 1 : Perform angle adaptive spatial interpolation (default)
///                                    * en_cued[5] This bit controls the selection of interpolation angle based on the number of luminance transitions (edges) in a region around the pixel to be interpolated.
///                                    * 0 : Turn OFF this feature.
///                                    * 1 : Enables angle selection based on above defined metric (default)
///                                    * en_shallow[6] This bit increases the preference to select minima far away from vertical if the correlation profile exhibits certain patterns.
///                                    * 0 : Turn OFF this feature.
///                                    * 1 : Enables angle selection based on above defined metric (default)
///                                    ###
///               %unsigned 8  DIN_VI_HPF_UTH            0xF
///                                    ###
///                                    * hpf_upper_th[7:0] Upper Threshold for HPF heuristic
///                                    ###
///               %unsigned 8  DIN_VI_HPF_LTH            0xA
///                                    ###
///                                    * hpf_lower_th[7:0] Lower Threshold for HPF heuristic
///                                    ###
///               %unsigned 8  DIN_VI_CUED_TH            0x14
///                                    ###
///                                    * cued_th[7:0] Lower Threshold Value for luminance edge based heuristic. The upper threshold is calculated by adding 4 to this number. For example, if cued_th = 20, upper threshold is 24.
///                                    ###
///     @ 0x00008 CFG2                 (P)
///               %unsigned 8  DIN_EXC_B                 0x0
///                                    ###
///                                    * din_exc_b [7:0] Programs the number of lines to exclude from bottom for film cadence handling
///                                    ###
///               %unsigned 8  DIN_EXC_T                 0x0
///                                    ###
///                                    * din_exc_t[7:0] Programs the number of lines to exclude from top for film cadence handling
///                                    ###
///               %unsigned 8  DIN_EXC_R                 0x0
///                                    ###
///                                    * din_exc_r[7:0] Programs the number of pixels to exclude from right for film cadence
///                                    * handling
///                                    ###
///               %unsigned 8  DIN_EXC_L                 0x0
///                                    ###
///                                    * din_exc_l[7:0] Programs the number of pixels to exclude from left for film cadence handling
///                                    ###
///     @ 0x0000C CFG3                 (P)
///               %unsigned 8  DIN_MCB_CTRL1             0x64
///                                    ###
///                                    * m_curr[3:0] Controls selection of frame motion for current field
///                                    * 0000- MAD engine
///                                    * 0001- MAX engine
///                                    * 0010- Mean of MAD and MAX engines
///                                    * 0011- Maximum of MAD and MAX engines
///                                    * 0100- Adapt between MAD and MAX engines based on detail
///                                    * 0101- Adapt between mean of MAD and MAX engines and MAX based on detail
///                                    * 0110- Adapt between maximum of MAD and MAX engines and MAX based on detail
///                                    * 0111- MAD2 engine
///                                    * 1000- MAX engine
///                                    * 1001- Mean of MAD2 and MAX engines
///                                    * 1010- Maximum of MAD2 and MAX engines
///                                    * 1011- Adapt between MAD2 and MAX engines based on detail
///                                    * 1100- Adapt between mean of MAD2 and MAX engines and MAX based on detail
///                                    * 1101- Adapt between maximum of MAD2 and MAX engines and MAX based on detail
///                                    * m_prev[5:4]
///                                    * Controls selection of frame motion for previous field
///                                    * 00- Mean of previous top and bottom motions
///                                    * 01- Maximum of previous top and bottom motions
///                                    * 10- Maximum of previous top and bottom motions and two fields previous motion
///                                    * 11- Maximum of two fields previous and mean of previous top and bottom motions
///                                    * m_frm[7:6] Controls the combining of current frame motion anf previous frame motion.
///                                    * 00- Current frame motion
///                                    * 01- Maximum of current and previous frame motions
///                                    * 10- Mean of current and previous frame motions
///                                    * 11-previous frame motion
///                                    ###
///               %unsigned 8  DIN_MCB_CTRL2             0xFF
///                                    ###
///                                    * m_comb[1:0] Controls the combining oo field and frame motion.
///                                    * 00- Use frame motion
///                                    * 01- Use field motion
///                                    * 10- Use maximum of frame and field motions
///                                    * 11- Use maximum of frame and field motion when global frame motion
///                                    * exceeds a threshold, else use frame motion.
///                                    * rec_ctrl[3:2] Controls the formation of motion bits for re-circulation
///                                    * 00- Use current frame motion
///                                    * 01- Reserved. Do not use this setting.
///                                    * 10- Use current frame motion when it is greater than the previous motion, else use weighted average of current and previous frame motion. This causes a decay on the re-circulated value whenever there is a step down response on the current frame motion.
///                                    * m_frm[7:4] Weighted average value used when rec_ctrl is set to 10.
///                                    ###
///               %unsigned 8  DIN_MCB_CTRL3             0xC
///                                    ###
///                                    * m_exp[1:0] Controls selection of horizontally expanded motion
///                                    * 0 : No expansion
///                                    * 1 : Use 3 pixel expansion
///                                    * 2 : Use 5 pixel expansion
///                                    * 3 : Use 7 pixel expansion
///                                    * flmf[3] Controls motion bits to be used for fixed threshold 3:2 detection
///                                    * 0 : Use MAD engine fixed film output
///                                    * 1 : Use MAD2 engine fixed film output
///                                    * flmg[4] Controls motion bits to be used for gradient threshold 3:2 detection
///                                    * 0 : Use MAD engine gradient film output
///                                    * 1 : Use MAD2 engine gradient film output
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %unsigned 8  DIN_ME_CTRL1              0x8B
///                                    ###
///                                    * mad[1:0] Controls MAD engine
///                                    * 0 : Use 3x3 sized window
///                                    * 1 : Use 5x3 sized window
///                                    * 2 : Use 7x3 sized window
///                                    * mad2[5:2] Controls MAD2 engine
///                                    * 0 : [0 0 0; 1 1 1; 0 0 0]
///                                    * 1 : [0 0 0; 1 2 1; 0 0 0]
///                                    * 2 : [0 1 0; 1 1 1; 0 1 0]
///                                    * 3 : [0 1 0; 1 2 1; 0 1 0]
///                                    * 4 : [0 1 0; 2 2 2; 0 1 0]
///                                    * 5 : [0 1 0; 2 4 2; 0 1 0]
///                                    * 6 : [1 1 1; 1 1 1; 1 1 1]
///                                    * 7 : [1 1 1; 2 2 2; 1 1 1]
///                                    * 8 : [1 2 1; 2 4 2; 1 2 1]
///                                    * 9 : [1 2 1; 4 8 4; 1 2 1]
///                                    * mad[7:6] Controls MAX engine
///                                    * 0 : Use 1x1 sized window (raw pixel difference)
///                                    * 1 : Use 3x3 sized window
///                                    * 2 : Use 5x3 sized window
///                                    * 3 : Use 7x3 sized window
///                                    ###
///               %unsigned 8  DIN_ME_CTRL2              0x0
///                                    ###
///                                    * m_field[2:0] Controls video field motion engine
///                                    * 0 :maximum motion : maximum detail
///                                    * 1 :maximum motion : minimum detail
///                                    * 2 :minimum motion : maximum detail
///                                    * 3 :minimum motion : minimum detail
///                                    * 4 :maximum motion
///                                    * 5 :mimimum motion
///                                    * m_chroma[4:3] Controls chroma motion engine
///                                    * 0 : Use 1x3 sized window
///                                    * 1 : Use 3x3 sized window
///                                    * 2 : Use 5x3 sized window
///                                    * 3 : Use 7x3 sized window
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 8  DIN_MAD_VID_THL           0x2
///                                    ###
///                                    * din_mad_vid_thl[7:0] Programs the lower threshold used by MAD motion engine. Values below this threshold are assigned motion bits 0
///                                    ###
///               %unsigned 8  DIN_MAD_VID_THH           0x22
///                                    ###
///                                    * din_mad_vid_thh[7:0] Programs the upper threshold used by MAD motion engine. Values above this threshold are assigned motion bits 15
///                                    ###
///               %unsigned 8  DIN_MAD_FLM_TH            0x10
///                                    ###
///                                    * din_mad_mad_th[7:0] Programs the fixed film threshold used by MAD motion engine. Values above this threshold are assigned film motion bit
///                                    ###
///               %unsigned 8  DIN_MAD2_VID_THL          0x2
///                                    ###
///                                    * din_mad2_vid_thl[7:0] Programs the lower threshold used by MAD2 motion engine. Values below this threshold are assigned motion bits 0
///                                    ###
///     @ 0x00018 CFG6                 (P)
///               %unsigned 8  DIN_MAD2_VID_THH          0x22
///                                    ###
///                                    * din_mad2_vid_thh[7:0] Programs the upper threshold used by MAD2 motion engine. Values above this threshold are assigned motion bits 15
///                                    ###
///               %unsigned 8  DIN_MAD2_FLM_TH           0x18
///                                    ###
///                                    * din_mad2_mad_th[7:0] Programs the film threshold used by MAD2 motion engine. Values above this threshold are assigned film motion bit
///                                    ###
///               %unsigned 8  DIN_MAX_VID_THL           0x4
///                                    ###
///                                    * din_max_vid_thl[7:0] Programs the lower threshold used by MAX motion engine. Values below this threshold are assigned motion bits 0
///                                    ###
///               %unsigned 8  DIN_MAX_VID_THH           0x22
///                                    ###
///                                    * din_max_vid_thh[7:0] Programs the upper threshold used by MAX motion engine. Values above this threshold are assigned motion bits 15
///                                    ###
///     @ 0x0001C CFG7                 (P)
///               %unsigned 8  DIN_MAX_STH1              0x10
///                                    ###
///                                    * din_max_sth1[7:0] Threshold to compare the differences between luma values and their mean in a local neighborhood. The number of points that satisfy this threshold are then used by statistics din_max_sth2
///                                    ###
///               %unsigned 8  DIN_MAX_STH2              0x7
///                                    ###
///                                    * din_max_sth2[4:0] Threshold to compare the number of points that satisfy the condition imposed by din_max_sth1. If the number of points is less than this threshold, then MAX output enable is high
///                                    ###
///               %unsigned 8  DIN_FLD_THL               0x2
///                                    ###
///                                    * din_fld_thl[7:0] Programs the lower threshold used by field motion engine. Values below this threshold are assigned motion bits 0
///                                    ###
///               %unsigned 8  DIN_FLD_THH               0x1E
///                                    ###
///                                    * din_field_thh[7:0] Programs the upper threshold used by field motion engine. Values above this threshold are assigned motion bits 15
///                                    ###
///     @ 0x00020 CFG8                 (P)
///               %unsigned 8  DIN_ASD_VID_THL           0x0
///                                    ###
///                                    * Absolute of sum of difference to Motion -quantizer lower threshold
///                                    ###
///               %unsigned 8  DIN_ASD_VID_THH           0x0
///                                    ###
///                                    * Absolute of sum of difference to Motion -quantizer lower threshold
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00024 CFG9                 (P)
///               %unsigned 8  DIN_WVE_TH                0xA
///                                    ###
///                                    * din_wve_th[7:0] Programs the inter-field threshold used by the weave error detector
///                                    ###
///               %unsigned 8  DIN_WVE1_GAIN             0x24
///                                    ###
///                                    * din_wve1_gain[7:0] Programs the intra-field gain threshold used by the weave error detector for 2:2 film exit and choosing of temporal taps in the spatio-tempral mixer
///                                    ###
///               %unsigned 8  DIN_WVE2_GAIN             0x2C
///                                    ###
///                                    * din_wve2_gain[7:0] Programs the intra-field gain threshold used by the weave error detector for 2:2 film entry
///                                    ###
///               %unsigned 8  DIN_WVE3_TH1              0xA
///                                    ###
///                                    * din_wve3_th1[7:0] Programs the inter-field threshold used by the weave error detector for 2:2 film secondary exit
///                                    ###
///     @ 0x00028 CFG10                (P)
///               %unsigned 8  DIN_WVE3_TH2              0x6
///                                    ###
///                                    * din_wve3_th2[7:0] Programs the intra-field threshold used by the weave error detector for 2:2 film secondary exit
///                                    ###
///               %unsigned 8  DIN_WVE3_GAIN             0x30
///                                    ###
///                                    * din_wve2_gain[7:0] Programs the intra-field gain threshold used by the weave error detector for 2:2 film secondary exit
///                                    ###
///               %unsigned 8  DIN_CH_TH                 0x0
///                                    ###
///                                    * Chroma Weave detection threshold
///                                    ###
///               %unsigned 8  DIN_CH_WVE                0x0
///                                    ###
///                                    * Chroma weave error scaling
///                                    ###
///     @ 0x0002C CFG11                (P)
///               %unsigned 8  DIN_WVE_PE_TH1            0x6
///                                    ###
///                                    * din_pe_th1[7:0] Programs the intra-field difference threshold used by the weave error detector for pixel exclusion from film mode handling
///                                    ###
///               %unsigned 8  DIN_WVE_PE_TH2            0x7
///                                    ###
///                                    * din_pe_th2[7:0] Programs the inter-field difference threshold used by the weave error detector for pixel exclusion from film mode handling
///                                    ###
///               %unsigned 8  DIN_WVE_VID_TH            0x0
///                                    ###
///                                    * Intra-Interfield difference thresholding
///                                    ###
///               %unsigned 8  DIN_WVE_VID_GAIN          0x0
///                                    ###
///                                    * Field Difference gain control
///                                    ###
///     @ 0x00030 CFG12                (P)
///               %unsigned 8  DIN_PE_MASK               0xF
///                                    ###
///                                    * din_pe_mask[7:0] Programs the intra-field detail mask used by the weave error detector for pixel exclusion from film mode handling. As this value increases, the effect of pixel exclusion increases.
///                                    ###
///               %unsigned 8  DIN_CHR_THL               0x2
///                                    ###
///                                    * din_chr_thl[7:0] Programs the lower threshold used by chroma motion engine. Values below this threshold are assigned motion bits 0
///                                    ###
///               %unsigned 8  DIN_CHR_THH               0x1E
///                                    ###
///                                    * din_chr_thh[7:0] Programs the upper threshold used by chroma motion engine. Values above this threshold are assigned motion bits 15
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00034 CFG13                (P)
///               %unsigned 24 DIN_NC_REG0_THRESH        0x1000
///                                    ###
///                                    * Noise Calibration SAD region 0.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00038 CFG14                (P)
///               %unsigned 24 DIN_NC_REG1_THRESH        0x2000
///                                    ###
///                                    * Noise Calibration SAD region 1
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x0003C CFG15                (P)
///               %unsigned 24 DIN_NC_REG2_THRESH        0x4000
///                                    ###
///                                    * Noise Calibration SAD region 2
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00040 CFG16                (P)
///               %unsigned 8  DIN_NC_PIX_MAD_TH0        0xD
///                                    ###
///                                    * ncmad0[7:0]
///                                    ###
///               %unsigned 8  DIN_NC_PIX_MAD_TH1        0x10
///                                    ###
///                                    * ncmad1[7:0
///                                    ###
///               %unsigned 8  DIN_NC_PIX_MAD_TH2        0x14
///                                    ###
///                                    * ncmad2[7:0] Programs the third adaptive pixel threshold that is used by MAD and MAD2 engines for 3:2 film detection
///                                    ###
///               %unsigned 8  DIN_NC_PIX_MAD_TH3        0x18
///                                    ###
///                                    * ncmad3[7:0]
///                                    ###
///     @ 0x00044 CFG17                (P)
///               %unsigned 8  DIN_NC_GLB_MAD_TH0        0x4
///                                    ###
///                                    * ncgmad0[7:0]
///                                    ###
///               %unsigned 8  DIN_NC_GLB_MAD_TH1        0x4
///                                    ###
///                                    * ncgmad1[7:0]
///                                    ###
///               %unsigned 8  DIN_NC_GLB_MAD_TH2        0x4
///                                    ###
///                                    * ncgmad2[7:0]
///                                    ###
///               %unsigned 8  DIN_NC_GLB_MAD_TH3        0x4
///                                    ###
///                                    * ncgmad3[7:0]
///                                    ###
///     @ 0x00048 CFG18                (P)
///               %unsigned 8  DIN_PF_MADTH              0x1
///                                    ###
///                                    * din_pf_madth[7:0] Programs the pixel threshold that is used by MAD and MAD2 engines for 3:2 film detection for material that has progressive flag stamped
///                                    ###
///               %unsigned 24 DIN_PEXIT_TH              0x200
///                                    ###
///                                    * Global post exit threshold for 3:2
///                                    * [15:0] Programs the global post exit threshold (fine control) that is used for 3:2 film mode exit
///                                    * [23:16] Programs the global post exit threshold (coarse control) that is used for 3:2 film mode exit
///                                    ###
///     @ 0x0004C CFG19                (P)
///               %unsigned 8  DIN_FCH_CTRL              0x0
///                                    ###
///                                    * 32_spl[0] Enable split zone detection for 3:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * 22_spl[1] Enable split zone detection for 2:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * 32_top[2] Enable top zone controlled detection for 3:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * 22_top[3] Enable top zone controlled detection for 2:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * 32_pe[4] Enable pixel exclusion for 3:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * 22_pe[5] Enable pixel exclusion for 2:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * Sc_pe[6] Enable pixel exclusion for auxilary cadences
///                                    * 0: Disable
///                                    * 1: Enable
///                                    ###
///               %unsigned 10 DIN_FCH_EN                0x33F
///                                    ###
///                                    * Film Cadence Handler (FCH) enable register
///                                    * en[0] R/W Enable 2:2:2:4 cadence detection
///                                    * 0: Disable    1: Enable
///                                    * en[1] R/W Enable 2:3:3:2 cadence detection
///                                    * 0: Disable    1: Enable
///                                    * en[2] R/W Enable 3:2:3:2:2 cadence detection
///                                    * 0: Disable    1: Enable
///                                    * en[3] R/W Enable 5:5 cadence detection
///                                    * 0: Disable    1: Enable
///                                    * en[4] R/W Enable 6:4 cadence detection
///                                    * 0: Disable    1: Enable
///                                    * en[5] R/W Enable 8:7 cadence detection
///                                    * 0: Disable    1: Enable
///                                    * en[6] R/W Enable programmable cadence 1 detection
///                                    * 0: Disable    1: Enable
///                                    * en7[7] R/W Enable programmable cadence 2 detection
///                                    * 0: Disable    1: Enable
///                                    * en8[8] R/W Enable 3:2 cadence detection
///                                    * 0: Disable    1: Enable
///                                    * en9[9] R/W Enable 2:2 cadence detection
///                                    * 0: Disable    1: Enable
///                                    ###
///               %unsigned 8  DIN_FCH_PFMODE            0x0
///                                    ###
///                                    * en0[0] Enable usage of din_pf_madth register for handling of material that has progressive flag stamped
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en1[1] Enable usage of a fixed global motion threshold for handling of material that has progressive flag stamped
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en2[2] Enable pixel exclusion when material that has progressive flag stamped is detected
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en3[3] Enable usage of a smaller, fixed window to detect material that has progressive flag stamped
///                                    * 0: Use full field
///                                    * 1: Use small, fixed window
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00050 CFG20                (P)
///               %unsigned 8  DIN_FCH_32CTRL0           0x7D
///                                    ###
///                                    * en[0] Enable usage of weave error signal 1 for exit from 3:2 mode
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en1[1] Enable usage of weave error signal 2 for exit from 3:2 mode
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en2[2] Enable usage of dynamic field exit for exit from 3:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en3[3] Enable usage of previous field exit for exit from 3:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en4[4] Enable usage of within field exit for exit from 3:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en5[5] Enable usage of noise calibrated frame motion for 3:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en6[6] Enable post exit for 3:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en7[7] Enable 3:2 detection of progressive input
///                                    * 0: Disable
///                                    * 1: Enable
///                                    ###
///               %unsigned 8  DIN_FCH_32CTRL1           0xEA
///                                    ###
///                                    * ent[3:0] Boolean operation to control entry into 3:2 by looking up
///                                    * 0: Frame motion
///                                    * 1: Field motion 1
///                                    * ext[3:0] Boolean operation to control exit from 3:2 by looking up
///                                    * 0: Frame motion
///                                    * 1: Field motion 1
///                                    ###
///               %unsigned 8  DIN_FCH_32NOF0            0x5
///                                    ###
///                                    * din_fch_32nof0[7:0] Programs the number of fields required in the hard build up phase (exact pattern match) for 3:2 entry.
///                                    ###
///               %unsigned 8  DIN_FCH_32NOF1            0x5
///                                    ###
///                                    * din_fch_32nof1[7:0] Programs the number of fields required in the soft build up phase (no exit signals) for 3:2 entry.
///                                    ###
///     @ 0x00054 CFG21                (P)
///               %unsigned 8  DIN_FCH_22CTRL            0x1D
///                                    ###
///                                    * en[0] Enable usage of weave error signal 1 for exit from 2:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en1[1] Enable usage of weave error signal 2 for exit from 2:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en2[2] Enable usage of dynamic field exit for exit from 2:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en3[3] Enable usage of previous field exit for exit from 2:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en4[4] Enable usage of within field exit for exit from 2:2
///                                    * 0: Disable
///                                    * 1: Enable
///                                    ###
///               %unsigned 8  DIN_FCH_22NOF0            0x14
///                                    ###
///                                    * din_fch_22nof0[7:0] Programs the number of fields required in the hard build up phase (exact pattern match) for 2:2 entry.
///                                    ###
///               %unsigned 8  DIN_FCH_22NOF1            0x30
///                                    ###
///                                    * din_fch_22nof1[7:0] Programs the number of fields required in the soft build up phase (no exit signals) for 2:2 entry.
///                                    ###
///               %unsigned 8  DIN_FCH_SCNOF0            0xC
///                                    ###
///                                    * din_fch_scnof0[7:0] Programs the number of fields required in the hard build up phase (exact pattern match) for special cadences entry.
///                                    ###
///     @ 0x00058 CFG22                (P)
///               %unsigned 8  DIN_FCH_SCNOF1            0x4
///                                    ###
///                                    * din_fch_scnof1[7:0] Programs the number of fields required in the soft build up phase (no exit signals) for special cadences entry.
///                                    ###
///               %unsigned 8  DIN_FCH_SCCTRL0           0x1D
///                                    ###
///                                    * en[0] Enable usage of weave error signal 1 for exit from special cadences mode
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en1[1] Enable usage of weave error signal 2 for exit from special cadences mode
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en2[2] Enable usage of dynamic field exit for exit from special cadences mode
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en3[3] Enable usage of previous field exit for exit from special cadences mode
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en4[4] Enable usage of within field exit for exit from special cadences mode
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en5[5] Enable usage of gradient frame motion for special cadences entry
///                                    * 0: Disable
///                                    * 1: Enable
///                                    ###
///               %unsigned 8  DIN_FCH_SCCTRL1           0xEA
///                                    ###
///                                    * ent[3:0] Boolean operation to control entry into special cadences by looking up
///                                    * 0: Frame motion
///                                    * 1: Field motion 1
///                                    * ext[3:0] Boolean operation to control exit from special cadences by looking up
///                                    * 0: Frame motion
///                                    * 1: Field motion 1
///                                    ###
///               %unsigned 8  DIN_FCH_32CTRL2           0x0
///     @ 0x0005C CFG23                (P)
///               %unsigned 32 DIN_FCH_SC_PAT0           0x0
///                                    ###
///                                    * Programmable cadence pattern 0 in terms of field motion high bits between current and next fields.
///                                    ###
///     @ 0x00060 CFG24                (P)
///               %unsigned 32 DIN_FCH_SC_PAT1           0x0
///                                    ###
///                                    * Programmable cadence pattern 1 in terms of field motion high bits between current and next fields
///                                    ###
///     @ 0x00064 CFG25                (P)
///               %unsigned 8  DIN_FCH_SC_LEN            0x0
///                                    ###
///                                    * len[3:0] Length of programmable cadence pattern 0 in terms of fields
///                                    * len1[7:4] Length of programmable cadence pattern 1 in terms of fields
///                                    ###
///               %unsigned 8  DIN_GFRM_GRD_ENT_TH       0x0
///               %unsigned 8  DIN_FRM_FXD_TH            0x4
///                                    ###
///                                    * din_frm_fxd_th[7:0] Programs the global frame motion used for film mode detection in fixed mode. This register is internally scaled by 256
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00068 CFG26                (P)
///               %unsigned 8  DIN_FLD_ENT_TH0           0x7
///                                    ###
///                                    * din_fld_ent_th0[7:0] Programs the global weave error absolute threshold used for film mode detection. This register is internally scaled by 256
///                                    ###
///               %unsigned 8  DIN_FLD_ENT_TH1           0xE
///                                    ###
///                                    * din_fld_ent_th1[7:0] Programs the global weave error difference threshold used for film mode detection. This register is internally scaled by 256
///                                    ###
///               %unsigned 8  DIN_FLD_EXT1_TH0          0xB
///                                    ###
///                                    * din_fld_ext_th0[7:0] Programs the global weave error absolute threshold used for 3:2 film mode detection. This register is internally scaled by 256
///                                    ###
///               %unsigned 8  DIN_FLD_EXT1_TH0A         0x6
///                                    ###
///                                    * din_fld_ext_th0a[7:0] Programs the global weave error absolute threshold used for 2:2 film mode detection. This register is internally scaled by 256
///                                    ###
///     @ 0x0006C CFG27                (P)
///               %unsigned 8  DIN_FLD_EXT1_TH1          0x3
///                                    ###
///                                    * din_fld_ext_th1[7:0] Programs the global weave error difference threshold used for film mode detection. This register is internally scaled by 256
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00070 CFG28                (P)
///               %unsigned 16 DIN_FLD_EXT2_TH0          0xFFFF
///                                    ###
///                                    * Global secondary weave error threshold 0 for film mode exit
///                                    * Programs the secondary global weave error absolute threshold used for film mode detection
///                                    ###
///               %unsigned 16 DIN_FLD_EXT2_TH1          0xFFFF
///                                    ###
///                                    * Global secondary weave error threshold 1 for film mode exit
///                                    * Programs the secondary global weave error difference threshold used for film mode detection
///                                    ###
///     @ 0x00074 CFG29                (P)
///               %unsigned 16 DIN_GLB_MOT               0x77
///                                    ###
///                                    * Programs the global motion threshold above which field motion is chosen in
///                                    * the motion combiner. This register is internally scaled by 256
///                                    ###
///               %unsigned 8  DIN_FCH_IND               0x3
///                                    ###
///                                    * en0[0] Enable on screen indicator for film mode ; a white/grey box for 3:2, a green/ pink box for 2:2 and a black box for the special cadences
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * en1[1] Enable on screen indicator for progressive flag detection
///                                    * 0: Disable
///                                    * 1: Enable
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00078 CFG30                (P)
///               %unsigned 8  DIN_STM_SBF0              0x0
///                                    ###
///                                    * sbf0[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 0
///                                    ###
///               %unsigned 8  DIN_STM_SBF1              0x1
///                                    ###
///                                    * sbf1[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 1
///                                    ###
///               %unsigned 8  DIN_STM_SBF2              0x2
///                                    ###
///                                    * sbf2[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 2
///                                    ###
///               %unsigned 8  DIN_STM_SBF3              0x3
///                                    ###
///                                    * sbf3[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 3
///                                    ###
///     @ 0x0007C CFG31                (P)
///               %unsigned 8  DIN_STM_SBF4              0x4
///                                    ###
///                                    * sbf4[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 4
///                                    ###
///               %unsigned 8  DIN_STM_SBF5              0x5
///                                    ###
///                                    * sbf5[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 5
///                                    ###
///               %unsigned 8  DIN_STM_SBF6              0x6
///                                    ###
///                                    * Sbf6[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 6
///                                    ###
///               %unsigned 8  DIN_STM_SBF7              0x7
///                                    ###
///                                    * sbf7[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 7
///                                    ###
///     @ 0x00080 CFG32                (P)
///               %unsigned 8  DIN_STM_SBF8              0x8
///                                    ###
///                                    * sbf8[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 8
///                                    ###
///               %unsigned 8  DIN_STM_SBF9              0x9
///                                    ###
///                                    * sbf9[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 9
///                                    ###
///               %unsigned 8  DIN_STM_SBF10             0xA
///                                    ###
///                                    * sbf10[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 10
///                                    ###
///               %unsigned 8  DIN_STM_SBF11             0xB
///                                    ###
///                                    * sbf11[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 11
///                                    ###
///     @ 0x00084 CFG33                (P)
///               %unsigned 8  DIN_STM_SBF12             0xC
///                                    ###
///                                    * sbf12[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 12
///                                    ###
///               %unsigned 8  DIN_STM_SBF13             0xD
///                                    ###
///                                    * sbf13[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 13
///                                    ###
///               %unsigned 8  DIN_STM_SBF14             0xE
///                                    ###
///                                    * sbf14[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 14
///                                    ###
///               %unsigned 8  DIN_STM_SBF15             0xF
///                                    ###
///                                    * sbf15[4:0] Programs the spatio-temporal blend factor to compute luma and chroma in video deinterlacing when four bit motion value is 15
///                                    ###
///     @ 0x00088 CFG34                (P)
///               %unsigned 8  DIN_FRC_DROP32            0x1
///                                    ###
///                                    * frc_drop32[4:0]
///                                    ###
///               %unsigned 8  DIN_FRC_INST32            0x8
///                                    ###
///                                    * frc_inst32[4:0]
///                                    ###
///               %unsigned 8  DIN_RFF_PAT32             0x0
///                                    ###
///                                    * rff_pat32[4:0]
///                                    ###
///               %unsigned 8  DIN_RFF_CTRL              0x0
///                                    ###
///                                    * rff_ctrl[4:0]
///                                    ###
///     @ 0x0008C CFG35                (P)
///               %unsigned 21 DIN_GLB_MENU_L            0x0
///                                    ###
///                                    * Global Motion Lower Threshold
///                                    ###
///               %%        11         # Stuffing bits...
///     @ 0x00090 CFG36                (P)
///               %unsigned 21 DIN_GLB_MENU_H            0x0
///                                    ###
///                                    * Global Motion Higher Threshold
///                                    ###
///               %%        11         # Stuffing bits...
///     @ 0x00094 CFG37                (P)
///               %unsigned 16 DIN_BLK_MATCH             0x0
///                                    ###
///                                    * Block match Threshold
///                                    ###
///               %unsigned 8  DIN_BLK_MATCH_X_SIZE      0x0
///                                    ###
///                                    * Block match Horizontal Size
///                                    ###
///               %unsigned 8  DIN_BLK_MATCH_Y_SIZE      0x0
///                                    ###
///                                    * Block match vertical size
///                                    ###
///     @ 0x00098 CFG38                (P)
///               %unsigned 8  DIN_HLD_TH1               0x0
///                                    ###
///                                    * horizontal line difference threshold
///                                    ###
///               %unsigned 8  DIN_HLD_TH2               0x0
///                                    ###
///                                    * Vertical line difference threshold
///                                    ###
///               %unsigned 8  DIN_HLD_TH3               0x0
///                                    ###
///                                    * Horiz+Vertical line difference averager threshold
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x0009C CFG39                (P)
///               %unsigned 8  DIN_NEW_MODE              0x0
///                                    ###
///                                    * 0: motion by absolute sum of difference
///                                    * 1: Motion by Sub of Aboslute difference
///                                    * 2: Luma motion
///                                    * 3: Wever motion
///                                    ###
///               %unsigned 8  DIN_MST                   0x0
///               %%        16         # Stuffing bits...
///     @ 0x000A0 CFG40                (P)
///               %unsigned 3  DEINT_MODE                0x1
///                                    ###
///                                    * These register bits controls the deinterlacer field buffer mode of operation.
///                                    * 000: Deinterlacer Bypass, meaning input is progressive in nature.
///                                    * 001: Spatial Deinterlacing using Next Field(Interlaced Input) (default).
///                                    * 010: Spatial Deinterlacing using Current Field (Interlaced Input).
///                                    * 011: ProScan240, progressive input but needs to be line doubled.
///                                    * 100: Temporal Deinterlacing (Interlaced Input) Out = (Next+Prev)/2.
///                                    * 101: Temporal Deinterlacing (Interlaced Input) Out = Next.
///                                    * 110: Temporal Deinterlacing (Interlaced Input) Out = Prev.
///                                    * 111: Motion Adaptive 3D Spatio-Temporal deinterlacing.
///                                    ###
///               %unsigned 1  FIELD_POL                 0x0
///                                    ###
///                                    * This bit controls the sense of the “field” input signal.
///                                    * 0: next incoming field is even (Spatially down), when the incoming field
///                                    * signal is low (default).
///                                    * 1: next incoming field is even (Spatially down), when the incoming filed
///                                    * signal is high.
///                                    ###
///               %unsigned 7  FB_CTRL                   0x3F
///                                    ###
///                                    * [0]:It will reset the state machine of field buffer (Default).
///                                    * [1]
///                                    * 0: Normal read operation of field buffer.
///                                    * 1: It will mask the writing to SDRAM controller (No writing to SDRAM
///                                    * controller will happen. (Default).
///                                    * [2]
///                                    * 0: Normal read operation of field buffer.
///                                    * 1: It will mask the read signal of field buffer low (Default).
///                                    * [3]
///                                    * 0: Normal read operation of field buffer.
///                                    * 1: It will mask the read signal of field buffer high(Default).
///                                    * [4]
///                                    * 0: Disables CRC check.
///                                    * 1: Enables CRC check for field buffer low (Default).
///                                    * [5]
///                                    * 0: Disables CRC check.
///                                    * 1: Enables CRC check for field buffer high (Default).
///                                    * [6]: Deint client mode to sdram.
///                                    * 0: 20 bit mode.
///                                    * 1: 26 bit mode.
///                                    ###
///               %unsigned 4  TEST_CTRL                 0x0
///                                    ###
///                                    * [1] :This bit is used to reset the test set-up to start a new test simulation.
///                                    * 0: Do no reset (Default).1: Reset the test set-up.
///                                    * [2] This bit reports the status of the test run.
///                                    ###
///               %%        17         # Stuffing bits...
///     @ 0x000A4 CFG41                (P)
///               %unsigned 12 TEST_HT                   0x35A
///                                    ###
///                                    * Contains the Test mode Horizontal Total count.
///                                    ###
///               %unsigned 12 TEST_VT                   0x107
///                                    ###
///                                    * Contains the l Test mode Vertical Total count
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x000A8 CFG42                (P)
///               %unsigned 12 TEST_HA                   0x2D0
///                                    ###
///                                    * Contains the l Test mode Horizontal Active count
///                                    ###
///               %unsigned 12 TEST_VA                   0xF0
///                                    ###
///                                    * Contains the Test mode Vertical Active count
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x000AC CFG43                (P)
///               %unsigned 1  PDWN                      0x0
///                                    ###
///                                    * Deinterlacer Memory Reduced Power mode
///                                    * 1: Reduce the leakage(low power) mode , allows VDD to be switched off with data retention.
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDLVMC                    0x0
///                                    ###
///                                    * Deinterlacer Memory Reduced Power mode
///                                    * 1: To select leakage reduction mode options when PDWN is asserted.
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDFVSSM                   0x0
///                                    ###
///                                    * Interlace Memory Reduced Power mode
///                                    * 1: To select leakage reduction mode options when PDWN is asserted.
///                                    * 0: Normal operation
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x000B0 STS0                 (R-)
///               %unsigned 12 DIN_FCH_STATUS            
///               %unsigned 1  DIN_TEST_STATUS           
///               %%        19         # Stuffing bits...
///     @ 0x000B4 STS1                 (R-)
///               %unsigned 24 DIN_OST1                  
///               %%        8          # Stuffing bits...
///     @ 0x000B8 STS2                 (R-)
///               %unsigned 24 DIN_OST2                  
///               %%        8          # Stuffing bits...
///     @ 0x000BC STS3                 (R-)
///               %unsigned 24 DIN_ACC_GLB_MOT_OUT       
///               %%        8          # Stuffing bits...
///     @ 0x000C0 STS4                 (R-)
///               %unsigned 16 DIN_ACC_GFRM_FXD_OUT      
///               %%        16         # Stuffing bits...
///     @ 0x000C4 STS5                 (R-)
///               %unsigned 16 DIN_ACC_GFRM_GRD_OUT      
///               %%        16         # Stuffing bits...
///     @ 0x000C8 STS6                 (R-)
///               %unsigned 16 DIN_ACC_GFRM_GRD_ENT_OUT  
///               %%        16         # Stuffing bits...
///     @ 0x000CC STS7                 (R-)
///               %unsigned 16 DIN_ACC_GFLDN_ENT_OUT     
///               %%        16         # Stuffing bits...
///     @ 0x000D0 STS8                 (R-)
///               %unsigned 16 DIN_ACC_GFLDP_ENT_OUT     
///               %%        16         # Stuffing bits...
///     @ 0x000D4 STS9                 (R-)
///               %unsigned 16 DIN_ACC_GFLDN_EXT1_OUT    
///               %%        16         # Stuffing bits...
///     @ 0x000D8 STS10                (R-)
///               %unsigned 16 DIN_ACC_GFLDP_EXT1_OUT    
///               %%        16         # Stuffing bits...
///     @ 0x000DC STS11                (R-)
///               %unsigned 16 DIN_ACC_GFLDN_EXT2_OUT    
///               %%        16         # Stuffing bits...
///     @ 0x000E0 STS12                (R-)
///               %unsigned 16 DIN_ACC_GFLDP_EXT2_OUT    
///               %%        16         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     228B, bits:    1395b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DINT
#define h_DINT (){}

    #define     RA_DINT_CFG0                                   0x0000

    #define     BA_DINT_CFG0_DIN_STM_CTRL1                     0x0000
    #define     B16DINT_CFG0_DIN_STM_CTRL1                     0x0000
    #define   LSb32DINT_CFG0_DIN_STM_CTRL1                        0
    #define   LSb16DINT_CFG0_DIN_STM_CTRL1                        0
    #define       bDINT_CFG0_DIN_STM_CTRL1                     8
    #define   MSK32DINT_CFG0_DIN_STM_CTRL1                        0x000000FF

    #define     BA_DINT_CFG0_DIN_STM_CTRL2                     0x0001
    #define     B16DINT_CFG0_DIN_STM_CTRL2                     0x0000
    #define   LSb32DINT_CFG0_DIN_STM_CTRL2                        8
    #define   LSb16DINT_CFG0_DIN_STM_CTRL2                        8
    #define       bDINT_CFG0_DIN_STM_CTRL2                     8
    #define   MSK32DINT_CFG0_DIN_STM_CTRL2                        0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG1                                   0x0004

    #define     BA_DINT_CFG1_DIN_VI_CTRL                       0x0004
    #define     B16DINT_CFG1_DIN_VI_CTRL                       0x0004
    #define   LSb32DINT_CFG1_DIN_VI_CTRL                          0
    #define   LSb16DINT_CFG1_DIN_VI_CTRL                          0
    #define       bDINT_CFG1_DIN_VI_CTRL                       8
    #define   MSK32DINT_CFG1_DIN_VI_CTRL                          0x000000FF

    #define     BA_DINT_CFG1_DIN_VI_HPF_UTH                    0x0005
    #define     B16DINT_CFG1_DIN_VI_HPF_UTH                    0x0004
    #define   LSb32DINT_CFG1_DIN_VI_HPF_UTH                       8
    #define   LSb16DINT_CFG1_DIN_VI_HPF_UTH                       8
    #define       bDINT_CFG1_DIN_VI_HPF_UTH                    8
    #define   MSK32DINT_CFG1_DIN_VI_HPF_UTH                       0x0000FF00

    #define     BA_DINT_CFG1_DIN_VI_HPF_LTH                    0x0006
    #define     B16DINT_CFG1_DIN_VI_HPF_LTH                    0x0006
    #define   LSb32DINT_CFG1_DIN_VI_HPF_LTH                       16
    #define   LSb16DINT_CFG1_DIN_VI_HPF_LTH                       0
    #define       bDINT_CFG1_DIN_VI_HPF_LTH                    8
    #define   MSK32DINT_CFG1_DIN_VI_HPF_LTH                       0x00FF0000

    #define     BA_DINT_CFG1_DIN_VI_CUED_TH                    0x0007
    #define     B16DINT_CFG1_DIN_VI_CUED_TH                    0x0006
    #define   LSb32DINT_CFG1_DIN_VI_CUED_TH                       24
    #define   LSb16DINT_CFG1_DIN_VI_CUED_TH                       8
    #define       bDINT_CFG1_DIN_VI_CUED_TH                    8
    #define   MSK32DINT_CFG1_DIN_VI_CUED_TH                       0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG2                                   0x0008

    #define     BA_DINT_CFG2_DIN_EXC_B                         0x0008
    #define     B16DINT_CFG2_DIN_EXC_B                         0x0008
    #define   LSb32DINT_CFG2_DIN_EXC_B                            0
    #define   LSb16DINT_CFG2_DIN_EXC_B                            0
    #define       bDINT_CFG2_DIN_EXC_B                         8
    #define   MSK32DINT_CFG2_DIN_EXC_B                            0x000000FF

    #define     BA_DINT_CFG2_DIN_EXC_T                         0x0009
    #define     B16DINT_CFG2_DIN_EXC_T                         0x0008
    #define   LSb32DINT_CFG2_DIN_EXC_T                            8
    #define   LSb16DINT_CFG2_DIN_EXC_T                            8
    #define       bDINT_CFG2_DIN_EXC_T                         8
    #define   MSK32DINT_CFG2_DIN_EXC_T                            0x0000FF00

    #define     BA_DINT_CFG2_DIN_EXC_R                         0x000A
    #define     B16DINT_CFG2_DIN_EXC_R                         0x000A
    #define   LSb32DINT_CFG2_DIN_EXC_R                            16
    #define   LSb16DINT_CFG2_DIN_EXC_R                            0
    #define       bDINT_CFG2_DIN_EXC_R                         8
    #define   MSK32DINT_CFG2_DIN_EXC_R                            0x00FF0000

    #define     BA_DINT_CFG2_DIN_EXC_L                         0x000B
    #define     B16DINT_CFG2_DIN_EXC_L                         0x000A
    #define   LSb32DINT_CFG2_DIN_EXC_L                            24
    #define   LSb16DINT_CFG2_DIN_EXC_L                            8
    #define       bDINT_CFG2_DIN_EXC_L                         8
    #define   MSK32DINT_CFG2_DIN_EXC_L                            0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG3                                   0x000C

    #define     BA_DINT_CFG3_DIN_MCB_CTRL1                     0x000C
    #define     B16DINT_CFG3_DIN_MCB_CTRL1                     0x000C
    #define   LSb32DINT_CFG3_DIN_MCB_CTRL1                        0
    #define   LSb16DINT_CFG3_DIN_MCB_CTRL1                        0
    #define       bDINT_CFG3_DIN_MCB_CTRL1                     8
    #define   MSK32DINT_CFG3_DIN_MCB_CTRL1                        0x000000FF

    #define     BA_DINT_CFG3_DIN_MCB_CTRL2                     0x000D
    #define     B16DINT_CFG3_DIN_MCB_CTRL2                     0x000C
    #define   LSb32DINT_CFG3_DIN_MCB_CTRL2                        8
    #define   LSb16DINT_CFG3_DIN_MCB_CTRL2                        8
    #define       bDINT_CFG3_DIN_MCB_CTRL2                     8
    #define   MSK32DINT_CFG3_DIN_MCB_CTRL2                        0x0000FF00

    #define     BA_DINT_CFG3_DIN_MCB_CTRL3                     0x000E
    #define     B16DINT_CFG3_DIN_MCB_CTRL3                     0x000E
    #define   LSb32DINT_CFG3_DIN_MCB_CTRL3                        16
    #define   LSb16DINT_CFG3_DIN_MCB_CTRL3                        0
    #define       bDINT_CFG3_DIN_MCB_CTRL3                     8
    #define   MSK32DINT_CFG3_DIN_MCB_CTRL3                        0x00FF0000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG4                                   0x0010

    #define     BA_DINT_CFG4_DIN_ME_CTRL1                      0x0010
    #define     B16DINT_CFG4_DIN_ME_CTRL1                      0x0010
    #define   LSb32DINT_CFG4_DIN_ME_CTRL1                         0
    #define   LSb16DINT_CFG4_DIN_ME_CTRL1                         0
    #define       bDINT_CFG4_DIN_ME_CTRL1                      8
    #define   MSK32DINT_CFG4_DIN_ME_CTRL1                         0x000000FF

    #define     BA_DINT_CFG4_DIN_ME_CTRL2                      0x0011
    #define     B16DINT_CFG4_DIN_ME_CTRL2                      0x0010
    #define   LSb32DINT_CFG4_DIN_ME_CTRL2                         8
    #define   LSb16DINT_CFG4_DIN_ME_CTRL2                         8
    #define       bDINT_CFG4_DIN_ME_CTRL2                      8
    #define   MSK32DINT_CFG4_DIN_ME_CTRL2                         0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG5                                   0x0014

    #define     BA_DINT_CFG5_DIN_MAD_VID_THL                   0x0014
    #define     B16DINT_CFG5_DIN_MAD_VID_THL                   0x0014
    #define   LSb32DINT_CFG5_DIN_MAD_VID_THL                      0
    #define   LSb16DINT_CFG5_DIN_MAD_VID_THL                      0
    #define       bDINT_CFG5_DIN_MAD_VID_THL                   8
    #define   MSK32DINT_CFG5_DIN_MAD_VID_THL                      0x000000FF

    #define     BA_DINT_CFG5_DIN_MAD_VID_THH                   0x0015
    #define     B16DINT_CFG5_DIN_MAD_VID_THH                   0x0014
    #define   LSb32DINT_CFG5_DIN_MAD_VID_THH                      8
    #define   LSb16DINT_CFG5_DIN_MAD_VID_THH                      8
    #define       bDINT_CFG5_DIN_MAD_VID_THH                   8
    #define   MSK32DINT_CFG5_DIN_MAD_VID_THH                      0x0000FF00

    #define     BA_DINT_CFG5_DIN_MAD_FLM_TH                    0x0016
    #define     B16DINT_CFG5_DIN_MAD_FLM_TH                    0x0016
    #define   LSb32DINT_CFG5_DIN_MAD_FLM_TH                       16
    #define   LSb16DINT_CFG5_DIN_MAD_FLM_TH                       0
    #define       bDINT_CFG5_DIN_MAD_FLM_TH                    8
    #define   MSK32DINT_CFG5_DIN_MAD_FLM_TH                       0x00FF0000

    #define     BA_DINT_CFG5_DIN_MAD2_VID_THL                  0x0017
    #define     B16DINT_CFG5_DIN_MAD2_VID_THL                  0x0016
    #define   LSb32DINT_CFG5_DIN_MAD2_VID_THL                     24
    #define   LSb16DINT_CFG5_DIN_MAD2_VID_THL                     8
    #define       bDINT_CFG5_DIN_MAD2_VID_THL                  8
    #define   MSK32DINT_CFG5_DIN_MAD2_VID_THL                     0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG6                                   0x0018

    #define     BA_DINT_CFG6_DIN_MAD2_VID_THH                  0x0018
    #define     B16DINT_CFG6_DIN_MAD2_VID_THH                  0x0018
    #define   LSb32DINT_CFG6_DIN_MAD2_VID_THH                     0
    #define   LSb16DINT_CFG6_DIN_MAD2_VID_THH                     0
    #define       bDINT_CFG6_DIN_MAD2_VID_THH                  8
    #define   MSK32DINT_CFG6_DIN_MAD2_VID_THH                     0x000000FF

    #define     BA_DINT_CFG6_DIN_MAD2_FLM_TH                   0x0019
    #define     B16DINT_CFG6_DIN_MAD2_FLM_TH                   0x0018
    #define   LSb32DINT_CFG6_DIN_MAD2_FLM_TH                      8
    #define   LSb16DINT_CFG6_DIN_MAD2_FLM_TH                      8
    #define       bDINT_CFG6_DIN_MAD2_FLM_TH                   8
    #define   MSK32DINT_CFG6_DIN_MAD2_FLM_TH                      0x0000FF00

    #define     BA_DINT_CFG6_DIN_MAX_VID_THL                   0x001A
    #define     B16DINT_CFG6_DIN_MAX_VID_THL                   0x001A
    #define   LSb32DINT_CFG6_DIN_MAX_VID_THL                      16
    #define   LSb16DINT_CFG6_DIN_MAX_VID_THL                      0
    #define       bDINT_CFG6_DIN_MAX_VID_THL                   8
    #define   MSK32DINT_CFG6_DIN_MAX_VID_THL                      0x00FF0000

    #define     BA_DINT_CFG6_DIN_MAX_VID_THH                   0x001B
    #define     B16DINT_CFG6_DIN_MAX_VID_THH                   0x001A
    #define   LSb32DINT_CFG6_DIN_MAX_VID_THH                      24
    #define   LSb16DINT_CFG6_DIN_MAX_VID_THH                      8
    #define       bDINT_CFG6_DIN_MAX_VID_THH                   8
    #define   MSK32DINT_CFG6_DIN_MAX_VID_THH                      0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG7                                   0x001C

    #define     BA_DINT_CFG7_DIN_MAX_STH1                      0x001C
    #define     B16DINT_CFG7_DIN_MAX_STH1                      0x001C
    #define   LSb32DINT_CFG7_DIN_MAX_STH1                         0
    #define   LSb16DINT_CFG7_DIN_MAX_STH1                         0
    #define       bDINT_CFG7_DIN_MAX_STH1                      8
    #define   MSK32DINT_CFG7_DIN_MAX_STH1                         0x000000FF

    #define     BA_DINT_CFG7_DIN_MAX_STH2                      0x001D
    #define     B16DINT_CFG7_DIN_MAX_STH2                      0x001C
    #define   LSb32DINT_CFG7_DIN_MAX_STH2                         8
    #define   LSb16DINT_CFG7_DIN_MAX_STH2                         8
    #define       bDINT_CFG7_DIN_MAX_STH2                      8
    #define   MSK32DINT_CFG7_DIN_MAX_STH2                         0x0000FF00

    #define     BA_DINT_CFG7_DIN_FLD_THL                       0x001E
    #define     B16DINT_CFG7_DIN_FLD_THL                       0x001E
    #define   LSb32DINT_CFG7_DIN_FLD_THL                          16
    #define   LSb16DINT_CFG7_DIN_FLD_THL                          0
    #define       bDINT_CFG7_DIN_FLD_THL                       8
    #define   MSK32DINT_CFG7_DIN_FLD_THL                          0x00FF0000

    #define     BA_DINT_CFG7_DIN_FLD_THH                       0x001F
    #define     B16DINT_CFG7_DIN_FLD_THH                       0x001E
    #define   LSb32DINT_CFG7_DIN_FLD_THH                          24
    #define   LSb16DINT_CFG7_DIN_FLD_THH                          8
    #define       bDINT_CFG7_DIN_FLD_THH                       8
    #define   MSK32DINT_CFG7_DIN_FLD_THH                          0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG8                                   0x0020

    #define     BA_DINT_CFG8_DIN_ASD_VID_THL                   0x0020
    #define     B16DINT_CFG8_DIN_ASD_VID_THL                   0x0020
    #define   LSb32DINT_CFG8_DIN_ASD_VID_THL                      0
    #define   LSb16DINT_CFG8_DIN_ASD_VID_THL                      0
    #define       bDINT_CFG8_DIN_ASD_VID_THL                   8
    #define   MSK32DINT_CFG8_DIN_ASD_VID_THL                      0x000000FF

    #define     BA_DINT_CFG8_DIN_ASD_VID_THH                   0x0021
    #define     B16DINT_CFG8_DIN_ASD_VID_THH                   0x0020
    #define   LSb32DINT_CFG8_DIN_ASD_VID_THH                      8
    #define   LSb16DINT_CFG8_DIN_ASD_VID_THH                      8
    #define       bDINT_CFG8_DIN_ASD_VID_THH                   8
    #define   MSK32DINT_CFG8_DIN_ASD_VID_THH                      0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG9                                   0x0024

    #define     BA_DINT_CFG9_DIN_WVE_TH                        0x0024
    #define     B16DINT_CFG9_DIN_WVE_TH                        0x0024
    #define   LSb32DINT_CFG9_DIN_WVE_TH                           0
    #define   LSb16DINT_CFG9_DIN_WVE_TH                           0
    #define       bDINT_CFG9_DIN_WVE_TH                        8
    #define   MSK32DINT_CFG9_DIN_WVE_TH                           0x000000FF

    #define     BA_DINT_CFG9_DIN_WVE1_GAIN                     0x0025
    #define     B16DINT_CFG9_DIN_WVE1_GAIN                     0x0024
    #define   LSb32DINT_CFG9_DIN_WVE1_GAIN                        8
    #define   LSb16DINT_CFG9_DIN_WVE1_GAIN                        8
    #define       bDINT_CFG9_DIN_WVE1_GAIN                     8
    #define   MSK32DINT_CFG9_DIN_WVE1_GAIN                        0x0000FF00

    #define     BA_DINT_CFG9_DIN_WVE2_GAIN                     0x0026
    #define     B16DINT_CFG9_DIN_WVE2_GAIN                     0x0026
    #define   LSb32DINT_CFG9_DIN_WVE2_GAIN                        16
    #define   LSb16DINT_CFG9_DIN_WVE2_GAIN                        0
    #define       bDINT_CFG9_DIN_WVE2_GAIN                     8
    #define   MSK32DINT_CFG9_DIN_WVE2_GAIN                        0x00FF0000

    #define     BA_DINT_CFG9_DIN_WVE3_TH1                      0x0027
    #define     B16DINT_CFG9_DIN_WVE3_TH1                      0x0026
    #define   LSb32DINT_CFG9_DIN_WVE3_TH1                         24
    #define   LSb16DINT_CFG9_DIN_WVE3_TH1                         8
    #define       bDINT_CFG9_DIN_WVE3_TH1                      8
    #define   MSK32DINT_CFG9_DIN_WVE3_TH1                         0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG10                                  0x0028

    #define     BA_DINT_CFG10_DIN_WVE3_TH2                     0x0028
    #define     B16DINT_CFG10_DIN_WVE3_TH2                     0x0028
    #define   LSb32DINT_CFG10_DIN_WVE3_TH2                        0
    #define   LSb16DINT_CFG10_DIN_WVE3_TH2                        0
    #define       bDINT_CFG10_DIN_WVE3_TH2                     8
    #define   MSK32DINT_CFG10_DIN_WVE3_TH2                        0x000000FF

    #define     BA_DINT_CFG10_DIN_WVE3_GAIN                    0x0029
    #define     B16DINT_CFG10_DIN_WVE3_GAIN                    0x0028
    #define   LSb32DINT_CFG10_DIN_WVE3_GAIN                       8
    #define   LSb16DINT_CFG10_DIN_WVE3_GAIN                       8
    #define       bDINT_CFG10_DIN_WVE3_GAIN                    8
    #define   MSK32DINT_CFG10_DIN_WVE3_GAIN                       0x0000FF00

    #define     BA_DINT_CFG10_DIN_CH_TH                        0x002A
    #define     B16DINT_CFG10_DIN_CH_TH                        0x002A
    #define   LSb32DINT_CFG10_DIN_CH_TH                           16
    #define   LSb16DINT_CFG10_DIN_CH_TH                           0
    #define       bDINT_CFG10_DIN_CH_TH                        8
    #define   MSK32DINT_CFG10_DIN_CH_TH                           0x00FF0000

    #define     BA_DINT_CFG10_DIN_CH_WVE                       0x002B
    #define     B16DINT_CFG10_DIN_CH_WVE                       0x002A
    #define   LSb32DINT_CFG10_DIN_CH_WVE                          24
    #define   LSb16DINT_CFG10_DIN_CH_WVE                          8
    #define       bDINT_CFG10_DIN_CH_WVE                       8
    #define   MSK32DINT_CFG10_DIN_CH_WVE                          0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG11                                  0x002C

    #define     BA_DINT_CFG11_DIN_WVE_PE_TH1                   0x002C
    #define     B16DINT_CFG11_DIN_WVE_PE_TH1                   0x002C
    #define   LSb32DINT_CFG11_DIN_WVE_PE_TH1                      0
    #define   LSb16DINT_CFG11_DIN_WVE_PE_TH1                      0
    #define       bDINT_CFG11_DIN_WVE_PE_TH1                   8
    #define   MSK32DINT_CFG11_DIN_WVE_PE_TH1                      0x000000FF

    #define     BA_DINT_CFG11_DIN_WVE_PE_TH2                   0x002D
    #define     B16DINT_CFG11_DIN_WVE_PE_TH2                   0x002C
    #define   LSb32DINT_CFG11_DIN_WVE_PE_TH2                      8
    #define   LSb16DINT_CFG11_DIN_WVE_PE_TH2                      8
    #define       bDINT_CFG11_DIN_WVE_PE_TH2                   8
    #define   MSK32DINT_CFG11_DIN_WVE_PE_TH2                      0x0000FF00

    #define     BA_DINT_CFG11_DIN_WVE_VID_TH                   0x002E
    #define     B16DINT_CFG11_DIN_WVE_VID_TH                   0x002E
    #define   LSb32DINT_CFG11_DIN_WVE_VID_TH                      16
    #define   LSb16DINT_CFG11_DIN_WVE_VID_TH                      0
    #define       bDINT_CFG11_DIN_WVE_VID_TH                   8
    #define   MSK32DINT_CFG11_DIN_WVE_VID_TH                      0x00FF0000

    #define     BA_DINT_CFG11_DIN_WVE_VID_GAIN                 0x002F
    #define     B16DINT_CFG11_DIN_WVE_VID_GAIN                 0x002E
    #define   LSb32DINT_CFG11_DIN_WVE_VID_GAIN                    24
    #define   LSb16DINT_CFG11_DIN_WVE_VID_GAIN                    8
    #define       bDINT_CFG11_DIN_WVE_VID_GAIN                 8
    #define   MSK32DINT_CFG11_DIN_WVE_VID_GAIN                    0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG12                                  0x0030

    #define     BA_DINT_CFG12_DIN_PE_MASK                      0x0030
    #define     B16DINT_CFG12_DIN_PE_MASK                      0x0030
    #define   LSb32DINT_CFG12_DIN_PE_MASK                         0
    #define   LSb16DINT_CFG12_DIN_PE_MASK                         0
    #define       bDINT_CFG12_DIN_PE_MASK                      8
    #define   MSK32DINT_CFG12_DIN_PE_MASK                         0x000000FF

    #define     BA_DINT_CFG12_DIN_CHR_THL                      0x0031
    #define     B16DINT_CFG12_DIN_CHR_THL                      0x0030
    #define   LSb32DINT_CFG12_DIN_CHR_THL                         8
    #define   LSb16DINT_CFG12_DIN_CHR_THL                         8
    #define       bDINT_CFG12_DIN_CHR_THL                      8
    #define   MSK32DINT_CFG12_DIN_CHR_THL                         0x0000FF00

    #define     BA_DINT_CFG12_DIN_CHR_THH                      0x0032
    #define     B16DINT_CFG12_DIN_CHR_THH                      0x0032
    #define   LSb32DINT_CFG12_DIN_CHR_THH                         16
    #define   LSb16DINT_CFG12_DIN_CHR_THH                         0
    #define       bDINT_CFG12_DIN_CHR_THH                      8
    #define   MSK32DINT_CFG12_DIN_CHR_THH                         0x00FF0000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG13                                  0x0034

    #define     BA_DINT_CFG13_DIN_NC_REG0_THRESH               0x0034
    #define     B16DINT_CFG13_DIN_NC_REG0_THRESH               0x0034
    #define   LSb32DINT_CFG13_DIN_NC_REG0_THRESH                  0
    #define   LSb16DINT_CFG13_DIN_NC_REG0_THRESH                  0
    #define       bDINT_CFG13_DIN_NC_REG0_THRESH               24
    #define   MSK32DINT_CFG13_DIN_NC_REG0_THRESH                  0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG14                                  0x0038

    #define     BA_DINT_CFG14_DIN_NC_REG1_THRESH               0x0038
    #define     B16DINT_CFG14_DIN_NC_REG1_THRESH               0x0038
    #define   LSb32DINT_CFG14_DIN_NC_REG1_THRESH                  0
    #define   LSb16DINT_CFG14_DIN_NC_REG1_THRESH                  0
    #define       bDINT_CFG14_DIN_NC_REG1_THRESH               24
    #define   MSK32DINT_CFG14_DIN_NC_REG1_THRESH                  0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG15                                  0x003C

    #define     BA_DINT_CFG15_DIN_NC_REG2_THRESH               0x003C
    #define     B16DINT_CFG15_DIN_NC_REG2_THRESH               0x003C
    #define   LSb32DINT_CFG15_DIN_NC_REG2_THRESH                  0
    #define   LSb16DINT_CFG15_DIN_NC_REG2_THRESH                  0
    #define       bDINT_CFG15_DIN_NC_REG2_THRESH               24
    #define   MSK32DINT_CFG15_DIN_NC_REG2_THRESH                  0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG16                                  0x0040

    #define     BA_DINT_CFG16_DIN_NC_PIX_MAD_TH0               0x0040
    #define     B16DINT_CFG16_DIN_NC_PIX_MAD_TH0               0x0040
    #define   LSb32DINT_CFG16_DIN_NC_PIX_MAD_TH0                  0
    #define   LSb16DINT_CFG16_DIN_NC_PIX_MAD_TH0                  0
    #define       bDINT_CFG16_DIN_NC_PIX_MAD_TH0               8
    #define   MSK32DINT_CFG16_DIN_NC_PIX_MAD_TH0                  0x000000FF

    #define     BA_DINT_CFG16_DIN_NC_PIX_MAD_TH1               0x0041
    #define     B16DINT_CFG16_DIN_NC_PIX_MAD_TH1               0x0040
    #define   LSb32DINT_CFG16_DIN_NC_PIX_MAD_TH1                  8
    #define   LSb16DINT_CFG16_DIN_NC_PIX_MAD_TH1                  8
    #define       bDINT_CFG16_DIN_NC_PIX_MAD_TH1               8
    #define   MSK32DINT_CFG16_DIN_NC_PIX_MAD_TH1                  0x0000FF00

    #define     BA_DINT_CFG16_DIN_NC_PIX_MAD_TH2               0x0042
    #define     B16DINT_CFG16_DIN_NC_PIX_MAD_TH2               0x0042
    #define   LSb32DINT_CFG16_DIN_NC_PIX_MAD_TH2                  16
    #define   LSb16DINT_CFG16_DIN_NC_PIX_MAD_TH2                  0
    #define       bDINT_CFG16_DIN_NC_PIX_MAD_TH2               8
    #define   MSK32DINT_CFG16_DIN_NC_PIX_MAD_TH2                  0x00FF0000

    #define     BA_DINT_CFG16_DIN_NC_PIX_MAD_TH3               0x0043
    #define     B16DINT_CFG16_DIN_NC_PIX_MAD_TH3               0x0042
    #define   LSb32DINT_CFG16_DIN_NC_PIX_MAD_TH3                  24
    #define   LSb16DINT_CFG16_DIN_NC_PIX_MAD_TH3                  8
    #define       bDINT_CFG16_DIN_NC_PIX_MAD_TH3               8
    #define   MSK32DINT_CFG16_DIN_NC_PIX_MAD_TH3                  0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG17                                  0x0044

    #define     BA_DINT_CFG17_DIN_NC_GLB_MAD_TH0               0x0044
    #define     B16DINT_CFG17_DIN_NC_GLB_MAD_TH0               0x0044
    #define   LSb32DINT_CFG17_DIN_NC_GLB_MAD_TH0                  0
    #define   LSb16DINT_CFG17_DIN_NC_GLB_MAD_TH0                  0
    #define       bDINT_CFG17_DIN_NC_GLB_MAD_TH0               8
    #define   MSK32DINT_CFG17_DIN_NC_GLB_MAD_TH0                  0x000000FF

    #define     BA_DINT_CFG17_DIN_NC_GLB_MAD_TH1               0x0045
    #define     B16DINT_CFG17_DIN_NC_GLB_MAD_TH1               0x0044
    #define   LSb32DINT_CFG17_DIN_NC_GLB_MAD_TH1                  8
    #define   LSb16DINT_CFG17_DIN_NC_GLB_MAD_TH1                  8
    #define       bDINT_CFG17_DIN_NC_GLB_MAD_TH1               8
    #define   MSK32DINT_CFG17_DIN_NC_GLB_MAD_TH1                  0x0000FF00

    #define     BA_DINT_CFG17_DIN_NC_GLB_MAD_TH2               0x0046
    #define     B16DINT_CFG17_DIN_NC_GLB_MAD_TH2               0x0046
    #define   LSb32DINT_CFG17_DIN_NC_GLB_MAD_TH2                  16
    #define   LSb16DINT_CFG17_DIN_NC_GLB_MAD_TH2                  0
    #define       bDINT_CFG17_DIN_NC_GLB_MAD_TH2               8
    #define   MSK32DINT_CFG17_DIN_NC_GLB_MAD_TH2                  0x00FF0000

    #define     BA_DINT_CFG17_DIN_NC_GLB_MAD_TH3               0x0047
    #define     B16DINT_CFG17_DIN_NC_GLB_MAD_TH3               0x0046
    #define   LSb32DINT_CFG17_DIN_NC_GLB_MAD_TH3                  24
    #define   LSb16DINT_CFG17_DIN_NC_GLB_MAD_TH3                  8
    #define       bDINT_CFG17_DIN_NC_GLB_MAD_TH3               8
    #define   MSK32DINT_CFG17_DIN_NC_GLB_MAD_TH3                  0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG18                                  0x0048

    #define     BA_DINT_CFG18_DIN_PF_MADTH                     0x0048
    #define     B16DINT_CFG18_DIN_PF_MADTH                     0x0048
    #define   LSb32DINT_CFG18_DIN_PF_MADTH                        0
    #define   LSb16DINT_CFG18_DIN_PF_MADTH                        0
    #define       bDINT_CFG18_DIN_PF_MADTH                     8
    #define   MSK32DINT_CFG18_DIN_PF_MADTH                        0x000000FF

    #define     BA_DINT_CFG18_DIN_PEXIT_TH                     0x0049
    #define     B16DINT_CFG18_DIN_PEXIT_TH                     0x0048
    #define   LSb32DINT_CFG18_DIN_PEXIT_TH                        8
    #define   LSb16DINT_CFG18_DIN_PEXIT_TH                        8
    #define       bDINT_CFG18_DIN_PEXIT_TH                     24
    #define   MSK32DINT_CFG18_DIN_PEXIT_TH                        0xFFFFFF00
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG19                                  0x004C

    #define     BA_DINT_CFG19_DIN_FCH_CTRL                     0x004C
    #define     B16DINT_CFG19_DIN_FCH_CTRL                     0x004C
    #define   LSb32DINT_CFG19_DIN_FCH_CTRL                        0
    #define   LSb16DINT_CFG19_DIN_FCH_CTRL                        0
    #define       bDINT_CFG19_DIN_FCH_CTRL                     8
    #define   MSK32DINT_CFG19_DIN_FCH_CTRL                        0x000000FF

    #define     BA_DINT_CFG19_DIN_FCH_EN                       0x004D
    #define     B16DINT_CFG19_DIN_FCH_EN                       0x004C
    #define   LSb32DINT_CFG19_DIN_FCH_EN                          8
    #define   LSb16DINT_CFG19_DIN_FCH_EN                          8
    #define       bDINT_CFG19_DIN_FCH_EN                       10
    #define   MSK32DINT_CFG19_DIN_FCH_EN                          0x0003FF00

    #define     BA_DINT_CFG19_DIN_FCH_PFMODE                   0x004E
    #define     B16DINT_CFG19_DIN_FCH_PFMODE                   0x004E
    #define   LSb32DINT_CFG19_DIN_FCH_PFMODE                      18
    #define   LSb16DINT_CFG19_DIN_FCH_PFMODE                      2
    #define       bDINT_CFG19_DIN_FCH_PFMODE                   8
    #define   MSK32DINT_CFG19_DIN_FCH_PFMODE                      0x03FC0000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG20                                  0x0050

    #define     BA_DINT_CFG20_DIN_FCH_32CTRL0                  0x0050
    #define     B16DINT_CFG20_DIN_FCH_32CTRL0                  0x0050
    #define   LSb32DINT_CFG20_DIN_FCH_32CTRL0                     0
    #define   LSb16DINT_CFG20_DIN_FCH_32CTRL0                     0
    #define       bDINT_CFG20_DIN_FCH_32CTRL0                  8
    #define   MSK32DINT_CFG20_DIN_FCH_32CTRL0                     0x000000FF

    #define     BA_DINT_CFG20_DIN_FCH_32CTRL1                  0x0051
    #define     B16DINT_CFG20_DIN_FCH_32CTRL1                  0x0050
    #define   LSb32DINT_CFG20_DIN_FCH_32CTRL1                     8
    #define   LSb16DINT_CFG20_DIN_FCH_32CTRL1                     8
    #define       bDINT_CFG20_DIN_FCH_32CTRL1                  8
    #define   MSK32DINT_CFG20_DIN_FCH_32CTRL1                     0x0000FF00

    #define     BA_DINT_CFG20_DIN_FCH_32NOF0                   0x0052
    #define     B16DINT_CFG20_DIN_FCH_32NOF0                   0x0052
    #define   LSb32DINT_CFG20_DIN_FCH_32NOF0                      16
    #define   LSb16DINT_CFG20_DIN_FCH_32NOF0                      0
    #define       bDINT_CFG20_DIN_FCH_32NOF0                   8
    #define   MSK32DINT_CFG20_DIN_FCH_32NOF0                      0x00FF0000

    #define     BA_DINT_CFG20_DIN_FCH_32NOF1                   0x0053
    #define     B16DINT_CFG20_DIN_FCH_32NOF1                   0x0052
    #define   LSb32DINT_CFG20_DIN_FCH_32NOF1                      24
    #define   LSb16DINT_CFG20_DIN_FCH_32NOF1                      8
    #define       bDINT_CFG20_DIN_FCH_32NOF1                   8
    #define   MSK32DINT_CFG20_DIN_FCH_32NOF1                      0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG21                                  0x0054

    #define     BA_DINT_CFG21_DIN_FCH_22CTRL                   0x0054
    #define     B16DINT_CFG21_DIN_FCH_22CTRL                   0x0054
    #define   LSb32DINT_CFG21_DIN_FCH_22CTRL                      0
    #define   LSb16DINT_CFG21_DIN_FCH_22CTRL                      0
    #define       bDINT_CFG21_DIN_FCH_22CTRL                   8
    #define   MSK32DINT_CFG21_DIN_FCH_22CTRL                      0x000000FF

    #define     BA_DINT_CFG21_DIN_FCH_22NOF0                   0x0055
    #define     B16DINT_CFG21_DIN_FCH_22NOF0                   0x0054
    #define   LSb32DINT_CFG21_DIN_FCH_22NOF0                      8
    #define   LSb16DINT_CFG21_DIN_FCH_22NOF0                      8
    #define       bDINT_CFG21_DIN_FCH_22NOF0                   8
    #define   MSK32DINT_CFG21_DIN_FCH_22NOF0                      0x0000FF00

    #define     BA_DINT_CFG21_DIN_FCH_22NOF1                   0x0056
    #define     B16DINT_CFG21_DIN_FCH_22NOF1                   0x0056
    #define   LSb32DINT_CFG21_DIN_FCH_22NOF1                      16
    #define   LSb16DINT_CFG21_DIN_FCH_22NOF1                      0
    #define       bDINT_CFG21_DIN_FCH_22NOF1                   8
    #define   MSK32DINT_CFG21_DIN_FCH_22NOF1                      0x00FF0000

    #define     BA_DINT_CFG21_DIN_FCH_SCNOF0                   0x0057
    #define     B16DINT_CFG21_DIN_FCH_SCNOF0                   0x0056
    #define   LSb32DINT_CFG21_DIN_FCH_SCNOF0                      24
    #define   LSb16DINT_CFG21_DIN_FCH_SCNOF0                      8
    #define       bDINT_CFG21_DIN_FCH_SCNOF0                   8
    #define   MSK32DINT_CFG21_DIN_FCH_SCNOF0                      0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG22                                  0x0058

    #define     BA_DINT_CFG22_DIN_FCH_SCNOF1                   0x0058
    #define     B16DINT_CFG22_DIN_FCH_SCNOF1                   0x0058
    #define   LSb32DINT_CFG22_DIN_FCH_SCNOF1                      0
    #define   LSb16DINT_CFG22_DIN_FCH_SCNOF1                      0
    #define       bDINT_CFG22_DIN_FCH_SCNOF1                   8
    #define   MSK32DINT_CFG22_DIN_FCH_SCNOF1                      0x000000FF

    #define     BA_DINT_CFG22_DIN_FCH_SCCTRL0                  0x0059
    #define     B16DINT_CFG22_DIN_FCH_SCCTRL0                  0x0058
    #define   LSb32DINT_CFG22_DIN_FCH_SCCTRL0                     8
    #define   LSb16DINT_CFG22_DIN_FCH_SCCTRL0                     8
    #define       bDINT_CFG22_DIN_FCH_SCCTRL0                  8
    #define   MSK32DINT_CFG22_DIN_FCH_SCCTRL0                     0x0000FF00

    #define     BA_DINT_CFG22_DIN_FCH_SCCTRL1                  0x005A
    #define     B16DINT_CFG22_DIN_FCH_SCCTRL1                  0x005A
    #define   LSb32DINT_CFG22_DIN_FCH_SCCTRL1                     16
    #define   LSb16DINT_CFG22_DIN_FCH_SCCTRL1                     0
    #define       bDINT_CFG22_DIN_FCH_SCCTRL1                  8
    #define   MSK32DINT_CFG22_DIN_FCH_SCCTRL1                     0x00FF0000

    #define     BA_DINT_CFG22_DIN_FCH_32CTRL2                  0x005B
    #define     B16DINT_CFG22_DIN_FCH_32CTRL2                  0x005A
    #define   LSb32DINT_CFG22_DIN_FCH_32CTRL2                     24
    #define   LSb16DINT_CFG22_DIN_FCH_32CTRL2                     8
    #define       bDINT_CFG22_DIN_FCH_32CTRL2                  8
    #define   MSK32DINT_CFG22_DIN_FCH_32CTRL2                     0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG23                                  0x005C

    #define     BA_DINT_CFG23_DIN_FCH_SC_PAT0                  0x005C
    #define     B16DINT_CFG23_DIN_FCH_SC_PAT0                  0x005C
    #define   LSb32DINT_CFG23_DIN_FCH_SC_PAT0                     0
    #define   LSb16DINT_CFG23_DIN_FCH_SC_PAT0                     0
    #define       bDINT_CFG23_DIN_FCH_SC_PAT0                  32
    #define   MSK32DINT_CFG23_DIN_FCH_SC_PAT0                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG24                                  0x0060

    #define     BA_DINT_CFG24_DIN_FCH_SC_PAT1                  0x0060
    #define     B16DINT_CFG24_DIN_FCH_SC_PAT1                  0x0060
    #define   LSb32DINT_CFG24_DIN_FCH_SC_PAT1                     0
    #define   LSb16DINT_CFG24_DIN_FCH_SC_PAT1                     0
    #define       bDINT_CFG24_DIN_FCH_SC_PAT1                  32
    #define   MSK32DINT_CFG24_DIN_FCH_SC_PAT1                     0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG25                                  0x0064

    #define     BA_DINT_CFG25_DIN_FCH_SC_LEN                   0x0064
    #define     B16DINT_CFG25_DIN_FCH_SC_LEN                   0x0064
    #define   LSb32DINT_CFG25_DIN_FCH_SC_LEN                      0
    #define   LSb16DINT_CFG25_DIN_FCH_SC_LEN                      0
    #define       bDINT_CFG25_DIN_FCH_SC_LEN                   8
    #define   MSK32DINT_CFG25_DIN_FCH_SC_LEN                      0x000000FF

    #define     BA_DINT_CFG25_DIN_GFRM_GRD_ENT_TH              0x0065
    #define     B16DINT_CFG25_DIN_GFRM_GRD_ENT_TH              0x0064
    #define   LSb32DINT_CFG25_DIN_GFRM_GRD_ENT_TH                 8
    #define   LSb16DINT_CFG25_DIN_GFRM_GRD_ENT_TH                 8
    #define       bDINT_CFG25_DIN_GFRM_GRD_ENT_TH              8
    #define   MSK32DINT_CFG25_DIN_GFRM_GRD_ENT_TH                 0x0000FF00

    #define     BA_DINT_CFG25_DIN_FRM_FXD_TH                   0x0066
    #define     B16DINT_CFG25_DIN_FRM_FXD_TH                   0x0066
    #define   LSb32DINT_CFG25_DIN_FRM_FXD_TH                      16
    #define   LSb16DINT_CFG25_DIN_FRM_FXD_TH                      0
    #define       bDINT_CFG25_DIN_FRM_FXD_TH                   8
    #define   MSK32DINT_CFG25_DIN_FRM_FXD_TH                      0x00FF0000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG26                                  0x0068

    #define     BA_DINT_CFG26_DIN_FLD_ENT_TH0                  0x0068
    #define     B16DINT_CFG26_DIN_FLD_ENT_TH0                  0x0068
    #define   LSb32DINT_CFG26_DIN_FLD_ENT_TH0                     0
    #define   LSb16DINT_CFG26_DIN_FLD_ENT_TH0                     0
    #define       bDINT_CFG26_DIN_FLD_ENT_TH0                  8
    #define   MSK32DINT_CFG26_DIN_FLD_ENT_TH0                     0x000000FF

    #define     BA_DINT_CFG26_DIN_FLD_ENT_TH1                  0x0069
    #define     B16DINT_CFG26_DIN_FLD_ENT_TH1                  0x0068
    #define   LSb32DINT_CFG26_DIN_FLD_ENT_TH1                     8
    #define   LSb16DINT_CFG26_DIN_FLD_ENT_TH1                     8
    #define       bDINT_CFG26_DIN_FLD_ENT_TH1                  8
    #define   MSK32DINT_CFG26_DIN_FLD_ENT_TH1                     0x0000FF00

    #define     BA_DINT_CFG26_DIN_FLD_EXT1_TH0                 0x006A
    #define     B16DINT_CFG26_DIN_FLD_EXT1_TH0                 0x006A
    #define   LSb32DINT_CFG26_DIN_FLD_EXT1_TH0                    16
    #define   LSb16DINT_CFG26_DIN_FLD_EXT1_TH0                    0
    #define       bDINT_CFG26_DIN_FLD_EXT1_TH0                 8
    #define   MSK32DINT_CFG26_DIN_FLD_EXT1_TH0                    0x00FF0000

    #define     BA_DINT_CFG26_DIN_FLD_EXT1_TH0A                0x006B
    #define     B16DINT_CFG26_DIN_FLD_EXT1_TH0A                0x006A
    #define   LSb32DINT_CFG26_DIN_FLD_EXT1_TH0A                   24
    #define   LSb16DINT_CFG26_DIN_FLD_EXT1_TH0A                   8
    #define       bDINT_CFG26_DIN_FLD_EXT1_TH0A                8
    #define   MSK32DINT_CFG26_DIN_FLD_EXT1_TH0A                   0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG27                                  0x006C

    #define     BA_DINT_CFG27_DIN_FLD_EXT1_TH1                 0x006C
    #define     B16DINT_CFG27_DIN_FLD_EXT1_TH1                 0x006C
    #define   LSb32DINT_CFG27_DIN_FLD_EXT1_TH1                    0
    #define   LSb16DINT_CFG27_DIN_FLD_EXT1_TH1                    0
    #define       bDINT_CFG27_DIN_FLD_EXT1_TH1                 8
    #define   MSK32DINT_CFG27_DIN_FLD_EXT1_TH1                    0x000000FF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG28                                  0x0070

    #define     BA_DINT_CFG28_DIN_FLD_EXT2_TH0                 0x0070
    #define     B16DINT_CFG28_DIN_FLD_EXT2_TH0                 0x0070
    #define   LSb32DINT_CFG28_DIN_FLD_EXT2_TH0                    0
    #define   LSb16DINT_CFG28_DIN_FLD_EXT2_TH0                    0
    #define       bDINT_CFG28_DIN_FLD_EXT2_TH0                 16
    #define   MSK32DINT_CFG28_DIN_FLD_EXT2_TH0                    0x0000FFFF

    #define     BA_DINT_CFG28_DIN_FLD_EXT2_TH1                 0x0072
    #define     B16DINT_CFG28_DIN_FLD_EXT2_TH1                 0x0072
    #define   LSb32DINT_CFG28_DIN_FLD_EXT2_TH1                    16
    #define   LSb16DINT_CFG28_DIN_FLD_EXT2_TH1                    0
    #define       bDINT_CFG28_DIN_FLD_EXT2_TH1                 16
    #define   MSK32DINT_CFG28_DIN_FLD_EXT2_TH1                    0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG29                                  0x0074

    #define     BA_DINT_CFG29_DIN_GLB_MOT                      0x0074
    #define     B16DINT_CFG29_DIN_GLB_MOT                      0x0074
    #define   LSb32DINT_CFG29_DIN_GLB_MOT                         0
    #define   LSb16DINT_CFG29_DIN_GLB_MOT                         0
    #define       bDINT_CFG29_DIN_GLB_MOT                      16
    #define   MSK32DINT_CFG29_DIN_GLB_MOT                         0x0000FFFF

    #define     BA_DINT_CFG29_DIN_FCH_IND                      0x0076
    #define     B16DINT_CFG29_DIN_FCH_IND                      0x0076
    #define   LSb32DINT_CFG29_DIN_FCH_IND                         16
    #define   LSb16DINT_CFG29_DIN_FCH_IND                         0
    #define       bDINT_CFG29_DIN_FCH_IND                      8
    #define   MSK32DINT_CFG29_DIN_FCH_IND                         0x00FF0000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG30                                  0x0078

    #define     BA_DINT_CFG30_DIN_STM_SBF0                     0x0078
    #define     B16DINT_CFG30_DIN_STM_SBF0                     0x0078
    #define   LSb32DINT_CFG30_DIN_STM_SBF0                        0
    #define   LSb16DINT_CFG30_DIN_STM_SBF0                        0
    #define       bDINT_CFG30_DIN_STM_SBF0                     8
    #define   MSK32DINT_CFG30_DIN_STM_SBF0                        0x000000FF

    #define     BA_DINT_CFG30_DIN_STM_SBF1                     0x0079
    #define     B16DINT_CFG30_DIN_STM_SBF1                     0x0078
    #define   LSb32DINT_CFG30_DIN_STM_SBF1                        8
    #define   LSb16DINT_CFG30_DIN_STM_SBF1                        8
    #define       bDINT_CFG30_DIN_STM_SBF1                     8
    #define   MSK32DINT_CFG30_DIN_STM_SBF1                        0x0000FF00

    #define     BA_DINT_CFG30_DIN_STM_SBF2                     0x007A
    #define     B16DINT_CFG30_DIN_STM_SBF2                     0x007A
    #define   LSb32DINT_CFG30_DIN_STM_SBF2                        16
    #define   LSb16DINT_CFG30_DIN_STM_SBF2                        0
    #define       bDINT_CFG30_DIN_STM_SBF2                     8
    #define   MSK32DINT_CFG30_DIN_STM_SBF2                        0x00FF0000

    #define     BA_DINT_CFG30_DIN_STM_SBF3                     0x007B
    #define     B16DINT_CFG30_DIN_STM_SBF3                     0x007A
    #define   LSb32DINT_CFG30_DIN_STM_SBF3                        24
    #define   LSb16DINT_CFG30_DIN_STM_SBF3                        8
    #define       bDINT_CFG30_DIN_STM_SBF3                     8
    #define   MSK32DINT_CFG30_DIN_STM_SBF3                        0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG31                                  0x007C

    #define     BA_DINT_CFG31_DIN_STM_SBF4                     0x007C
    #define     B16DINT_CFG31_DIN_STM_SBF4                     0x007C
    #define   LSb32DINT_CFG31_DIN_STM_SBF4                        0
    #define   LSb16DINT_CFG31_DIN_STM_SBF4                        0
    #define       bDINT_CFG31_DIN_STM_SBF4                     8
    #define   MSK32DINT_CFG31_DIN_STM_SBF4                        0x000000FF

    #define     BA_DINT_CFG31_DIN_STM_SBF5                     0x007D
    #define     B16DINT_CFG31_DIN_STM_SBF5                     0x007C
    #define   LSb32DINT_CFG31_DIN_STM_SBF5                        8
    #define   LSb16DINT_CFG31_DIN_STM_SBF5                        8
    #define       bDINT_CFG31_DIN_STM_SBF5                     8
    #define   MSK32DINT_CFG31_DIN_STM_SBF5                        0x0000FF00

    #define     BA_DINT_CFG31_DIN_STM_SBF6                     0x007E
    #define     B16DINT_CFG31_DIN_STM_SBF6                     0x007E
    #define   LSb32DINT_CFG31_DIN_STM_SBF6                        16
    #define   LSb16DINT_CFG31_DIN_STM_SBF6                        0
    #define       bDINT_CFG31_DIN_STM_SBF6                     8
    #define   MSK32DINT_CFG31_DIN_STM_SBF6                        0x00FF0000

    #define     BA_DINT_CFG31_DIN_STM_SBF7                     0x007F
    #define     B16DINT_CFG31_DIN_STM_SBF7                     0x007E
    #define   LSb32DINT_CFG31_DIN_STM_SBF7                        24
    #define   LSb16DINT_CFG31_DIN_STM_SBF7                        8
    #define       bDINT_CFG31_DIN_STM_SBF7                     8
    #define   MSK32DINT_CFG31_DIN_STM_SBF7                        0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG32                                  0x0080

    #define     BA_DINT_CFG32_DIN_STM_SBF8                     0x0080
    #define     B16DINT_CFG32_DIN_STM_SBF8                     0x0080
    #define   LSb32DINT_CFG32_DIN_STM_SBF8                        0
    #define   LSb16DINT_CFG32_DIN_STM_SBF8                        0
    #define       bDINT_CFG32_DIN_STM_SBF8                     8
    #define   MSK32DINT_CFG32_DIN_STM_SBF8                        0x000000FF

    #define     BA_DINT_CFG32_DIN_STM_SBF9                     0x0081
    #define     B16DINT_CFG32_DIN_STM_SBF9                     0x0080
    #define   LSb32DINT_CFG32_DIN_STM_SBF9                        8
    #define   LSb16DINT_CFG32_DIN_STM_SBF9                        8
    #define       bDINT_CFG32_DIN_STM_SBF9                     8
    #define   MSK32DINT_CFG32_DIN_STM_SBF9                        0x0000FF00

    #define     BA_DINT_CFG32_DIN_STM_SBF10                    0x0082
    #define     B16DINT_CFG32_DIN_STM_SBF10                    0x0082
    #define   LSb32DINT_CFG32_DIN_STM_SBF10                       16
    #define   LSb16DINT_CFG32_DIN_STM_SBF10                       0
    #define       bDINT_CFG32_DIN_STM_SBF10                    8
    #define   MSK32DINT_CFG32_DIN_STM_SBF10                       0x00FF0000

    #define     BA_DINT_CFG32_DIN_STM_SBF11                    0x0083
    #define     B16DINT_CFG32_DIN_STM_SBF11                    0x0082
    #define   LSb32DINT_CFG32_DIN_STM_SBF11                       24
    #define   LSb16DINT_CFG32_DIN_STM_SBF11                       8
    #define       bDINT_CFG32_DIN_STM_SBF11                    8
    #define   MSK32DINT_CFG32_DIN_STM_SBF11                       0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG33                                  0x0084

    #define     BA_DINT_CFG33_DIN_STM_SBF12                    0x0084
    #define     B16DINT_CFG33_DIN_STM_SBF12                    0x0084
    #define   LSb32DINT_CFG33_DIN_STM_SBF12                       0
    #define   LSb16DINT_CFG33_DIN_STM_SBF12                       0
    #define       bDINT_CFG33_DIN_STM_SBF12                    8
    #define   MSK32DINT_CFG33_DIN_STM_SBF12                       0x000000FF

    #define     BA_DINT_CFG33_DIN_STM_SBF13                    0x0085
    #define     B16DINT_CFG33_DIN_STM_SBF13                    0x0084
    #define   LSb32DINT_CFG33_DIN_STM_SBF13                       8
    #define   LSb16DINT_CFG33_DIN_STM_SBF13                       8
    #define       bDINT_CFG33_DIN_STM_SBF13                    8
    #define   MSK32DINT_CFG33_DIN_STM_SBF13                       0x0000FF00

    #define     BA_DINT_CFG33_DIN_STM_SBF14                    0x0086
    #define     B16DINT_CFG33_DIN_STM_SBF14                    0x0086
    #define   LSb32DINT_CFG33_DIN_STM_SBF14                       16
    #define   LSb16DINT_CFG33_DIN_STM_SBF14                       0
    #define       bDINT_CFG33_DIN_STM_SBF14                    8
    #define   MSK32DINT_CFG33_DIN_STM_SBF14                       0x00FF0000

    #define     BA_DINT_CFG33_DIN_STM_SBF15                    0x0087
    #define     B16DINT_CFG33_DIN_STM_SBF15                    0x0086
    #define   LSb32DINT_CFG33_DIN_STM_SBF15                       24
    #define   LSb16DINT_CFG33_DIN_STM_SBF15                       8
    #define       bDINT_CFG33_DIN_STM_SBF15                    8
    #define   MSK32DINT_CFG33_DIN_STM_SBF15                       0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG34                                  0x0088

    #define     BA_DINT_CFG34_DIN_FRC_DROP32                   0x0088
    #define     B16DINT_CFG34_DIN_FRC_DROP32                   0x0088
    #define   LSb32DINT_CFG34_DIN_FRC_DROP32                      0
    #define   LSb16DINT_CFG34_DIN_FRC_DROP32                      0
    #define       bDINT_CFG34_DIN_FRC_DROP32                   8
    #define   MSK32DINT_CFG34_DIN_FRC_DROP32                      0x000000FF

    #define     BA_DINT_CFG34_DIN_FRC_INST32                   0x0089
    #define     B16DINT_CFG34_DIN_FRC_INST32                   0x0088
    #define   LSb32DINT_CFG34_DIN_FRC_INST32                      8
    #define   LSb16DINT_CFG34_DIN_FRC_INST32                      8
    #define       bDINT_CFG34_DIN_FRC_INST32                   8
    #define   MSK32DINT_CFG34_DIN_FRC_INST32                      0x0000FF00

    #define     BA_DINT_CFG34_DIN_RFF_PAT32                    0x008A
    #define     B16DINT_CFG34_DIN_RFF_PAT32                    0x008A
    #define   LSb32DINT_CFG34_DIN_RFF_PAT32                       16
    #define   LSb16DINT_CFG34_DIN_RFF_PAT32                       0
    #define       bDINT_CFG34_DIN_RFF_PAT32                    8
    #define   MSK32DINT_CFG34_DIN_RFF_PAT32                       0x00FF0000

    #define     BA_DINT_CFG34_DIN_RFF_CTRL                     0x008B
    #define     B16DINT_CFG34_DIN_RFF_CTRL                     0x008A
    #define   LSb32DINT_CFG34_DIN_RFF_CTRL                        24
    #define   LSb16DINT_CFG34_DIN_RFF_CTRL                        8
    #define       bDINT_CFG34_DIN_RFF_CTRL                     8
    #define   MSK32DINT_CFG34_DIN_RFF_CTRL                        0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG35                                  0x008C

    #define     BA_DINT_CFG35_DIN_GLB_MENU_L                   0x008C
    #define     B16DINT_CFG35_DIN_GLB_MENU_L                   0x008C
    #define   LSb32DINT_CFG35_DIN_GLB_MENU_L                      0
    #define   LSb16DINT_CFG35_DIN_GLB_MENU_L                      0
    #define       bDINT_CFG35_DIN_GLB_MENU_L                   21
    #define   MSK32DINT_CFG35_DIN_GLB_MENU_L                      0x001FFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG36                                  0x0090

    #define     BA_DINT_CFG36_DIN_GLB_MENU_H                   0x0090
    #define     B16DINT_CFG36_DIN_GLB_MENU_H                   0x0090
    #define   LSb32DINT_CFG36_DIN_GLB_MENU_H                      0
    #define   LSb16DINT_CFG36_DIN_GLB_MENU_H                      0
    #define       bDINT_CFG36_DIN_GLB_MENU_H                   21
    #define   MSK32DINT_CFG36_DIN_GLB_MENU_H                      0x001FFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG37                                  0x0094

    #define     BA_DINT_CFG37_DIN_BLK_MATCH                    0x0094
    #define     B16DINT_CFG37_DIN_BLK_MATCH                    0x0094
    #define   LSb32DINT_CFG37_DIN_BLK_MATCH                       0
    #define   LSb16DINT_CFG37_DIN_BLK_MATCH                       0
    #define       bDINT_CFG37_DIN_BLK_MATCH                    16
    #define   MSK32DINT_CFG37_DIN_BLK_MATCH                       0x0000FFFF

    #define     BA_DINT_CFG37_DIN_BLK_MATCH_X_SIZE             0x0096
    #define     B16DINT_CFG37_DIN_BLK_MATCH_X_SIZE             0x0096
    #define   LSb32DINT_CFG37_DIN_BLK_MATCH_X_SIZE                16
    #define   LSb16DINT_CFG37_DIN_BLK_MATCH_X_SIZE                0
    #define       bDINT_CFG37_DIN_BLK_MATCH_X_SIZE             8
    #define   MSK32DINT_CFG37_DIN_BLK_MATCH_X_SIZE                0x00FF0000

    #define     BA_DINT_CFG37_DIN_BLK_MATCH_Y_SIZE             0x0097
    #define     B16DINT_CFG37_DIN_BLK_MATCH_Y_SIZE             0x0096
    #define   LSb32DINT_CFG37_DIN_BLK_MATCH_Y_SIZE                24
    #define   LSb16DINT_CFG37_DIN_BLK_MATCH_Y_SIZE                8
    #define       bDINT_CFG37_DIN_BLK_MATCH_Y_SIZE             8
    #define   MSK32DINT_CFG37_DIN_BLK_MATCH_Y_SIZE                0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG38                                  0x0098

    #define     BA_DINT_CFG38_DIN_HLD_TH1                      0x0098
    #define     B16DINT_CFG38_DIN_HLD_TH1                      0x0098
    #define   LSb32DINT_CFG38_DIN_HLD_TH1                         0
    #define   LSb16DINT_CFG38_DIN_HLD_TH1                         0
    #define       bDINT_CFG38_DIN_HLD_TH1                      8
    #define   MSK32DINT_CFG38_DIN_HLD_TH1                         0x000000FF

    #define     BA_DINT_CFG38_DIN_HLD_TH2                      0x0099
    #define     B16DINT_CFG38_DIN_HLD_TH2                      0x0098
    #define   LSb32DINT_CFG38_DIN_HLD_TH2                         8
    #define   LSb16DINT_CFG38_DIN_HLD_TH2                         8
    #define       bDINT_CFG38_DIN_HLD_TH2                      8
    #define   MSK32DINT_CFG38_DIN_HLD_TH2                         0x0000FF00

    #define     BA_DINT_CFG38_DIN_HLD_TH3                      0x009A
    #define     B16DINT_CFG38_DIN_HLD_TH3                      0x009A
    #define   LSb32DINT_CFG38_DIN_HLD_TH3                         16
    #define   LSb16DINT_CFG38_DIN_HLD_TH3                         0
    #define       bDINT_CFG38_DIN_HLD_TH3                      8
    #define   MSK32DINT_CFG38_DIN_HLD_TH3                         0x00FF0000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG39                                  0x009C

    #define     BA_DINT_CFG39_DIN_NEW_MODE                     0x009C
    #define     B16DINT_CFG39_DIN_NEW_MODE                     0x009C
    #define   LSb32DINT_CFG39_DIN_NEW_MODE                        0
    #define   LSb16DINT_CFG39_DIN_NEW_MODE                        0
    #define       bDINT_CFG39_DIN_NEW_MODE                     8
    #define   MSK32DINT_CFG39_DIN_NEW_MODE                        0x000000FF

    #define     BA_DINT_CFG39_DIN_MST                          0x009D
    #define     B16DINT_CFG39_DIN_MST                          0x009C
    #define   LSb32DINT_CFG39_DIN_MST                             8
    #define   LSb16DINT_CFG39_DIN_MST                             8
    #define       bDINT_CFG39_DIN_MST                          8
    #define   MSK32DINT_CFG39_DIN_MST                             0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG40                                  0x00A0

    #define     BA_DINT_CFG40_DEINT_MODE                       0x00A0
    #define     B16DINT_CFG40_DEINT_MODE                       0x00A0
    #define   LSb32DINT_CFG40_DEINT_MODE                          0
    #define   LSb16DINT_CFG40_DEINT_MODE                          0
    #define       bDINT_CFG40_DEINT_MODE                       3
    #define   MSK32DINT_CFG40_DEINT_MODE                          0x00000007

    #define     BA_DINT_CFG40_FIELD_POL                        0x00A0
    #define     B16DINT_CFG40_FIELD_POL                        0x00A0
    #define   LSb32DINT_CFG40_FIELD_POL                           3
    #define   LSb16DINT_CFG40_FIELD_POL                           3
    #define       bDINT_CFG40_FIELD_POL                        1
    #define   MSK32DINT_CFG40_FIELD_POL                           0x00000008

    #define     BA_DINT_CFG40_FB_CTRL                          0x00A0
    #define     B16DINT_CFG40_FB_CTRL                          0x00A0
    #define   LSb32DINT_CFG40_FB_CTRL                             4
    #define   LSb16DINT_CFG40_FB_CTRL                             4
    #define       bDINT_CFG40_FB_CTRL                          7
    #define   MSK32DINT_CFG40_FB_CTRL                             0x000007F0

    #define     BA_DINT_CFG40_TEST_CTRL                        0x00A1
    #define     B16DINT_CFG40_TEST_CTRL                        0x00A0
    #define   LSb32DINT_CFG40_TEST_CTRL                           11
    #define   LSb16DINT_CFG40_TEST_CTRL                           11
    #define       bDINT_CFG40_TEST_CTRL                        4
    #define   MSK32DINT_CFG40_TEST_CTRL                           0x00007800
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG41                                  0x00A4

    #define     BA_DINT_CFG41_TEST_HT                          0x00A4
    #define     B16DINT_CFG41_TEST_HT                          0x00A4
    #define   LSb32DINT_CFG41_TEST_HT                             0
    #define   LSb16DINT_CFG41_TEST_HT                             0
    #define       bDINT_CFG41_TEST_HT                          12
    #define   MSK32DINT_CFG41_TEST_HT                             0x00000FFF

    #define     BA_DINT_CFG41_TEST_VT                          0x00A5
    #define     B16DINT_CFG41_TEST_VT                          0x00A4
    #define   LSb32DINT_CFG41_TEST_VT                             12
    #define   LSb16DINT_CFG41_TEST_VT                             12
    #define       bDINT_CFG41_TEST_VT                          12
    #define   MSK32DINT_CFG41_TEST_VT                             0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG42                                  0x00A8

    #define     BA_DINT_CFG42_TEST_HA                          0x00A8
    #define     B16DINT_CFG42_TEST_HA                          0x00A8
    #define   LSb32DINT_CFG42_TEST_HA                             0
    #define   LSb16DINT_CFG42_TEST_HA                             0
    #define       bDINT_CFG42_TEST_HA                          12
    #define   MSK32DINT_CFG42_TEST_HA                             0x00000FFF

    #define     BA_DINT_CFG42_TEST_VA                          0x00A9
    #define     B16DINT_CFG42_TEST_VA                          0x00A8
    #define   LSb32DINT_CFG42_TEST_VA                             12
    #define   LSb16DINT_CFG42_TEST_VA                             12
    #define       bDINT_CFG42_TEST_VA                          12
    #define   MSK32DINT_CFG42_TEST_VA                             0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_CFG43                                  0x00AC

    #define     BA_DINT_CFG43_PDWN                             0x00AC
    #define     B16DINT_CFG43_PDWN                             0x00AC
    #define   LSb32DINT_CFG43_PDWN                                0
    #define   LSb16DINT_CFG43_PDWN                                0
    #define       bDINT_CFG43_PDWN                             1
    #define   MSK32DINT_CFG43_PDWN                                0x00000001

    #define     BA_DINT_CFG43_PDLVMC                           0x00AC
    #define     B16DINT_CFG43_PDLVMC                           0x00AC
    #define   LSb32DINT_CFG43_PDLVMC                              1
    #define   LSb16DINT_CFG43_PDLVMC                              1
    #define       bDINT_CFG43_PDLVMC                           1
    #define   MSK32DINT_CFG43_PDLVMC                              0x00000002

    #define     BA_DINT_CFG43_PDFVSSM                          0x00AC
    #define     B16DINT_CFG43_PDFVSSM                          0x00AC
    #define   LSb32DINT_CFG43_PDFVSSM                             2
    #define   LSb16DINT_CFG43_PDFVSSM                             2
    #define       bDINT_CFG43_PDFVSSM                          1
    #define   MSK32DINT_CFG43_PDFVSSM                             0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS0                                   0x00B0

    #define     BA_DINT_STS0_DIN_FCH_STATUS                    0x00B0
    #define     B16DINT_STS0_DIN_FCH_STATUS                    0x00B0
    #define   LSb32DINT_STS0_DIN_FCH_STATUS                       0
    #define   LSb16DINT_STS0_DIN_FCH_STATUS                       0
    #define       bDINT_STS0_DIN_FCH_STATUS                    12
    #define   MSK32DINT_STS0_DIN_FCH_STATUS                       0x00000FFF

    #define     BA_DINT_STS0_DIN_TEST_STATUS                   0x00B1
    #define     B16DINT_STS0_DIN_TEST_STATUS                   0x00B0
    #define   LSb32DINT_STS0_DIN_TEST_STATUS                      12
    #define   LSb16DINT_STS0_DIN_TEST_STATUS                      12
    #define       bDINT_STS0_DIN_TEST_STATUS                   1
    #define   MSK32DINT_STS0_DIN_TEST_STATUS                      0x00001000
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS1                                   0x00B4

    #define     BA_DINT_STS1_DIN_OST1                          0x00B4
    #define     B16DINT_STS1_DIN_OST1                          0x00B4
    #define   LSb32DINT_STS1_DIN_OST1                             0
    #define   LSb16DINT_STS1_DIN_OST1                             0
    #define       bDINT_STS1_DIN_OST1                          24
    #define   MSK32DINT_STS1_DIN_OST1                             0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS2                                   0x00B8

    #define     BA_DINT_STS2_DIN_OST2                          0x00B8
    #define     B16DINT_STS2_DIN_OST2                          0x00B8
    #define   LSb32DINT_STS2_DIN_OST2                             0
    #define   LSb16DINT_STS2_DIN_OST2                             0
    #define       bDINT_STS2_DIN_OST2                          24
    #define   MSK32DINT_STS2_DIN_OST2                             0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS3                                   0x00BC

    #define     BA_DINT_STS3_DIN_ACC_GLB_MOT_OUT               0x00BC
    #define     B16DINT_STS3_DIN_ACC_GLB_MOT_OUT               0x00BC
    #define   LSb32DINT_STS3_DIN_ACC_GLB_MOT_OUT                  0
    #define   LSb16DINT_STS3_DIN_ACC_GLB_MOT_OUT                  0
    #define       bDINT_STS3_DIN_ACC_GLB_MOT_OUT               24
    #define   MSK32DINT_STS3_DIN_ACC_GLB_MOT_OUT                  0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS4                                   0x00C0

    #define     BA_DINT_STS4_DIN_ACC_GFRM_FXD_OUT              0x00C0
    #define     B16DINT_STS4_DIN_ACC_GFRM_FXD_OUT              0x00C0
    #define   LSb32DINT_STS4_DIN_ACC_GFRM_FXD_OUT                 0
    #define   LSb16DINT_STS4_DIN_ACC_GFRM_FXD_OUT                 0
    #define       bDINT_STS4_DIN_ACC_GFRM_FXD_OUT              16
    #define   MSK32DINT_STS4_DIN_ACC_GFRM_FXD_OUT                 0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS5                                   0x00C4

    #define     BA_DINT_STS5_DIN_ACC_GFRM_GRD_OUT              0x00C4
    #define     B16DINT_STS5_DIN_ACC_GFRM_GRD_OUT              0x00C4
    #define   LSb32DINT_STS5_DIN_ACC_GFRM_GRD_OUT                 0
    #define   LSb16DINT_STS5_DIN_ACC_GFRM_GRD_OUT                 0
    #define       bDINT_STS5_DIN_ACC_GFRM_GRD_OUT              16
    #define   MSK32DINT_STS5_DIN_ACC_GFRM_GRD_OUT                 0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS6                                   0x00C8

    #define     BA_DINT_STS6_DIN_ACC_GFRM_GRD_ENT_OUT          0x00C8
    #define     B16DINT_STS6_DIN_ACC_GFRM_GRD_ENT_OUT          0x00C8
    #define   LSb32DINT_STS6_DIN_ACC_GFRM_GRD_ENT_OUT             0
    #define   LSb16DINT_STS6_DIN_ACC_GFRM_GRD_ENT_OUT             0
    #define       bDINT_STS6_DIN_ACC_GFRM_GRD_ENT_OUT          16
    #define   MSK32DINT_STS6_DIN_ACC_GFRM_GRD_ENT_OUT             0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS7                                   0x00CC

    #define     BA_DINT_STS7_DIN_ACC_GFLDN_ENT_OUT             0x00CC
    #define     B16DINT_STS7_DIN_ACC_GFLDN_ENT_OUT             0x00CC
    #define   LSb32DINT_STS7_DIN_ACC_GFLDN_ENT_OUT                0
    #define   LSb16DINT_STS7_DIN_ACC_GFLDN_ENT_OUT                0
    #define       bDINT_STS7_DIN_ACC_GFLDN_ENT_OUT             16
    #define   MSK32DINT_STS7_DIN_ACC_GFLDN_ENT_OUT                0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS8                                   0x00D0

    #define     BA_DINT_STS8_DIN_ACC_GFLDP_ENT_OUT             0x00D0
    #define     B16DINT_STS8_DIN_ACC_GFLDP_ENT_OUT             0x00D0
    #define   LSb32DINT_STS8_DIN_ACC_GFLDP_ENT_OUT                0
    #define   LSb16DINT_STS8_DIN_ACC_GFLDP_ENT_OUT                0
    #define       bDINT_STS8_DIN_ACC_GFLDP_ENT_OUT             16
    #define   MSK32DINT_STS8_DIN_ACC_GFLDP_ENT_OUT                0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS9                                   0x00D4

    #define     BA_DINT_STS9_DIN_ACC_GFLDN_EXT1_OUT            0x00D4
    #define     B16DINT_STS9_DIN_ACC_GFLDN_EXT1_OUT            0x00D4
    #define   LSb32DINT_STS9_DIN_ACC_GFLDN_EXT1_OUT               0
    #define   LSb16DINT_STS9_DIN_ACC_GFLDN_EXT1_OUT               0
    #define       bDINT_STS9_DIN_ACC_GFLDN_EXT1_OUT            16
    #define   MSK32DINT_STS9_DIN_ACC_GFLDN_EXT1_OUT               0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS10                                  0x00D8

    #define     BA_DINT_STS10_DIN_ACC_GFLDP_EXT1_OUT           0x00D8
    #define     B16DINT_STS10_DIN_ACC_GFLDP_EXT1_OUT           0x00D8
    #define   LSb32DINT_STS10_DIN_ACC_GFLDP_EXT1_OUT              0
    #define   LSb16DINT_STS10_DIN_ACC_GFLDP_EXT1_OUT              0
    #define       bDINT_STS10_DIN_ACC_GFLDP_EXT1_OUT           16
    #define   MSK32DINT_STS10_DIN_ACC_GFLDP_EXT1_OUT              0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS11                                  0x00DC

    #define     BA_DINT_STS11_DIN_ACC_GFLDN_EXT2_OUT           0x00DC
    #define     B16DINT_STS11_DIN_ACC_GFLDN_EXT2_OUT           0x00DC
    #define   LSb32DINT_STS11_DIN_ACC_GFLDN_EXT2_OUT              0
    #define   LSb16DINT_STS11_DIN_ACC_GFLDN_EXT2_OUT              0
    #define       bDINT_STS11_DIN_ACC_GFLDN_EXT2_OUT           16
    #define   MSK32DINT_STS11_DIN_ACC_GFLDN_EXT2_OUT              0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINT_STS12                                  0x00E0

    #define     BA_DINT_STS12_DIN_ACC_GFLDP_EXT2_OUT           0x00E0
    #define     B16DINT_STS12_DIN_ACC_GFLDP_EXT2_OUT           0x00E0
    #define   LSb32DINT_STS12_DIN_ACC_GFLDP_EXT2_OUT              0
    #define   LSb16DINT_STS12_DIN_ACC_GFLDP_EXT2_OUT              0
    #define       bDINT_STS12_DIN_ACC_GFLDP_EXT2_OUT           16
    #define   MSK32DINT_STS12_DIN_ACC_GFLDP_EXT2_OUT              0x0000FFFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DINT {
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG0_DIN_STM_CTRL1(r32)                _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG0_DIN_STM_CTRL1(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG0_DIN_STM_CTRL1(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG0_DIN_STM_CTRL1(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG0_DIN_STM_CTRL2(r32)                _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG0_DIN_STM_CTRL2(r32,v)              _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG0_DIN_STM_CTRL2(r16)                _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG0_DIN_STM_CTRL2(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG0                                   {\
            UNSG32 uCFG0_DIN_STM_CTRL1                         :  8;\
            UNSG32 uCFG0_DIN_STM_CTRL2                         :  8;\
            UNSG32 RSVDx0_b16                                  : 16;\
          }
    union { UNSG32 u32DINT_CFG0;
            struct w32DINT_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG1_DIN_VI_CTRL(r32)                  _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG1_DIN_VI_CTRL(r32,v)                _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG1_DIN_VI_CTRL(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG1_DIN_VI_CTRL(r16,v)                _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG1_DIN_VI_HPF_UTH(r32)               _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG1_DIN_VI_HPF_UTH(r32,v)             _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG1_DIN_VI_HPF_UTH(r16)               _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG1_DIN_VI_HPF_UTH(r16,v)             _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG1_DIN_VI_HPF_LTH(r32)               _BFGET_(r32,23,16)
    #define   SET32DINT_CFG1_DIN_VI_HPF_LTH(r32,v)             _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG1_DIN_VI_HPF_LTH(r16)               _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG1_DIN_VI_HPF_LTH(r16,v)             _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG1_DIN_VI_CUED_TH(r32)               _BFGET_(r32,31,24)
    #define   SET32DINT_CFG1_DIN_VI_CUED_TH(r32,v)             _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG1_DIN_VI_CUED_TH(r16)               _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG1_DIN_VI_CUED_TH(r16,v)             _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG1                                   {\
            UNSG32 uCFG1_DIN_VI_CTRL                           :  8;\
            UNSG32 uCFG1_DIN_VI_HPF_UTH                        :  8;\
            UNSG32 uCFG1_DIN_VI_HPF_LTH                        :  8;\
            UNSG32 uCFG1_DIN_VI_CUED_TH                        :  8;\
          }
    union { UNSG32 u32DINT_CFG1;
            struct w32DINT_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG2_DIN_EXC_B(r32)                    _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG2_DIN_EXC_B(r32,v)                  _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG2_DIN_EXC_B(r16)                    _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG2_DIN_EXC_B(r16,v)                  _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG2_DIN_EXC_T(r32)                    _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG2_DIN_EXC_T(r32,v)                  _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG2_DIN_EXC_T(r16)                    _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG2_DIN_EXC_T(r16,v)                  _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG2_DIN_EXC_R(r32)                    _BFGET_(r32,23,16)
    #define   SET32DINT_CFG2_DIN_EXC_R(r32,v)                  _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG2_DIN_EXC_R(r16)                    _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG2_DIN_EXC_R(r16,v)                  _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG2_DIN_EXC_L(r32)                    _BFGET_(r32,31,24)
    #define   SET32DINT_CFG2_DIN_EXC_L(r32,v)                  _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG2_DIN_EXC_L(r16)                    _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG2_DIN_EXC_L(r16,v)                  _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG2                                   {\
            UNSG32 uCFG2_DIN_EXC_B                             :  8;\
            UNSG32 uCFG2_DIN_EXC_T                             :  8;\
            UNSG32 uCFG2_DIN_EXC_R                             :  8;\
            UNSG32 uCFG2_DIN_EXC_L                             :  8;\
          }
    union { UNSG32 u32DINT_CFG2;
            struct w32DINT_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG3_DIN_MCB_CTRL1(r32)                _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG3_DIN_MCB_CTRL1(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG3_DIN_MCB_CTRL1(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG3_DIN_MCB_CTRL1(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG3_DIN_MCB_CTRL2(r32)                _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG3_DIN_MCB_CTRL2(r32,v)              _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG3_DIN_MCB_CTRL2(r16)                _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG3_DIN_MCB_CTRL2(r16,v)              _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG3_DIN_MCB_CTRL3(r32)                _BFGET_(r32,23,16)
    #define   SET32DINT_CFG3_DIN_MCB_CTRL3(r32,v)              _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG3_DIN_MCB_CTRL3(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG3_DIN_MCB_CTRL3(r16,v)              _BFSET_(r16, 7, 0,v)

    #define     w32DINT_CFG3                                   {\
            UNSG32 uCFG3_DIN_MCB_CTRL1                         :  8;\
            UNSG32 uCFG3_DIN_MCB_CTRL2                         :  8;\
            UNSG32 uCFG3_DIN_MCB_CTRL3                         :  8;\
            UNSG32 RSVDxC_b24                                  :  8;\
          }
    union { UNSG32 u32DINT_CFG3;
            struct w32DINT_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG4_DIN_ME_CTRL1(r32)                 _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG4_DIN_ME_CTRL1(r32,v)               _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG4_DIN_ME_CTRL1(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG4_DIN_ME_CTRL1(r16,v)               _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG4_DIN_ME_CTRL2(r32)                 _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG4_DIN_ME_CTRL2(r32,v)               _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG4_DIN_ME_CTRL2(r16)                 _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG4_DIN_ME_CTRL2(r16,v)               _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG4                                   {\
            UNSG32 uCFG4_DIN_ME_CTRL1                          :  8;\
            UNSG32 uCFG4_DIN_ME_CTRL2                          :  8;\
            UNSG32 RSVDx10_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_CFG4;
            struct w32DINT_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG5_DIN_MAD_VID_THL(r32)              _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG5_DIN_MAD_VID_THL(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG5_DIN_MAD_VID_THL(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG5_DIN_MAD_VID_THL(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG5_DIN_MAD_VID_THH(r32)              _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG5_DIN_MAD_VID_THH(r32,v)            _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG5_DIN_MAD_VID_THH(r16)              _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG5_DIN_MAD_VID_THH(r16,v)            _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG5_DIN_MAD_FLM_TH(r32)               _BFGET_(r32,23,16)
    #define   SET32DINT_CFG5_DIN_MAD_FLM_TH(r32,v)             _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG5_DIN_MAD_FLM_TH(r16)               _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG5_DIN_MAD_FLM_TH(r16,v)             _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG5_DIN_MAD2_VID_THL(r32)             _BFGET_(r32,31,24)
    #define   SET32DINT_CFG5_DIN_MAD2_VID_THL(r32,v)           _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG5_DIN_MAD2_VID_THL(r16)             _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG5_DIN_MAD2_VID_THL(r16,v)           _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG5                                   {\
            UNSG32 uCFG5_DIN_MAD_VID_THL                       :  8;\
            UNSG32 uCFG5_DIN_MAD_VID_THH                       :  8;\
            UNSG32 uCFG5_DIN_MAD_FLM_TH                        :  8;\
            UNSG32 uCFG5_DIN_MAD2_VID_THL                      :  8;\
          }
    union { UNSG32 u32DINT_CFG5;
            struct w32DINT_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG6_DIN_MAD2_VID_THH(r32)             _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG6_DIN_MAD2_VID_THH(r32,v)           _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG6_DIN_MAD2_VID_THH(r16)             _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG6_DIN_MAD2_VID_THH(r16,v)           _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG6_DIN_MAD2_FLM_TH(r32)              _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG6_DIN_MAD2_FLM_TH(r32,v)            _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG6_DIN_MAD2_FLM_TH(r16)              _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG6_DIN_MAD2_FLM_TH(r16,v)            _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG6_DIN_MAX_VID_THL(r32)              _BFGET_(r32,23,16)
    #define   SET32DINT_CFG6_DIN_MAX_VID_THL(r32,v)            _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG6_DIN_MAX_VID_THL(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG6_DIN_MAX_VID_THL(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG6_DIN_MAX_VID_THH(r32)              _BFGET_(r32,31,24)
    #define   SET32DINT_CFG6_DIN_MAX_VID_THH(r32,v)            _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG6_DIN_MAX_VID_THH(r16)              _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG6_DIN_MAX_VID_THH(r16,v)            _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG6                                   {\
            UNSG32 uCFG6_DIN_MAD2_VID_THH                      :  8;\
            UNSG32 uCFG6_DIN_MAD2_FLM_TH                       :  8;\
            UNSG32 uCFG6_DIN_MAX_VID_THL                       :  8;\
            UNSG32 uCFG6_DIN_MAX_VID_THH                       :  8;\
          }
    union { UNSG32 u32DINT_CFG6;
            struct w32DINT_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG7_DIN_MAX_STH1(r32)                 _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG7_DIN_MAX_STH1(r32,v)               _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG7_DIN_MAX_STH1(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG7_DIN_MAX_STH1(r16,v)               _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG7_DIN_MAX_STH2(r32)                 _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG7_DIN_MAX_STH2(r32,v)               _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG7_DIN_MAX_STH2(r16)                 _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG7_DIN_MAX_STH2(r16,v)               _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG7_DIN_FLD_THL(r32)                  _BFGET_(r32,23,16)
    #define   SET32DINT_CFG7_DIN_FLD_THL(r32,v)                _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG7_DIN_FLD_THL(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG7_DIN_FLD_THL(r16,v)                _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG7_DIN_FLD_THH(r32)                  _BFGET_(r32,31,24)
    #define   SET32DINT_CFG7_DIN_FLD_THH(r32,v)                _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG7_DIN_FLD_THH(r16)                  _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG7_DIN_FLD_THH(r16,v)                _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG7                                   {\
            UNSG32 uCFG7_DIN_MAX_STH1                          :  8;\
            UNSG32 uCFG7_DIN_MAX_STH2                          :  8;\
            UNSG32 uCFG7_DIN_FLD_THL                           :  8;\
            UNSG32 uCFG7_DIN_FLD_THH                           :  8;\
          }
    union { UNSG32 u32DINT_CFG7;
            struct w32DINT_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG8_DIN_ASD_VID_THL(r32)              _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG8_DIN_ASD_VID_THL(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG8_DIN_ASD_VID_THL(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG8_DIN_ASD_VID_THL(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG8_DIN_ASD_VID_THH(r32)              _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG8_DIN_ASD_VID_THH(r32,v)            _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG8_DIN_ASD_VID_THH(r16)              _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG8_DIN_ASD_VID_THH(r16,v)            _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG8                                   {\
            UNSG32 uCFG8_DIN_ASD_VID_THL                       :  8;\
            UNSG32 uCFG8_DIN_ASD_VID_THH                       :  8;\
            UNSG32 RSVDx20_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_CFG8;
            struct w32DINT_CFG8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG9_DIN_WVE_TH(r32)                   _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG9_DIN_WVE_TH(r32,v)                 _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG9_DIN_WVE_TH(r16)                   _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG9_DIN_WVE_TH(r16,v)                 _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG9_DIN_WVE1_GAIN(r32)                _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG9_DIN_WVE1_GAIN(r32,v)              _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG9_DIN_WVE1_GAIN(r16)                _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG9_DIN_WVE1_GAIN(r16,v)              _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG9_DIN_WVE2_GAIN(r32)                _BFGET_(r32,23,16)
    #define   SET32DINT_CFG9_DIN_WVE2_GAIN(r32,v)              _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG9_DIN_WVE2_GAIN(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG9_DIN_WVE2_GAIN(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG9_DIN_WVE3_TH1(r32)                 _BFGET_(r32,31,24)
    #define   SET32DINT_CFG9_DIN_WVE3_TH1(r32,v)               _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG9_DIN_WVE3_TH1(r16)                 _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG9_DIN_WVE3_TH1(r16,v)               _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG9                                   {\
            UNSG32 uCFG9_DIN_WVE_TH                            :  8;\
            UNSG32 uCFG9_DIN_WVE1_GAIN                         :  8;\
            UNSG32 uCFG9_DIN_WVE2_GAIN                         :  8;\
            UNSG32 uCFG9_DIN_WVE3_TH1                          :  8;\
          }
    union { UNSG32 u32DINT_CFG9;
            struct w32DINT_CFG9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG10_DIN_WVE3_TH2(r32)                _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG10_DIN_WVE3_TH2(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG10_DIN_WVE3_TH2(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG10_DIN_WVE3_TH2(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG10_DIN_WVE3_GAIN(r32)               _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG10_DIN_WVE3_GAIN(r32,v)             _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG10_DIN_WVE3_GAIN(r16)               _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG10_DIN_WVE3_GAIN(r16,v)             _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG10_DIN_CH_TH(r32)                   _BFGET_(r32,23,16)
    #define   SET32DINT_CFG10_DIN_CH_TH(r32,v)                 _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG10_DIN_CH_TH(r16)                   _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG10_DIN_CH_TH(r16,v)                 _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG10_DIN_CH_WVE(r32)                  _BFGET_(r32,31,24)
    #define   SET32DINT_CFG10_DIN_CH_WVE(r32,v)                _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG10_DIN_CH_WVE(r16)                  _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG10_DIN_CH_WVE(r16,v)                _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG10                                  {\
            UNSG32 uCFG10_DIN_WVE3_TH2                         :  8;\
            UNSG32 uCFG10_DIN_WVE3_GAIN                        :  8;\
            UNSG32 uCFG10_DIN_CH_TH                            :  8;\
            UNSG32 uCFG10_DIN_CH_WVE                           :  8;\
          }
    union { UNSG32 u32DINT_CFG10;
            struct w32DINT_CFG10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG11_DIN_WVE_PE_TH1(r32)              _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG11_DIN_WVE_PE_TH1(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG11_DIN_WVE_PE_TH1(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG11_DIN_WVE_PE_TH1(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG11_DIN_WVE_PE_TH2(r32)              _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG11_DIN_WVE_PE_TH2(r32,v)            _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG11_DIN_WVE_PE_TH2(r16)              _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG11_DIN_WVE_PE_TH2(r16,v)            _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG11_DIN_WVE_VID_TH(r32)              _BFGET_(r32,23,16)
    #define   SET32DINT_CFG11_DIN_WVE_VID_TH(r32,v)            _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG11_DIN_WVE_VID_TH(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG11_DIN_WVE_VID_TH(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG11_DIN_WVE_VID_GAIN(r32)            _BFGET_(r32,31,24)
    #define   SET32DINT_CFG11_DIN_WVE_VID_GAIN(r32,v)          _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG11_DIN_WVE_VID_GAIN(r16)            _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG11_DIN_WVE_VID_GAIN(r16,v)          _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG11                                  {\
            UNSG32 uCFG11_DIN_WVE_PE_TH1                       :  8;\
            UNSG32 uCFG11_DIN_WVE_PE_TH2                       :  8;\
            UNSG32 uCFG11_DIN_WVE_VID_TH                       :  8;\
            UNSG32 uCFG11_DIN_WVE_VID_GAIN                     :  8;\
          }
    union { UNSG32 u32DINT_CFG11;
            struct w32DINT_CFG11;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG12_DIN_PE_MASK(r32)                 _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG12_DIN_PE_MASK(r32,v)               _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG12_DIN_PE_MASK(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG12_DIN_PE_MASK(r16,v)               _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG12_DIN_CHR_THL(r32)                 _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG12_DIN_CHR_THL(r32,v)               _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG12_DIN_CHR_THL(r16)                 _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG12_DIN_CHR_THL(r16,v)               _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG12_DIN_CHR_THH(r32)                 _BFGET_(r32,23,16)
    #define   SET32DINT_CFG12_DIN_CHR_THH(r32,v)               _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG12_DIN_CHR_THH(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG12_DIN_CHR_THH(r16,v)               _BFSET_(r16, 7, 0,v)

    #define     w32DINT_CFG12                                  {\
            UNSG32 uCFG12_DIN_PE_MASK                          :  8;\
            UNSG32 uCFG12_DIN_CHR_THL                          :  8;\
            UNSG32 uCFG12_DIN_CHR_THH                          :  8;\
            UNSG32 RSVDx30_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_CFG12;
            struct w32DINT_CFG12;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG13_DIN_NC_REG0_THRESH(r32)          _BFGET_(r32,23, 0)
    #define   SET32DINT_CFG13_DIN_NC_REG0_THRESH(r32,v)        _BFSET_(r32,23, 0,v)

    #define     w32DINT_CFG13                                  {\
            UNSG32 uCFG13_DIN_NC_REG0_THRESH                   : 24;\
            UNSG32 RSVDx34_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_CFG13;
            struct w32DINT_CFG13;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG14_DIN_NC_REG1_THRESH(r32)          _BFGET_(r32,23, 0)
    #define   SET32DINT_CFG14_DIN_NC_REG1_THRESH(r32,v)        _BFSET_(r32,23, 0,v)

    #define     w32DINT_CFG14                                  {\
            UNSG32 uCFG14_DIN_NC_REG1_THRESH                   : 24;\
            UNSG32 RSVDx38_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_CFG14;
            struct w32DINT_CFG14;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG15_DIN_NC_REG2_THRESH(r32)          _BFGET_(r32,23, 0)
    #define   SET32DINT_CFG15_DIN_NC_REG2_THRESH(r32,v)        _BFSET_(r32,23, 0,v)

    #define     w32DINT_CFG15                                  {\
            UNSG32 uCFG15_DIN_NC_REG2_THRESH                   : 24;\
            UNSG32 RSVDx3C_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_CFG15;
            struct w32DINT_CFG15;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG16_DIN_NC_PIX_MAD_TH0(r32)          _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG16_DIN_NC_PIX_MAD_TH0(r32,v)        _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG16_DIN_NC_PIX_MAD_TH0(r16)          _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG16_DIN_NC_PIX_MAD_TH0(r16,v)        _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG16_DIN_NC_PIX_MAD_TH1(r32)          _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG16_DIN_NC_PIX_MAD_TH1(r32,v)        _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG16_DIN_NC_PIX_MAD_TH1(r16)          _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG16_DIN_NC_PIX_MAD_TH1(r16,v)        _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG16_DIN_NC_PIX_MAD_TH2(r32)          _BFGET_(r32,23,16)
    #define   SET32DINT_CFG16_DIN_NC_PIX_MAD_TH2(r32,v)        _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG16_DIN_NC_PIX_MAD_TH2(r16)          _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG16_DIN_NC_PIX_MAD_TH2(r16,v)        _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG16_DIN_NC_PIX_MAD_TH3(r32)          _BFGET_(r32,31,24)
    #define   SET32DINT_CFG16_DIN_NC_PIX_MAD_TH3(r32,v)        _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG16_DIN_NC_PIX_MAD_TH3(r16)          _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG16_DIN_NC_PIX_MAD_TH3(r16,v)        _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG16                                  {\
            UNSG32 uCFG16_DIN_NC_PIX_MAD_TH0                   :  8;\
            UNSG32 uCFG16_DIN_NC_PIX_MAD_TH1                   :  8;\
            UNSG32 uCFG16_DIN_NC_PIX_MAD_TH2                   :  8;\
            UNSG32 uCFG16_DIN_NC_PIX_MAD_TH3                   :  8;\
          }
    union { UNSG32 u32DINT_CFG16;
            struct w32DINT_CFG16;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG17_DIN_NC_GLB_MAD_TH0(r32)          _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG17_DIN_NC_GLB_MAD_TH0(r32,v)        _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG17_DIN_NC_GLB_MAD_TH0(r16)          _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG17_DIN_NC_GLB_MAD_TH0(r16,v)        _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG17_DIN_NC_GLB_MAD_TH1(r32)          _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG17_DIN_NC_GLB_MAD_TH1(r32,v)        _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG17_DIN_NC_GLB_MAD_TH1(r16)          _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG17_DIN_NC_GLB_MAD_TH1(r16,v)        _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG17_DIN_NC_GLB_MAD_TH2(r32)          _BFGET_(r32,23,16)
    #define   SET32DINT_CFG17_DIN_NC_GLB_MAD_TH2(r32,v)        _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG17_DIN_NC_GLB_MAD_TH2(r16)          _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG17_DIN_NC_GLB_MAD_TH2(r16,v)        _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG17_DIN_NC_GLB_MAD_TH3(r32)          _BFGET_(r32,31,24)
    #define   SET32DINT_CFG17_DIN_NC_GLB_MAD_TH3(r32,v)        _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG17_DIN_NC_GLB_MAD_TH3(r16)          _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG17_DIN_NC_GLB_MAD_TH3(r16,v)        _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG17                                  {\
            UNSG32 uCFG17_DIN_NC_GLB_MAD_TH0                   :  8;\
            UNSG32 uCFG17_DIN_NC_GLB_MAD_TH1                   :  8;\
            UNSG32 uCFG17_DIN_NC_GLB_MAD_TH2                   :  8;\
            UNSG32 uCFG17_DIN_NC_GLB_MAD_TH3                   :  8;\
          }
    union { UNSG32 u32DINT_CFG17;
            struct w32DINT_CFG17;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG18_DIN_PF_MADTH(r32)                _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG18_DIN_PF_MADTH(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG18_DIN_PF_MADTH(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG18_DIN_PF_MADTH(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG18_DIN_PEXIT_TH(r32)                _BFGET_(r32,31, 8)
    #define   SET32DINT_CFG18_DIN_PEXIT_TH(r32,v)              _BFSET_(r32,31, 8,v)

    #define     w32DINT_CFG18                                  {\
            UNSG32 uCFG18_DIN_PF_MADTH                         :  8;\
            UNSG32 uCFG18_DIN_PEXIT_TH                         : 24;\
          }
    union { UNSG32 u32DINT_CFG18;
            struct w32DINT_CFG18;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG19_DIN_FCH_CTRL(r32)                _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG19_DIN_FCH_CTRL(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG19_DIN_FCH_CTRL(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG19_DIN_FCH_CTRL(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG19_DIN_FCH_EN(r32)                  _BFGET_(r32,17, 8)
    #define   SET32DINT_CFG19_DIN_FCH_EN(r32,v)                _BFSET_(r32,17, 8,v)

    #define   GET32DINT_CFG19_DIN_FCH_PFMODE(r32)              _BFGET_(r32,25,18)
    #define   SET32DINT_CFG19_DIN_FCH_PFMODE(r32,v)            _BFSET_(r32,25,18,v)
    #define   GET16DINT_CFG19_DIN_FCH_PFMODE(r16)              _BFGET_(r16, 9, 2)
    #define   SET16DINT_CFG19_DIN_FCH_PFMODE(r16,v)            _BFSET_(r16, 9, 2,v)

    #define     w32DINT_CFG19                                  {\
            UNSG32 uCFG19_DIN_FCH_CTRL                         :  8;\
            UNSG32 uCFG19_DIN_FCH_EN                           : 10;\
            UNSG32 uCFG19_DIN_FCH_PFMODE                       :  8;\
            UNSG32 RSVDx4C_b26                                 :  6;\
          }
    union { UNSG32 u32DINT_CFG19;
            struct w32DINT_CFG19;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG20_DIN_FCH_32CTRL0(r32)             _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG20_DIN_FCH_32CTRL0(r32,v)           _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG20_DIN_FCH_32CTRL0(r16)             _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG20_DIN_FCH_32CTRL0(r16,v)           _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG20_DIN_FCH_32CTRL1(r32)             _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG20_DIN_FCH_32CTRL1(r32,v)           _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG20_DIN_FCH_32CTRL1(r16)             _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG20_DIN_FCH_32CTRL1(r16,v)           _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG20_DIN_FCH_32NOF0(r32)              _BFGET_(r32,23,16)
    #define   SET32DINT_CFG20_DIN_FCH_32NOF0(r32,v)            _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG20_DIN_FCH_32NOF0(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG20_DIN_FCH_32NOF0(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG20_DIN_FCH_32NOF1(r32)              _BFGET_(r32,31,24)
    #define   SET32DINT_CFG20_DIN_FCH_32NOF1(r32,v)            _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG20_DIN_FCH_32NOF1(r16)              _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG20_DIN_FCH_32NOF1(r16,v)            _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG20                                  {\
            UNSG32 uCFG20_DIN_FCH_32CTRL0                      :  8;\
            UNSG32 uCFG20_DIN_FCH_32CTRL1                      :  8;\
            UNSG32 uCFG20_DIN_FCH_32NOF0                       :  8;\
            UNSG32 uCFG20_DIN_FCH_32NOF1                       :  8;\
          }
    union { UNSG32 u32DINT_CFG20;
            struct w32DINT_CFG20;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG21_DIN_FCH_22CTRL(r32)              _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG21_DIN_FCH_22CTRL(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG21_DIN_FCH_22CTRL(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG21_DIN_FCH_22CTRL(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG21_DIN_FCH_22NOF0(r32)              _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG21_DIN_FCH_22NOF0(r32,v)            _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG21_DIN_FCH_22NOF0(r16)              _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG21_DIN_FCH_22NOF0(r16,v)            _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG21_DIN_FCH_22NOF1(r32)              _BFGET_(r32,23,16)
    #define   SET32DINT_CFG21_DIN_FCH_22NOF1(r32,v)            _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG21_DIN_FCH_22NOF1(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG21_DIN_FCH_22NOF1(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG21_DIN_FCH_SCNOF0(r32)              _BFGET_(r32,31,24)
    #define   SET32DINT_CFG21_DIN_FCH_SCNOF0(r32,v)            _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG21_DIN_FCH_SCNOF0(r16)              _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG21_DIN_FCH_SCNOF0(r16,v)            _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG21                                  {\
            UNSG32 uCFG21_DIN_FCH_22CTRL                       :  8;\
            UNSG32 uCFG21_DIN_FCH_22NOF0                       :  8;\
            UNSG32 uCFG21_DIN_FCH_22NOF1                       :  8;\
            UNSG32 uCFG21_DIN_FCH_SCNOF0                       :  8;\
          }
    union { UNSG32 u32DINT_CFG21;
            struct w32DINT_CFG21;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG22_DIN_FCH_SCNOF1(r32)              _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG22_DIN_FCH_SCNOF1(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG22_DIN_FCH_SCNOF1(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG22_DIN_FCH_SCNOF1(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG22_DIN_FCH_SCCTRL0(r32)             _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG22_DIN_FCH_SCCTRL0(r32,v)           _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG22_DIN_FCH_SCCTRL0(r16)             _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG22_DIN_FCH_SCCTRL0(r16,v)           _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG22_DIN_FCH_SCCTRL1(r32)             _BFGET_(r32,23,16)
    #define   SET32DINT_CFG22_DIN_FCH_SCCTRL1(r32,v)           _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG22_DIN_FCH_SCCTRL1(r16)             _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG22_DIN_FCH_SCCTRL1(r16,v)           _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG22_DIN_FCH_32CTRL2(r32)             _BFGET_(r32,31,24)
    #define   SET32DINT_CFG22_DIN_FCH_32CTRL2(r32,v)           _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG22_DIN_FCH_32CTRL2(r16)             _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG22_DIN_FCH_32CTRL2(r16,v)           _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG22                                  {\
            UNSG32 uCFG22_DIN_FCH_SCNOF1                       :  8;\
            UNSG32 uCFG22_DIN_FCH_SCCTRL0                      :  8;\
            UNSG32 uCFG22_DIN_FCH_SCCTRL1                      :  8;\
            UNSG32 uCFG22_DIN_FCH_32CTRL2                      :  8;\
          }
    union { UNSG32 u32DINT_CFG22;
            struct w32DINT_CFG22;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG23_DIN_FCH_SC_PAT0(r32)             _BFGET_(r32,31, 0)
    #define   SET32DINT_CFG23_DIN_FCH_SC_PAT0(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32DINT_CFG23                                  {\
            UNSG32 uCFG23_DIN_FCH_SC_PAT0                      : 32;\
          }
    union { UNSG32 u32DINT_CFG23;
            struct w32DINT_CFG23;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG24_DIN_FCH_SC_PAT1(r32)             _BFGET_(r32,31, 0)
    #define   SET32DINT_CFG24_DIN_FCH_SC_PAT1(r32,v)           _BFSET_(r32,31, 0,v)

    #define     w32DINT_CFG24                                  {\
            UNSG32 uCFG24_DIN_FCH_SC_PAT1                      : 32;\
          }
    union { UNSG32 u32DINT_CFG24;
            struct w32DINT_CFG24;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG25_DIN_FCH_SC_LEN(r32)              _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG25_DIN_FCH_SC_LEN(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG25_DIN_FCH_SC_LEN(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG25_DIN_FCH_SC_LEN(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG25_DIN_GFRM_GRD_ENT_TH(r32)         _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG25_DIN_GFRM_GRD_ENT_TH(r32,v)       _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG25_DIN_GFRM_GRD_ENT_TH(r16)         _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG25_DIN_GFRM_GRD_ENT_TH(r16,v)       _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG25_DIN_FRM_FXD_TH(r32)              _BFGET_(r32,23,16)
    #define   SET32DINT_CFG25_DIN_FRM_FXD_TH(r32,v)            _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG25_DIN_FRM_FXD_TH(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG25_DIN_FRM_FXD_TH(r16,v)            _BFSET_(r16, 7, 0,v)

    #define     w32DINT_CFG25                                  {\
            UNSG32 uCFG25_DIN_FCH_SC_LEN                       :  8;\
            UNSG32 uCFG25_DIN_GFRM_GRD_ENT_TH                  :  8;\
            UNSG32 uCFG25_DIN_FRM_FXD_TH                       :  8;\
            UNSG32 RSVDx64_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_CFG25;
            struct w32DINT_CFG25;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG26_DIN_FLD_ENT_TH0(r32)             _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG26_DIN_FLD_ENT_TH0(r32,v)           _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG26_DIN_FLD_ENT_TH0(r16)             _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG26_DIN_FLD_ENT_TH0(r16,v)           _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG26_DIN_FLD_ENT_TH1(r32)             _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG26_DIN_FLD_ENT_TH1(r32,v)           _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG26_DIN_FLD_ENT_TH1(r16)             _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG26_DIN_FLD_ENT_TH1(r16,v)           _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG26_DIN_FLD_EXT1_TH0(r32)            _BFGET_(r32,23,16)
    #define   SET32DINT_CFG26_DIN_FLD_EXT1_TH0(r32,v)          _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG26_DIN_FLD_EXT1_TH0(r16)            _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG26_DIN_FLD_EXT1_TH0(r16,v)          _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG26_DIN_FLD_EXT1_TH0A(r32)           _BFGET_(r32,31,24)
    #define   SET32DINT_CFG26_DIN_FLD_EXT1_TH0A(r32,v)         _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG26_DIN_FLD_EXT1_TH0A(r16)           _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG26_DIN_FLD_EXT1_TH0A(r16,v)         _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG26                                  {\
            UNSG32 uCFG26_DIN_FLD_ENT_TH0                      :  8;\
            UNSG32 uCFG26_DIN_FLD_ENT_TH1                      :  8;\
            UNSG32 uCFG26_DIN_FLD_EXT1_TH0                     :  8;\
            UNSG32 uCFG26_DIN_FLD_EXT1_TH0A                    :  8;\
          }
    union { UNSG32 u32DINT_CFG26;
            struct w32DINT_CFG26;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG27_DIN_FLD_EXT1_TH1(r32)            _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG27_DIN_FLD_EXT1_TH1(r32,v)          _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG27_DIN_FLD_EXT1_TH1(r16)            _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG27_DIN_FLD_EXT1_TH1(r16,v)          _BFSET_(r16, 7, 0,v)

    #define     w32DINT_CFG27                                  {\
            UNSG32 uCFG27_DIN_FLD_EXT1_TH1                     :  8;\
            UNSG32 RSVDx6C_b8                                  : 24;\
          }
    union { UNSG32 u32DINT_CFG27;
            struct w32DINT_CFG27;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG28_DIN_FLD_EXT2_TH0(r32)            _BFGET_(r32,15, 0)
    #define   SET32DINT_CFG28_DIN_FLD_EXT2_TH0(r32,v)          _BFSET_(r32,15, 0,v)
    #define   GET16DINT_CFG28_DIN_FLD_EXT2_TH0(r16)            _BFGET_(r16,15, 0)
    #define   SET16DINT_CFG28_DIN_FLD_EXT2_TH0(r16,v)          _BFSET_(r16,15, 0,v)

    #define   GET32DINT_CFG28_DIN_FLD_EXT2_TH1(r32)            _BFGET_(r32,31,16)
    #define   SET32DINT_CFG28_DIN_FLD_EXT2_TH1(r32,v)          _BFSET_(r32,31,16,v)
    #define   GET16DINT_CFG28_DIN_FLD_EXT2_TH1(r16)            _BFGET_(r16,15, 0)
    #define   SET16DINT_CFG28_DIN_FLD_EXT2_TH1(r16,v)          _BFSET_(r16,15, 0,v)

    #define     w32DINT_CFG28                                  {\
            UNSG32 uCFG28_DIN_FLD_EXT2_TH0                     : 16;\
            UNSG32 uCFG28_DIN_FLD_EXT2_TH1                     : 16;\
          }
    union { UNSG32 u32DINT_CFG28;
            struct w32DINT_CFG28;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG29_DIN_GLB_MOT(r32)                 _BFGET_(r32,15, 0)
    #define   SET32DINT_CFG29_DIN_GLB_MOT(r32,v)               _BFSET_(r32,15, 0,v)
    #define   GET16DINT_CFG29_DIN_GLB_MOT(r16)                 _BFGET_(r16,15, 0)
    #define   SET16DINT_CFG29_DIN_GLB_MOT(r16,v)               _BFSET_(r16,15, 0,v)

    #define   GET32DINT_CFG29_DIN_FCH_IND(r32)                 _BFGET_(r32,23,16)
    #define   SET32DINT_CFG29_DIN_FCH_IND(r32,v)               _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG29_DIN_FCH_IND(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG29_DIN_FCH_IND(r16,v)               _BFSET_(r16, 7, 0,v)

    #define     w32DINT_CFG29                                  {\
            UNSG32 uCFG29_DIN_GLB_MOT                          : 16;\
            UNSG32 uCFG29_DIN_FCH_IND                          :  8;\
            UNSG32 RSVDx74_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_CFG29;
            struct w32DINT_CFG29;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG30_DIN_STM_SBF0(r32)                _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG30_DIN_STM_SBF0(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG30_DIN_STM_SBF0(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG30_DIN_STM_SBF0(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG30_DIN_STM_SBF1(r32)                _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG30_DIN_STM_SBF1(r32,v)              _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG30_DIN_STM_SBF1(r16)                _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG30_DIN_STM_SBF1(r16,v)              _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG30_DIN_STM_SBF2(r32)                _BFGET_(r32,23,16)
    #define   SET32DINT_CFG30_DIN_STM_SBF2(r32,v)              _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG30_DIN_STM_SBF2(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG30_DIN_STM_SBF2(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG30_DIN_STM_SBF3(r32)                _BFGET_(r32,31,24)
    #define   SET32DINT_CFG30_DIN_STM_SBF3(r32,v)              _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG30_DIN_STM_SBF3(r16)                _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG30_DIN_STM_SBF3(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG30                                  {\
            UNSG32 uCFG30_DIN_STM_SBF0                         :  8;\
            UNSG32 uCFG30_DIN_STM_SBF1                         :  8;\
            UNSG32 uCFG30_DIN_STM_SBF2                         :  8;\
            UNSG32 uCFG30_DIN_STM_SBF3                         :  8;\
          }
    union { UNSG32 u32DINT_CFG30;
            struct w32DINT_CFG30;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG31_DIN_STM_SBF4(r32)                _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG31_DIN_STM_SBF4(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG31_DIN_STM_SBF4(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG31_DIN_STM_SBF4(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG31_DIN_STM_SBF5(r32)                _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG31_DIN_STM_SBF5(r32,v)              _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG31_DIN_STM_SBF5(r16)                _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG31_DIN_STM_SBF5(r16,v)              _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG31_DIN_STM_SBF6(r32)                _BFGET_(r32,23,16)
    #define   SET32DINT_CFG31_DIN_STM_SBF6(r32,v)              _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG31_DIN_STM_SBF6(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG31_DIN_STM_SBF6(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG31_DIN_STM_SBF7(r32)                _BFGET_(r32,31,24)
    #define   SET32DINT_CFG31_DIN_STM_SBF7(r32,v)              _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG31_DIN_STM_SBF7(r16)                _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG31_DIN_STM_SBF7(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG31                                  {\
            UNSG32 uCFG31_DIN_STM_SBF4                         :  8;\
            UNSG32 uCFG31_DIN_STM_SBF5                         :  8;\
            UNSG32 uCFG31_DIN_STM_SBF6                         :  8;\
            UNSG32 uCFG31_DIN_STM_SBF7                         :  8;\
          }
    union { UNSG32 u32DINT_CFG31;
            struct w32DINT_CFG31;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG32_DIN_STM_SBF8(r32)                _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG32_DIN_STM_SBF8(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG32_DIN_STM_SBF8(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG32_DIN_STM_SBF8(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG32_DIN_STM_SBF9(r32)                _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG32_DIN_STM_SBF9(r32,v)              _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG32_DIN_STM_SBF9(r16)                _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG32_DIN_STM_SBF9(r16,v)              _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG32_DIN_STM_SBF10(r32)               _BFGET_(r32,23,16)
    #define   SET32DINT_CFG32_DIN_STM_SBF10(r32,v)             _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG32_DIN_STM_SBF10(r16)               _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG32_DIN_STM_SBF10(r16,v)             _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG32_DIN_STM_SBF11(r32)               _BFGET_(r32,31,24)
    #define   SET32DINT_CFG32_DIN_STM_SBF11(r32,v)             _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG32_DIN_STM_SBF11(r16)               _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG32_DIN_STM_SBF11(r16,v)             _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG32                                  {\
            UNSG32 uCFG32_DIN_STM_SBF8                         :  8;\
            UNSG32 uCFG32_DIN_STM_SBF9                         :  8;\
            UNSG32 uCFG32_DIN_STM_SBF10                        :  8;\
            UNSG32 uCFG32_DIN_STM_SBF11                        :  8;\
          }
    union { UNSG32 u32DINT_CFG32;
            struct w32DINT_CFG32;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG33_DIN_STM_SBF12(r32)               _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG33_DIN_STM_SBF12(r32,v)             _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG33_DIN_STM_SBF12(r16)               _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG33_DIN_STM_SBF12(r16,v)             _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG33_DIN_STM_SBF13(r32)               _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG33_DIN_STM_SBF13(r32,v)             _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG33_DIN_STM_SBF13(r16)               _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG33_DIN_STM_SBF13(r16,v)             _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG33_DIN_STM_SBF14(r32)               _BFGET_(r32,23,16)
    #define   SET32DINT_CFG33_DIN_STM_SBF14(r32,v)             _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG33_DIN_STM_SBF14(r16)               _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG33_DIN_STM_SBF14(r16,v)             _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG33_DIN_STM_SBF15(r32)               _BFGET_(r32,31,24)
    #define   SET32DINT_CFG33_DIN_STM_SBF15(r32,v)             _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG33_DIN_STM_SBF15(r16)               _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG33_DIN_STM_SBF15(r16,v)             _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG33                                  {\
            UNSG32 uCFG33_DIN_STM_SBF12                        :  8;\
            UNSG32 uCFG33_DIN_STM_SBF13                        :  8;\
            UNSG32 uCFG33_DIN_STM_SBF14                        :  8;\
            UNSG32 uCFG33_DIN_STM_SBF15                        :  8;\
          }
    union { UNSG32 u32DINT_CFG33;
            struct w32DINT_CFG33;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG34_DIN_FRC_DROP32(r32)              _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG34_DIN_FRC_DROP32(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG34_DIN_FRC_DROP32(r16)              _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG34_DIN_FRC_DROP32(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG34_DIN_FRC_INST32(r32)              _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG34_DIN_FRC_INST32(r32,v)            _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG34_DIN_FRC_INST32(r16)              _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG34_DIN_FRC_INST32(r16,v)            _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG34_DIN_RFF_PAT32(r32)               _BFGET_(r32,23,16)
    #define   SET32DINT_CFG34_DIN_RFF_PAT32(r32,v)             _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG34_DIN_RFF_PAT32(r16)               _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG34_DIN_RFF_PAT32(r16,v)             _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG34_DIN_RFF_CTRL(r32)                _BFGET_(r32,31,24)
    #define   SET32DINT_CFG34_DIN_RFF_CTRL(r32,v)              _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG34_DIN_RFF_CTRL(r16)                _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG34_DIN_RFF_CTRL(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG34                                  {\
            UNSG32 uCFG34_DIN_FRC_DROP32                       :  8;\
            UNSG32 uCFG34_DIN_FRC_INST32                       :  8;\
            UNSG32 uCFG34_DIN_RFF_PAT32                        :  8;\
            UNSG32 uCFG34_DIN_RFF_CTRL                         :  8;\
          }
    union { UNSG32 u32DINT_CFG34;
            struct w32DINT_CFG34;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG35_DIN_GLB_MENU_L(r32)              _BFGET_(r32,20, 0)
    #define   SET32DINT_CFG35_DIN_GLB_MENU_L(r32,v)            _BFSET_(r32,20, 0,v)

    #define     w32DINT_CFG35                                  {\
            UNSG32 uCFG35_DIN_GLB_MENU_L                       : 21;\
            UNSG32 RSVDx8C_b21                                 : 11;\
          }
    union { UNSG32 u32DINT_CFG35;
            struct w32DINT_CFG35;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG36_DIN_GLB_MENU_H(r32)              _BFGET_(r32,20, 0)
    #define   SET32DINT_CFG36_DIN_GLB_MENU_H(r32,v)            _BFSET_(r32,20, 0,v)

    #define     w32DINT_CFG36                                  {\
            UNSG32 uCFG36_DIN_GLB_MENU_H                       : 21;\
            UNSG32 RSVDx90_b21                                 : 11;\
          }
    union { UNSG32 u32DINT_CFG36;
            struct w32DINT_CFG36;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG37_DIN_BLK_MATCH(r32)               _BFGET_(r32,15, 0)
    #define   SET32DINT_CFG37_DIN_BLK_MATCH(r32,v)             _BFSET_(r32,15, 0,v)
    #define   GET16DINT_CFG37_DIN_BLK_MATCH(r16)               _BFGET_(r16,15, 0)
    #define   SET16DINT_CFG37_DIN_BLK_MATCH(r16,v)             _BFSET_(r16,15, 0,v)

    #define   GET32DINT_CFG37_DIN_BLK_MATCH_X_SIZE(r32)        _BFGET_(r32,23,16)
    #define   SET32DINT_CFG37_DIN_BLK_MATCH_X_SIZE(r32,v)      _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG37_DIN_BLK_MATCH_X_SIZE(r16)        _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG37_DIN_BLK_MATCH_X_SIZE(r16,v)      _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG37_DIN_BLK_MATCH_Y_SIZE(r32)        _BFGET_(r32,31,24)
    #define   SET32DINT_CFG37_DIN_BLK_MATCH_Y_SIZE(r32,v)      _BFSET_(r32,31,24,v)
    #define   GET16DINT_CFG37_DIN_BLK_MATCH_Y_SIZE(r16)        _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG37_DIN_BLK_MATCH_Y_SIZE(r16,v)      _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG37                                  {\
            UNSG32 uCFG37_DIN_BLK_MATCH                        : 16;\
            UNSG32 uCFG37_DIN_BLK_MATCH_X_SIZE                 :  8;\
            UNSG32 uCFG37_DIN_BLK_MATCH_Y_SIZE                 :  8;\
          }
    union { UNSG32 u32DINT_CFG37;
            struct w32DINT_CFG37;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG38_DIN_HLD_TH1(r32)                 _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG38_DIN_HLD_TH1(r32,v)               _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG38_DIN_HLD_TH1(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG38_DIN_HLD_TH1(r16,v)               _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG38_DIN_HLD_TH2(r32)                 _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG38_DIN_HLD_TH2(r32,v)               _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG38_DIN_HLD_TH2(r16)                 _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG38_DIN_HLD_TH2(r16,v)               _BFSET_(r16,15, 8,v)

    #define   GET32DINT_CFG38_DIN_HLD_TH3(r32)                 _BFGET_(r32,23,16)
    #define   SET32DINT_CFG38_DIN_HLD_TH3(r32,v)               _BFSET_(r32,23,16,v)
    #define   GET16DINT_CFG38_DIN_HLD_TH3(r16)                 _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG38_DIN_HLD_TH3(r16,v)               _BFSET_(r16, 7, 0,v)

    #define     w32DINT_CFG38                                  {\
            UNSG32 uCFG38_DIN_HLD_TH1                          :  8;\
            UNSG32 uCFG38_DIN_HLD_TH2                          :  8;\
            UNSG32 uCFG38_DIN_HLD_TH3                          :  8;\
            UNSG32 RSVDx98_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_CFG38;
            struct w32DINT_CFG38;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG39_DIN_NEW_MODE(r32)                _BFGET_(r32, 7, 0)
    #define   SET32DINT_CFG39_DIN_NEW_MODE(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16DINT_CFG39_DIN_NEW_MODE(r16)                _BFGET_(r16, 7, 0)
    #define   SET16DINT_CFG39_DIN_NEW_MODE(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32DINT_CFG39_DIN_MST(r32)                     _BFGET_(r32,15, 8)
    #define   SET32DINT_CFG39_DIN_MST(r32,v)                   _BFSET_(r32,15, 8,v)
    #define   GET16DINT_CFG39_DIN_MST(r16)                     _BFGET_(r16,15, 8)
    #define   SET16DINT_CFG39_DIN_MST(r16,v)                   _BFSET_(r16,15, 8,v)

    #define     w32DINT_CFG39                                  {\
            UNSG32 uCFG39_DIN_NEW_MODE                         :  8;\
            UNSG32 uCFG39_DIN_MST                              :  8;\
            UNSG32 RSVDx9C_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_CFG39;
            struct w32DINT_CFG39;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG40_DEINT_MODE(r32)                  _BFGET_(r32, 2, 0)
    #define   SET32DINT_CFG40_DEINT_MODE(r32,v)                _BFSET_(r32, 2, 0,v)
    #define   GET16DINT_CFG40_DEINT_MODE(r16)                  _BFGET_(r16, 2, 0)
    #define   SET16DINT_CFG40_DEINT_MODE(r16,v)                _BFSET_(r16, 2, 0,v)

    #define   GET32DINT_CFG40_FIELD_POL(r32)                   _BFGET_(r32, 3, 3)
    #define   SET32DINT_CFG40_FIELD_POL(r32,v)                 _BFSET_(r32, 3, 3,v)
    #define   GET16DINT_CFG40_FIELD_POL(r16)                   _BFGET_(r16, 3, 3)
    #define   SET16DINT_CFG40_FIELD_POL(r16,v)                 _BFSET_(r16, 3, 3,v)

    #define   GET32DINT_CFG40_FB_CTRL(r32)                     _BFGET_(r32,10, 4)
    #define   SET32DINT_CFG40_FB_CTRL(r32,v)                   _BFSET_(r32,10, 4,v)
    #define   GET16DINT_CFG40_FB_CTRL(r16)                     _BFGET_(r16,10, 4)
    #define   SET16DINT_CFG40_FB_CTRL(r16,v)                   _BFSET_(r16,10, 4,v)

    #define   GET32DINT_CFG40_TEST_CTRL(r32)                   _BFGET_(r32,14,11)
    #define   SET32DINT_CFG40_TEST_CTRL(r32,v)                 _BFSET_(r32,14,11,v)
    #define   GET16DINT_CFG40_TEST_CTRL(r16)                   _BFGET_(r16,14,11)
    #define   SET16DINT_CFG40_TEST_CTRL(r16,v)                 _BFSET_(r16,14,11,v)

    #define     w32DINT_CFG40                                  {\
            UNSG32 uCFG40_DEINT_MODE                           :  3;\
            UNSG32 uCFG40_FIELD_POL                            :  1;\
            UNSG32 uCFG40_FB_CTRL                              :  7;\
            UNSG32 uCFG40_TEST_CTRL                            :  4;\
            UNSG32 RSVDxA0_b15                                 : 17;\
          }
    union { UNSG32 u32DINT_CFG40;
            struct w32DINT_CFG40;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG41_TEST_HT(r32)                     _BFGET_(r32,11, 0)
    #define   SET32DINT_CFG41_TEST_HT(r32,v)                   _BFSET_(r32,11, 0,v)
    #define   GET16DINT_CFG41_TEST_HT(r16)                     _BFGET_(r16,11, 0)
    #define   SET16DINT_CFG41_TEST_HT(r16,v)                   _BFSET_(r16,11, 0,v)

    #define   GET32DINT_CFG41_TEST_VT(r32)                     _BFGET_(r32,23,12)
    #define   SET32DINT_CFG41_TEST_VT(r32,v)                   _BFSET_(r32,23,12,v)

    #define     w32DINT_CFG41                                  {\
            UNSG32 uCFG41_TEST_HT                              : 12;\
            UNSG32 uCFG41_TEST_VT                              : 12;\
            UNSG32 RSVDxA4_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_CFG41;
            struct w32DINT_CFG41;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG42_TEST_HA(r32)                     _BFGET_(r32,11, 0)
    #define   SET32DINT_CFG42_TEST_HA(r32,v)                   _BFSET_(r32,11, 0,v)
    #define   GET16DINT_CFG42_TEST_HA(r16)                     _BFGET_(r16,11, 0)
    #define   SET16DINT_CFG42_TEST_HA(r16,v)                   _BFSET_(r16,11, 0,v)

    #define   GET32DINT_CFG42_TEST_VA(r32)                     _BFGET_(r32,23,12)
    #define   SET32DINT_CFG42_TEST_VA(r32,v)                   _BFSET_(r32,23,12,v)

    #define     w32DINT_CFG42                                  {\
            UNSG32 uCFG42_TEST_HA                              : 12;\
            UNSG32 uCFG42_TEST_VA                              : 12;\
            UNSG32 RSVDxA8_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_CFG42;
            struct w32DINT_CFG42;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_CFG43_PDWN(r32)                        _BFGET_(r32, 0, 0)
    #define   SET32DINT_CFG43_PDWN(r32,v)                      _BFSET_(r32, 0, 0,v)
    #define   GET16DINT_CFG43_PDWN(r16)                        _BFGET_(r16, 0, 0)
    #define   SET16DINT_CFG43_PDWN(r16,v)                      _BFSET_(r16, 0, 0,v)

    #define   GET32DINT_CFG43_PDLVMC(r32)                      _BFGET_(r32, 1, 1)
    #define   SET32DINT_CFG43_PDLVMC(r32,v)                    _BFSET_(r32, 1, 1,v)
    #define   GET16DINT_CFG43_PDLVMC(r16)                      _BFGET_(r16, 1, 1)
    #define   SET16DINT_CFG43_PDLVMC(r16,v)                    _BFSET_(r16, 1, 1,v)

    #define   GET32DINT_CFG43_PDFVSSM(r32)                     _BFGET_(r32, 2, 2)
    #define   SET32DINT_CFG43_PDFVSSM(r32,v)                   _BFSET_(r32, 2, 2,v)
    #define   GET16DINT_CFG43_PDFVSSM(r16)                     _BFGET_(r16, 2, 2)
    #define   SET16DINT_CFG43_PDFVSSM(r16,v)                   _BFSET_(r16, 2, 2,v)

    #define     w32DINT_CFG43                                  {\
            UNSG32 uCFG43_PDWN                                 :  1;\
            UNSG32 uCFG43_PDLVMC                               :  1;\
            UNSG32 uCFG43_PDFVSSM                              :  1;\
            UNSG32 RSVDxAC_b3                                  : 29;\
          }
    union { UNSG32 u32DINT_CFG43;
            struct w32DINT_CFG43;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS0_DIN_FCH_STATUS(r32)               _BFGET_(r32,11, 0)
    #define   SET32DINT_STS0_DIN_FCH_STATUS(r32,v)             _BFSET_(r32,11, 0,v)
    #define   GET16DINT_STS0_DIN_FCH_STATUS(r16)               _BFGET_(r16,11, 0)
    #define   SET16DINT_STS0_DIN_FCH_STATUS(r16,v)             _BFSET_(r16,11, 0,v)

    #define   GET32DINT_STS0_DIN_TEST_STATUS(r32)              _BFGET_(r32,12,12)
    #define   SET32DINT_STS0_DIN_TEST_STATUS(r32,v)            _BFSET_(r32,12,12,v)
    #define   GET16DINT_STS0_DIN_TEST_STATUS(r16)              _BFGET_(r16,12,12)
    #define   SET16DINT_STS0_DIN_TEST_STATUS(r16,v)            _BFSET_(r16,12,12,v)

    #define     w32DINT_STS0                                   {\
            UNSG32 uSTS0_DIN_FCH_STATUS                        : 12;\
            UNSG32 uSTS0_DIN_TEST_STATUS                       :  1;\
            UNSG32 RSVDxB0_b13                                 : 19;\
          }
    union { UNSG32 u32DINT_STS0;
            struct w32DINT_STS0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS1_DIN_OST1(r32)                     _BFGET_(r32,23, 0)
    #define   SET32DINT_STS1_DIN_OST1(r32,v)                   _BFSET_(r32,23, 0,v)

    #define     w32DINT_STS1                                   {\
            UNSG32 uSTS1_DIN_OST1                              : 24;\
            UNSG32 RSVDxB4_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_STS1;
            struct w32DINT_STS1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS2_DIN_OST2(r32)                     _BFGET_(r32,23, 0)
    #define   SET32DINT_STS2_DIN_OST2(r32,v)                   _BFSET_(r32,23, 0,v)

    #define     w32DINT_STS2                                   {\
            UNSG32 uSTS2_DIN_OST2                              : 24;\
            UNSG32 RSVDxB8_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_STS2;
            struct w32DINT_STS2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS3_DIN_ACC_GLB_MOT_OUT(r32)          _BFGET_(r32,23, 0)
    #define   SET32DINT_STS3_DIN_ACC_GLB_MOT_OUT(r32,v)        _BFSET_(r32,23, 0,v)

    #define     w32DINT_STS3                                   {\
            UNSG32 uSTS3_DIN_ACC_GLB_MOT_OUT                   : 24;\
            UNSG32 RSVDxBC_b24                                 :  8;\
          }
    union { UNSG32 u32DINT_STS3;
            struct w32DINT_STS3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS4_DIN_ACC_GFRM_FXD_OUT(r32)         _BFGET_(r32,15, 0)
    #define   SET32DINT_STS4_DIN_ACC_GFRM_FXD_OUT(r32,v)       _BFSET_(r32,15, 0,v)
    #define   GET16DINT_STS4_DIN_ACC_GFRM_FXD_OUT(r16)         _BFGET_(r16,15, 0)
    #define   SET16DINT_STS4_DIN_ACC_GFRM_FXD_OUT(r16,v)       _BFSET_(r16,15, 0,v)

    #define     w32DINT_STS4                                   {\
            UNSG32 uSTS4_DIN_ACC_GFRM_FXD_OUT                  : 16;\
            UNSG32 RSVDxC0_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_STS4;
            struct w32DINT_STS4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS5_DIN_ACC_GFRM_GRD_OUT(r32)         _BFGET_(r32,15, 0)
    #define   SET32DINT_STS5_DIN_ACC_GFRM_GRD_OUT(r32,v)       _BFSET_(r32,15, 0,v)
    #define   GET16DINT_STS5_DIN_ACC_GFRM_GRD_OUT(r16)         _BFGET_(r16,15, 0)
    #define   SET16DINT_STS5_DIN_ACC_GFRM_GRD_OUT(r16,v)       _BFSET_(r16,15, 0,v)

    #define     w32DINT_STS5                                   {\
            UNSG32 uSTS5_DIN_ACC_GFRM_GRD_OUT                  : 16;\
            UNSG32 RSVDxC4_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_STS5;
            struct w32DINT_STS5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS6_DIN_ACC_GFRM_GRD_ENT_OUT(r32)     _BFGET_(r32,15, 0)
    #define   SET32DINT_STS6_DIN_ACC_GFRM_GRD_ENT_OUT(r32,v)   _BFSET_(r32,15, 0,v)
    #define   GET16DINT_STS6_DIN_ACC_GFRM_GRD_ENT_OUT(r16)     _BFGET_(r16,15, 0)
    #define   SET16DINT_STS6_DIN_ACC_GFRM_GRD_ENT_OUT(r16,v)   _BFSET_(r16,15, 0,v)

    #define     w32DINT_STS6                                   {\
            UNSG32 uSTS6_DIN_ACC_GFRM_GRD_ENT_OUT              : 16;\
            UNSG32 RSVDxC8_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_STS6;
            struct w32DINT_STS6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS7_DIN_ACC_GFLDN_ENT_OUT(r32)        _BFGET_(r32,15, 0)
    #define   SET32DINT_STS7_DIN_ACC_GFLDN_ENT_OUT(r32,v)      _BFSET_(r32,15, 0,v)
    #define   GET16DINT_STS7_DIN_ACC_GFLDN_ENT_OUT(r16)        _BFGET_(r16,15, 0)
    #define   SET16DINT_STS7_DIN_ACC_GFLDN_ENT_OUT(r16,v)      _BFSET_(r16,15, 0,v)

    #define     w32DINT_STS7                                   {\
            UNSG32 uSTS7_DIN_ACC_GFLDN_ENT_OUT                 : 16;\
            UNSG32 RSVDxCC_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_STS7;
            struct w32DINT_STS7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS8_DIN_ACC_GFLDP_ENT_OUT(r32)        _BFGET_(r32,15, 0)
    #define   SET32DINT_STS8_DIN_ACC_GFLDP_ENT_OUT(r32,v)      _BFSET_(r32,15, 0,v)
    #define   GET16DINT_STS8_DIN_ACC_GFLDP_ENT_OUT(r16)        _BFGET_(r16,15, 0)
    #define   SET16DINT_STS8_DIN_ACC_GFLDP_ENT_OUT(r16,v)      _BFSET_(r16,15, 0,v)

    #define     w32DINT_STS8                                   {\
            UNSG32 uSTS8_DIN_ACC_GFLDP_ENT_OUT                 : 16;\
            UNSG32 RSVDxD0_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_STS8;
            struct w32DINT_STS8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS9_DIN_ACC_GFLDN_EXT1_OUT(r32)       _BFGET_(r32,15, 0)
    #define   SET32DINT_STS9_DIN_ACC_GFLDN_EXT1_OUT(r32,v)     _BFSET_(r32,15, 0,v)
    #define   GET16DINT_STS9_DIN_ACC_GFLDN_EXT1_OUT(r16)       _BFGET_(r16,15, 0)
    #define   SET16DINT_STS9_DIN_ACC_GFLDN_EXT1_OUT(r16,v)     _BFSET_(r16,15, 0,v)

    #define     w32DINT_STS9                                   {\
            UNSG32 uSTS9_DIN_ACC_GFLDN_EXT1_OUT                : 16;\
            UNSG32 RSVDxD4_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_STS9;
            struct w32DINT_STS9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS10_DIN_ACC_GFLDP_EXT1_OUT(r32)      _BFGET_(r32,15, 0)
    #define   SET32DINT_STS10_DIN_ACC_GFLDP_EXT1_OUT(r32,v)    _BFSET_(r32,15, 0,v)
    #define   GET16DINT_STS10_DIN_ACC_GFLDP_EXT1_OUT(r16)      _BFGET_(r16,15, 0)
    #define   SET16DINT_STS10_DIN_ACC_GFLDP_EXT1_OUT(r16,v)    _BFSET_(r16,15, 0,v)

    #define     w32DINT_STS10                                  {\
            UNSG32 uSTS10_DIN_ACC_GFLDP_EXT1_OUT               : 16;\
            UNSG32 RSVDxD8_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_STS10;
            struct w32DINT_STS10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS11_DIN_ACC_GFLDN_EXT2_OUT(r32)      _BFGET_(r32,15, 0)
    #define   SET32DINT_STS11_DIN_ACC_GFLDN_EXT2_OUT(r32,v)    _BFSET_(r32,15, 0,v)
    #define   GET16DINT_STS11_DIN_ACC_GFLDN_EXT2_OUT(r16)      _BFGET_(r16,15, 0)
    #define   SET16DINT_STS11_DIN_ACC_GFLDN_EXT2_OUT(r16,v)    _BFSET_(r16,15, 0,v)

    #define     w32DINT_STS11                                  {\
            UNSG32 uSTS11_DIN_ACC_GFLDN_EXT2_OUT               : 16;\
            UNSG32 RSVDxDC_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_STS11;
            struct w32DINT_STS11;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINT_STS12_DIN_ACC_GFLDP_EXT2_OUT(r32)      _BFGET_(r32,15, 0)
    #define   SET32DINT_STS12_DIN_ACC_GFLDP_EXT2_OUT(r32,v)    _BFSET_(r32,15, 0,v)
    #define   GET16DINT_STS12_DIN_ACC_GFLDP_EXT2_OUT(r16)      _BFGET_(r16,15, 0)
    #define   SET16DINT_STS12_DIN_ACC_GFLDP_EXT2_OUT(r16,v)    _BFSET_(r16,15, 0,v)

    #define     w32DINT_STS12                                  {\
            UNSG32 uSTS12_DIN_ACC_GFLDP_EXT2_OUT               : 16;\
            UNSG32 RSVDxE0_b16                                 : 16;\
          }
    union { UNSG32 u32DINT_STS12;
            struct w32DINT_STS12;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DINT;

    typedef union  T32DINT_CFG0
          { UNSG32 u32;
            struct w32DINT_CFG0;
                 } T32DINT_CFG0;
    typedef union  T32DINT_CFG1
          { UNSG32 u32;
            struct w32DINT_CFG1;
                 } T32DINT_CFG1;
    typedef union  T32DINT_CFG2
          { UNSG32 u32;
            struct w32DINT_CFG2;
                 } T32DINT_CFG2;
    typedef union  T32DINT_CFG3
          { UNSG32 u32;
            struct w32DINT_CFG3;
                 } T32DINT_CFG3;
    typedef union  T32DINT_CFG4
          { UNSG32 u32;
            struct w32DINT_CFG4;
                 } T32DINT_CFG4;
    typedef union  T32DINT_CFG5
          { UNSG32 u32;
            struct w32DINT_CFG5;
                 } T32DINT_CFG5;
    typedef union  T32DINT_CFG6
          { UNSG32 u32;
            struct w32DINT_CFG6;
                 } T32DINT_CFG6;
    typedef union  T32DINT_CFG7
          { UNSG32 u32;
            struct w32DINT_CFG7;
                 } T32DINT_CFG7;
    typedef union  T32DINT_CFG8
          { UNSG32 u32;
            struct w32DINT_CFG8;
                 } T32DINT_CFG8;
    typedef union  T32DINT_CFG9
          { UNSG32 u32;
            struct w32DINT_CFG9;
                 } T32DINT_CFG9;
    typedef union  T32DINT_CFG10
          { UNSG32 u32;
            struct w32DINT_CFG10;
                 } T32DINT_CFG10;
    typedef union  T32DINT_CFG11
          { UNSG32 u32;
            struct w32DINT_CFG11;
                 } T32DINT_CFG11;
    typedef union  T32DINT_CFG12
          { UNSG32 u32;
            struct w32DINT_CFG12;
                 } T32DINT_CFG12;
    typedef union  T32DINT_CFG13
          { UNSG32 u32;
            struct w32DINT_CFG13;
                 } T32DINT_CFG13;
    typedef union  T32DINT_CFG14
          { UNSG32 u32;
            struct w32DINT_CFG14;
                 } T32DINT_CFG14;
    typedef union  T32DINT_CFG15
          { UNSG32 u32;
            struct w32DINT_CFG15;
                 } T32DINT_CFG15;
    typedef union  T32DINT_CFG16
          { UNSG32 u32;
            struct w32DINT_CFG16;
                 } T32DINT_CFG16;
    typedef union  T32DINT_CFG17
          { UNSG32 u32;
            struct w32DINT_CFG17;
                 } T32DINT_CFG17;
    typedef union  T32DINT_CFG18
          { UNSG32 u32;
            struct w32DINT_CFG18;
                 } T32DINT_CFG18;
    typedef union  T32DINT_CFG19
          { UNSG32 u32;
            struct w32DINT_CFG19;
                 } T32DINT_CFG19;
    typedef union  T32DINT_CFG20
          { UNSG32 u32;
            struct w32DINT_CFG20;
                 } T32DINT_CFG20;
    typedef union  T32DINT_CFG21
          { UNSG32 u32;
            struct w32DINT_CFG21;
                 } T32DINT_CFG21;
    typedef union  T32DINT_CFG22
          { UNSG32 u32;
            struct w32DINT_CFG22;
                 } T32DINT_CFG22;
    typedef union  T32DINT_CFG23
          { UNSG32 u32;
            struct w32DINT_CFG23;
                 } T32DINT_CFG23;
    typedef union  T32DINT_CFG24
          { UNSG32 u32;
            struct w32DINT_CFG24;
                 } T32DINT_CFG24;
    typedef union  T32DINT_CFG25
          { UNSG32 u32;
            struct w32DINT_CFG25;
                 } T32DINT_CFG25;
    typedef union  T32DINT_CFG26
          { UNSG32 u32;
            struct w32DINT_CFG26;
                 } T32DINT_CFG26;
    typedef union  T32DINT_CFG27
          { UNSG32 u32;
            struct w32DINT_CFG27;
                 } T32DINT_CFG27;
    typedef union  T32DINT_CFG28
          { UNSG32 u32;
            struct w32DINT_CFG28;
                 } T32DINT_CFG28;
    typedef union  T32DINT_CFG29
          { UNSG32 u32;
            struct w32DINT_CFG29;
                 } T32DINT_CFG29;
    typedef union  T32DINT_CFG30
          { UNSG32 u32;
            struct w32DINT_CFG30;
                 } T32DINT_CFG30;
    typedef union  T32DINT_CFG31
          { UNSG32 u32;
            struct w32DINT_CFG31;
                 } T32DINT_CFG31;
    typedef union  T32DINT_CFG32
          { UNSG32 u32;
            struct w32DINT_CFG32;
                 } T32DINT_CFG32;
    typedef union  T32DINT_CFG33
          { UNSG32 u32;
            struct w32DINT_CFG33;
                 } T32DINT_CFG33;
    typedef union  T32DINT_CFG34
          { UNSG32 u32;
            struct w32DINT_CFG34;
                 } T32DINT_CFG34;
    typedef union  T32DINT_CFG35
          { UNSG32 u32;
            struct w32DINT_CFG35;
                 } T32DINT_CFG35;
    typedef union  T32DINT_CFG36
          { UNSG32 u32;
            struct w32DINT_CFG36;
                 } T32DINT_CFG36;
    typedef union  T32DINT_CFG37
          { UNSG32 u32;
            struct w32DINT_CFG37;
                 } T32DINT_CFG37;
    typedef union  T32DINT_CFG38
          { UNSG32 u32;
            struct w32DINT_CFG38;
                 } T32DINT_CFG38;
    typedef union  T32DINT_CFG39
          { UNSG32 u32;
            struct w32DINT_CFG39;
                 } T32DINT_CFG39;
    typedef union  T32DINT_CFG40
          { UNSG32 u32;
            struct w32DINT_CFG40;
                 } T32DINT_CFG40;
    typedef union  T32DINT_CFG41
          { UNSG32 u32;
            struct w32DINT_CFG41;
                 } T32DINT_CFG41;
    typedef union  T32DINT_CFG42
          { UNSG32 u32;
            struct w32DINT_CFG42;
                 } T32DINT_CFG42;
    typedef union  T32DINT_CFG43
          { UNSG32 u32;
            struct w32DINT_CFG43;
                 } T32DINT_CFG43;
    typedef union  T32DINT_STS0
          { UNSG32 u32;
            struct w32DINT_STS0;
                 } T32DINT_STS0;
    typedef union  T32DINT_STS1
          { UNSG32 u32;
            struct w32DINT_STS1;
                 } T32DINT_STS1;
    typedef union  T32DINT_STS2
          { UNSG32 u32;
            struct w32DINT_STS2;
                 } T32DINT_STS2;
    typedef union  T32DINT_STS3
          { UNSG32 u32;
            struct w32DINT_STS3;
                 } T32DINT_STS3;
    typedef union  T32DINT_STS4
          { UNSG32 u32;
            struct w32DINT_STS4;
                 } T32DINT_STS4;
    typedef union  T32DINT_STS5
          { UNSG32 u32;
            struct w32DINT_STS5;
                 } T32DINT_STS5;
    typedef union  T32DINT_STS6
          { UNSG32 u32;
            struct w32DINT_STS6;
                 } T32DINT_STS6;
    typedef union  T32DINT_STS7
          { UNSG32 u32;
            struct w32DINT_STS7;
                 } T32DINT_STS7;
    typedef union  T32DINT_STS8
          { UNSG32 u32;
            struct w32DINT_STS8;
                 } T32DINT_STS8;
    typedef union  T32DINT_STS9
          { UNSG32 u32;
            struct w32DINT_STS9;
                 } T32DINT_STS9;
    typedef union  T32DINT_STS10
          { UNSG32 u32;
            struct w32DINT_STS10;
                 } T32DINT_STS10;
    typedef union  T32DINT_STS11
          { UNSG32 u32;
            struct w32DINT_STS11;
                 } T32DINT_STS11;
    typedef union  T32DINT_STS12
          { UNSG32 u32;
            struct w32DINT_STS12;
                 } T32DINT_STS12;
    ///////////////////////////////////////////////////////////

    typedef union  TDINT_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG0;
                   };
                 } TDINT_CFG0;
    typedef union  TDINT_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG1;
                   };
                 } TDINT_CFG1;
    typedef union  TDINT_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG2;
                   };
                 } TDINT_CFG2;
    typedef union  TDINT_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG3;
                   };
                 } TDINT_CFG3;
    typedef union  TDINT_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG4;
                   };
                 } TDINT_CFG4;
    typedef union  TDINT_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG5;
                   };
                 } TDINT_CFG5;
    typedef union  TDINT_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG6;
                   };
                 } TDINT_CFG6;
    typedef union  TDINT_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG7;
                   };
                 } TDINT_CFG7;
    typedef union  TDINT_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG8;
                   };
                 } TDINT_CFG8;
    typedef union  TDINT_CFG9
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG9;
                   };
                 } TDINT_CFG9;
    typedef union  TDINT_CFG10
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG10;
                   };
                 } TDINT_CFG10;
    typedef union  TDINT_CFG11
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG11;
                   };
                 } TDINT_CFG11;
    typedef union  TDINT_CFG12
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG12;
                   };
                 } TDINT_CFG12;
    typedef union  TDINT_CFG13
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG13;
                   };
                 } TDINT_CFG13;
    typedef union  TDINT_CFG14
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG14;
                   };
                 } TDINT_CFG14;
    typedef union  TDINT_CFG15
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG15;
                   };
                 } TDINT_CFG15;
    typedef union  TDINT_CFG16
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG16;
                   };
                 } TDINT_CFG16;
    typedef union  TDINT_CFG17
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG17;
                   };
                 } TDINT_CFG17;
    typedef union  TDINT_CFG18
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG18;
                   };
                 } TDINT_CFG18;
    typedef union  TDINT_CFG19
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG19;
                   };
                 } TDINT_CFG19;
    typedef union  TDINT_CFG20
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG20;
                   };
                 } TDINT_CFG20;
    typedef union  TDINT_CFG21
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG21;
                   };
                 } TDINT_CFG21;
    typedef union  TDINT_CFG22
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG22;
                   };
                 } TDINT_CFG22;
    typedef union  TDINT_CFG23
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG23;
                   };
                 } TDINT_CFG23;
    typedef union  TDINT_CFG24
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG24;
                   };
                 } TDINT_CFG24;
    typedef union  TDINT_CFG25
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG25;
                   };
                 } TDINT_CFG25;
    typedef union  TDINT_CFG26
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG26;
                   };
                 } TDINT_CFG26;
    typedef union  TDINT_CFG27
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG27;
                   };
                 } TDINT_CFG27;
    typedef union  TDINT_CFG28
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG28;
                   };
                 } TDINT_CFG28;
    typedef union  TDINT_CFG29
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG29;
                   };
                 } TDINT_CFG29;
    typedef union  TDINT_CFG30
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG30;
                   };
                 } TDINT_CFG30;
    typedef union  TDINT_CFG31
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG31;
                   };
                 } TDINT_CFG31;
    typedef union  TDINT_CFG32
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG32;
                   };
                 } TDINT_CFG32;
    typedef union  TDINT_CFG33
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG33;
                   };
                 } TDINT_CFG33;
    typedef union  TDINT_CFG34
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG34;
                   };
                 } TDINT_CFG34;
    typedef union  TDINT_CFG35
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG35;
                   };
                 } TDINT_CFG35;
    typedef union  TDINT_CFG36
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG36;
                   };
                 } TDINT_CFG36;
    typedef union  TDINT_CFG37
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG37;
                   };
                 } TDINT_CFG37;
    typedef union  TDINT_CFG38
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG38;
                   };
                 } TDINT_CFG38;
    typedef union  TDINT_CFG39
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG39;
                   };
                 } TDINT_CFG39;
    typedef union  TDINT_CFG40
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG40;
                   };
                 } TDINT_CFG40;
    typedef union  TDINT_CFG41
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG41;
                   };
                 } TDINT_CFG41;
    typedef union  TDINT_CFG42
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG42;
                   };
                 } TDINT_CFG42;
    typedef union  TDINT_CFG43
          { UNSG32 u32[1];
            struct {
            struct w32DINT_CFG43;
                   };
                 } TDINT_CFG43;
    typedef union  TDINT_STS0
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS0;
                   };
                 } TDINT_STS0;
    typedef union  TDINT_STS1
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS1;
                   };
                 } TDINT_STS1;
    typedef union  TDINT_STS2
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS2;
                   };
                 } TDINT_STS2;
    typedef union  TDINT_STS3
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS3;
                   };
                 } TDINT_STS3;
    typedef union  TDINT_STS4
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS4;
                   };
                 } TDINT_STS4;
    typedef union  TDINT_STS5
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS5;
                   };
                 } TDINT_STS5;
    typedef union  TDINT_STS6
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS6;
                   };
                 } TDINT_STS6;
    typedef union  TDINT_STS7
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS7;
                   };
                 } TDINT_STS7;
    typedef union  TDINT_STS8
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS8;
                   };
                 } TDINT_STS8;
    typedef union  TDINT_STS9
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS9;
                   };
                 } TDINT_STS9;
    typedef union  TDINT_STS10
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS10;
                   };
                 } TDINT_STS10;
    typedef union  TDINT_STS11
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS11;
                   };
                 } TDINT_STS11;
    typedef union  TDINT_STS12
          { UNSG32 u32[1];
            struct {
            struct w32DINT_STS12;
                   };
                 } TDINT_STS12;

    ///////////////////////////////////////////////////////////
     SIGN32 DINT_drvrd(SIE_DINT *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DINT_drvwr(SIE_DINT *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DINT_reset(SIE_DINT *p);
     SIGN32 DINT_cmp  (SIE_DINT *p, SIE_DINT *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DINT_check(p,pie,pfx,hLOG) DINT_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DINT_print(p,    pfx,hLOG) DINT_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DINT
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DINTDMX                 biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 8  CTRL                      0x20
///                                    ###
///                                    * [0]    This ibt controls the reset operation of the DMX FIFO.
///                                    * [1]    This bit indicates the mode of DMX fifo write operation.
///                                    * 0: write clock enable is 1 (default).
///                                    * 1: write into the FIFO with respect to the write clock enable.
///                                    * [3:2] These bits indicate the nature of DMX fifo read and write clocks (Rclk and Wclk).
///                                    * 00: freq of Rclk > 2* freq of Wclk.
///                                    * 01: freq of Rclk = freq of Wclk.
///                                    * 10: freq of Rclk = 2* freq of Wclk (default).
///                                    * 11: freq of Rclk = 4 * freq of Wclk.
///                                    * [4]: This bit is used to manually reset the FIFO by setting this bit and bringing it
///                                    * back to 0 immediately after that.
///                                    * 0: No reset (default).
///                                    * 1: Manual reset
///                                    * Recommended operation is to set to 1, then reset to 0.
///                                    * [5]: When this bit is enabled, the read and write pointers of the FIFO are automatically separated by FIFO control logic.
///                                    * 0: No reset
///                                    * 1: Auto reset (Recommended) (default).
///                                    * [6]: 1 > Deinterlacer output for DMX FIFO
///                                    * 0 > Deint bypassed/ Direct Input to DMX FIFO
///                                    * [7]:
///                                    * 1 > DMX Enabled,Interlaced to Progressive Converted Output
///                                    * 0 > Bypass through (Direct from DMX FIFO output)
///                                    ###
///               %unsigned 1  PROSCAN                   0x0
///                                    ###
///                                    * 1: use Vsync aligned Field input for DMX operation
///                                    * 0: Use the raw field for DMX operation.
///                                    ###
///               %unsigned 1  INIT                      0x0
///                                    ###
///                                    * Initialize Pulse generation for DMX reset,
///                                    * Need to Make HIGH and LOW to generate pulse.
///                                    * Initialization is required whenever DMX timing is re programmed
///                                    ###
///               %unsigned 1  INIT_EN                   0x1
///                                    ###
///                                    * Enable the DMX initialization circuit
///                                    ###
///               %unsigned 1  SW_SEL                    0x0
///                                    ###
///                                    * Selection of DMX Progressive Output timing programming
///                                    * Selects between hardware computed hres, ht, vres, vt, ivt or software programmed values.
///                                    * 0 : Hardware computed values are used.
///                                    * 1: Software programmed values are used.
///                                    ###
///               %unsigned 11 MEMSIZE                   0x77F
///                                    ###
///                                    * Controls the wrap back pointer of memory
///                                    * In SD (NTSC) = 719 (decimal)
///                                    * In HD = 1919 (decimal)
///                                    ###
///               %unsigned 1  PDWN                      0x0
///                                    ###
///                                    * Demultiplexer Memory Reduced Power mode
///                                    * 1: Reduce the leakage(low power) mode , allows VDD to be switched off with data retention.
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDLVMC                    0x0
///                                    ###
///                                    * Demultiplexer Memory Reduced Power mode
///                                    * 1: To select leakage reduction mode options when PDWN is asserted.
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDFVSSM                   0x0
///                                    ###
///                                    * Demultiplexer Memory Reduced Power mode
///                                    * 1: To select leakage reduction mode options when PDWN is asserted.
///                                    * 0: Normal operation
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %unsigned 12 HRES                      0x0
///                                    ###
///                                    * Active no. of horizontal pixels at the input of VP. If actual resolution is 720, this register shall be programmed with 719.
///                                    ###
///               %unsigned 12 HT                        0x0
///                                    ###
///                                    * Total horizontal pixels at the input of VP. This shall be programmed with the htotal programmed in the VP TG -1.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 12 VRES                      0x0
///                                    ###
///                                    * Active vertical lines at the input of VP -1.
///                                    ###
///               %unsigned 12 VT                        0x0
///                                    ###
///                                    * 2*ivtotal-1. The ivtotal depends on the values programmed in VP TG.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %unsigned 12 IVT                       0x0
///                                    ###
///                                    * ivtotal-1. The ivtotal depends on the values programmed in VP TG.
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %unsigned 1  PDWN                      0x0
///                                    ###
///                                    * Demultiplexer Memory Reduced Power mode
///                                    * 1: Reduce the leakage(low power) mode , allows VDD to be switched off with data retention.
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDLVMC                    0x0
///                                    ###
///                                    * Demultiplexer Memory Reduced Power mode
///                                    * 1: To select leakage reduction mode options when PDWN is asserted.
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDFVSSM                   0x0
///                                    ###
///                                    * Demultiplexer Memory Reduced Power mode
///                                    * 1: To select leakage reduction mode options when PDWN is asserted.
///                                    * 0: Normal operation
///                                    ###
///               %%        29         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      20B, bits:      89b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DINTDMX
#define h_DINTDMX (){}

    #define     RA_DINTDMX_CFG0                                0x0000

    #define     BA_DINTDMX_CFG0_CTRL                           0x0000
    #define     B16DINTDMX_CFG0_CTRL                           0x0000
    #define   LSb32DINTDMX_CFG0_CTRL                              0
    #define   LSb16DINTDMX_CFG0_CTRL                              0
    #define       bDINTDMX_CFG0_CTRL                           8
    #define   MSK32DINTDMX_CFG0_CTRL                              0x000000FF

    #define     BA_DINTDMX_CFG0_PROSCAN                        0x0001
    #define     B16DINTDMX_CFG0_PROSCAN                        0x0000
    #define   LSb32DINTDMX_CFG0_PROSCAN                           8
    #define   LSb16DINTDMX_CFG0_PROSCAN                           8
    #define       bDINTDMX_CFG0_PROSCAN                        1
    #define   MSK32DINTDMX_CFG0_PROSCAN                           0x00000100

    #define     BA_DINTDMX_CFG0_INIT                           0x0001
    #define     B16DINTDMX_CFG0_INIT                           0x0000
    #define   LSb32DINTDMX_CFG0_INIT                              9
    #define   LSb16DINTDMX_CFG0_INIT                              9
    #define       bDINTDMX_CFG0_INIT                           1
    #define   MSK32DINTDMX_CFG0_INIT                              0x00000200

    #define     BA_DINTDMX_CFG0_INIT_EN                        0x0001
    #define     B16DINTDMX_CFG0_INIT_EN                        0x0000
    #define   LSb32DINTDMX_CFG0_INIT_EN                           10
    #define   LSb16DINTDMX_CFG0_INIT_EN                           10
    #define       bDINTDMX_CFG0_INIT_EN                        1
    #define   MSK32DINTDMX_CFG0_INIT_EN                           0x00000400

    #define     BA_DINTDMX_CFG0_SW_SEL                         0x0001
    #define     B16DINTDMX_CFG0_SW_SEL                         0x0000
    #define   LSb32DINTDMX_CFG0_SW_SEL                            11
    #define   LSb16DINTDMX_CFG0_SW_SEL                            11
    #define       bDINTDMX_CFG0_SW_SEL                         1
    #define   MSK32DINTDMX_CFG0_SW_SEL                            0x00000800

    #define     BA_DINTDMX_CFG0_MEMSIZE                        0x0001
    #define     B16DINTDMX_CFG0_MEMSIZE                        0x0000
    #define   LSb32DINTDMX_CFG0_MEMSIZE                           12
    #define   LSb16DINTDMX_CFG0_MEMSIZE                           12
    #define       bDINTDMX_CFG0_MEMSIZE                        11
    #define   MSK32DINTDMX_CFG0_MEMSIZE                           0x007FF000

    #define     BA_DINTDMX_CFG0_PDWN                           0x0002
    #define     B16DINTDMX_CFG0_PDWN                           0x0002
    #define   LSb32DINTDMX_CFG0_PDWN                              23
    #define   LSb16DINTDMX_CFG0_PDWN                              7
    #define       bDINTDMX_CFG0_PDWN                           1
    #define   MSK32DINTDMX_CFG0_PDWN                              0x00800000

    #define     BA_DINTDMX_CFG0_PDLVMC                         0x0003
    #define     B16DINTDMX_CFG0_PDLVMC                         0x0002
    #define   LSb32DINTDMX_CFG0_PDLVMC                            24
    #define   LSb16DINTDMX_CFG0_PDLVMC                            8
    #define       bDINTDMX_CFG0_PDLVMC                         1
    #define   MSK32DINTDMX_CFG0_PDLVMC                            0x01000000

    #define     BA_DINTDMX_CFG0_PDFVSSM                        0x0003
    #define     B16DINTDMX_CFG0_PDFVSSM                        0x0002
    #define   LSb32DINTDMX_CFG0_PDFVSSM                           25
    #define   LSb16DINTDMX_CFG0_PDFVSSM                           9
    #define       bDINTDMX_CFG0_PDFVSSM                        1
    #define   MSK32DINTDMX_CFG0_PDFVSSM                           0x02000000
    ///////////////////////////////////////////////////////////
    #define     RA_DINTDMX_CFG1                                0x0004

    #define     BA_DINTDMX_CFG1_HRES                           0x0004
    #define     B16DINTDMX_CFG1_HRES                           0x0004
    #define   LSb32DINTDMX_CFG1_HRES                              0
    #define   LSb16DINTDMX_CFG1_HRES                              0
    #define       bDINTDMX_CFG1_HRES                           12
    #define   MSK32DINTDMX_CFG1_HRES                              0x00000FFF

    #define     BA_DINTDMX_CFG1_HT                             0x0005
    #define     B16DINTDMX_CFG1_HT                             0x0004
    #define   LSb32DINTDMX_CFG1_HT                                12
    #define   LSb16DINTDMX_CFG1_HT                                12
    #define       bDINTDMX_CFG1_HT                             12
    #define   MSK32DINTDMX_CFG1_HT                                0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_DINTDMX_CFG2                                0x0008

    #define     BA_DINTDMX_CFG2_VRES                           0x0008
    #define     B16DINTDMX_CFG2_VRES                           0x0008
    #define   LSb32DINTDMX_CFG2_VRES                              0
    #define   LSb16DINTDMX_CFG2_VRES                              0
    #define       bDINTDMX_CFG2_VRES                           12
    #define   MSK32DINTDMX_CFG2_VRES                              0x00000FFF

    #define     BA_DINTDMX_CFG2_VT                             0x0009
    #define     B16DINTDMX_CFG2_VT                             0x0008
    #define   LSb32DINTDMX_CFG2_VT                                12
    #define   LSb16DINTDMX_CFG2_VT                                12
    #define       bDINTDMX_CFG2_VT                             12
    #define   MSK32DINTDMX_CFG2_VT                                0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_DINTDMX_CFG3                                0x000C

    #define     BA_DINTDMX_CFG3_IVT                            0x000C
    #define     B16DINTDMX_CFG3_IVT                            0x000C
    #define   LSb32DINTDMX_CFG3_IVT                               0
    #define   LSb16DINTDMX_CFG3_IVT                               0
    #define       bDINTDMX_CFG3_IVT                            12
    #define   MSK32DINTDMX_CFG3_IVT                               0x00000FFF
    ///////////////////////////////////////////////////////////
    #define     RA_DINTDMX_CFG4                                0x0010

    #define     BA_DINTDMX_CFG4_PDWN                           0x0010
    #define     B16DINTDMX_CFG4_PDWN                           0x0010
    #define   LSb32DINTDMX_CFG4_PDWN                              0
    #define   LSb16DINTDMX_CFG4_PDWN                              0
    #define       bDINTDMX_CFG4_PDWN                           1
    #define   MSK32DINTDMX_CFG4_PDWN                              0x00000001

    #define     BA_DINTDMX_CFG4_PDLVMC                         0x0010
    #define     B16DINTDMX_CFG4_PDLVMC                         0x0010
    #define   LSb32DINTDMX_CFG4_PDLVMC                            1
    #define   LSb16DINTDMX_CFG4_PDLVMC                            1
    #define       bDINTDMX_CFG4_PDLVMC                         1
    #define   MSK32DINTDMX_CFG4_PDLVMC                            0x00000002

    #define     BA_DINTDMX_CFG4_PDFVSSM                        0x0010
    #define     B16DINTDMX_CFG4_PDFVSSM                        0x0010
    #define   LSb32DINTDMX_CFG4_PDFVSSM                           2
    #define   LSb16DINTDMX_CFG4_PDFVSSM                           2
    #define       bDINTDMX_CFG4_PDFVSSM                        1
    #define   MSK32DINTDMX_CFG4_PDFVSSM                           0x00000004
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DINTDMX {
    ///////////////////////////////////////////////////////////
    #define   GET32DINTDMX_CFG0_CTRL(r32)                      _BFGET_(r32, 7, 0)
    #define   SET32DINTDMX_CFG0_CTRL(r32,v)                    _BFSET_(r32, 7, 0,v)
    #define   GET16DINTDMX_CFG0_CTRL(r16)                      _BFGET_(r16, 7, 0)
    #define   SET16DINTDMX_CFG0_CTRL(r16,v)                    _BFSET_(r16, 7, 0,v)

    #define   GET32DINTDMX_CFG0_PROSCAN(r32)                   _BFGET_(r32, 8, 8)
    #define   SET32DINTDMX_CFG0_PROSCAN(r32,v)                 _BFSET_(r32, 8, 8,v)
    #define   GET16DINTDMX_CFG0_PROSCAN(r16)                   _BFGET_(r16, 8, 8)
    #define   SET16DINTDMX_CFG0_PROSCAN(r16,v)                 _BFSET_(r16, 8, 8,v)

    #define   GET32DINTDMX_CFG0_INIT(r32)                      _BFGET_(r32, 9, 9)
    #define   SET32DINTDMX_CFG0_INIT(r32,v)                    _BFSET_(r32, 9, 9,v)
    #define   GET16DINTDMX_CFG0_INIT(r16)                      _BFGET_(r16, 9, 9)
    #define   SET16DINTDMX_CFG0_INIT(r16,v)                    _BFSET_(r16, 9, 9,v)

    #define   GET32DINTDMX_CFG0_INIT_EN(r32)                   _BFGET_(r32,10,10)
    #define   SET32DINTDMX_CFG0_INIT_EN(r32,v)                 _BFSET_(r32,10,10,v)
    #define   GET16DINTDMX_CFG0_INIT_EN(r16)                   _BFGET_(r16,10,10)
    #define   SET16DINTDMX_CFG0_INIT_EN(r16,v)                 _BFSET_(r16,10,10,v)

    #define   GET32DINTDMX_CFG0_SW_SEL(r32)                    _BFGET_(r32,11,11)
    #define   SET32DINTDMX_CFG0_SW_SEL(r32,v)                  _BFSET_(r32,11,11,v)
    #define   GET16DINTDMX_CFG0_SW_SEL(r16)                    _BFGET_(r16,11,11)
    #define   SET16DINTDMX_CFG0_SW_SEL(r16,v)                  _BFSET_(r16,11,11,v)

    #define   GET32DINTDMX_CFG0_MEMSIZE(r32)                   _BFGET_(r32,22,12)
    #define   SET32DINTDMX_CFG0_MEMSIZE(r32,v)                 _BFSET_(r32,22,12,v)

    #define   GET32DINTDMX_CFG0_PDWN(r32)                      _BFGET_(r32,23,23)
    #define   SET32DINTDMX_CFG0_PDWN(r32,v)                    _BFSET_(r32,23,23,v)
    #define   GET16DINTDMX_CFG0_PDWN(r16)                      _BFGET_(r16, 7, 7)
    #define   SET16DINTDMX_CFG0_PDWN(r16,v)                    _BFSET_(r16, 7, 7,v)

    #define   GET32DINTDMX_CFG0_PDLVMC(r32)                    _BFGET_(r32,24,24)
    #define   SET32DINTDMX_CFG0_PDLVMC(r32,v)                  _BFSET_(r32,24,24,v)
    #define   GET16DINTDMX_CFG0_PDLVMC(r16)                    _BFGET_(r16, 8, 8)
    #define   SET16DINTDMX_CFG0_PDLVMC(r16,v)                  _BFSET_(r16, 8, 8,v)

    #define   GET32DINTDMX_CFG0_PDFVSSM(r32)                   _BFGET_(r32,25,25)
    #define   SET32DINTDMX_CFG0_PDFVSSM(r32,v)                 _BFSET_(r32,25,25,v)
    #define   GET16DINTDMX_CFG0_PDFVSSM(r16)                   _BFGET_(r16, 9, 9)
    #define   SET16DINTDMX_CFG0_PDFVSSM(r16,v)                 _BFSET_(r16, 9, 9,v)

    #define     w32DINTDMX_CFG0                                {\
            UNSG32 uCFG0_CTRL                                  :  8;\
            UNSG32 uCFG0_PROSCAN                               :  1;\
            UNSG32 uCFG0_INIT                                  :  1;\
            UNSG32 uCFG0_INIT_EN                               :  1;\
            UNSG32 uCFG0_SW_SEL                                :  1;\
            UNSG32 uCFG0_MEMSIZE                               : 11;\
            UNSG32 uCFG0_PDWN                                  :  1;\
            UNSG32 uCFG0_PDLVMC                                :  1;\
            UNSG32 uCFG0_PDFVSSM                               :  1;\
            UNSG32 RSVDx0_b26                                  :  6;\
          }
    union { UNSG32 u32DINTDMX_CFG0;
            struct w32DINTDMX_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINTDMX_CFG1_HRES(r32)                      _BFGET_(r32,11, 0)
    #define   SET32DINTDMX_CFG1_HRES(r32,v)                    _BFSET_(r32,11, 0,v)
    #define   GET16DINTDMX_CFG1_HRES(r16)                      _BFGET_(r16,11, 0)
    #define   SET16DINTDMX_CFG1_HRES(r16,v)                    _BFSET_(r16,11, 0,v)

    #define   GET32DINTDMX_CFG1_HT(r32)                        _BFGET_(r32,23,12)
    #define   SET32DINTDMX_CFG1_HT(r32,v)                      _BFSET_(r32,23,12,v)

    #define     w32DINTDMX_CFG1                                {\
            UNSG32 uCFG1_HRES                                  : 12;\
            UNSG32 uCFG1_HT                                    : 12;\
            UNSG32 RSVDx4_b24                                  :  8;\
          }
    union { UNSG32 u32DINTDMX_CFG1;
            struct w32DINTDMX_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINTDMX_CFG2_VRES(r32)                      _BFGET_(r32,11, 0)
    #define   SET32DINTDMX_CFG2_VRES(r32,v)                    _BFSET_(r32,11, 0,v)
    #define   GET16DINTDMX_CFG2_VRES(r16)                      _BFGET_(r16,11, 0)
    #define   SET16DINTDMX_CFG2_VRES(r16,v)                    _BFSET_(r16,11, 0,v)

    #define   GET32DINTDMX_CFG2_VT(r32)                        _BFGET_(r32,23,12)
    #define   SET32DINTDMX_CFG2_VT(r32,v)                      _BFSET_(r32,23,12,v)

    #define     w32DINTDMX_CFG2                                {\
            UNSG32 uCFG2_VRES                                  : 12;\
            UNSG32 uCFG2_VT                                    : 12;\
            UNSG32 RSVDx8_b24                                  :  8;\
          }
    union { UNSG32 u32DINTDMX_CFG2;
            struct w32DINTDMX_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINTDMX_CFG3_IVT(r32)                       _BFGET_(r32,11, 0)
    #define   SET32DINTDMX_CFG3_IVT(r32,v)                     _BFSET_(r32,11, 0,v)
    #define   GET16DINTDMX_CFG3_IVT(r16)                       _BFGET_(r16,11, 0)
    #define   SET16DINTDMX_CFG3_IVT(r16,v)                     _BFSET_(r16,11, 0,v)

    #define     w32DINTDMX_CFG3                                {\
            UNSG32 uCFG3_IVT                                   : 12;\
            UNSG32 RSVDxC_b12                                  : 20;\
          }
    union { UNSG32 u32DINTDMX_CFG3;
            struct w32DINTDMX_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DINTDMX_CFG4_PDWN(r32)                      _BFGET_(r32, 0, 0)
    #define   SET32DINTDMX_CFG4_PDWN(r32,v)                    _BFSET_(r32, 0, 0,v)
    #define   GET16DINTDMX_CFG4_PDWN(r16)                      _BFGET_(r16, 0, 0)
    #define   SET16DINTDMX_CFG4_PDWN(r16,v)                    _BFSET_(r16, 0, 0,v)

    #define   GET32DINTDMX_CFG4_PDLVMC(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32DINTDMX_CFG4_PDLVMC(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16DINTDMX_CFG4_PDLVMC(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16DINTDMX_CFG4_PDLVMC(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define   GET32DINTDMX_CFG4_PDFVSSM(r32)                   _BFGET_(r32, 2, 2)
    #define   SET32DINTDMX_CFG4_PDFVSSM(r32,v)                 _BFSET_(r32, 2, 2,v)
    #define   GET16DINTDMX_CFG4_PDFVSSM(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16DINTDMX_CFG4_PDFVSSM(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define     w32DINTDMX_CFG4                                {\
            UNSG32 uCFG4_PDWN                                  :  1;\
            UNSG32 uCFG4_PDLVMC                                :  1;\
            UNSG32 uCFG4_PDFVSSM                               :  1;\
            UNSG32 RSVDx10_b3                                  : 29;\
          }
    union { UNSG32 u32DINTDMX_CFG4;
            struct w32DINTDMX_CFG4;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DINTDMX;

    typedef union  T32DINTDMX_CFG0
          { UNSG32 u32;
            struct w32DINTDMX_CFG0;
                 } T32DINTDMX_CFG0;
    typedef union  T32DINTDMX_CFG1
          { UNSG32 u32;
            struct w32DINTDMX_CFG1;
                 } T32DINTDMX_CFG1;
    typedef union  T32DINTDMX_CFG2
          { UNSG32 u32;
            struct w32DINTDMX_CFG2;
                 } T32DINTDMX_CFG2;
    typedef union  T32DINTDMX_CFG3
          { UNSG32 u32;
            struct w32DINTDMX_CFG3;
                 } T32DINTDMX_CFG3;
    typedef union  T32DINTDMX_CFG4
          { UNSG32 u32;
            struct w32DINTDMX_CFG4;
                 } T32DINTDMX_CFG4;
    ///////////////////////////////////////////////////////////

    typedef union  TDINTDMX_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32DINTDMX_CFG0;
                   };
                 } TDINTDMX_CFG0;
    typedef union  TDINTDMX_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32DINTDMX_CFG1;
                   };
                 } TDINTDMX_CFG1;
    typedef union  TDINTDMX_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32DINTDMX_CFG2;
                   };
                 } TDINTDMX_CFG2;
    typedef union  TDINTDMX_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32DINTDMX_CFG3;
                   };
                 } TDINTDMX_CFG3;
    typedef union  TDINTDMX_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32DINTDMX_CFG4;
                   };
                 } TDINTDMX_CFG4;

    ///////////////////////////////////////////////////////////
     SIGN32 DINTDMX_drvrd(SIE_DINTDMX *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DINTDMX_drvwr(SIE_DINTDMX *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DINTDMX_reset(SIE_DINTDMX *p);
     SIGN32 DINTDMX_cmp  (SIE_DINTDMX *p, SIE_DINTDMX *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DINTDMX_check(p,pie,pfx,hLOG) DINTDMX_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DINTDMX_print(p,    pfx,hLOG) DINTDMX_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DINTDMX
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VPTOP                   biu              (4,4)
///     ###
///     * Required registers for Down-sampler
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 2  clkgate                   0x3
///                                    ###
///                                    * [0] DEINT+DMX Clock gate
///                                    * 1: DEINT+DMX Block Enable 0: DEINT+DMX module bypass
///                                    * [1] CAR IP Clock gate
///                                    * 1: CAR block Enable     0: Car Module Bypass
///                                    ###
///               %unsigned 3  lsb_ctrl                  0x7
///                                    ###
///                                    * Deint+Dmx Output 8bits to 10bits depth enhancement control. Random bits are added to convert 8 to 10bit.
///                                    * [0]: In 3 channel 10bit output [1:0] as random
///                                    * [1]: In 3 channel 10bit output [11:10] as random
///                                    * [2]: In 3 channel 10bit output [21:20] as random
///                                    ###
///               %unsigned 3  temprl_ctrl               0xFF
///                                    ###
///                                    * Random LSB generation Temporal control
///                                    ###
///               %unsigned 1  bypass                    0x0
///                                    ###
///                                    * 1: DEINT+DMX Block data bypass
///                                    * 0: DEINT+DMX module through pass
///                                    ###
///               %%        23         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       9b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VPTOP
#define h_VPTOP (){}

    #define     RA_VPTOP_CFG0                                  0x0000

    #define     BA_VPTOP_CFG0_clkgate                          0x0000
    #define     B16VPTOP_CFG0_clkgate                          0x0000
    #define   LSb32VPTOP_CFG0_clkgate                             0
    #define   LSb16VPTOP_CFG0_clkgate                             0
    #define       bVPTOP_CFG0_clkgate                          2
    #define   MSK32VPTOP_CFG0_clkgate                             0x00000003

    #define     BA_VPTOP_CFG0_lsb_ctrl                         0x0000
    #define     B16VPTOP_CFG0_lsb_ctrl                         0x0000
    #define   LSb32VPTOP_CFG0_lsb_ctrl                            2
    #define   LSb16VPTOP_CFG0_lsb_ctrl                            2
    #define       bVPTOP_CFG0_lsb_ctrl                         3
    #define   MSK32VPTOP_CFG0_lsb_ctrl                            0x0000001C

    #define     BA_VPTOP_CFG0_temprl_ctrl                      0x0000
    #define     B16VPTOP_CFG0_temprl_ctrl                      0x0000
    #define   LSb32VPTOP_CFG0_temprl_ctrl                         5
    #define   LSb16VPTOP_CFG0_temprl_ctrl                         5
    #define       bVPTOP_CFG0_temprl_ctrl                      3
    #define   MSK32VPTOP_CFG0_temprl_ctrl                         0x000000E0

    #define     BA_VPTOP_CFG0_bypass                           0x0001
    #define     B16VPTOP_CFG0_bypass                           0x0000
    #define   LSb32VPTOP_CFG0_bypass                              8
    #define   LSb16VPTOP_CFG0_bypass                              8
    #define       bVPTOP_CFG0_bypass                           1
    #define   MSK32VPTOP_CFG0_bypass                              0x00000100
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VPTOP {
    ///////////////////////////////////////////////////////////
    #define   GET32VPTOP_CFG0_clkgate(r32)                     _BFGET_(r32, 1, 0)
    #define   SET32VPTOP_CFG0_clkgate(r32,v)                   _BFSET_(r32, 1, 0,v)
    #define   GET16VPTOP_CFG0_clkgate(r16)                     _BFGET_(r16, 1, 0)
    #define   SET16VPTOP_CFG0_clkgate(r16,v)                   _BFSET_(r16, 1, 0,v)

    #define   GET32VPTOP_CFG0_lsb_ctrl(r32)                    _BFGET_(r32, 4, 2)
    #define   SET32VPTOP_CFG0_lsb_ctrl(r32,v)                  _BFSET_(r32, 4, 2,v)
    #define   GET16VPTOP_CFG0_lsb_ctrl(r16)                    _BFGET_(r16, 4, 2)
    #define   SET16VPTOP_CFG0_lsb_ctrl(r16,v)                  _BFSET_(r16, 4, 2,v)

    #define   GET32VPTOP_CFG0_temprl_ctrl(r32)                 _BFGET_(r32, 7, 5)
    #define   SET32VPTOP_CFG0_temprl_ctrl(r32,v)               _BFSET_(r32, 7, 5,v)
    #define   GET16VPTOP_CFG0_temprl_ctrl(r16)                 _BFGET_(r16, 7, 5)
    #define   SET16VPTOP_CFG0_temprl_ctrl(r16,v)               _BFSET_(r16, 7, 5,v)

    #define   GET32VPTOP_CFG0_bypass(r32)                      _BFGET_(r32, 8, 8)
    #define   SET32VPTOP_CFG0_bypass(r32,v)                    _BFSET_(r32, 8, 8,v)
    #define   GET16VPTOP_CFG0_bypass(r16)                      _BFGET_(r16, 8, 8)
    #define   SET16VPTOP_CFG0_bypass(r16,v)                    _BFSET_(r16, 8, 8,v)

    #define     w32VPTOP_CFG0                                  {\
            UNSG32 uCFG0_clkgate                               :  2;\
            UNSG32 uCFG0_lsb_ctrl                              :  3;\
            UNSG32 uCFG0_temprl_ctrl                           :  3;\
            UNSG32 uCFG0_bypass                                :  1;\
            UNSG32 RSVDx0_b9                                   : 23;\
          }
    union { UNSG32 u32VPTOP_CFG0;
            struct w32VPTOP_CFG0;
          };
    ///////////////////////////////////////////////////////////
    } SIE_VPTOP;

    typedef union  T32VPTOP_CFG0
          { UNSG32 u32;
            struct w32VPTOP_CFG0;
                 } T32VPTOP_CFG0;
    ///////////////////////////////////////////////////////////

    typedef union  TVPTOP_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32VPTOP_CFG0;
                   };
                 } TVPTOP_CFG0;

    ///////////////////////////////////////////////////////////
     SIGN32 VPTOP_drvrd(SIE_VPTOP *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VPTOP_drvwr(SIE_VPTOP *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VPTOP_reset(SIE_VPTOP *p);
     SIGN32 VPTOP_cmp  (SIE_VPTOP *p, SIE_VPTOP *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VPTOP_check(p,pie,pfx,hLOG) VPTOP_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VPTOP_print(p,    pfx,hLOG) VPTOP_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VPTOP
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE UPS_420_422_SP          biu              (4,4)
///     ###
///     * Register specification of interface UPS_420_422
///     * Defines the size of the UPS_420_422
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 1  enable                    0x0
///                                    ###
///                                    * 1'd1 : enable ups420_422
///                                    * 1'd0 : bypass
///                                    ###
///               %unsigned 1  cswap_regs                0x0
///                                    ###
///                                    * if enable, swaps output choma
///                                    ###
///               %unsigned 1  yshift_regs               0x0
///                                    ###
///                                    * Advances output luma by 1 clock.
///                                    ###
///               %unsigned 1  cshift_regs               0x0
///                                    ###
///                                    * Delayed output chroma by 1 clock
///                                    ###
///               %unsigned 1  sft_rst                   0x0
///                                    ###
///                                    * This is active high clear or soft reset bit. When it is high, UPS_420_422 reset to initial state.
///                                    ###
///               %unsigned 1  use_blank                 0x0
///                                    ###
///                                    * 0 : Use boundary pixel repetition for boundary interpolation
///                                    * 1 : Use blank pixel programmed using yblank_regs and cblank_regs for boundary interpolation.
///                                    ###
///               %unsigned 8  yblank_regs               0x0
///                                    ###
///                                    * luma blank value for initial and end of line pixel taps. For 8 bit design, LSB 8 bits are used.
///                                    ###
///               %unsigned 8  cblank_regs               0x80
///                                    ###
///                                    * chroma blank value for initial and end of line pixel taps. For 8 bit design, LSB 8 bits are used.
///                                    ###
///               %%        10         # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %unsigned 13 ups_c0                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 0 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c1                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 1 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 13 ups_c2                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 2 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c3                    0x0
///                                    ###
///                                    * 13 bit upsampler coefficient 3 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %unsigned 13 ups_c4                    0x400
///                                    ###
///                                    * 13 bit upsampler coefficient 4 in 2s complement format.
///                                    ###
///               %unsigned 13 ups_c5                    0x800
///                                    ###
///                                    * 13 bit upsampler coefficient 5 in 2s complement format.
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %unsigned 13 ups_c6                    0x400
///                                    ###
///                                    * 13 bit upsampler coefficient 6 in 2s complement format.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 13 hres_regs                 0xF00
///                                    ###
///                                    * this should be programmed with active pixel count in a line.
///                                    ###
///               %unsigned 13 htot_regs                 0x1130
///                                    ###
///                                    * this should be programmed with total pixel count in line.
///                                    ###
///               %unsigned 1  auto_pixcnt               0x0
///                                    ###
///                                    * 0: hres_regs and htot_regs will be used to generate hde timing and delay.
///                                    * 1: automatically count hres and htotal pixel count. This will require hde is blanking region.
///                                    ###
///               %%        5          # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 6  top_crop                  0x0
///                                    ###
///                                    * Crop for top lines.(It should be multiple of 2)
///                                    ###
///               %unsigned 6  bot_crop                  0x0
///                                    ###
///                                    * Crop for bot lines.(It should be multiple of 2)
///                                    ###
///               %unsigned 6  left_crop                 0x0
///                                    ###
///                                    * Crop for left pixels.
///                                    ###
///               %unsigned 6  right_crop                0x0
///                                    ###
///                                    * Crop for right pixels.
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x0001C CFG7                 (P)
///               %unsigned 13 vres_regs                 0x870
///                                    ###
///                                    * Input vertical resolution
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00020 CFG8                 (P)
///               %unsigned 1  pdwn_regs                 0x0
///                                    ###
///                                    * Wired to internal SRAMs' pwdn port.
///                                    ###
///               %unsigned 1  pdlvmc_regs               0x0
///                                    ###
///                                    * Wired to internal SRAMs' pdlvmc port.
///                                    ###
///               %unsigned 1  pdfvssm_regs              0x0
///                                    ###
///                                    * Wired to internal SRAMs' pdfvssm ports.
///                                    ###
///               %unsigned 2  dpwr_regs                 0x3
///                                    ###
///                                    * Internal Dynamic power control.
///                                    * Bit[1] - cg_en: controls clock to internal logic.
///                                    * 1: enables internal dynamic clock gating.
///                                    * 0: disables internal dynamic clock gating.
///                                    * Bit[0] - ctrl_cen: controls CEN to SRAMs
///                                    * 1: enables SRAMs dynamically.
///                                    * 0: SRAMs always enabled.
///                                    * End of UPS_420_422 register group
///                                    ###
///               %%        27         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      36B, bits:     182b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_UPS_420_422_SP
#define h_UPS_420_422_SP (){}

    #define     RA_UPS_420_422_SP_CFG0                         0x0000

    #define     BA_UPS_420_422_SP_CFG0_enable                  0x0000
    #define     B16UPS_420_422_SP_CFG0_enable                  0x0000
    #define   LSb32UPS_420_422_SP_CFG0_enable                     0
    #define   LSb16UPS_420_422_SP_CFG0_enable                     0
    #define       bUPS_420_422_SP_CFG0_enable                  1
    #define   MSK32UPS_420_422_SP_CFG0_enable                     0x00000001

    #define     BA_UPS_420_422_SP_CFG0_cswap_regs              0x0000
    #define     B16UPS_420_422_SP_CFG0_cswap_regs              0x0000
    #define   LSb32UPS_420_422_SP_CFG0_cswap_regs                 1
    #define   LSb16UPS_420_422_SP_CFG0_cswap_regs                 1
    #define       bUPS_420_422_SP_CFG0_cswap_regs              1
    #define   MSK32UPS_420_422_SP_CFG0_cswap_regs                 0x00000002

    #define     BA_UPS_420_422_SP_CFG0_yshift_regs             0x0000
    #define     B16UPS_420_422_SP_CFG0_yshift_regs             0x0000
    #define   LSb32UPS_420_422_SP_CFG0_yshift_regs                2
    #define   LSb16UPS_420_422_SP_CFG0_yshift_regs                2
    #define       bUPS_420_422_SP_CFG0_yshift_regs             1
    #define   MSK32UPS_420_422_SP_CFG0_yshift_regs                0x00000004

    #define     BA_UPS_420_422_SP_CFG0_cshift_regs             0x0000
    #define     B16UPS_420_422_SP_CFG0_cshift_regs             0x0000
    #define   LSb32UPS_420_422_SP_CFG0_cshift_regs                3
    #define   LSb16UPS_420_422_SP_CFG0_cshift_regs                3
    #define       bUPS_420_422_SP_CFG0_cshift_regs             1
    #define   MSK32UPS_420_422_SP_CFG0_cshift_regs                0x00000008

    #define     BA_UPS_420_422_SP_CFG0_sft_rst                 0x0000
    #define     B16UPS_420_422_SP_CFG0_sft_rst                 0x0000
    #define   LSb32UPS_420_422_SP_CFG0_sft_rst                    4
    #define   LSb16UPS_420_422_SP_CFG0_sft_rst                    4
    #define       bUPS_420_422_SP_CFG0_sft_rst                 1
    #define   MSK32UPS_420_422_SP_CFG0_sft_rst                    0x00000010

    #define     BA_UPS_420_422_SP_CFG0_use_blank               0x0000
    #define     B16UPS_420_422_SP_CFG0_use_blank               0x0000
    #define   LSb32UPS_420_422_SP_CFG0_use_blank                  5
    #define   LSb16UPS_420_422_SP_CFG0_use_blank                  5
    #define       bUPS_420_422_SP_CFG0_use_blank               1
    #define   MSK32UPS_420_422_SP_CFG0_use_blank                  0x00000020

    #define     BA_UPS_420_422_SP_CFG0_yblank_regs             0x0000
    #define     B16UPS_420_422_SP_CFG0_yblank_regs             0x0000
    #define   LSb32UPS_420_422_SP_CFG0_yblank_regs                6
    #define   LSb16UPS_420_422_SP_CFG0_yblank_regs                6
    #define       bUPS_420_422_SP_CFG0_yblank_regs             8
    #define   MSK32UPS_420_422_SP_CFG0_yblank_regs                0x00003FC0

    #define     BA_UPS_420_422_SP_CFG0_cblank_regs             0x0001
    #define     B16UPS_420_422_SP_CFG0_cblank_regs             0x0000
    #define   LSb32UPS_420_422_SP_CFG0_cblank_regs                14
    #define   LSb16UPS_420_422_SP_CFG0_cblank_regs                14
    #define       bUPS_420_422_SP_CFG0_cblank_regs             8
    #define   MSK32UPS_420_422_SP_CFG0_cblank_regs                0x003FC000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_CFG1                         0x0004

    #define     BA_UPS_420_422_SP_CFG1_ups_c0                  0x0004
    #define     B16UPS_420_422_SP_CFG1_ups_c0                  0x0004
    #define   LSb32UPS_420_422_SP_CFG1_ups_c0                     0
    #define   LSb16UPS_420_422_SP_CFG1_ups_c0                     0
    #define       bUPS_420_422_SP_CFG1_ups_c0                  13
    #define   MSK32UPS_420_422_SP_CFG1_ups_c0                     0x00001FFF

    #define     BA_UPS_420_422_SP_CFG1_ups_c1                  0x0005
    #define     B16UPS_420_422_SP_CFG1_ups_c1                  0x0004
    #define   LSb32UPS_420_422_SP_CFG1_ups_c1                     13
    #define   LSb16UPS_420_422_SP_CFG1_ups_c1                     13
    #define       bUPS_420_422_SP_CFG1_ups_c1                  13
    #define   MSK32UPS_420_422_SP_CFG1_ups_c1                     0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_CFG2                         0x0008

    #define     BA_UPS_420_422_SP_CFG2_ups_c2                  0x0008
    #define     B16UPS_420_422_SP_CFG2_ups_c2                  0x0008
    #define   LSb32UPS_420_422_SP_CFG2_ups_c2                     0
    #define   LSb16UPS_420_422_SP_CFG2_ups_c2                     0
    #define       bUPS_420_422_SP_CFG2_ups_c2                  13
    #define   MSK32UPS_420_422_SP_CFG2_ups_c2                     0x00001FFF

    #define     BA_UPS_420_422_SP_CFG2_ups_c3                  0x0009
    #define     B16UPS_420_422_SP_CFG2_ups_c3                  0x0008
    #define   LSb32UPS_420_422_SP_CFG2_ups_c3                     13
    #define   LSb16UPS_420_422_SP_CFG2_ups_c3                     13
    #define       bUPS_420_422_SP_CFG2_ups_c3                  13
    #define   MSK32UPS_420_422_SP_CFG2_ups_c3                     0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_CFG3                         0x000C

    #define     BA_UPS_420_422_SP_CFG3_ups_c4                  0x000C
    #define     B16UPS_420_422_SP_CFG3_ups_c4                  0x000C
    #define   LSb32UPS_420_422_SP_CFG3_ups_c4                     0
    #define   LSb16UPS_420_422_SP_CFG3_ups_c4                     0
    #define       bUPS_420_422_SP_CFG3_ups_c4                  13
    #define   MSK32UPS_420_422_SP_CFG3_ups_c4                     0x00001FFF

    #define     BA_UPS_420_422_SP_CFG3_ups_c5                  0x000D
    #define     B16UPS_420_422_SP_CFG3_ups_c5                  0x000C
    #define   LSb32UPS_420_422_SP_CFG3_ups_c5                     13
    #define   LSb16UPS_420_422_SP_CFG3_ups_c5                     13
    #define       bUPS_420_422_SP_CFG3_ups_c5                  13
    #define   MSK32UPS_420_422_SP_CFG3_ups_c5                     0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_CFG4                         0x0010

    #define     BA_UPS_420_422_SP_CFG4_ups_c6                  0x0010
    #define     B16UPS_420_422_SP_CFG4_ups_c6                  0x0010
    #define   LSb32UPS_420_422_SP_CFG4_ups_c6                     0
    #define   LSb16UPS_420_422_SP_CFG4_ups_c6                     0
    #define       bUPS_420_422_SP_CFG4_ups_c6                  13
    #define   MSK32UPS_420_422_SP_CFG4_ups_c6                     0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_CFG5                         0x0014

    #define     BA_UPS_420_422_SP_CFG5_hres_regs               0x0014
    #define     B16UPS_420_422_SP_CFG5_hres_regs               0x0014
    #define   LSb32UPS_420_422_SP_CFG5_hres_regs                  0
    #define   LSb16UPS_420_422_SP_CFG5_hres_regs                  0
    #define       bUPS_420_422_SP_CFG5_hres_regs               13
    #define   MSK32UPS_420_422_SP_CFG5_hres_regs                  0x00001FFF

    #define     BA_UPS_420_422_SP_CFG5_htot_regs               0x0015
    #define     B16UPS_420_422_SP_CFG5_htot_regs               0x0014
    #define   LSb32UPS_420_422_SP_CFG5_htot_regs                  13
    #define   LSb16UPS_420_422_SP_CFG5_htot_regs                  13
    #define       bUPS_420_422_SP_CFG5_htot_regs               13
    #define   MSK32UPS_420_422_SP_CFG5_htot_regs                  0x03FFE000

    #define     BA_UPS_420_422_SP_CFG5_auto_pixcnt             0x0017
    #define     B16UPS_420_422_SP_CFG5_auto_pixcnt             0x0016
    #define   LSb32UPS_420_422_SP_CFG5_auto_pixcnt                26
    #define   LSb16UPS_420_422_SP_CFG5_auto_pixcnt                10
    #define       bUPS_420_422_SP_CFG5_auto_pixcnt             1
    #define   MSK32UPS_420_422_SP_CFG5_auto_pixcnt                0x04000000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_CFG6                         0x0018

    #define     BA_UPS_420_422_SP_CFG6_top_crop                0x0018
    #define     B16UPS_420_422_SP_CFG6_top_crop                0x0018
    #define   LSb32UPS_420_422_SP_CFG6_top_crop                   0
    #define   LSb16UPS_420_422_SP_CFG6_top_crop                   0
    #define       bUPS_420_422_SP_CFG6_top_crop                6
    #define   MSK32UPS_420_422_SP_CFG6_top_crop                   0x0000003F

    #define     BA_UPS_420_422_SP_CFG6_bot_crop                0x0018
    #define     B16UPS_420_422_SP_CFG6_bot_crop                0x0018
    #define   LSb32UPS_420_422_SP_CFG6_bot_crop                   6
    #define   LSb16UPS_420_422_SP_CFG6_bot_crop                   6
    #define       bUPS_420_422_SP_CFG6_bot_crop                6
    #define   MSK32UPS_420_422_SP_CFG6_bot_crop                   0x00000FC0

    #define     BA_UPS_420_422_SP_CFG6_left_crop               0x0019
    #define     B16UPS_420_422_SP_CFG6_left_crop               0x0018
    #define   LSb32UPS_420_422_SP_CFG6_left_crop                  12
    #define   LSb16UPS_420_422_SP_CFG6_left_crop                  12
    #define       bUPS_420_422_SP_CFG6_left_crop               6
    #define   MSK32UPS_420_422_SP_CFG6_left_crop                  0x0003F000

    #define     BA_UPS_420_422_SP_CFG6_right_crop              0x001A
    #define     B16UPS_420_422_SP_CFG6_right_crop              0x001A
    #define   LSb32UPS_420_422_SP_CFG6_right_crop                 18
    #define   LSb16UPS_420_422_SP_CFG6_right_crop                 2
    #define       bUPS_420_422_SP_CFG6_right_crop              6
    #define   MSK32UPS_420_422_SP_CFG6_right_crop                 0x00FC0000
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_CFG7                         0x001C

    #define     BA_UPS_420_422_SP_CFG7_vres_regs               0x001C
    #define     B16UPS_420_422_SP_CFG7_vres_regs               0x001C
    #define   LSb32UPS_420_422_SP_CFG7_vres_regs                  0
    #define   LSb16UPS_420_422_SP_CFG7_vres_regs                  0
    #define       bUPS_420_422_SP_CFG7_vres_regs               13
    #define   MSK32UPS_420_422_SP_CFG7_vres_regs                  0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_UPS_420_422_SP_CFG8                         0x0020

    #define     BA_UPS_420_422_SP_CFG8_pdwn_regs               0x0020
    #define     B16UPS_420_422_SP_CFG8_pdwn_regs               0x0020
    #define   LSb32UPS_420_422_SP_CFG8_pdwn_regs                  0
    #define   LSb16UPS_420_422_SP_CFG8_pdwn_regs                  0
    #define       bUPS_420_422_SP_CFG8_pdwn_regs               1
    #define   MSK32UPS_420_422_SP_CFG8_pdwn_regs                  0x00000001

    #define     BA_UPS_420_422_SP_CFG8_pdlvmc_regs             0x0020
    #define     B16UPS_420_422_SP_CFG8_pdlvmc_regs             0x0020
    #define   LSb32UPS_420_422_SP_CFG8_pdlvmc_regs                1
    #define   LSb16UPS_420_422_SP_CFG8_pdlvmc_regs                1
    #define       bUPS_420_422_SP_CFG8_pdlvmc_regs             1
    #define   MSK32UPS_420_422_SP_CFG8_pdlvmc_regs                0x00000002

    #define     BA_UPS_420_422_SP_CFG8_pdfvssm_regs            0x0020
    #define     B16UPS_420_422_SP_CFG8_pdfvssm_regs            0x0020
    #define   LSb32UPS_420_422_SP_CFG8_pdfvssm_regs               2
    #define   LSb16UPS_420_422_SP_CFG8_pdfvssm_regs               2
    #define       bUPS_420_422_SP_CFG8_pdfvssm_regs            1
    #define   MSK32UPS_420_422_SP_CFG8_pdfvssm_regs               0x00000004

    #define     BA_UPS_420_422_SP_CFG8_dpwr_regs               0x0020
    #define     B16UPS_420_422_SP_CFG8_dpwr_regs               0x0020
    #define   LSb32UPS_420_422_SP_CFG8_dpwr_regs                  3
    #define   LSb16UPS_420_422_SP_CFG8_dpwr_regs                  3
    #define       bUPS_420_422_SP_CFG8_dpwr_regs               2
    #define   MSK32UPS_420_422_SP_CFG8_dpwr_regs                  0x00000018
    ///////////////////////////////////////////////////////////

    typedef struct SIE_UPS_420_422_SP {
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_CFG0_enable(r32)             _BFGET_(r32, 0, 0)
    #define   SET32UPS_420_422_SP_CFG0_enable(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16UPS_420_422_SP_CFG0_enable(r16)             _BFGET_(r16, 0, 0)
    #define   SET16UPS_420_422_SP_CFG0_enable(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32UPS_420_422_SP_CFG0_cswap_regs(r32)         _BFGET_(r32, 1, 1)
    #define   SET32UPS_420_422_SP_CFG0_cswap_regs(r32,v)       _BFSET_(r32, 1, 1,v)
    #define   GET16UPS_420_422_SP_CFG0_cswap_regs(r16)         _BFGET_(r16, 1, 1)
    #define   SET16UPS_420_422_SP_CFG0_cswap_regs(r16,v)       _BFSET_(r16, 1, 1,v)

    #define   GET32UPS_420_422_SP_CFG0_yshift_regs(r32)        _BFGET_(r32, 2, 2)
    #define   SET32UPS_420_422_SP_CFG0_yshift_regs(r32,v)      _BFSET_(r32, 2, 2,v)
    #define   GET16UPS_420_422_SP_CFG0_yshift_regs(r16)        _BFGET_(r16, 2, 2)
    #define   SET16UPS_420_422_SP_CFG0_yshift_regs(r16,v)      _BFSET_(r16, 2, 2,v)

    #define   GET32UPS_420_422_SP_CFG0_cshift_regs(r32)        _BFGET_(r32, 3, 3)
    #define   SET32UPS_420_422_SP_CFG0_cshift_regs(r32,v)      _BFSET_(r32, 3, 3,v)
    #define   GET16UPS_420_422_SP_CFG0_cshift_regs(r16)        _BFGET_(r16, 3, 3)
    #define   SET16UPS_420_422_SP_CFG0_cshift_regs(r16,v)      _BFSET_(r16, 3, 3,v)

    #define   GET32UPS_420_422_SP_CFG0_sft_rst(r32)            _BFGET_(r32, 4, 4)
    #define   SET32UPS_420_422_SP_CFG0_sft_rst(r32,v)          _BFSET_(r32, 4, 4,v)
    #define   GET16UPS_420_422_SP_CFG0_sft_rst(r16)            _BFGET_(r16, 4, 4)
    #define   SET16UPS_420_422_SP_CFG0_sft_rst(r16,v)          _BFSET_(r16, 4, 4,v)

    #define   GET32UPS_420_422_SP_CFG0_use_blank(r32)          _BFGET_(r32, 5, 5)
    #define   SET32UPS_420_422_SP_CFG0_use_blank(r32,v)        _BFSET_(r32, 5, 5,v)
    #define   GET16UPS_420_422_SP_CFG0_use_blank(r16)          _BFGET_(r16, 5, 5)
    #define   SET16UPS_420_422_SP_CFG0_use_blank(r16,v)        _BFSET_(r16, 5, 5,v)

    #define   GET32UPS_420_422_SP_CFG0_yblank_regs(r32)        _BFGET_(r32,13, 6)
    #define   SET32UPS_420_422_SP_CFG0_yblank_regs(r32,v)      _BFSET_(r32,13, 6,v)
    #define   GET16UPS_420_422_SP_CFG0_yblank_regs(r16)        _BFGET_(r16,13, 6)
    #define   SET16UPS_420_422_SP_CFG0_yblank_regs(r16,v)      _BFSET_(r16,13, 6,v)

    #define   GET32UPS_420_422_SP_CFG0_cblank_regs(r32)        _BFGET_(r32,21,14)
    #define   SET32UPS_420_422_SP_CFG0_cblank_regs(r32,v)      _BFSET_(r32,21,14,v)

    #define     w32UPS_420_422_SP_CFG0                         {\
            UNSG32 uCFG0_enable                                :  1;\
            UNSG32 uCFG0_cswap_regs                            :  1;\
            UNSG32 uCFG0_yshift_regs                           :  1;\
            UNSG32 uCFG0_cshift_regs                           :  1;\
            UNSG32 uCFG0_sft_rst                               :  1;\
            UNSG32 uCFG0_use_blank                             :  1;\
            UNSG32 uCFG0_yblank_regs                           :  8;\
            UNSG32 uCFG0_cblank_regs                           :  8;\
            UNSG32 RSVDx0_b22                                  : 10;\
          }
    union { UNSG32 u32UPS_420_422_SP_CFG0;
            struct w32UPS_420_422_SP_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_CFG1_ups_c0(r32)             _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_CFG1_ups_c0(r32,v)           _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_CFG1_ups_c0(r16)             _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_CFG1_ups_c0(r16,v)           _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_SP_CFG1_ups_c1(r32)             _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_SP_CFG1_ups_c1(r32,v)           _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_SP_CFG1                         {\
            UNSG32 uCFG1_ups_c0                                : 13;\
            UNSG32 uCFG1_ups_c1                                : 13;\
            UNSG32 RSVDx4_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_SP_CFG1;
            struct w32UPS_420_422_SP_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_CFG2_ups_c2(r32)             _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_CFG2_ups_c2(r32,v)           _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_CFG2_ups_c2(r16)             _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_CFG2_ups_c2(r16,v)           _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_SP_CFG2_ups_c3(r32)             _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_SP_CFG2_ups_c3(r32,v)           _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_SP_CFG2                         {\
            UNSG32 uCFG2_ups_c2                                : 13;\
            UNSG32 uCFG2_ups_c3                                : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_SP_CFG2;
            struct w32UPS_420_422_SP_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_CFG3_ups_c4(r32)             _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_CFG3_ups_c4(r32,v)           _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_CFG3_ups_c4(r16)             _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_CFG3_ups_c4(r16,v)           _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_SP_CFG3_ups_c5(r32)             _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_SP_CFG3_ups_c5(r32,v)           _BFSET_(r32,25,13,v)

    #define     w32UPS_420_422_SP_CFG3                         {\
            UNSG32 uCFG3_ups_c4                                : 13;\
            UNSG32 uCFG3_ups_c5                                : 13;\
            UNSG32 RSVDxC_b26                                  :  6;\
          }
    union { UNSG32 u32UPS_420_422_SP_CFG3;
            struct w32UPS_420_422_SP_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_CFG4_ups_c6(r32)             _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_CFG4_ups_c6(r32,v)           _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_CFG4_ups_c6(r16)             _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_CFG4_ups_c6(r16,v)           _BFSET_(r16,12, 0,v)

    #define     w32UPS_420_422_SP_CFG4                         {\
            UNSG32 uCFG4_ups_c6                                : 13;\
            UNSG32 RSVDx10_b13                                 : 19;\
          }
    union { UNSG32 u32UPS_420_422_SP_CFG4;
            struct w32UPS_420_422_SP_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_CFG5_hres_regs(r32)          _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_CFG5_hres_regs(r32,v)        _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_CFG5_hres_regs(r16)          _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_CFG5_hres_regs(r16,v)        _BFSET_(r16,12, 0,v)

    #define   GET32UPS_420_422_SP_CFG5_htot_regs(r32)          _BFGET_(r32,25,13)
    #define   SET32UPS_420_422_SP_CFG5_htot_regs(r32,v)        _BFSET_(r32,25,13,v)

    #define   GET32UPS_420_422_SP_CFG5_auto_pixcnt(r32)        _BFGET_(r32,26,26)
    #define   SET32UPS_420_422_SP_CFG5_auto_pixcnt(r32,v)      _BFSET_(r32,26,26,v)
    #define   GET16UPS_420_422_SP_CFG5_auto_pixcnt(r16)        _BFGET_(r16,10,10)
    #define   SET16UPS_420_422_SP_CFG5_auto_pixcnt(r16,v)      _BFSET_(r16,10,10,v)

    #define     w32UPS_420_422_SP_CFG5                         {\
            UNSG32 uCFG5_hres_regs                             : 13;\
            UNSG32 uCFG5_htot_regs                             : 13;\
            UNSG32 uCFG5_auto_pixcnt                           :  1;\
            UNSG32 RSVDx14_b27                                 :  5;\
          }
    union { UNSG32 u32UPS_420_422_SP_CFG5;
            struct w32UPS_420_422_SP_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_CFG6_top_crop(r32)           _BFGET_(r32, 5, 0)
    #define   SET32UPS_420_422_SP_CFG6_top_crop(r32,v)         _BFSET_(r32, 5, 0,v)
    #define   GET16UPS_420_422_SP_CFG6_top_crop(r16)           _BFGET_(r16, 5, 0)
    #define   SET16UPS_420_422_SP_CFG6_top_crop(r16,v)         _BFSET_(r16, 5, 0,v)

    #define   GET32UPS_420_422_SP_CFG6_bot_crop(r32)           _BFGET_(r32,11, 6)
    #define   SET32UPS_420_422_SP_CFG6_bot_crop(r32,v)         _BFSET_(r32,11, 6,v)
    #define   GET16UPS_420_422_SP_CFG6_bot_crop(r16)           _BFGET_(r16,11, 6)
    #define   SET16UPS_420_422_SP_CFG6_bot_crop(r16,v)         _BFSET_(r16,11, 6,v)

    #define   GET32UPS_420_422_SP_CFG6_left_crop(r32)          _BFGET_(r32,17,12)
    #define   SET32UPS_420_422_SP_CFG6_left_crop(r32,v)        _BFSET_(r32,17,12,v)

    #define   GET32UPS_420_422_SP_CFG6_right_crop(r32)         _BFGET_(r32,23,18)
    #define   SET32UPS_420_422_SP_CFG6_right_crop(r32,v)       _BFSET_(r32,23,18,v)
    #define   GET16UPS_420_422_SP_CFG6_right_crop(r16)         _BFGET_(r16, 7, 2)
    #define   SET16UPS_420_422_SP_CFG6_right_crop(r16,v)       _BFSET_(r16, 7, 2,v)

    #define     w32UPS_420_422_SP_CFG6                         {\
            UNSG32 uCFG6_top_crop                              :  6;\
            UNSG32 uCFG6_bot_crop                              :  6;\
            UNSG32 uCFG6_left_crop                             :  6;\
            UNSG32 uCFG6_right_crop                            :  6;\
            UNSG32 RSVDx18_b24                                 :  8;\
          }
    union { UNSG32 u32UPS_420_422_SP_CFG6;
            struct w32UPS_420_422_SP_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_CFG7_vres_regs(r32)          _BFGET_(r32,12, 0)
    #define   SET32UPS_420_422_SP_CFG7_vres_regs(r32,v)        _BFSET_(r32,12, 0,v)
    #define   GET16UPS_420_422_SP_CFG7_vres_regs(r16)          _BFGET_(r16,12, 0)
    #define   SET16UPS_420_422_SP_CFG7_vres_regs(r16,v)        _BFSET_(r16,12, 0,v)

    #define     w32UPS_420_422_SP_CFG7                         {\
            UNSG32 uCFG7_vres_regs                             : 13;\
            UNSG32 RSVDx1C_b13                                 : 19;\
          }
    union { UNSG32 u32UPS_420_422_SP_CFG7;
            struct w32UPS_420_422_SP_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32UPS_420_422_SP_CFG8_pdwn_regs(r32)          _BFGET_(r32, 0, 0)
    #define   SET32UPS_420_422_SP_CFG8_pdwn_regs(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16UPS_420_422_SP_CFG8_pdwn_regs(r16)          _BFGET_(r16, 0, 0)
    #define   SET16UPS_420_422_SP_CFG8_pdwn_regs(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32UPS_420_422_SP_CFG8_pdlvmc_regs(r32)        _BFGET_(r32, 1, 1)
    #define   SET32UPS_420_422_SP_CFG8_pdlvmc_regs(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16UPS_420_422_SP_CFG8_pdlvmc_regs(r16)        _BFGET_(r16, 1, 1)
    #define   SET16UPS_420_422_SP_CFG8_pdlvmc_regs(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32UPS_420_422_SP_CFG8_pdfvssm_regs(r32)       _BFGET_(r32, 2, 2)
    #define   SET32UPS_420_422_SP_CFG8_pdfvssm_regs(r32,v)     _BFSET_(r32, 2, 2,v)
    #define   GET16UPS_420_422_SP_CFG8_pdfvssm_regs(r16)       _BFGET_(r16, 2, 2)
    #define   SET16UPS_420_422_SP_CFG8_pdfvssm_regs(r16,v)     _BFSET_(r16, 2, 2,v)

    #define   GET32UPS_420_422_SP_CFG8_dpwr_regs(r32)          _BFGET_(r32, 4, 3)
    #define   SET32UPS_420_422_SP_CFG8_dpwr_regs(r32,v)        _BFSET_(r32, 4, 3,v)
    #define   GET16UPS_420_422_SP_CFG8_dpwr_regs(r16)          _BFGET_(r16, 4, 3)
    #define   SET16UPS_420_422_SP_CFG8_dpwr_regs(r16,v)        _BFSET_(r16, 4, 3,v)

    #define     w32UPS_420_422_SP_CFG8                         {\
            UNSG32 uCFG8_pdwn_regs                             :  1;\
            UNSG32 uCFG8_pdlvmc_regs                           :  1;\
            UNSG32 uCFG8_pdfvssm_regs                          :  1;\
            UNSG32 uCFG8_dpwr_regs                             :  2;\
            UNSG32 RSVDx20_b5                                  : 27;\
          }
    union { UNSG32 u32UPS_420_422_SP_CFG8;
            struct w32UPS_420_422_SP_CFG8;
          };
    ///////////////////////////////////////////////////////////
    } SIE_UPS_420_422_SP;

    typedef union  T32UPS_420_422_SP_CFG0
          { UNSG32 u32;
            struct w32UPS_420_422_SP_CFG0;
                 } T32UPS_420_422_SP_CFG0;
    typedef union  T32UPS_420_422_SP_CFG1
          { UNSG32 u32;
            struct w32UPS_420_422_SP_CFG1;
                 } T32UPS_420_422_SP_CFG1;
    typedef union  T32UPS_420_422_SP_CFG2
          { UNSG32 u32;
            struct w32UPS_420_422_SP_CFG2;
                 } T32UPS_420_422_SP_CFG2;
    typedef union  T32UPS_420_422_SP_CFG3
          { UNSG32 u32;
            struct w32UPS_420_422_SP_CFG3;
                 } T32UPS_420_422_SP_CFG3;
    typedef union  T32UPS_420_422_SP_CFG4
          { UNSG32 u32;
            struct w32UPS_420_422_SP_CFG4;
                 } T32UPS_420_422_SP_CFG4;
    typedef union  T32UPS_420_422_SP_CFG5
          { UNSG32 u32;
            struct w32UPS_420_422_SP_CFG5;
                 } T32UPS_420_422_SP_CFG5;
    typedef union  T32UPS_420_422_SP_CFG6
          { UNSG32 u32;
            struct w32UPS_420_422_SP_CFG6;
                 } T32UPS_420_422_SP_CFG6;
    typedef union  T32UPS_420_422_SP_CFG7
          { UNSG32 u32;
            struct w32UPS_420_422_SP_CFG7;
                 } T32UPS_420_422_SP_CFG7;
    typedef union  T32UPS_420_422_SP_CFG8
          { UNSG32 u32;
            struct w32UPS_420_422_SP_CFG8;
                 } T32UPS_420_422_SP_CFG8;
    ///////////////////////////////////////////////////////////

    typedef union  TUPS_420_422_SP_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_CFG0;
                   };
                 } TUPS_420_422_SP_CFG0;
    typedef union  TUPS_420_422_SP_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_CFG1;
                   };
                 } TUPS_420_422_SP_CFG1;
    typedef union  TUPS_420_422_SP_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_CFG2;
                   };
                 } TUPS_420_422_SP_CFG2;
    typedef union  TUPS_420_422_SP_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_CFG3;
                   };
                 } TUPS_420_422_SP_CFG3;
    typedef union  TUPS_420_422_SP_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_CFG4;
                   };
                 } TUPS_420_422_SP_CFG4;
    typedef union  TUPS_420_422_SP_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_CFG5;
                   };
                 } TUPS_420_422_SP_CFG5;
    typedef union  TUPS_420_422_SP_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_CFG6;
                   };
                 } TUPS_420_422_SP_CFG6;
    typedef union  TUPS_420_422_SP_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_CFG7;
                   };
                 } TUPS_420_422_SP_CFG7;
    typedef union  TUPS_420_422_SP_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32UPS_420_422_SP_CFG8;
                   };
                 } TUPS_420_422_SP_CFG8;

    ///////////////////////////////////////////////////////////
     SIGN32 UPS_420_422_SP_drvrd(SIE_UPS_420_422_SP *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 UPS_420_422_SP_drvwr(SIE_UPS_420_422_SP *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void UPS_420_422_SP_reset(SIE_UPS_420_422_SP *p);
     SIGN32 UPS_420_422_SP_cmp  (SIE_UPS_420_422_SP *p, SIE_UPS_420_422_SP *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define UPS_420_422_SP_check(p,pie,pfx,hLOG) UPS_420_422_SP_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define UPS_420_422_SP_print(p,    pfx,hLOG) UPS_420_422_SP_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: UPS_420_422_SP
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SCL1D_YC                biu              (4,4)
///     ###
///     * Register specification of interface ADPSCL
///     * Defines the size of the adpscl
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 8  even                      0x80
///                                    ###
///                                    * Initial Phase of the vertical DDA counter for even field.
///                                    ###
///               %unsigned 8  odd                       0x80
///                                    ###
///                                    * Initial Phase of the vertical DDA counter for odd field.
///                                    ###
///               %unsigned 8  hinitph                   0x80
///                                    ###
///                                    * Initial Phase of the horizontal DDA counter.
///                                    * Related fields: hinitph_lsb.
///                                    ###
///               %unsigned 8  ctrl0                     0x0
///                                    ###
///                                    * [1:0]: avg4 filter select. : Not used.
///                                    * [2]: CSC enable : Not Used
///                                    * [3]: HNL enable :
///                                    * [4]: ups enable : Not used.
///                                    * [5]: dns enable : Not used.
///                                    * [6]: dgnl_en : Not used.
///                                    * [7]: split screen enable : Not used.
///                                    ###
///     @ 0x00004 CFG1                 (P)
///               %unsigned 12 ivres                     0x1E0
///                                    ###
///                                    * Input Y resolution
///                                    ###
///               %unsigned 12 ovres                     0x1E0
///                                    ###
///                                    * Output Y resolution
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 13 ihres                     0x2D0
///                                    ###
///                                    * Input X resolution
///                                    ###
///               %unsigned 13 ohres                     0x2D0
///                                    ###
///                                    * Output X resolution
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %unsigned 25 vratio                    0x100000
///                                    ###
///                                    * Vertical DDA Increment = (Input Y resolution * 2^20)/ output Y resolution
///                                    ###
///               %unsigned 3  rsv0                      0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 1  mbp_align                 0x0
///                                    ###
///                                    * Controls 'Most bottom pixel align' mode
///                                    * Must be 0 if Vertically '1:1 or upscale'.
///                                    * 1: the most bottom pixel of input image is used to interpolate the most bottom pixel of output image.
///                                    * 0: image is processed as normal.
///                                    ###
///               %%        3          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %unsigned 25 hratio                    0x100000
///                                    ###
///                                    * Horizontal DDA Increment = (Input X resolution * 2^20)/ output X resolution
///                                    ###
///               %unsigned 3  rsv0                      0x0
///                                    ###
///                                    * Reserved bits
///                                    ###
///               %unsigned 1  mrp_align                 0x0
///                                    ###
///                                    * Controls 'Most right pixel align' mode
///                                    * Must be 0 if Horizontally '1:1 or upscale'.
///                                    * 1: the most right pixel of input image is used to interpolate the most right pixel of output image.
///                                    * 0: image is processed as normal.
///                                    * HNL Down scaling: step size shouldn't exceed 5-bit value.
///                                    ###
///               %%        3          # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 11 memsize                   0x2CF
///                                    ###
///                                    * Last address in the circular line buffer memory
///                                    * Storage is for 3 lines of 1920.
///                                    * Max value for
///                                    * BG5CTpZ1F VIP scaler's Y instance : 0x23F
///                                    * BG5CTpZ1F VIP sacler's C instance: 0x11F
///                                    * BG5CTpZ1F OVP scaler's Y/C instance: 0x23F
///                                    ###
///               %unsigned 16 vwrap                     0x0
///                                    ###
///                                    * The number of scalar clocks the vertical scaling controller waits after its pipe is flushed and before issuing a line-reset signal. This reset signal used to reset the horizontal scalar following the vertical scalar and the memory read logic. If left at the default value of zero, the hardware internally takes care of the wrapback conditions. (Recommended) otherwise, for a non zero value programmed in this register, the internal calculation s in the hardware are overridden by the non zero programmed value.
///                                    ###
///               %%        5          # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 1  ups_cswap                 0x0
///                                    ###
///                                    * Not used
///                                    ###
///               %unsigned 1  ups_cshift                0x0
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 1  ups_yshift                0x0
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 12 ups_yblank                0x0
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 8  fstall                    0x0
///                                    ###
///                                    * fstall_th[6:0]: threshold modification value for forward stall.
///                                    * fstall[7]: Enable forward stall for scalar.
///                                    * 0: Disable
///                                    * 1: Enable
///                                    * Forward stall MAY be disabled (if pftch=1) if
///                                    * Horizontal Up & vertical down, or
///                                    * other vertical downscale with scaling ratio AROUND less than 13%.
///                                    ###
///               %unsigned 8  bstall                    0x0
///                                    ###
///                                    * bstall_th[6:0]: threshold modification value for backward stall.
///                                    * bstall[7]: Enable backward stall for scalar.
///                                    * 0: Disable
///                                    * 1: Enable
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x0001C CFG7                 (P)
///               %unsigned 12 ups_cblank                0x200
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 6  htap_offset               0x0
///                                    ###
///                                    * Tap offset in hscalr. Indicates change in the number of blank pixels at the beginning of the line from the normal calculations.
///                                    * Range: [-7, 7] in 2's complement format. (As per legacy algo programming guide, it was 3 bit and [-3,3])
///                                    ###
///               %unsigned 2  rsv                       0x0
///                                    ###
///                                    * Reserved bit
///                                    ###
///               %unsigned 8  vtap_offset               0x0
///                                    ###
///                                    * Vertical tap offset. Delays the start of vertical scaling of/for the odd field   by those many number of lines.
///                                    * [7:4] for even field.
///                                    * [3:0] for odd field.
///                                    * As no interlaced input support, must program same value for both fields.
///                                    * Range: [0:0xf]
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00020 CFG8                 (P)
///               %unsigned 25 init_ratio                0x100000
///                                    ###
///                                    * Intial DDA increment
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00024 CFG9                 (P)
///               %unsigned 25 inc_ratio                 0x0
///                                    ###
///                                    * Increment to DDA increment
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00028 CFG10                (P)
///               %unsigned 13 nlcres                    0x0
///                                    ###
///                                    * Central undistorted   width of the output image in non linear 3 zone scaling.
///                                    * HNL Down scaling: step size shouldn't exceed 5-bit value.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x0002C CFG11                (P)
///               %unsigned 12 avg4_coeff0               0x840
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 12 avg4_coeff1               0x240
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 8  dign_dr1                  0x50
///                                    ###
///                                    * Not used.
///                                    ###
///     @ 0x00030 CFG12                (P)
///               %unsigned 12 avg4_coeff2               0x240
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 12 avg4_coeff3               0x840
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 8  dign_dr2                  0x14
///                                    ###
///                                    * Not used.
///                                    ###
///     @ 0x00034 CFG13                (P)
///               %unsigned 12 dign_ydiff                0x0
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 12 dign_ddiff                0xA0
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 8  dign_dr3                  0x30
///                                    ###
///                                    * Not used.
///                                    ###
///     @ 0x00038 CFG14                (P)
///               %unsigned 12 hp_offset                 0xF0
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 12 hp_diff                   0x230
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 8  dign_nbr                  0x54
///                                    ###
///                                    * Not used.
///                                    ###
///     @ 0x0003C CFG15                (P)
///               %unsigned 8  ctrl1                     0x0
///                                    ###
///                                    * [0]: sel_1D_adp: Not used.
///                                    * select between 1D scalar and adaptive scalar
///                                    * 0: adaptive scalar
///                                    * 1: 1D scalar
///                                    * [1]: up_down: select between up scalar or down scalar.
///                                    * 0: up scalar
///                                    * 1: down scalar
///                                    * [2]:UPS enable at the input of vscale. Not used.
///                                    * [3]:UPS enable at the output of vscale. Not used.
///                                    * [4]:Select coefficient of UPS at the input of vscale(Used for adaptive scaler mode). Not used.
///                                    * 0 : {80, 0, -304, 0, 1248, 2048, 1248}
///                                    * 1 : {0, 0, 0, 0, 1024, 2048, 1024}
///                                    ###
///               %unsigned 5  hctrl                     0xB
///                                    ###
///                                    * Frac[3:0]: number of fractional bits in the horizontal coefficients (8-12d).
///                                    * sign[4]: stores the format of the scalar horizontal coefficients.
///                                    * 0: Unsigned 12 bit coefficients.
///                                    * 1: signed 12 bit coefficient in sign magnitude format.
///                                    ###
///               %unsigned 5  vctrl                     0xB
///                                    ###
///                                    * Frac[3:0]: number of fractional bits in the vertical coefficients (8-12d).
///                                    * sign[4]: stores the format of the scalar vertical coefficients.
///                                    * 0: Unsigned 12 bit coefficients.
///                                    * 1: signed 12 bit coefficient in sign magnitude format.
///                                    ###
///               %unsigned 4  crop                      0x0
///                                    ###
///                                    * Crops the max first 3 pixel and/or max last 3 pixel before the H-scaler (after 422->444 conversion)
///                                    * [1: 0]: Crop control for first pixels.
///                                    * 00 : No Cropping.
///                                    * 01 : first 1 pixel crop.
///                                    * 10 : first 2 pixel crop.
///                                    * 11 : first 3 pixel crop.
///                                    * [3: 2]: Crop control for last pixels.
///                                    * 00 : No Cropping.
///                                    * 01 : Last 1 pixel crop.
///                                    * 10 : Last 2 pixel crop.
///                                    * 11 : Last 3 pixel crop.
///                                    ###
///               %unsigned 1  hscl11                    0x0
///                                    ###
///                                    * 1: overwrites HLUT coefficients with that of 1:1 case (In particular, 1:1 case, where the horizontal scaling filter unalters the pixel value).
///                                    * 0: no HLUT coefficient overwriting.
///                                    * So if no horizontal scaling and hscale filter is expected to unalter the pixel value, this bit can be enabled and then programming of HLUT coefficients can be skipped.
///                                    * Other Requirements:
///                                    * sel_1D_adp=1 ie., select 1D scaler.
///                                    * 'hctrl' field has to be programmed with '1: signed 12 bit coefficient in sign magnitude format'.
///                                    ###
///               %unsigned 1  vscl11                    0x0
///                                    ###
///                                    * 1: overwrites VLUT coefficients with that of 1:1 case (In particular, 1:1 case, where the horizontal scaling filter unalters the pixel value).
///                                    * 0: no VLUT coefficient overwriting.
///                                    * So if no vertical scaling and vscale filter is expected to unalter the pixel value, this bit can be enabled and then programming of VLUT coefficients can be skipped.
///                                    * Other Requirements:
///                                    * sel_1D_adp=1 i.e., select 1D scaler.
///                                    * 'vctrl' field has to be programmed with '1: signed 12 bit coefficient in sign magnitude format'
///                                    ###
///               %unsigned 1  bypass                    0x0
///                                    ###
///                                    * Not used. Must be programmed to 0.
///                                    ###
///               %unsigned 1  frndsel                   0x0
///                                    ###
///                                    * Controls flagging of frame end i.e., frnd=1.
///                                    * Makes sure that frame output to downstream completes and input frame read is completed from upstream.
///                                    * 1: for downscale case with Vscale at first position .
///                                    * 0: for all other cases(default).
///                                    * Note: frnd flagging is not available if bypass=1 (provided bypass mode is valid), as during bypass mode, none of the non- UPS422-444 logic is functional.
///                                    ###
///               %unsigned 1  hvdcp                     0x0
///                                    ###
///                                    * HSCALE-VSCALE de-coupling selection.
///                                    * =0 disables decoupling.
///                                    * =1 enables decoupling.
///                                    * Enabling decoupling improves HSCALE's request valid mechanism, and allows to interchange H-V scaler's position.
///                                    * Can be enabled for all H-downscale.
///                                    * Can be enabled for H-upscale cases only if ctrl1 register's field up_down =1.
///                                    * frc's dly_de_lrst may be required to re-adjust when hvdcp=1 and when up_down =1. So it is recommended to enable frc's auto_lrst for that combination.
///                                    * For more info, refer to IP design doc.
///                                    ###
///               %unsigned 1  pa_impv_en                0x0
///                                    ###
///                                    * PA based improved RTL logic selection
///                                    * =0 disables PA based improved RTL logic
///                                    * =1 enables PA based improved RTL logic(default)
///                                    ###
///               %unsigned 4  mask_hvswap_en            0x0
///                                    ###
///                                    * [0] : Frame end signal generation.
///                                    * 0 : Enhanced (default).
///                                    * 1 : basic.
///                                    * [1] : scaler input data control.
///                                    * 0 : for HVSWAP OFF(default).
///                                    * 1 : for HVSWAP ON.
///                                    * [3:2] : Reserved.
///                                    ###
///     @ 0x00040 CFG16                (P)
///               %unsigned 1  en_n                      0x0
///                                    ###
///                                    * Enable n lines control logic for scaler.
///                                    ###
///               %unsigned 1  xbstall_en                0x0
///                                    ###
///                                    * It need to be enable to delay the writing to line buffer to support n lines for upscale.
///                                    ###
///               %unsigned 14 xbstall_dly               0x0
///                                    ###
///                                    * xbstall_dly[13] : Sign of delay.
///                                    * 0 : Delay = ohres - (ihres +xbstall_dly[12:0]).
///                                    * 1 : Delay = ohres - (ihres -xbstall_dly[12:0]).
///                                    ###
///               %unsigned 8  ovf_margin                0x0
///                                    ###
///                                    * Programmable margin below fifo_depth, to prevent scaler getting internal overflow. Once the scaler memory content hits the threshold decided by the margin, upstream data flow is stalled irrespective of whether backward stall is enabled or not.
///                                    * Higher the value, more is the margin
///                                    * 0: if pftch=0.
///                                    * Currently, a value of of 0x0A suffices for all V downscale cases.
///                                    ###
///               %unsigned 8  udf_margin                0x0
///                                    ###
///                                    * Programmable margin over minimum data required to start downstream data, to prevent scaler getting internal underflow. Once the scaler memory content hits threshold decided by the margin, downstream data flow is stalled irrespective of whether forward stall is enabled or not.
///                                    * Higher the value, more is the margin
///                                    * 0: if pftch=0.
///                                    * Currently, a value of of 0x14 suffices for all V downscale cases.
///                                    ###
///     @ 0x00044 CFG17                (P)
///               %unsigned 10 lsize                     0xC0
///                                    ###
///                                    * It is number of address needed to fit a line in line memory.
///                                    * For Adaptive scaler
///                                    * Lsize = ihres/10 + (ihres%10?1:0)
///                                    * For 1D scaler
///                                    * HVSWAP OFF:
///                                    * Lsize = min(ihres,ohres)/10 + (min(ihres,ohres)%10?1:0)
///                                    * HVSWAP ON:
///                                    * Lsize= max(ihres,ohres)/10 + (max(ihres,ohres)%10?1:0)
///                                    ###
///               %unsigned 10 lsize_A                   0xC0
///                                    ###
///                                    * Not used.
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x00048 CFG18                (P)
///               %unsigned 1  fifo_mode                 0x0
///                                    ###
///                                    * Can optionally be set only for 'horizontal-only upsale mode', 'horizontal-only downscale mode' and 'bypass (no scaling mode)', where line buffer memory is used as rate control FIFO. (vtaps=1 coeff LUTs are to be programmed). All other scaler registers have to be programmed accordingly.
///                                    * =1 enables scaler's circular line buffer memory to be used as programmable depth FIFO.
///                                    * =0 is normal operation of 1 line storage.
///                                    ###
///               %unsigned 15 fifo_depth                0x0
///                                    ###
///                                    * Valid only if fifo_mode=1or pftch=1..
///                                    * Max memory occupancy (in pixels) in fifo_mode.
///                                    * Upstream (input) is stalled if memory occupancy >= fifo_depth.
///                                    * Max value calculation:
///                                    * wls = floor( (memsize+1) / lsize )   
///                                    * pls = ( (memsize+1) - (lsize*wls) ) * 10   
///                                    * fcp = wls * min(ihres, ohres) + pls.
///                                    * 1) For pftch=1, fifo_depth=fcp.
///                                    * 2) For fifo_mode,
///                                    * a) Max fifo_depth = fcp - 100.
///                                    * b) Min fifo_depth = min(ihres, ohres)
///                                    ###
///               %unsigned 15 fifo_dfst                 0x0
///                                    ###
///                                    * Valid only if fifo_mode=1.
///                                    * Min FIFO/memory occupancy (in pixels) required to start downstream frame.
///                                    * Range: [ min(ihres, ohres), fifo_depth ]
///                                    ###
///               %unsigned 1  pftch                     0x0
///                                    ###
///                                    * =1if en_n=1 and vertically small downscale cases if vertical tap reduction is to be avoided.
///                                    * =0 otherwise.
///                                    * Related register fields: fifo_depth, ovf_margin, udf_margin.
///                                    ###
///     @ 0x0004C CFG19                (P)
///               %unsigned 8  scl_after_crop_h          0x0
///                                    ###
///                                    * No. of pixels cropped horizontally after image is scaled to ohres x ovres.
///                                    * [3:0]: right crop pixels
///                                    * [7:4]: left crop pixels
///                                    ###
///               %unsigned 8  scl_after_crop_v          0x0
///                                    ###
///                                    * No. of pixels cropped vertically after image is scaled to ohres x ovres.
///                                    * [3:0]: bottom crop pixels
///                                    * [7:4]: top crop pixels
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00050 CFG20                (P)
///               %unsigned 1  hlut_pdwn_regs            0x0
///                                    ###
///                                    * Wired to Horizontal coeff LUT SRAMs' pdwn ports.
///                                    ###
///               %unsigned 1  hlut_pdlvmc_regs          0x0
///                                    ###
///                                    * Wired to Horizontal coeff LUT SRAMs' pdlvmc ports.
///                                    ###
///               %unsigned 1  hlut_pdfvssm_regs         0x0
///                                    ###
///                                    * Wired to Horizontal coeff LUT SRAMs' pdfvssm ports.
///                                    ###
///               %unsigned 1  reserved0                 0x0
///                                    ###
///                                    * Reserved bit
///                                    ###
///               %unsigned 1  vlut_pdwn_regs            0x0
///                                    ###
///                                    * Wired to Vertical coeff LUT SRAMs' pdwn ports.
///                                    ###
///               %unsigned 1  vlut_pdlvmc_regs          0x0
///                                    ###
///                                    * Wired to Vertical coeff LUT SRAMs' pdlvmc ports.
///                                    ###
///               %unsigned 1  vlut_pdfvssm_regs         0x0
///                                    ###
///                                    * Wired to Vertical coeff LUT SRAMs' pdfvssm ports.
///                                    ###
///               %unsigned 1  reserved1                 0x0
///                                    ###
///                                    * Reserved bit
///                                    ###
///               %unsigned 3  dpwr_regs                 0x3
///                                    ###
///                                    * Internal dynamic power control.
///                                    * Bit[2] - cg_en: unused. Must be 0. (controls clock to internal logic).
///                                    * Bit[1] - ctrl_lb_cen: Controls CEN to Line buffer SRAMS.
///                                    * Bit[0] - ctrl_lut_cen: control's CEN to LUT SRAMs.
///                                    ###
///               %unsigned 1  Reserved2                 0x0
///                                    ###
///                                    * Reserved bit.
///                                    ###
///               %unsigned 1  syp_yc420_regs            0x1
///                                    ###
///                                    * Used only Chroma 420 instance. Added for programming convenience in basic 420 scaling cases only.
///                                    * =0 : Chroma 420 instance takes independent programming. (Eg: vres for chroma 420 instance is half that of vres for Luma instance).
///                                    * =1 : Chroma 420 instance can be programmed same way as Y instance for basic scaling cases. (Eg: even if Chroma 420 instance works on half vres that of Luma instance, Chroma 420 instance can be programmed with same vres as that of Luma. Basic Y to C420 programming adjustment is done internal to hardware; for registers ivres, ovres, vtap_offset and scl_aft_crop_V; for logic of linear scaling's vertical phase increment).
///                                    ###
///               %unsigned 1  Reserved3                 0x0
///                                    ###
///                                    * Reserved bits.
///                                    ###
///               %unsigned 2  ip_type_regs              0x0
///                                    ###
///                                    * Scaler i/o format is,
///                                    * 0: YUV444 input, YUV444 output (or if Chroma 420/422 is to be scaled as 444). Valid only if the scaler can support YUV444
///                                    * 1: YUV422 input, YUV422 output. Valid only if the scaler can support YUV422.
///                                    * 2: YUV420 input, YUV420 output. Valid only if the scaler can support YUV420.
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00054 CFG21                (P)
///               %unsigned 12 hinitph_lsb               0x0
///                                    ###
///                                    * Least significant bits for programmable horizontal initial phase.
///                                    * Scaler's internal hinitph is now derived as
///                                    * HW's hinitph[19:0] = {hinitph register[7:0], hinitph_lsb register[11:0]}
///                                    * Background:
///                                    * Earlier HW's hinitph[19:0] = {hinitph register[7:0],12'd0}. But for column processesing scaler, the programmable hinitph needs more precision, hence the change.
///                                    * Related fields: hinitph.
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x00058 CFG33                (P)
///               %unsigned 1  lb0_pdwn_regs             0x0
///                                    ###
///                                    * As per separate memory line buffer document, if explicitly specified, wired to group-0 of Line buffer SRAMs' pdwn ports. Else wired to al Line buffer SRAMs pdwn ports.
///                                    ###
///               %unsigned 1  lb0_pdlvmc_regs           0x0
///                                    ###
///                                    * As per separate memory line buffer document, if explicitly specified, wired to group-0 of Line buffer SRAMs' pdlvmc ports. Else wired to al Line buffer SRAMs pdlvmc ports.
///                                    ###
///               %unsigned 1  lb0_pdfvssm_regs          0x0
///                                    ###
///                                    * As per separate memory line buffer document, if explicitly specified, wired to group-0 of Line buffer SRAMs' pdfvssm ports. Else wired to al Line buffer SRAMs pdfvssm ports.
///                                    ###
///               %unsigned 1  reserved0                 0x0
///                                    ###
///                                    * Reserved bit
///                                    * End of scl1d_y c nregister group
///                                    ###
///               %%        28         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      92B, bits:     581b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SCL1D_YC
#define h_SCL1D_YC (){}

    #define     RA_SCL1D_YC_CFG0                               0x0000

    #define     BA_SCL1D_YC_CFG0_even                          0x0000
    #define     B16SCL1D_YC_CFG0_even                          0x0000
    #define   LSb32SCL1D_YC_CFG0_even                             0
    #define   LSb16SCL1D_YC_CFG0_even                             0
    #define       bSCL1D_YC_CFG0_even                          8
    #define   MSK32SCL1D_YC_CFG0_even                             0x000000FF

    #define     BA_SCL1D_YC_CFG0_odd                           0x0001
    #define     B16SCL1D_YC_CFG0_odd                           0x0000
    #define   LSb32SCL1D_YC_CFG0_odd                              8
    #define   LSb16SCL1D_YC_CFG0_odd                              8
    #define       bSCL1D_YC_CFG0_odd                           8
    #define   MSK32SCL1D_YC_CFG0_odd                              0x0000FF00

    #define     BA_SCL1D_YC_CFG0_hinitph                       0x0002
    #define     B16SCL1D_YC_CFG0_hinitph                       0x0002
    #define   LSb32SCL1D_YC_CFG0_hinitph                          16
    #define   LSb16SCL1D_YC_CFG0_hinitph                          0
    #define       bSCL1D_YC_CFG0_hinitph                       8
    #define   MSK32SCL1D_YC_CFG0_hinitph                          0x00FF0000

    #define     BA_SCL1D_YC_CFG0_ctrl0                         0x0003
    #define     B16SCL1D_YC_CFG0_ctrl0                         0x0002
    #define   LSb32SCL1D_YC_CFG0_ctrl0                            24
    #define   LSb16SCL1D_YC_CFG0_ctrl0                            8
    #define       bSCL1D_YC_CFG0_ctrl0                         8
    #define   MSK32SCL1D_YC_CFG0_ctrl0                            0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG1                               0x0004

    #define     BA_SCL1D_YC_CFG1_ivres                         0x0004
    #define     B16SCL1D_YC_CFG1_ivres                         0x0004
    #define   LSb32SCL1D_YC_CFG1_ivres                            0
    #define   LSb16SCL1D_YC_CFG1_ivres                            0
    #define       bSCL1D_YC_CFG1_ivres                         12
    #define   MSK32SCL1D_YC_CFG1_ivres                            0x00000FFF

    #define     BA_SCL1D_YC_CFG1_ovres                         0x0005
    #define     B16SCL1D_YC_CFG1_ovres                         0x0004
    #define   LSb32SCL1D_YC_CFG1_ovres                            12
    #define   LSb16SCL1D_YC_CFG1_ovres                            12
    #define       bSCL1D_YC_CFG1_ovres                         12
    #define   MSK32SCL1D_YC_CFG1_ovres                            0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG2                               0x0008

    #define     BA_SCL1D_YC_CFG2_ihres                         0x0008
    #define     B16SCL1D_YC_CFG2_ihres                         0x0008
    #define   LSb32SCL1D_YC_CFG2_ihres                            0
    #define   LSb16SCL1D_YC_CFG2_ihres                            0
    #define       bSCL1D_YC_CFG2_ihres                         13
    #define   MSK32SCL1D_YC_CFG2_ihres                            0x00001FFF

    #define     BA_SCL1D_YC_CFG2_ohres                         0x0009
    #define     B16SCL1D_YC_CFG2_ohres                         0x0008
    #define   LSb32SCL1D_YC_CFG2_ohres                            13
    #define   LSb16SCL1D_YC_CFG2_ohres                            13
    #define       bSCL1D_YC_CFG2_ohres                         13
    #define   MSK32SCL1D_YC_CFG2_ohres                            0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG3                               0x000C

    #define     BA_SCL1D_YC_CFG3_vratio                        0x000C
    #define     B16SCL1D_YC_CFG3_vratio                        0x000C
    #define   LSb32SCL1D_YC_CFG3_vratio                           0
    #define   LSb16SCL1D_YC_CFG3_vratio                           0
    #define       bSCL1D_YC_CFG3_vratio                        25
    #define   MSK32SCL1D_YC_CFG3_vratio                           0x01FFFFFF

    #define     BA_SCL1D_YC_CFG3_rsv0                          0x000F
    #define     B16SCL1D_YC_CFG3_rsv0                          0x000E
    #define   LSb32SCL1D_YC_CFG3_rsv0                             25
    #define   LSb16SCL1D_YC_CFG3_rsv0                             9
    #define       bSCL1D_YC_CFG3_rsv0                          3
    #define   MSK32SCL1D_YC_CFG3_rsv0                             0x0E000000

    #define     BA_SCL1D_YC_CFG3_mbp_align                     0x000F
    #define     B16SCL1D_YC_CFG3_mbp_align                     0x000E
    #define   LSb32SCL1D_YC_CFG3_mbp_align                        28
    #define   LSb16SCL1D_YC_CFG3_mbp_align                        12
    #define       bSCL1D_YC_CFG3_mbp_align                     1
    #define   MSK32SCL1D_YC_CFG3_mbp_align                        0x10000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG4                               0x0010

    #define     BA_SCL1D_YC_CFG4_hratio                        0x0010
    #define     B16SCL1D_YC_CFG4_hratio                        0x0010
    #define   LSb32SCL1D_YC_CFG4_hratio                           0
    #define   LSb16SCL1D_YC_CFG4_hratio                           0
    #define       bSCL1D_YC_CFG4_hratio                        25
    #define   MSK32SCL1D_YC_CFG4_hratio                           0x01FFFFFF

    #define     BA_SCL1D_YC_CFG4_rsv0                          0x0013
    #define     B16SCL1D_YC_CFG4_rsv0                          0x0012
    #define   LSb32SCL1D_YC_CFG4_rsv0                             25
    #define   LSb16SCL1D_YC_CFG4_rsv0                             9
    #define       bSCL1D_YC_CFG4_rsv0                          3
    #define   MSK32SCL1D_YC_CFG4_rsv0                             0x0E000000

    #define     BA_SCL1D_YC_CFG4_mrp_align                     0x0013
    #define     B16SCL1D_YC_CFG4_mrp_align                     0x0012
    #define   LSb32SCL1D_YC_CFG4_mrp_align                        28
    #define   LSb16SCL1D_YC_CFG4_mrp_align                        12
    #define       bSCL1D_YC_CFG4_mrp_align                     1
    #define   MSK32SCL1D_YC_CFG4_mrp_align                        0x10000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG5                               0x0014

    #define     BA_SCL1D_YC_CFG5_memsize                       0x0014
    #define     B16SCL1D_YC_CFG5_memsize                       0x0014
    #define   LSb32SCL1D_YC_CFG5_memsize                          0
    #define   LSb16SCL1D_YC_CFG5_memsize                          0
    #define       bSCL1D_YC_CFG5_memsize                       11
    #define   MSK32SCL1D_YC_CFG5_memsize                          0x000007FF

    #define     BA_SCL1D_YC_CFG5_vwrap                         0x0015
    #define     B16SCL1D_YC_CFG5_vwrap                         0x0014
    #define   LSb32SCL1D_YC_CFG5_vwrap                            11
    #define   LSb16SCL1D_YC_CFG5_vwrap                            11
    #define       bSCL1D_YC_CFG5_vwrap                         16
    #define   MSK32SCL1D_YC_CFG5_vwrap                            0x07FFF800
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG6                               0x0018

    #define     BA_SCL1D_YC_CFG6_ups_cswap                     0x0018
    #define     B16SCL1D_YC_CFG6_ups_cswap                     0x0018
    #define   LSb32SCL1D_YC_CFG6_ups_cswap                        0
    #define   LSb16SCL1D_YC_CFG6_ups_cswap                        0
    #define       bSCL1D_YC_CFG6_ups_cswap                     1
    #define   MSK32SCL1D_YC_CFG6_ups_cswap                        0x00000001

    #define     BA_SCL1D_YC_CFG6_ups_cshift                    0x0018
    #define     B16SCL1D_YC_CFG6_ups_cshift                    0x0018
    #define   LSb32SCL1D_YC_CFG6_ups_cshift                       1
    #define   LSb16SCL1D_YC_CFG6_ups_cshift                       1
    #define       bSCL1D_YC_CFG6_ups_cshift                    1
    #define   MSK32SCL1D_YC_CFG6_ups_cshift                       0x00000002

    #define     BA_SCL1D_YC_CFG6_ups_yshift                    0x0018
    #define     B16SCL1D_YC_CFG6_ups_yshift                    0x0018
    #define   LSb32SCL1D_YC_CFG6_ups_yshift                       2
    #define   LSb16SCL1D_YC_CFG6_ups_yshift                       2
    #define       bSCL1D_YC_CFG6_ups_yshift                    1
    #define   MSK32SCL1D_YC_CFG6_ups_yshift                       0x00000004

    #define     BA_SCL1D_YC_CFG6_ups_yblank                    0x0018
    #define     B16SCL1D_YC_CFG6_ups_yblank                    0x0018
    #define   LSb32SCL1D_YC_CFG6_ups_yblank                       3
    #define   LSb16SCL1D_YC_CFG6_ups_yblank                       3
    #define       bSCL1D_YC_CFG6_ups_yblank                    12
    #define   MSK32SCL1D_YC_CFG6_ups_yblank                       0x00007FF8

    #define     BA_SCL1D_YC_CFG6_fstall                        0x0019
    #define     B16SCL1D_YC_CFG6_fstall                        0x0018
    #define   LSb32SCL1D_YC_CFG6_fstall                           15
    #define   LSb16SCL1D_YC_CFG6_fstall                           15
    #define       bSCL1D_YC_CFG6_fstall                        8
    #define   MSK32SCL1D_YC_CFG6_fstall                           0x007F8000

    #define     BA_SCL1D_YC_CFG6_bstall                        0x001A
    #define     B16SCL1D_YC_CFG6_bstall                        0x001A
    #define   LSb32SCL1D_YC_CFG6_bstall                           23
    #define   LSb16SCL1D_YC_CFG6_bstall                           7
    #define       bSCL1D_YC_CFG6_bstall                        8
    #define   MSK32SCL1D_YC_CFG6_bstall                           0x7F800000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG7                               0x001C

    #define     BA_SCL1D_YC_CFG7_ups_cblank                    0x001C
    #define     B16SCL1D_YC_CFG7_ups_cblank                    0x001C
    #define   LSb32SCL1D_YC_CFG7_ups_cblank                       0
    #define   LSb16SCL1D_YC_CFG7_ups_cblank                       0
    #define       bSCL1D_YC_CFG7_ups_cblank                    12
    #define   MSK32SCL1D_YC_CFG7_ups_cblank                       0x00000FFF

    #define     BA_SCL1D_YC_CFG7_htap_offset                   0x001D
    #define     B16SCL1D_YC_CFG7_htap_offset                   0x001C
    #define   LSb32SCL1D_YC_CFG7_htap_offset                      12
    #define   LSb16SCL1D_YC_CFG7_htap_offset                      12
    #define       bSCL1D_YC_CFG7_htap_offset                   6
    #define   MSK32SCL1D_YC_CFG7_htap_offset                      0x0003F000

    #define     BA_SCL1D_YC_CFG7_rsv                           0x001E
    #define     B16SCL1D_YC_CFG7_rsv                           0x001E
    #define   LSb32SCL1D_YC_CFG7_rsv                              18
    #define   LSb16SCL1D_YC_CFG7_rsv                              2
    #define       bSCL1D_YC_CFG7_rsv                           2
    #define   MSK32SCL1D_YC_CFG7_rsv                              0x000C0000

    #define     BA_SCL1D_YC_CFG7_vtap_offset                   0x001E
    #define     B16SCL1D_YC_CFG7_vtap_offset                   0x001E
    #define   LSb32SCL1D_YC_CFG7_vtap_offset                      20
    #define   LSb16SCL1D_YC_CFG7_vtap_offset                      4
    #define       bSCL1D_YC_CFG7_vtap_offset                   8
    #define   MSK32SCL1D_YC_CFG7_vtap_offset                      0x0FF00000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG8                               0x0020

    #define     BA_SCL1D_YC_CFG8_init_ratio                    0x0020
    #define     B16SCL1D_YC_CFG8_init_ratio                    0x0020
    #define   LSb32SCL1D_YC_CFG8_init_ratio                       0
    #define   LSb16SCL1D_YC_CFG8_init_ratio                       0
    #define       bSCL1D_YC_CFG8_init_ratio                    25
    #define   MSK32SCL1D_YC_CFG8_init_ratio                       0x01FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG9                               0x0024

    #define     BA_SCL1D_YC_CFG9_inc_ratio                     0x0024
    #define     B16SCL1D_YC_CFG9_inc_ratio                     0x0024
    #define   LSb32SCL1D_YC_CFG9_inc_ratio                        0
    #define   LSb16SCL1D_YC_CFG9_inc_ratio                        0
    #define       bSCL1D_YC_CFG9_inc_ratio                     25
    #define   MSK32SCL1D_YC_CFG9_inc_ratio                        0x01FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG10                              0x0028

    #define     BA_SCL1D_YC_CFG10_nlcres                       0x0028
    #define     B16SCL1D_YC_CFG10_nlcres                       0x0028
    #define   LSb32SCL1D_YC_CFG10_nlcres                          0
    #define   LSb16SCL1D_YC_CFG10_nlcres                          0
    #define       bSCL1D_YC_CFG10_nlcres                       13
    #define   MSK32SCL1D_YC_CFG10_nlcres                          0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG11                              0x002C

    #define     BA_SCL1D_YC_CFG11_avg4_coeff0                  0x002C
    #define     B16SCL1D_YC_CFG11_avg4_coeff0                  0x002C
    #define   LSb32SCL1D_YC_CFG11_avg4_coeff0                     0
    #define   LSb16SCL1D_YC_CFG11_avg4_coeff0                     0
    #define       bSCL1D_YC_CFG11_avg4_coeff0                  12
    #define   MSK32SCL1D_YC_CFG11_avg4_coeff0                     0x00000FFF

    #define     BA_SCL1D_YC_CFG11_avg4_coeff1                  0x002D
    #define     B16SCL1D_YC_CFG11_avg4_coeff1                  0x002C
    #define   LSb32SCL1D_YC_CFG11_avg4_coeff1                     12
    #define   LSb16SCL1D_YC_CFG11_avg4_coeff1                     12
    #define       bSCL1D_YC_CFG11_avg4_coeff1                  12
    #define   MSK32SCL1D_YC_CFG11_avg4_coeff1                     0x00FFF000

    #define     BA_SCL1D_YC_CFG11_dign_dr1                     0x002F
    #define     B16SCL1D_YC_CFG11_dign_dr1                     0x002E
    #define   LSb32SCL1D_YC_CFG11_dign_dr1                        24
    #define   LSb16SCL1D_YC_CFG11_dign_dr1                        8
    #define       bSCL1D_YC_CFG11_dign_dr1                     8
    #define   MSK32SCL1D_YC_CFG11_dign_dr1                        0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG12                              0x0030

    #define     BA_SCL1D_YC_CFG12_avg4_coeff2                  0x0030
    #define     B16SCL1D_YC_CFG12_avg4_coeff2                  0x0030
    #define   LSb32SCL1D_YC_CFG12_avg4_coeff2                     0
    #define   LSb16SCL1D_YC_CFG12_avg4_coeff2                     0
    #define       bSCL1D_YC_CFG12_avg4_coeff2                  12
    #define   MSK32SCL1D_YC_CFG12_avg4_coeff2                     0x00000FFF

    #define     BA_SCL1D_YC_CFG12_avg4_coeff3                  0x0031
    #define     B16SCL1D_YC_CFG12_avg4_coeff3                  0x0030
    #define   LSb32SCL1D_YC_CFG12_avg4_coeff3                     12
    #define   LSb16SCL1D_YC_CFG12_avg4_coeff3                     12
    #define       bSCL1D_YC_CFG12_avg4_coeff3                  12
    #define   MSK32SCL1D_YC_CFG12_avg4_coeff3                     0x00FFF000

    #define     BA_SCL1D_YC_CFG12_dign_dr2                     0x0033
    #define     B16SCL1D_YC_CFG12_dign_dr2                     0x0032
    #define   LSb32SCL1D_YC_CFG12_dign_dr2                        24
    #define   LSb16SCL1D_YC_CFG12_dign_dr2                        8
    #define       bSCL1D_YC_CFG12_dign_dr2                     8
    #define   MSK32SCL1D_YC_CFG12_dign_dr2                        0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG13                              0x0034

    #define     BA_SCL1D_YC_CFG13_dign_ydiff                   0x0034
    #define     B16SCL1D_YC_CFG13_dign_ydiff                   0x0034
    #define   LSb32SCL1D_YC_CFG13_dign_ydiff                      0
    #define   LSb16SCL1D_YC_CFG13_dign_ydiff                      0
    #define       bSCL1D_YC_CFG13_dign_ydiff                   12
    #define   MSK32SCL1D_YC_CFG13_dign_ydiff                      0x00000FFF

    #define     BA_SCL1D_YC_CFG13_dign_ddiff                   0x0035
    #define     B16SCL1D_YC_CFG13_dign_ddiff                   0x0034
    #define   LSb32SCL1D_YC_CFG13_dign_ddiff                      12
    #define   LSb16SCL1D_YC_CFG13_dign_ddiff                      12
    #define       bSCL1D_YC_CFG13_dign_ddiff                   12
    #define   MSK32SCL1D_YC_CFG13_dign_ddiff                      0x00FFF000

    #define     BA_SCL1D_YC_CFG13_dign_dr3                     0x0037
    #define     B16SCL1D_YC_CFG13_dign_dr3                     0x0036
    #define   LSb32SCL1D_YC_CFG13_dign_dr3                        24
    #define   LSb16SCL1D_YC_CFG13_dign_dr3                        8
    #define       bSCL1D_YC_CFG13_dign_dr3                     8
    #define   MSK32SCL1D_YC_CFG13_dign_dr3                        0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG14                              0x0038

    #define     BA_SCL1D_YC_CFG14_hp_offset                    0x0038
    #define     B16SCL1D_YC_CFG14_hp_offset                    0x0038
    #define   LSb32SCL1D_YC_CFG14_hp_offset                       0
    #define   LSb16SCL1D_YC_CFG14_hp_offset                       0
    #define       bSCL1D_YC_CFG14_hp_offset                    12
    #define   MSK32SCL1D_YC_CFG14_hp_offset                       0x00000FFF

    #define     BA_SCL1D_YC_CFG14_hp_diff                      0x0039
    #define     B16SCL1D_YC_CFG14_hp_diff                      0x0038
    #define   LSb32SCL1D_YC_CFG14_hp_diff                         12
    #define   LSb16SCL1D_YC_CFG14_hp_diff                         12
    #define       bSCL1D_YC_CFG14_hp_diff                      12
    #define   MSK32SCL1D_YC_CFG14_hp_diff                         0x00FFF000

    #define     BA_SCL1D_YC_CFG14_dign_nbr                     0x003B
    #define     B16SCL1D_YC_CFG14_dign_nbr                     0x003A
    #define   LSb32SCL1D_YC_CFG14_dign_nbr                        24
    #define   LSb16SCL1D_YC_CFG14_dign_nbr                        8
    #define       bSCL1D_YC_CFG14_dign_nbr                     8
    #define   MSK32SCL1D_YC_CFG14_dign_nbr                        0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG15                              0x003C

    #define     BA_SCL1D_YC_CFG15_ctrl1                        0x003C
    #define     B16SCL1D_YC_CFG15_ctrl1                        0x003C
    #define   LSb32SCL1D_YC_CFG15_ctrl1                           0
    #define   LSb16SCL1D_YC_CFG15_ctrl1                           0
    #define       bSCL1D_YC_CFG15_ctrl1                        8
    #define   MSK32SCL1D_YC_CFG15_ctrl1                           0x000000FF

    #define     BA_SCL1D_YC_CFG15_hctrl                        0x003D
    #define     B16SCL1D_YC_CFG15_hctrl                        0x003C
    #define   LSb32SCL1D_YC_CFG15_hctrl                           8
    #define   LSb16SCL1D_YC_CFG15_hctrl                           8
    #define       bSCL1D_YC_CFG15_hctrl                        5
    #define   MSK32SCL1D_YC_CFG15_hctrl                           0x00001F00

    #define     BA_SCL1D_YC_CFG15_vctrl                        0x003D
    #define     B16SCL1D_YC_CFG15_vctrl                        0x003C
    #define   LSb32SCL1D_YC_CFG15_vctrl                           13
    #define   LSb16SCL1D_YC_CFG15_vctrl                           13
    #define       bSCL1D_YC_CFG15_vctrl                        5
    #define   MSK32SCL1D_YC_CFG15_vctrl                           0x0003E000

    #define     BA_SCL1D_YC_CFG15_crop                         0x003E
    #define     B16SCL1D_YC_CFG15_crop                         0x003E
    #define   LSb32SCL1D_YC_CFG15_crop                            18
    #define   LSb16SCL1D_YC_CFG15_crop                            2
    #define       bSCL1D_YC_CFG15_crop                         4
    #define   MSK32SCL1D_YC_CFG15_crop                            0x003C0000

    #define     BA_SCL1D_YC_CFG15_hscl11                       0x003E
    #define     B16SCL1D_YC_CFG15_hscl11                       0x003E
    #define   LSb32SCL1D_YC_CFG15_hscl11                          22
    #define   LSb16SCL1D_YC_CFG15_hscl11                          6
    #define       bSCL1D_YC_CFG15_hscl11                       1
    #define   MSK32SCL1D_YC_CFG15_hscl11                          0x00400000

    #define     BA_SCL1D_YC_CFG15_vscl11                       0x003E
    #define     B16SCL1D_YC_CFG15_vscl11                       0x003E
    #define   LSb32SCL1D_YC_CFG15_vscl11                          23
    #define   LSb16SCL1D_YC_CFG15_vscl11                          7
    #define       bSCL1D_YC_CFG15_vscl11                       1
    #define   MSK32SCL1D_YC_CFG15_vscl11                          0x00800000

    #define     BA_SCL1D_YC_CFG15_bypass                       0x003F
    #define     B16SCL1D_YC_CFG15_bypass                       0x003E
    #define   LSb32SCL1D_YC_CFG15_bypass                          24
    #define   LSb16SCL1D_YC_CFG15_bypass                          8
    #define       bSCL1D_YC_CFG15_bypass                       1
    #define   MSK32SCL1D_YC_CFG15_bypass                          0x01000000

    #define     BA_SCL1D_YC_CFG15_frndsel                      0x003F
    #define     B16SCL1D_YC_CFG15_frndsel                      0x003E
    #define   LSb32SCL1D_YC_CFG15_frndsel                         25
    #define   LSb16SCL1D_YC_CFG15_frndsel                         9
    #define       bSCL1D_YC_CFG15_frndsel                      1
    #define   MSK32SCL1D_YC_CFG15_frndsel                         0x02000000

    #define     BA_SCL1D_YC_CFG15_hvdcp                        0x003F
    #define     B16SCL1D_YC_CFG15_hvdcp                        0x003E
    #define   LSb32SCL1D_YC_CFG15_hvdcp                           26
    #define   LSb16SCL1D_YC_CFG15_hvdcp                           10
    #define       bSCL1D_YC_CFG15_hvdcp                        1
    #define   MSK32SCL1D_YC_CFG15_hvdcp                           0x04000000

    #define     BA_SCL1D_YC_CFG15_pa_impv_en                   0x003F
    #define     B16SCL1D_YC_CFG15_pa_impv_en                   0x003E
    #define   LSb32SCL1D_YC_CFG15_pa_impv_en                      27
    #define   LSb16SCL1D_YC_CFG15_pa_impv_en                      11
    #define       bSCL1D_YC_CFG15_pa_impv_en                   1
    #define   MSK32SCL1D_YC_CFG15_pa_impv_en                      0x08000000

    #define     BA_SCL1D_YC_CFG15_mask_hvswap_en               0x003F
    #define     B16SCL1D_YC_CFG15_mask_hvswap_en               0x003E
    #define   LSb32SCL1D_YC_CFG15_mask_hvswap_en                  28
    #define   LSb16SCL1D_YC_CFG15_mask_hvswap_en                  12
    #define       bSCL1D_YC_CFG15_mask_hvswap_en               4
    #define   MSK32SCL1D_YC_CFG15_mask_hvswap_en                  0xF0000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG16                              0x0040

    #define     BA_SCL1D_YC_CFG16_en_n                         0x0040
    #define     B16SCL1D_YC_CFG16_en_n                         0x0040
    #define   LSb32SCL1D_YC_CFG16_en_n                            0
    #define   LSb16SCL1D_YC_CFG16_en_n                            0
    #define       bSCL1D_YC_CFG16_en_n                         1
    #define   MSK32SCL1D_YC_CFG16_en_n                            0x00000001

    #define     BA_SCL1D_YC_CFG16_xbstall_en                   0x0040
    #define     B16SCL1D_YC_CFG16_xbstall_en                   0x0040
    #define   LSb32SCL1D_YC_CFG16_xbstall_en                      1
    #define   LSb16SCL1D_YC_CFG16_xbstall_en                      1
    #define       bSCL1D_YC_CFG16_xbstall_en                   1
    #define   MSK32SCL1D_YC_CFG16_xbstall_en                      0x00000002

    #define     BA_SCL1D_YC_CFG16_xbstall_dly                  0x0040
    #define     B16SCL1D_YC_CFG16_xbstall_dly                  0x0040
    #define   LSb32SCL1D_YC_CFG16_xbstall_dly                     2
    #define   LSb16SCL1D_YC_CFG16_xbstall_dly                     2
    #define       bSCL1D_YC_CFG16_xbstall_dly                  14
    #define   MSK32SCL1D_YC_CFG16_xbstall_dly                     0x0000FFFC

    #define     BA_SCL1D_YC_CFG16_ovf_margin                   0x0042
    #define     B16SCL1D_YC_CFG16_ovf_margin                   0x0042
    #define   LSb32SCL1D_YC_CFG16_ovf_margin                      16
    #define   LSb16SCL1D_YC_CFG16_ovf_margin                      0
    #define       bSCL1D_YC_CFG16_ovf_margin                   8
    #define   MSK32SCL1D_YC_CFG16_ovf_margin                      0x00FF0000

    #define     BA_SCL1D_YC_CFG16_udf_margin                   0x0043
    #define     B16SCL1D_YC_CFG16_udf_margin                   0x0042
    #define   LSb32SCL1D_YC_CFG16_udf_margin                      24
    #define   LSb16SCL1D_YC_CFG16_udf_margin                      8
    #define       bSCL1D_YC_CFG16_udf_margin                   8
    #define   MSK32SCL1D_YC_CFG16_udf_margin                      0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG17                              0x0044

    #define     BA_SCL1D_YC_CFG17_lsize                        0x0044
    #define     B16SCL1D_YC_CFG17_lsize                        0x0044
    #define   LSb32SCL1D_YC_CFG17_lsize                           0
    #define   LSb16SCL1D_YC_CFG17_lsize                           0
    #define       bSCL1D_YC_CFG17_lsize                        10
    #define   MSK32SCL1D_YC_CFG17_lsize                           0x000003FF

    #define     BA_SCL1D_YC_CFG17_lsize_A                      0x0045
    #define     B16SCL1D_YC_CFG17_lsize_A                      0x0044
    #define   LSb32SCL1D_YC_CFG17_lsize_A                         10
    #define   LSb16SCL1D_YC_CFG17_lsize_A                         10
    #define       bSCL1D_YC_CFG17_lsize_A                      10
    #define   MSK32SCL1D_YC_CFG17_lsize_A                         0x000FFC00
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG18                              0x0048

    #define     BA_SCL1D_YC_CFG18_fifo_mode                    0x0048
    #define     B16SCL1D_YC_CFG18_fifo_mode                    0x0048
    #define   LSb32SCL1D_YC_CFG18_fifo_mode                       0
    #define   LSb16SCL1D_YC_CFG18_fifo_mode                       0
    #define       bSCL1D_YC_CFG18_fifo_mode                    1
    #define   MSK32SCL1D_YC_CFG18_fifo_mode                       0x00000001

    #define     BA_SCL1D_YC_CFG18_fifo_depth                   0x0048
    #define     B16SCL1D_YC_CFG18_fifo_depth                   0x0048
    #define   LSb32SCL1D_YC_CFG18_fifo_depth                      1
    #define   LSb16SCL1D_YC_CFG18_fifo_depth                      1
    #define       bSCL1D_YC_CFG18_fifo_depth                   15
    #define   MSK32SCL1D_YC_CFG18_fifo_depth                      0x0000FFFE

    #define     BA_SCL1D_YC_CFG18_fifo_dfst                    0x004A
    #define     B16SCL1D_YC_CFG18_fifo_dfst                    0x004A
    #define   LSb32SCL1D_YC_CFG18_fifo_dfst                       16
    #define   LSb16SCL1D_YC_CFG18_fifo_dfst                       0
    #define       bSCL1D_YC_CFG18_fifo_dfst                    15
    #define   MSK32SCL1D_YC_CFG18_fifo_dfst                       0x7FFF0000

    #define     BA_SCL1D_YC_CFG18_pftch                        0x004B
    #define     B16SCL1D_YC_CFG18_pftch                        0x004A
    #define   LSb32SCL1D_YC_CFG18_pftch                           31
    #define   LSb16SCL1D_YC_CFG18_pftch                           15
    #define       bSCL1D_YC_CFG18_pftch                        1
    #define   MSK32SCL1D_YC_CFG18_pftch                           0x80000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG19                              0x004C

    #define     BA_SCL1D_YC_CFG19_scl_after_crop_h             0x004C
    #define     B16SCL1D_YC_CFG19_scl_after_crop_h             0x004C
    #define   LSb32SCL1D_YC_CFG19_scl_after_crop_h                0
    #define   LSb16SCL1D_YC_CFG19_scl_after_crop_h                0
    #define       bSCL1D_YC_CFG19_scl_after_crop_h             8
    #define   MSK32SCL1D_YC_CFG19_scl_after_crop_h                0x000000FF

    #define     BA_SCL1D_YC_CFG19_scl_after_crop_v             0x004D
    #define     B16SCL1D_YC_CFG19_scl_after_crop_v             0x004C
    #define   LSb32SCL1D_YC_CFG19_scl_after_crop_v                8
    #define   LSb16SCL1D_YC_CFG19_scl_after_crop_v                8
    #define       bSCL1D_YC_CFG19_scl_after_crop_v             8
    #define   MSK32SCL1D_YC_CFG19_scl_after_crop_v                0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG20                              0x0050

    #define     BA_SCL1D_YC_CFG20_hlut_pdwn_regs               0x0050
    #define     B16SCL1D_YC_CFG20_hlut_pdwn_regs               0x0050
    #define   LSb32SCL1D_YC_CFG20_hlut_pdwn_regs                  0
    #define   LSb16SCL1D_YC_CFG20_hlut_pdwn_regs                  0
    #define       bSCL1D_YC_CFG20_hlut_pdwn_regs               1
    #define   MSK32SCL1D_YC_CFG20_hlut_pdwn_regs                  0x00000001

    #define     BA_SCL1D_YC_CFG20_hlut_pdlvmc_regs             0x0050
    #define     B16SCL1D_YC_CFG20_hlut_pdlvmc_regs             0x0050
    #define   LSb32SCL1D_YC_CFG20_hlut_pdlvmc_regs                1
    #define   LSb16SCL1D_YC_CFG20_hlut_pdlvmc_regs                1
    #define       bSCL1D_YC_CFG20_hlut_pdlvmc_regs             1
    #define   MSK32SCL1D_YC_CFG20_hlut_pdlvmc_regs                0x00000002

    #define     BA_SCL1D_YC_CFG20_hlut_pdfvssm_regs            0x0050
    #define     B16SCL1D_YC_CFG20_hlut_pdfvssm_regs            0x0050
    #define   LSb32SCL1D_YC_CFG20_hlut_pdfvssm_regs               2
    #define   LSb16SCL1D_YC_CFG20_hlut_pdfvssm_regs               2
    #define       bSCL1D_YC_CFG20_hlut_pdfvssm_regs            1
    #define   MSK32SCL1D_YC_CFG20_hlut_pdfvssm_regs               0x00000004

    #define     BA_SCL1D_YC_CFG20_reserved0                    0x0050
    #define     B16SCL1D_YC_CFG20_reserved0                    0x0050
    #define   LSb32SCL1D_YC_CFG20_reserved0                       3
    #define   LSb16SCL1D_YC_CFG20_reserved0                       3
    #define       bSCL1D_YC_CFG20_reserved0                    1
    #define   MSK32SCL1D_YC_CFG20_reserved0                       0x00000008

    #define     BA_SCL1D_YC_CFG20_vlut_pdwn_regs               0x0050
    #define     B16SCL1D_YC_CFG20_vlut_pdwn_regs               0x0050
    #define   LSb32SCL1D_YC_CFG20_vlut_pdwn_regs                  4
    #define   LSb16SCL1D_YC_CFG20_vlut_pdwn_regs                  4
    #define       bSCL1D_YC_CFG20_vlut_pdwn_regs               1
    #define   MSK32SCL1D_YC_CFG20_vlut_pdwn_regs                  0x00000010

    #define     BA_SCL1D_YC_CFG20_vlut_pdlvmc_regs             0x0050
    #define     B16SCL1D_YC_CFG20_vlut_pdlvmc_regs             0x0050
    #define   LSb32SCL1D_YC_CFG20_vlut_pdlvmc_regs                5
    #define   LSb16SCL1D_YC_CFG20_vlut_pdlvmc_regs                5
    #define       bSCL1D_YC_CFG20_vlut_pdlvmc_regs             1
    #define   MSK32SCL1D_YC_CFG20_vlut_pdlvmc_regs                0x00000020

    #define     BA_SCL1D_YC_CFG20_vlut_pdfvssm_regs            0x0050
    #define     B16SCL1D_YC_CFG20_vlut_pdfvssm_regs            0x0050
    #define   LSb32SCL1D_YC_CFG20_vlut_pdfvssm_regs               6
    #define   LSb16SCL1D_YC_CFG20_vlut_pdfvssm_regs               6
    #define       bSCL1D_YC_CFG20_vlut_pdfvssm_regs            1
    #define   MSK32SCL1D_YC_CFG20_vlut_pdfvssm_regs               0x00000040

    #define     BA_SCL1D_YC_CFG20_reserved1                    0x0050
    #define     B16SCL1D_YC_CFG20_reserved1                    0x0050
    #define   LSb32SCL1D_YC_CFG20_reserved1                       7
    #define   LSb16SCL1D_YC_CFG20_reserved1                       7
    #define       bSCL1D_YC_CFG20_reserved1                    1
    #define   MSK32SCL1D_YC_CFG20_reserved1                       0x00000080

    #define     BA_SCL1D_YC_CFG20_dpwr_regs                    0x0051
    #define     B16SCL1D_YC_CFG20_dpwr_regs                    0x0050
    #define   LSb32SCL1D_YC_CFG20_dpwr_regs                       8
    #define   LSb16SCL1D_YC_CFG20_dpwr_regs                       8
    #define       bSCL1D_YC_CFG20_dpwr_regs                    3
    #define   MSK32SCL1D_YC_CFG20_dpwr_regs                       0x00000700

    #define     BA_SCL1D_YC_CFG20_Reserved2                    0x0051
    #define     B16SCL1D_YC_CFG20_Reserved2                    0x0050
    #define   LSb32SCL1D_YC_CFG20_Reserved2                       11
    #define   LSb16SCL1D_YC_CFG20_Reserved2                       11
    #define       bSCL1D_YC_CFG20_Reserved2                    1
    #define   MSK32SCL1D_YC_CFG20_Reserved2                       0x00000800

    #define     BA_SCL1D_YC_CFG20_syp_yc420_regs               0x0051
    #define     B16SCL1D_YC_CFG20_syp_yc420_regs               0x0050
    #define   LSb32SCL1D_YC_CFG20_syp_yc420_regs                  12
    #define   LSb16SCL1D_YC_CFG20_syp_yc420_regs                  12
    #define       bSCL1D_YC_CFG20_syp_yc420_regs               1
    #define   MSK32SCL1D_YC_CFG20_syp_yc420_regs                  0x00001000

    #define     BA_SCL1D_YC_CFG20_Reserved3                    0x0051
    #define     B16SCL1D_YC_CFG20_Reserved3                    0x0050
    #define   LSb32SCL1D_YC_CFG20_Reserved3                       13
    #define   LSb16SCL1D_YC_CFG20_Reserved3                       13
    #define       bSCL1D_YC_CFG20_Reserved3                    1
    #define   MSK32SCL1D_YC_CFG20_Reserved3                       0x00002000

    #define     BA_SCL1D_YC_CFG20_ip_type_regs                 0x0051
    #define     B16SCL1D_YC_CFG20_ip_type_regs                 0x0050
    #define   LSb32SCL1D_YC_CFG20_ip_type_regs                    14
    #define   LSb16SCL1D_YC_CFG20_ip_type_regs                    14
    #define       bSCL1D_YC_CFG20_ip_type_regs                 2
    #define   MSK32SCL1D_YC_CFG20_ip_type_regs                    0x0000C000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG21                              0x0054

    #define     BA_SCL1D_YC_CFG21_hinitph_lsb                  0x0054
    #define     B16SCL1D_YC_CFG21_hinitph_lsb                  0x0054
    #define   LSb32SCL1D_YC_CFG21_hinitph_lsb                     0
    #define   LSb16SCL1D_YC_CFG21_hinitph_lsb                     0
    #define       bSCL1D_YC_CFG21_hinitph_lsb                  12
    #define   MSK32SCL1D_YC_CFG21_hinitph_lsb                     0x00000FFF
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_CFG33                              0x0058

    #define     BA_SCL1D_YC_CFG33_lb0_pdwn_regs                0x0058
    #define     B16SCL1D_YC_CFG33_lb0_pdwn_regs                0x0058
    #define   LSb32SCL1D_YC_CFG33_lb0_pdwn_regs                   0
    #define   LSb16SCL1D_YC_CFG33_lb0_pdwn_regs                   0
    #define       bSCL1D_YC_CFG33_lb0_pdwn_regs                1
    #define   MSK32SCL1D_YC_CFG33_lb0_pdwn_regs                   0x00000001

    #define     BA_SCL1D_YC_CFG33_lb0_pdlvmc_regs              0x0058
    #define     B16SCL1D_YC_CFG33_lb0_pdlvmc_regs              0x0058
    #define   LSb32SCL1D_YC_CFG33_lb0_pdlvmc_regs                 1
    #define   LSb16SCL1D_YC_CFG33_lb0_pdlvmc_regs                 1
    #define       bSCL1D_YC_CFG33_lb0_pdlvmc_regs              1
    #define   MSK32SCL1D_YC_CFG33_lb0_pdlvmc_regs                 0x00000002

    #define     BA_SCL1D_YC_CFG33_lb0_pdfvssm_regs             0x0058
    #define     B16SCL1D_YC_CFG33_lb0_pdfvssm_regs             0x0058
    #define   LSb32SCL1D_YC_CFG33_lb0_pdfvssm_regs                2
    #define   LSb16SCL1D_YC_CFG33_lb0_pdfvssm_regs                2
    #define       bSCL1D_YC_CFG33_lb0_pdfvssm_regs             1
    #define   MSK32SCL1D_YC_CFG33_lb0_pdfvssm_regs                0x00000004

    #define     BA_SCL1D_YC_CFG33_reserved0                    0x0058
    #define     B16SCL1D_YC_CFG33_reserved0                    0x0058
    #define   LSb32SCL1D_YC_CFG33_reserved0                       3
    #define   LSb16SCL1D_YC_CFG33_reserved0                       3
    #define       bSCL1D_YC_CFG33_reserved0                    1
    #define   MSK32SCL1D_YC_CFG33_reserved0                       0x00000008
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SCL1D_YC {
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG0_even(r32)                     _BFGET_(r32, 7, 0)
    #define   SET32SCL1D_YC_CFG0_even(r32,v)                   _BFSET_(r32, 7, 0,v)
    #define   GET16SCL1D_YC_CFG0_even(r16)                     _BFGET_(r16, 7, 0)
    #define   SET16SCL1D_YC_CFG0_even(r16,v)                   _BFSET_(r16, 7, 0,v)

    #define   GET32SCL1D_YC_CFG0_odd(r32)                      _BFGET_(r32,15, 8)
    #define   SET32SCL1D_YC_CFG0_odd(r32,v)                    _BFSET_(r32,15, 8,v)
    #define   GET16SCL1D_YC_CFG0_odd(r16)                      _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_CFG0_odd(r16,v)                    _BFSET_(r16,15, 8,v)

    #define   GET32SCL1D_YC_CFG0_hinitph(r32)                  _BFGET_(r32,23,16)
    #define   SET32SCL1D_YC_CFG0_hinitph(r32,v)                _BFSET_(r32,23,16,v)
    #define   GET16SCL1D_YC_CFG0_hinitph(r16)                  _BFGET_(r16, 7, 0)
    #define   SET16SCL1D_YC_CFG0_hinitph(r16,v)                _BFSET_(r16, 7, 0,v)

    #define   GET32SCL1D_YC_CFG0_ctrl0(r32)                    _BFGET_(r32,31,24)
    #define   SET32SCL1D_YC_CFG0_ctrl0(r32,v)                  _BFSET_(r32,31,24,v)
    #define   GET16SCL1D_YC_CFG0_ctrl0(r16)                    _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_CFG0_ctrl0(r16,v)                  _BFSET_(r16,15, 8,v)

    #define     w32SCL1D_YC_CFG0                               {\
            UNSG32 uCFG0_even                                  :  8;\
            UNSG32 uCFG0_odd                                   :  8;\
            UNSG32 uCFG0_hinitph                               :  8;\
            UNSG32 uCFG0_ctrl0                                 :  8;\
          }
    union { UNSG32 u32SCL1D_YC_CFG0;
            struct w32SCL1D_YC_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG1_ivres(r32)                    _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_CFG1_ivres(r32,v)                  _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_CFG1_ivres(r16)                    _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_CFG1_ivres(r16,v)                  _BFSET_(r16,11, 0,v)

    #define   GET32SCL1D_YC_CFG1_ovres(r32)                    _BFGET_(r32,23,12)
    #define   SET32SCL1D_YC_CFG1_ovres(r32,v)                  _BFSET_(r32,23,12,v)

    #define     w32SCL1D_YC_CFG1                               {\
            UNSG32 uCFG1_ivres                                 : 12;\
            UNSG32 uCFG1_ovres                                 : 12;\
            UNSG32 RSVDx4_b24                                  :  8;\
          }
    union { UNSG32 u32SCL1D_YC_CFG1;
            struct w32SCL1D_YC_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG2_ihres(r32)                    _BFGET_(r32,12, 0)
    #define   SET32SCL1D_YC_CFG2_ihres(r32,v)                  _BFSET_(r32,12, 0,v)
    #define   GET16SCL1D_YC_CFG2_ihres(r16)                    _BFGET_(r16,12, 0)
    #define   SET16SCL1D_YC_CFG2_ihres(r16,v)                  _BFSET_(r16,12, 0,v)

    #define   GET32SCL1D_YC_CFG2_ohres(r32)                    _BFGET_(r32,25,13)
    #define   SET32SCL1D_YC_CFG2_ohres(r32,v)                  _BFSET_(r32,25,13,v)

    #define     w32SCL1D_YC_CFG2                               {\
            UNSG32 uCFG2_ihres                                 : 13;\
            UNSG32 uCFG2_ohres                                 : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32SCL1D_YC_CFG2;
            struct w32SCL1D_YC_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG3_vratio(r32)                   _BFGET_(r32,24, 0)
    #define   SET32SCL1D_YC_CFG3_vratio(r32,v)                 _BFSET_(r32,24, 0,v)

    #define   GET32SCL1D_YC_CFG3_rsv0(r32)                     _BFGET_(r32,27,25)
    #define   SET32SCL1D_YC_CFG3_rsv0(r32,v)                   _BFSET_(r32,27,25,v)
    #define   GET16SCL1D_YC_CFG3_rsv0(r16)                     _BFGET_(r16,11, 9)
    #define   SET16SCL1D_YC_CFG3_rsv0(r16,v)                   _BFSET_(r16,11, 9,v)

    #define   GET32SCL1D_YC_CFG3_mbp_align(r32)                _BFGET_(r32,28,28)
    #define   SET32SCL1D_YC_CFG3_mbp_align(r32,v)              _BFSET_(r32,28,28,v)
    #define   GET16SCL1D_YC_CFG3_mbp_align(r16)                _BFGET_(r16,12,12)
    #define   SET16SCL1D_YC_CFG3_mbp_align(r16,v)              _BFSET_(r16,12,12,v)

    #define     w32SCL1D_YC_CFG3                               {\
            UNSG32 uCFG3_vratio                                : 25;\
            UNSG32 uCFG3_rsv0                                  :  3;\
            UNSG32 uCFG3_mbp_align                             :  1;\
            UNSG32 RSVDxC_b29                                  :  3;\
          }
    union { UNSG32 u32SCL1D_YC_CFG3;
            struct w32SCL1D_YC_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG4_hratio(r32)                   _BFGET_(r32,24, 0)
    #define   SET32SCL1D_YC_CFG4_hratio(r32,v)                 _BFSET_(r32,24, 0,v)

    #define   GET32SCL1D_YC_CFG4_rsv0(r32)                     _BFGET_(r32,27,25)
    #define   SET32SCL1D_YC_CFG4_rsv0(r32,v)                   _BFSET_(r32,27,25,v)
    #define   GET16SCL1D_YC_CFG4_rsv0(r16)                     _BFGET_(r16,11, 9)
    #define   SET16SCL1D_YC_CFG4_rsv0(r16,v)                   _BFSET_(r16,11, 9,v)

    #define   GET32SCL1D_YC_CFG4_mrp_align(r32)                _BFGET_(r32,28,28)
    #define   SET32SCL1D_YC_CFG4_mrp_align(r32,v)              _BFSET_(r32,28,28,v)
    #define   GET16SCL1D_YC_CFG4_mrp_align(r16)                _BFGET_(r16,12,12)
    #define   SET16SCL1D_YC_CFG4_mrp_align(r16,v)              _BFSET_(r16,12,12,v)

    #define     w32SCL1D_YC_CFG4                               {\
            UNSG32 uCFG4_hratio                                : 25;\
            UNSG32 uCFG4_rsv0                                  :  3;\
            UNSG32 uCFG4_mrp_align                             :  1;\
            UNSG32 RSVDx10_b29                                 :  3;\
          }
    union { UNSG32 u32SCL1D_YC_CFG4;
            struct w32SCL1D_YC_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG5_memsize(r32)                  _BFGET_(r32,10, 0)
    #define   SET32SCL1D_YC_CFG5_memsize(r32,v)                _BFSET_(r32,10, 0,v)
    #define   GET16SCL1D_YC_CFG5_memsize(r16)                  _BFGET_(r16,10, 0)
    #define   SET16SCL1D_YC_CFG5_memsize(r16,v)                _BFSET_(r16,10, 0,v)

    #define   GET32SCL1D_YC_CFG5_vwrap(r32)                    _BFGET_(r32,26,11)
    #define   SET32SCL1D_YC_CFG5_vwrap(r32,v)                  _BFSET_(r32,26,11,v)

    #define     w32SCL1D_YC_CFG5                               {\
            UNSG32 uCFG5_memsize                               : 11;\
            UNSG32 uCFG5_vwrap                                 : 16;\
            UNSG32 RSVDx14_b27                                 :  5;\
          }
    union { UNSG32 u32SCL1D_YC_CFG5;
            struct w32SCL1D_YC_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG6_ups_cswap(r32)                _BFGET_(r32, 0, 0)
    #define   SET32SCL1D_YC_CFG6_ups_cswap(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16SCL1D_YC_CFG6_ups_cswap(r16)                _BFGET_(r16, 0, 0)
    #define   SET16SCL1D_YC_CFG6_ups_cswap(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32SCL1D_YC_CFG6_ups_cshift(r32)               _BFGET_(r32, 1, 1)
    #define   SET32SCL1D_YC_CFG6_ups_cshift(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16SCL1D_YC_CFG6_ups_cshift(r16)               _BFGET_(r16, 1, 1)
    #define   SET16SCL1D_YC_CFG6_ups_cshift(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32SCL1D_YC_CFG6_ups_yshift(r32)               _BFGET_(r32, 2, 2)
    #define   SET32SCL1D_YC_CFG6_ups_yshift(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16SCL1D_YC_CFG6_ups_yshift(r16)               _BFGET_(r16, 2, 2)
    #define   SET16SCL1D_YC_CFG6_ups_yshift(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32SCL1D_YC_CFG6_ups_yblank(r32)               _BFGET_(r32,14, 3)
    #define   SET32SCL1D_YC_CFG6_ups_yblank(r32,v)             _BFSET_(r32,14, 3,v)
    #define   GET16SCL1D_YC_CFG6_ups_yblank(r16)               _BFGET_(r16,14, 3)
    #define   SET16SCL1D_YC_CFG6_ups_yblank(r16,v)             _BFSET_(r16,14, 3,v)

    #define   GET32SCL1D_YC_CFG6_fstall(r32)                   _BFGET_(r32,22,15)
    #define   SET32SCL1D_YC_CFG6_fstall(r32,v)                 _BFSET_(r32,22,15,v)

    #define   GET32SCL1D_YC_CFG6_bstall(r32)                   _BFGET_(r32,30,23)
    #define   SET32SCL1D_YC_CFG6_bstall(r32,v)                 _BFSET_(r32,30,23,v)
    #define   GET16SCL1D_YC_CFG6_bstall(r16)                   _BFGET_(r16,14, 7)
    #define   SET16SCL1D_YC_CFG6_bstall(r16,v)                 _BFSET_(r16,14, 7,v)

    #define     w32SCL1D_YC_CFG6                               {\
            UNSG32 uCFG6_ups_cswap                             :  1;\
            UNSG32 uCFG6_ups_cshift                            :  1;\
            UNSG32 uCFG6_ups_yshift                            :  1;\
            UNSG32 uCFG6_ups_yblank                            : 12;\
            UNSG32 uCFG6_fstall                                :  8;\
            UNSG32 uCFG6_bstall                                :  8;\
            UNSG32 RSVDx18_b31                                 :  1;\
          }
    union { UNSG32 u32SCL1D_YC_CFG6;
            struct w32SCL1D_YC_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG7_ups_cblank(r32)               _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_CFG7_ups_cblank(r32,v)             _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_CFG7_ups_cblank(r16)               _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_CFG7_ups_cblank(r16,v)             _BFSET_(r16,11, 0,v)

    #define   GET32SCL1D_YC_CFG7_htap_offset(r32)              _BFGET_(r32,17,12)
    #define   SET32SCL1D_YC_CFG7_htap_offset(r32,v)            _BFSET_(r32,17,12,v)

    #define   GET32SCL1D_YC_CFG7_rsv(r32)                      _BFGET_(r32,19,18)
    #define   SET32SCL1D_YC_CFG7_rsv(r32,v)                    _BFSET_(r32,19,18,v)
    #define   GET16SCL1D_YC_CFG7_rsv(r16)                      _BFGET_(r16, 3, 2)
    #define   SET16SCL1D_YC_CFG7_rsv(r16,v)                    _BFSET_(r16, 3, 2,v)

    #define   GET32SCL1D_YC_CFG7_vtap_offset(r32)              _BFGET_(r32,27,20)
    #define   SET32SCL1D_YC_CFG7_vtap_offset(r32,v)            _BFSET_(r32,27,20,v)
    #define   GET16SCL1D_YC_CFG7_vtap_offset(r16)              _BFGET_(r16,11, 4)
    #define   SET16SCL1D_YC_CFG7_vtap_offset(r16,v)            _BFSET_(r16,11, 4,v)

    #define     w32SCL1D_YC_CFG7                               {\
            UNSG32 uCFG7_ups_cblank                            : 12;\
            UNSG32 uCFG7_htap_offset                           :  6;\
            UNSG32 uCFG7_rsv                                   :  2;\
            UNSG32 uCFG7_vtap_offset                           :  8;\
            UNSG32 RSVDx1C_b28                                 :  4;\
          }
    union { UNSG32 u32SCL1D_YC_CFG7;
            struct w32SCL1D_YC_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG8_init_ratio(r32)               _BFGET_(r32,24, 0)
    #define   SET32SCL1D_YC_CFG8_init_ratio(r32,v)             _BFSET_(r32,24, 0,v)

    #define     w32SCL1D_YC_CFG8                               {\
            UNSG32 uCFG8_init_ratio                            : 25;\
            UNSG32 RSVDx20_b25                                 :  7;\
          }
    union { UNSG32 u32SCL1D_YC_CFG8;
            struct w32SCL1D_YC_CFG8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG9_inc_ratio(r32)                _BFGET_(r32,24, 0)
    #define   SET32SCL1D_YC_CFG9_inc_ratio(r32,v)              _BFSET_(r32,24, 0,v)

    #define     w32SCL1D_YC_CFG9                               {\
            UNSG32 uCFG9_inc_ratio                             : 25;\
            UNSG32 RSVDx24_b25                                 :  7;\
          }
    union { UNSG32 u32SCL1D_YC_CFG9;
            struct w32SCL1D_YC_CFG9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG10_nlcres(r32)                  _BFGET_(r32,12, 0)
    #define   SET32SCL1D_YC_CFG10_nlcres(r32,v)                _BFSET_(r32,12, 0,v)
    #define   GET16SCL1D_YC_CFG10_nlcres(r16)                  _BFGET_(r16,12, 0)
    #define   SET16SCL1D_YC_CFG10_nlcres(r16,v)                _BFSET_(r16,12, 0,v)

    #define     w32SCL1D_YC_CFG10                              {\
            UNSG32 uCFG10_nlcres                               : 13;\
            UNSG32 RSVDx28_b13                                 : 19;\
          }
    union { UNSG32 u32SCL1D_YC_CFG10;
            struct w32SCL1D_YC_CFG10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG11_avg4_coeff0(r32)             _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_CFG11_avg4_coeff0(r32,v)           _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_CFG11_avg4_coeff0(r16)             _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_CFG11_avg4_coeff0(r16,v)           _BFSET_(r16,11, 0,v)

    #define   GET32SCL1D_YC_CFG11_avg4_coeff1(r32)             _BFGET_(r32,23,12)
    #define   SET32SCL1D_YC_CFG11_avg4_coeff1(r32,v)           _BFSET_(r32,23,12,v)

    #define   GET32SCL1D_YC_CFG11_dign_dr1(r32)                _BFGET_(r32,31,24)
    #define   SET32SCL1D_YC_CFG11_dign_dr1(r32,v)              _BFSET_(r32,31,24,v)
    #define   GET16SCL1D_YC_CFG11_dign_dr1(r16)                _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_CFG11_dign_dr1(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32SCL1D_YC_CFG11                              {\
            UNSG32 uCFG11_avg4_coeff0                          : 12;\
            UNSG32 uCFG11_avg4_coeff1                          : 12;\
            UNSG32 uCFG11_dign_dr1                             :  8;\
          }
    union { UNSG32 u32SCL1D_YC_CFG11;
            struct w32SCL1D_YC_CFG11;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG12_avg4_coeff2(r32)             _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_CFG12_avg4_coeff2(r32,v)           _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_CFG12_avg4_coeff2(r16)             _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_CFG12_avg4_coeff2(r16,v)           _BFSET_(r16,11, 0,v)

    #define   GET32SCL1D_YC_CFG12_avg4_coeff3(r32)             _BFGET_(r32,23,12)
    #define   SET32SCL1D_YC_CFG12_avg4_coeff3(r32,v)           _BFSET_(r32,23,12,v)

    #define   GET32SCL1D_YC_CFG12_dign_dr2(r32)                _BFGET_(r32,31,24)
    #define   SET32SCL1D_YC_CFG12_dign_dr2(r32,v)              _BFSET_(r32,31,24,v)
    #define   GET16SCL1D_YC_CFG12_dign_dr2(r16)                _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_CFG12_dign_dr2(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32SCL1D_YC_CFG12                              {\
            UNSG32 uCFG12_avg4_coeff2                          : 12;\
            UNSG32 uCFG12_avg4_coeff3                          : 12;\
            UNSG32 uCFG12_dign_dr2                             :  8;\
          }
    union { UNSG32 u32SCL1D_YC_CFG12;
            struct w32SCL1D_YC_CFG12;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG13_dign_ydiff(r32)              _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_CFG13_dign_ydiff(r32,v)            _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_CFG13_dign_ydiff(r16)              _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_CFG13_dign_ydiff(r16,v)            _BFSET_(r16,11, 0,v)

    #define   GET32SCL1D_YC_CFG13_dign_ddiff(r32)              _BFGET_(r32,23,12)
    #define   SET32SCL1D_YC_CFG13_dign_ddiff(r32,v)            _BFSET_(r32,23,12,v)

    #define   GET32SCL1D_YC_CFG13_dign_dr3(r32)                _BFGET_(r32,31,24)
    #define   SET32SCL1D_YC_CFG13_dign_dr3(r32,v)              _BFSET_(r32,31,24,v)
    #define   GET16SCL1D_YC_CFG13_dign_dr3(r16)                _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_CFG13_dign_dr3(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32SCL1D_YC_CFG13                              {\
            UNSG32 uCFG13_dign_ydiff                           : 12;\
            UNSG32 uCFG13_dign_ddiff                           : 12;\
            UNSG32 uCFG13_dign_dr3                             :  8;\
          }
    union { UNSG32 u32SCL1D_YC_CFG13;
            struct w32SCL1D_YC_CFG13;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG14_hp_offset(r32)               _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_CFG14_hp_offset(r32,v)             _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_CFG14_hp_offset(r16)               _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_CFG14_hp_offset(r16,v)             _BFSET_(r16,11, 0,v)

    #define   GET32SCL1D_YC_CFG14_hp_diff(r32)                 _BFGET_(r32,23,12)
    #define   SET32SCL1D_YC_CFG14_hp_diff(r32,v)               _BFSET_(r32,23,12,v)

    #define   GET32SCL1D_YC_CFG14_dign_nbr(r32)                _BFGET_(r32,31,24)
    #define   SET32SCL1D_YC_CFG14_dign_nbr(r32,v)              _BFSET_(r32,31,24,v)
    #define   GET16SCL1D_YC_CFG14_dign_nbr(r16)                _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_CFG14_dign_nbr(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32SCL1D_YC_CFG14                              {\
            UNSG32 uCFG14_hp_offset                            : 12;\
            UNSG32 uCFG14_hp_diff                              : 12;\
            UNSG32 uCFG14_dign_nbr                             :  8;\
          }
    union { UNSG32 u32SCL1D_YC_CFG14;
            struct w32SCL1D_YC_CFG14;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG15_ctrl1(r32)                   _BFGET_(r32, 7, 0)
    #define   SET32SCL1D_YC_CFG15_ctrl1(r32,v)                 _BFSET_(r32, 7, 0,v)
    #define   GET16SCL1D_YC_CFG15_ctrl1(r16)                   _BFGET_(r16, 7, 0)
    #define   SET16SCL1D_YC_CFG15_ctrl1(r16,v)                 _BFSET_(r16, 7, 0,v)

    #define   GET32SCL1D_YC_CFG15_hctrl(r32)                   _BFGET_(r32,12, 8)
    #define   SET32SCL1D_YC_CFG15_hctrl(r32,v)                 _BFSET_(r32,12, 8,v)
    #define   GET16SCL1D_YC_CFG15_hctrl(r16)                   _BFGET_(r16,12, 8)
    #define   SET16SCL1D_YC_CFG15_hctrl(r16,v)                 _BFSET_(r16,12, 8,v)

    #define   GET32SCL1D_YC_CFG15_vctrl(r32)                   _BFGET_(r32,17,13)
    #define   SET32SCL1D_YC_CFG15_vctrl(r32,v)                 _BFSET_(r32,17,13,v)

    #define   GET32SCL1D_YC_CFG15_crop(r32)                    _BFGET_(r32,21,18)
    #define   SET32SCL1D_YC_CFG15_crop(r32,v)                  _BFSET_(r32,21,18,v)
    #define   GET16SCL1D_YC_CFG15_crop(r16)                    _BFGET_(r16, 5, 2)
    #define   SET16SCL1D_YC_CFG15_crop(r16,v)                  _BFSET_(r16, 5, 2,v)

    #define   GET32SCL1D_YC_CFG15_hscl11(r32)                  _BFGET_(r32,22,22)
    #define   SET32SCL1D_YC_CFG15_hscl11(r32,v)                _BFSET_(r32,22,22,v)
    #define   GET16SCL1D_YC_CFG15_hscl11(r16)                  _BFGET_(r16, 6, 6)
    #define   SET16SCL1D_YC_CFG15_hscl11(r16,v)                _BFSET_(r16, 6, 6,v)

    #define   GET32SCL1D_YC_CFG15_vscl11(r32)                  _BFGET_(r32,23,23)
    #define   SET32SCL1D_YC_CFG15_vscl11(r32,v)                _BFSET_(r32,23,23,v)
    #define   GET16SCL1D_YC_CFG15_vscl11(r16)                  _BFGET_(r16, 7, 7)
    #define   SET16SCL1D_YC_CFG15_vscl11(r16,v)                _BFSET_(r16, 7, 7,v)

    #define   GET32SCL1D_YC_CFG15_bypass(r32)                  _BFGET_(r32,24,24)
    #define   SET32SCL1D_YC_CFG15_bypass(r32,v)                _BFSET_(r32,24,24,v)
    #define   GET16SCL1D_YC_CFG15_bypass(r16)                  _BFGET_(r16, 8, 8)
    #define   SET16SCL1D_YC_CFG15_bypass(r16,v)                _BFSET_(r16, 8, 8,v)

    #define   GET32SCL1D_YC_CFG15_frndsel(r32)                 _BFGET_(r32,25,25)
    #define   SET32SCL1D_YC_CFG15_frndsel(r32,v)               _BFSET_(r32,25,25,v)
    #define   GET16SCL1D_YC_CFG15_frndsel(r16)                 _BFGET_(r16, 9, 9)
    #define   SET16SCL1D_YC_CFG15_frndsel(r16,v)               _BFSET_(r16, 9, 9,v)

    #define   GET32SCL1D_YC_CFG15_hvdcp(r32)                   _BFGET_(r32,26,26)
    #define   SET32SCL1D_YC_CFG15_hvdcp(r32,v)                 _BFSET_(r32,26,26,v)
    #define   GET16SCL1D_YC_CFG15_hvdcp(r16)                   _BFGET_(r16,10,10)
    #define   SET16SCL1D_YC_CFG15_hvdcp(r16,v)                 _BFSET_(r16,10,10,v)

    #define   GET32SCL1D_YC_CFG15_pa_impv_en(r32)              _BFGET_(r32,27,27)
    #define   SET32SCL1D_YC_CFG15_pa_impv_en(r32,v)            _BFSET_(r32,27,27,v)
    #define   GET16SCL1D_YC_CFG15_pa_impv_en(r16)              _BFGET_(r16,11,11)
    #define   SET16SCL1D_YC_CFG15_pa_impv_en(r16,v)            _BFSET_(r16,11,11,v)

    #define   GET32SCL1D_YC_CFG15_mask_hvswap_en(r32)          _BFGET_(r32,31,28)
    #define   SET32SCL1D_YC_CFG15_mask_hvswap_en(r32,v)        _BFSET_(r32,31,28,v)
    #define   GET16SCL1D_YC_CFG15_mask_hvswap_en(r16)          _BFGET_(r16,15,12)
    #define   SET16SCL1D_YC_CFG15_mask_hvswap_en(r16,v)        _BFSET_(r16,15,12,v)

    #define     w32SCL1D_YC_CFG15                              {\
            UNSG32 uCFG15_ctrl1                                :  8;\
            UNSG32 uCFG15_hctrl                                :  5;\
            UNSG32 uCFG15_vctrl                                :  5;\
            UNSG32 uCFG15_crop                                 :  4;\
            UNSG32 uCFG15_hscl11                               :  1;\
            UNSG32 uCFG15_vscl11                               :  1;\
            UNSG32 uCFG15_bypass                               :  1;\
            UNSG32 uCFG15_frndsel                              :  1;\
            UNSG32 uCFG15_hvdcp                                :  1;\
            UNSG32 uCFG15_pa_impv_en                           :  1;\
            UNSG32 uCFG15_mask_hvswap_en                       :  4;\
          }
    union { UNSG32 u32SCL1D_YC_CFG15;
            struct w32SCL1D_YC_CFG15;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG16_en_n(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32SCL1D_YC_CFG16_en_n(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16SCL1D_YC_CFG16_en_n(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16SCL1D_YC_CFG16_en_n(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32SCL1D_YC_CFG16_xbstall_en(r32)              _BFGET_(r32, 1, 1)
    #define   SET32SCL1D_YC_CFG16_xbstall_en(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16SCL1D_YC_CFG16_xbstall_en(r16)              _BFGET_(r16, 1, 1)
    #define   SET16SCL1D_YC_CFG16_xbstall_en(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32SCL1D_YC_CFG16_xbstall_dly(r32)             _BFGET_(r32,15, 2)
    #define   SET32SCL1D_YC_CFG16_xbstall_dly(r32,v)           _BFSET_(r32,15, 2,v)
    #define   GET16SCL1D_YC_CFG16_xbstall_dly(r16)             _BFGET_(r16,15, 2)
    #define   SET16SCL1D_YC_CFG16_xbstall_dly(r16,v)           _BFSET_(r16,15, 2,v)

    #define   GET32SCL1D_YC_CFG16_ovf_margin(r32)              _BFGET_(r32,23,16)
    #define   SET32SCL1D_YC_CFG16_ovf_margin(r32,v)            _BFSET_(r32,23,16,v)
    #define   GET16SCL1D_YC_CFG16_ovf_margin(r16)              _BFGET_(r16, 7, 0)
    #define   SET16SCL1D_YC_CFG16_ovf_margin(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32SCL1D_YC_CFG16_udf_margin(r32)              _BFGET_(r32,31,24)
    #define   SET32SCL1D_YC_CFG16_udf_margin(r32,v)            _BFSET_(r32,31,24,v)
    #define   GET16SCL1D_YC_CFG16_udf_margin(r16)              _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_CFG16_udf_margin(r16,v)            _BFSET_(r16,15, 8,v)

    #define     w32SCL1D_YC_CFG16                              {\
            UNSG32 uCFG16_en_n                                 :  1;\
            UNSG32 uCFG16_xbstall_en                           :  1;\
            UNSG32 uCFG16_xbstall_dly                          : 14;\
            UNSG32 uCFG16_ovf_margin                           :  8;\
            UNSG32 uCFG16_udf_margin                           :  8;\
          }
    union { UNSG32 u32SCL1D_YC_CFG16;
            struct w32SCL1D_YC_CFG16;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG17_lsize(r32)                   _BFGET_(r32, 9, 0)
    #define   SET32SCL1D_YC_CFG17_lsize(r32,v)                 _BFSET_(r32, 9, 0,v)
    #define   GET16SCL1D_YC_CFG17_lsize(r16)                   _BFGET_(r16, 9, 0)
    #define   SET16SCL1D_YC_CFG17_lsize(r16,v)                 _BFSET_(r16, 9, 0,v)

    #define   GET32SCL1D_YC_CFG17_lsize_A(r32)                 _BFGET_(r32,19,10)
    #define   SET32SCL1D_YC_CFG17_lsize_A(r32,v)               _BFSET_(r32,19,10,v)

    #define     w32SCL1D_YC_CFG17                              {\
            UNSG32 uCFG17_lsize                                : 10;\
            UNSG32 uCFG17_lsize_A                              : 10;\
            UNSG32 RSVDx44_b20                                 : 12;\
          }
    union { UNSG32 u32SCL1D_YC_CFG17;
            struct w32SCL1D_YC_CFG17;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG18_fifo_mode(r32)               _BFGET_(r32, 0, 0)
    #define   SET32SCL1D_YC_CFG18_fifo_mode(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16SCL1D_YC_CFG18_fifo_mode(r16)               _BFGET_(r16, 0, 0)
    #define   SET16SCL1D_YC_CFG18_fifo_mode(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32SCL1D_YC_CFG18_fifo_depth(r32)              _BFGET_(r32,15, 1)
    #define   SET32SCL1D_YC_CFG18_fifo_depth(r32,v)            _BFSET_(r32,15, 1,v)
    #define   GET16SCL1D_YC_CFG18_fifo_depth(r16)              _BFGET_(r16,15, 1)
    #define   SET16SCL1D_YC_CFG18_fifo_depth(r16,v)            _BFSET_(r16,15, 1,v)

    #define   GET32SCL1D_YC_CFG18_fifo_dfst(r32)               _BFGET_(r32,30,16)
    #define   SET32SCL1D_YC_CFG18_fifo_dfst(r32,v)             _BFSET_(r32,30,16,v)
    #define   GET16SCL1D_YC_CFG18_fifo_dfst(r16)               _BFGET_(r16,14, 0)
    #define   SET16SCL1D_YC_CFG18_fifo_dfst(r16,v)             _BFSET_(r16,14, 0,v)

    #define   GET32SCL1D_YC_CFG18_pftch(r32)                   _BFGET_(r32,31,31)
    #define   SET32SCL1D_YC_CFG18_pftch(r32,v)                 _BFSET_(r32,31,31,v)
    #define   GET16SCL1D_YC_CFG18_pftch(r16)                   _BFGET_(r16,15,15)
    #define   SET16SCL1D_YC_CFG18_pftch(r16,v)                 _BFSET_(r16,15,15,v)

    #define     w32SCL1D_YC_CFG18                              {\
            UNSG32 uCFG18_fifo_mode                            :  1;\
            UNSG32 uCFG18_fifo_depth                           : 15;\
            UNSG32 uCFG18_fifo_dfst                            : 15;\
            UNSG32 uCFG18_pftch                                :  1;\
          }
    union { UNSG32 u32SCL1D_YC_CFG18;
            struct w32SCL1D_YC_CFG18;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG19_scl_after_crop_h(r32)        _BFGET_(r32, 7, 0)
    #define   SET32SCL1D_YC_CFG19_scl_after_crop_h(r32,v)      _BFSET_(r32, 7, 0,v)
    #define   GET16SCL1D_YC_CFG19_scl_after_crop_h(r16)        _BFGET_(r16, 7, 0)
    #define   SET16SCL1D_YC_CFG19_scl_after_crop_h(r16,v)      _BFSET_(r16, 7, 0,v)

    #define   GET32SCL1D_YC_CFG19_scl_after_crop_v(r32)        _BFGET_(r32,15, 8)
    #define   SET32SCL1D_YC_CFG19_scl_after_crop_v(r32,v)      _BFSET_(r32,15, 8,v)
    #define   GET16SCL1D_YC_CFG19_scl_after_crop_v(r16)        _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_CFG19_scl_after_crop_v(r16,v)      _BFSET_(r16,15, 8,v)

    #define     w32SCL1D_YC_CFG19                              {\
            UNSG32 uCFG19_scl_after_crop_h                     :  8;\
            UNSG32 uCFG19_scl_after_crop_v                     :  8;\
            UNSG32 RSVDx4C_b16                                 : 16;\
          }
    union { UNSG32 u32SCL1D_YC_CFG19;
            struct w32SCL1D_YC_CFG19;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG20_hlut_pdwn_regs(r32)          _BFGET_(r32, 0, 0)
    #define   SET32SCL1D_YC_CFG20_hlut_pdwn_regs(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16SCL1D_YC_CFG20_hlut_pdwn_regs(r16)          _BFGET_(r16, 0, 0)
    #define   SET16SCL1D_YC_CFG20_hlut_pdwn_regs(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32SCL1D_YC_CFG20_hlut_pdlvmc_regs(r32)        _BFGET_(r32, 1, 1)
    #define   SET32SCL1D_YC_CFG20_hlut_pdlvmc_regs(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16SCL1D_YC_CFG20_hlut_pdlvmc_regs(r16)        _BFGET_(r16, 1, 1)
    #define   SET16SCL1D_YC_CFG20_hlut_pdlvmc_regs(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32SCL1D_YC_CFG20_hlut_pdfvssm_regs(r32)       _BFGET_(r32, 2, 2)
    #define   SET32SCL1D_YC_CFG20_hlut_pdfvssm_regs(r32,v)     _BFSET_(r32, 2, 2,v)
    #define   GET16SCL1D_YC_CFG20_hlut_pdfvssm_regs(r16)       _BFGET_(r16, 2, 2)
    #define   SET16SCL1D_YC_CFG20_hlut_pdfvssm_regs(r16,v)     _BFSET_(r16, 2, 2,v)

    #define   GET32SCL1D_YC_CFG20_reserved0(r32)               _BFGET_(r32, 3, 3)
    #define   SET32SCL1D_YC_CFG20_reserved0(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16SCL1D_YC_CFG20_reserved0(r16)               _BFGET_(r16, 3, 3)
    #define   SET16SCL1D_YC_CFG20_reserved0(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32SCL1D_YC_CFG20_vlut_pdwn_regs(r32)          _BFGET_(r32, 4, 4)
    #define   SET32SCL1D_YC_CFG20_vlut_pdwn_regs(r32,v)        _BFSET_(r32, 4, 4,v)
    #define   GET16SCL1D_YC_CFG20_vlut_pdwn_regs(r16)          _BFGET_(r16, 4, 4)
    #define   SET16SCL1D_YC_CFG20_vlut_pdwn_regs(r16,v)        _BFSET_(r16, 4, 4,v)

    #define   GET32SCL1D_YC_CFG20_vlut_pdlvmc_regs(r32)        _BFGET_(r32, 5, 5)
    #define   SET32SCL1D_YC_CFG20_vlut_pdlvmc_regs(r32,v)      _BFSET_(r32, 5, 5,v)
    #define   GET16SCL1D_YC_CFG20_vlut_pdlvmc_regs(r16)        _BFGET_(r16, 5, 5)
    #define   SET16SCL1D_YC_CFG20_vlut_pdlvmc_regs(r16,v)      _BFSET_(r16, 5, 5,v)

    #define   GET32SCL1D_YC_CFG20_vlut_pdfvssm_regs(r32)       _BFGET_(r32, 6, 6)
    #define   SET32SCL1D_YC_CFG20_vlut_pdfvssm_regs(r32,v)     _BFSET_(r32, 6, 6,v)
    #define   GET16SCL1D_YC_CFG20_vlut_pdfvssm_regs(r16)       _BFGET_(r16, 6, 6)
    #define   SET16SCL1D_YC_CFG20_vlut_pdfvssm_regs(r16,v)     _BFSET_(r16, 6, 6,v)

    #define   GET32SCL1D_YC_CFG20_reserved1(r32)               _BFGET_(r32, 7, 7)
    #define   SET32SCL1D_YC_CFG20_reserved1(r32,v)             _BFSET_(r32, 7, 7,v)
    #define   GET16SCL1D_YC_CFG20_reserved1(r16)               _BFGET_(r16, 7, 7)
    #define   SET16SCL1D_YC_CFG20_reserved1(r16,v)             _BFSET_(r16, 7, 7,v)

    #define   GET32SCL1D_YC_CFG20_dpwr_regs(r32)               _BFGET_(r32,10, 8)
    #define   SET32SCL1D_YC_CFG20_dpwr_regs(r32,v)             _BFSET_(r32,10, 8,v)
    #define   GET16SCL1D_YC_CFG20_dpwr_regs(r16)               _BFGET_(r16,10, 8)
    #define   SET16SCL1D_YC_CFG20_dpwr_regs(r16,v)             _BFSET_(r16,10, 8,v)

    #define   GET32SCL1D_YC_CFG20_Reserved2(r32)               _BFGET_(r32,11,11)
    #define   SET32SCL1D_YC_CFG20_Reserved2(r32,v)             _BFSET_(r32,11,11,v)
    #define   GET16SCL1D_YC_CFG20_Reserved2(r16)               _BFGET_(r16,11,11)
    #define   SET16SCL1D_YC_CFG20_Reserved2(r16,v)             _BFSET_(r16,11,11,v)

    #define   GET32SCL1D_YC_CFG20_syp_yc420_regs(r32)          _BFGET_(r32,12,12)
    #define   SET32SCL1D_YC_CFG20_syp_yc420_regs(r32,v)        _BFSET_(r32,12,12,v)
    #define   GET16SCL1D_YC_CFG20_syp_yc420_regs(r16)          _BFGET_(r16,12,12)
    #define   SET16SCL1D_YC_CFG20_syp_yc420_regs(r16,v)        _BFSET_(r16,12,12,v)

    #define   GET32SCL1D_YC_CFG20_Reserved3(r32)               _BFGET_(r32,13,13)
    #define   SET32SCL1D_YC_CFG20_Reserved3(r32,v)             _BFSET_(r32,13,13,v)
    #define   GET16SCL1D_YC_CFG20_Reserved3(r16)               _BFGET_(r16,13,13)
    #define   SET16SCL1D_YC_CFG20_Reserved3(r16,v)             _BFSET_(r16,13,13,v)

    #define   GET32SCL1D_YC_CFG20_ip_type_regs(r32)            _BFGET_(r32,15,14)
    #define   SET32SCL1D_YC_CFG20_ip_type_regs(r32,v)          _BFSET_(r32,15,14,v)
    #define   GET16SCL1D_YC_CFG20_ip_type_regs(r16)            _BFGET_(r16,15,14)
    #define   SET16SCL1D_YC_CFG20_ip_type_regs(r16,v)          _BFSET_(r16,15,14,v)

    #define     w32SCL1D_YC_CFG20                              {\
            UNSG32 uCFG20_hlut_pdwn_regs                       :  1;\
            UNSG32 uCFG20_hlut_pdlvmc_regs                     :  1;\
            UNSG32 uCFG20_hlut_pdfvssm_regs                    :  1;\
            UNSG32 uCFG20_reserved0                            :  1;\
            UNSG32 uCFG20_vlut_pdwn_regs                       :  1;\
            UNSG32 uCFG20_vlut_pdlvmc_regs                     :  1;\
            UNSG32 uCFG20_vlut_pdfvssm_regs                    :  1;\
            UNSG32 uCFG20_reserved1                            :  1;\
            UNSG32 uCFG20_dpwr_regs                            :  3;\
            UNSG32 uCFG20_Reserved2                            :  1;\
            UNSG32 uCFG20_syp_yc420_regs                       :  1;\
            UNSG32 uCFG20_Reserved3                            :  1;\
            UNSG32 uCFG20_ip_type_regs                         :  2;\
            UNSG32 RSVDx50_b16                                 : 16;\
          }
    union { UNSG32 u32SCL1D_YC_CFG20;
            struct w32SCL1D_YC_CFG20;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG21_hinitph_lsb(r32)             _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_CFG21_hinitph_lsb(r32,v)           _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_CFG21_hinitph_lsb(r16)             _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_CFG21_hinitph_lsb(r16,v)           _BFSET_(r16,11, 0,v)

    #define     w32SCL1D_YC_CFG21                              {\
            UNSG32 uCFG21_hinitph_lsb                          : 12;\
            UNSG32 RSVDx54_b12                                 : 20;\
          }
    union { UNSG32 u32SCL1D_YC_CFG21;
            struct w32SCL1D_YC_CFG21;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_CFG33_lb0_pdwn_regs(r32)           _BFGET_(r32, 0, 0)
    #define   SET32SCL1D_YC_CFG33_lb0_pdwn_regs(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16SCL1D_YC_CFG33_lb0_pdwn_regs(r16)           _BFGET_(r16, 0, 0)
    #define   SET16SCL1D_YC_CFG33_lb0_pdwn_regs(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32SCL1D_YC_CFG33_lb0_pdlvmc_regs(r32)         _BFGET_(r32, 1, 1)
    #define   SET32SCL1D_YC_CFG33_lb0_pdlvmc_regs(r32,v)       _BFSET_(r32, 1, 1,v)
    #define   GET16SCL1D_YC_CFG33_lb0_pdlvmc_regs(r16)         _BFGET_(r16, 1, 1)
    #define   SET16SCL1D_YC_CFG33_lb0_pdlvmc_regs(r16,v)       _BFSET_(r16, 1, 1,v)

    #define   GET32SCL1D_YC_CFG33_lb0_pdfvssm_regs(r32)        _BFGET_(r32, 2, 2)
    #define   SET32SCL1D_YC_CFG33_lb0_pdfvssm_regs(r32,v)      _BFSET_(r32, 2, 2,v)
    #define   GET16SCL1D_YC_CFG33_lb0_pdfvssm_regs(r16)        _BFGET_(r16, 2, 2)
    #define   SET16SCL1D_YC_CFG33_lb0_pdfvssm_regs(r16,v)      _BFSET_(r16, 2, 2,v)

    #define   GET32SCL1D_YC_CFG33_reserved0(r32)               _BFGET_(r32, 3, 3)
    #define   SET32SCL1D_YC_CFG33_reserved0(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16SCL1D_YC_CFG33_reserved0(r16)               _BFGET_(r16, 3, 3)
    #define   SET16SCL1D_YC_CFG33_reserved0(r16,v)             _BFSET_(r16, 3, 3,v)

    #define     w32SCL1D_YC_CFG33                              {\
            UNSG32 uCFG33_lb0_pdwn_regs                        :  1;\
            UNSG32 uCFG33_lb0_pdlvmc_regs                      :  1;\
            UNSG32 uCFG33_lb0_pdfvssm_regs                     :  1;\
            UNSG32 uCFG33_reserved0                            :  1;\
            UNSG32 RSVDx58_b4                                  : 28;\
          }
    union { UNSG32 u32SCL1D_YC_CFG33;
            struct w32SCL1D_YC_CFG33;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SCL1D_YC;

    typedef union  T32SCL1D_YC_CFG0
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG0;
                 } T32SCL1D_YC_CFG0;
    typedef union  T32SCL1D_YC_CFG1
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG1;
                 } T32SCL1D_YC_CFG1;
    typedef union  T32SCL1D_YC_CFG2
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG2;
                 } T32SCL1D_YC_CFG2;
    typedef union  T32SCL1D_YC_CFG3
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG3;
                 } T32SCL1D_YC_CFG3;
    typedef union  T32SCL1D_YC_CFG4
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG4;
                 } T32SCL1D_YC_CFG4;
    typedef union  T32SCL1D_YC_CFG5
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG5;
                 } T32SCL1D_YC_CFG5;
    typedef union  T32SCL1D_YC_CFG6
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG6;
                 } T32SCL1D_YC_CFG6;
    typedef union  T32SCL1D_YC_CFG7
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG7;
                 } T32SCL1D_YC_CFG7;
    typedef union  T32SCL1D_YC_CFG8
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG8;
                 } T32SCL1D_YC_CFG8;
    typedef union  T32SCL1D_YC_CFG9
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG9;
                 } T32SCL1D_YC_CFG9;
    typedef union  T32SCL1D_YC_CFG10
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG10;
                 } T32SCL1D_YC_CFG10;
    typedef union  T32SCL1D_YC_CFG11
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG11;
                 } T32SCL1D_YC_CFG11;
    typedef union  T32SCL1D_YC_CFG12
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG12;
                 } T32SCL1D_YC_CFG12;
    typedef union  T32SCL1D_YC_CFG13
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG13;
                 } T32SCL1D_YC_CFG13;
    typedef union  T32SCL1D_YC_CFG14
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG14;
                 } T32SCL1D_YC_CFG14;
    typedef union  T32SCL1D_YC_CFG15
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG15;
                 } T32SCL1D_YC_CFG15;
    typedef union  T32SCL1D_YC_CFG16
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG16;
                 } T32SCL1D_YC_CFG16;
    typedef union  T32SCL1D_YC_CFG17
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG17;
                 } T32SCL1D_YC_CFG17;
    typedef union  T32SCL1D_YC_CFG18
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG18;
                 } T32SCL1D_YC_CFG18;
    typedef union  T32SCL1D_YC_CFG19
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG19;
                 } T32SCL1D_YC_CFG19;
    typedef union  T32SCL1D_YC_CFG20
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG20;
                 } T32SCL1D_YC_CFG20;
    typedef union  T32SCL1D_YC_CFG21
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG21;
                 } T32SCL1D_YC_CFG21;
    typedef union  T32SCL1D_YC_CFG33
          { UNSG32 u32;
            struct w32SCL1D_YC_CFG33;
                 } T32SCL1D_YC_CFG33;
    ///////////////////////////////////////////////////////////

    typedef union  TSCL1D_YC_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG0;
                   };
                 } TSCL1D_YC_CFG0;
    typedef union  TSCL1D_YC_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG1;
                   };
                 } TSCL1D_YC_CFG1;
    typedef union  TSCL1D_YC_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG2;
                   };
                 } TSCL1D_YC_CFG2;
    typedef union  TSCL1D_YC_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG3;
                   };
                 } TSCL1D_YC_CFG3;
    typedef union  TSCL1D_YC_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG4;
                   };
                 } TSCL1D_YC_CFG4;
    typedef union  TSCL1D_YC_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG5;
                   };
                 } TSCL1D_YC_CFG5;
    typedef union  TSCL1D_YC_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG6;
                   };
                 } TSCL1D_YC_CFG6;
    typedef union  TSCL1D_YC_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG7;
                   };
                 } TSCL1D_YC_CFG7;
    typedef union  TSCL1D_YC_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG8;
                   };
                 } TSCL1D_YC_CFG8;
    typedef union  TSCL1D_YC_CFG9
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG9;
                   };
                 } TSCL1D_YC_CFG9;
    typedef union  TSCL1D_YC_CFG10
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG10;
                   };
                 } TSCL1D_YC_CFG10;
    typedef union  TSCL1D_YC_CFG11
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG11;
                   };
                 } TSCL1D_YC_CFG11;
    typedef union  TSCL1D_YC_CFG12
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG12;
                   };
                 } TSCL1D_YC_CFG12;
    typedef union  TSCL1D_YC_CFG13
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG13;
                   };
                 } TSCL1D_YC_CFG13;
    typedef union  TSCL1D_YC_CFG14
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG14;
                   };
                 } TSCL1D_YC_CFG14;
    typedef union  TSCL1D_YC_CFG15
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG15;
                   };
                 } TSCL1D_YC_CFG15;
    typedef union  TSCL1D_YC_CFG16
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG16;
                   };
                 } TSCL1D_YC_CFG16;
    typedef union  TSCL1D_YC_CFG17
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG17;
                   };
                 } TSCL1D_YC_CFG17;
    typedef union  TSCL1D_YC_CFG18
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG18;
                   };
                 } TSCL1D_YC_CFG18;
    typedef union  TSCL1D_YC_CFG19
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG19;
                   };
                 } TSCL1D_YC_CFG19;
    typedef union  TSCL1D_YC_CFG20
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG20;
                   };
                 } TSCL1D_YC_CFG20;
    typedef union  TSCL1D_YC_CFG21
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG21;
                   };
                 } TSCL1D_YC_CFG21;
    typedef union  TSCL1D_YC_CFG33
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_CFG33;
                   };
                 } TSCL1D_YC_CFG33;

    ///////////////////////////////////////////////////////////
     SIGN32 SCL1D_YC_drvrd(SIE_SCL1D_YC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SCL1D_YC_drvwr(SIE_SCL1D_YC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SCL1D_YC_reset(SIE_SCL1D_YC *p);
     SIGN32 SCL1D_YC_cmp  (SIE_SCL1D_YC *p, SIE_SCL1D_YC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SCL1D_YC_check(p,pie,pfx,hLOG) SCL1D_YC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SCL1D_YC_print(p,    pfx,hLOG) SCL1D_YC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SCL1D_YC
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SCL1D_YC_COEFF          biu              (4,4)
///     ###
///     * Register specification of interface SCL1D_YC_COEFF
///     * Defines the size of the scl1d_yc_coeff
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 4  htap                      0x4
///                                    ###
///                                    * Number of horizontal tap for horizontal 1D scaler. For Adaptive scaler this should be 4.
///                                    ###
///               %unsigned 4  vtap                      0x4
///                                    ###
///                                    * Number of vertical tap for vertical 1D scaler. For Adaptive scaler this should be 4.
///                                    ###
///               %unsigned 5  coeff_index               0x0
///                                    ###
///                                    * Register to indicate the current programming location/phase of coefficient table
///                                    ###
///               %unsigned 1  coeff_hvsel               0x0
///                                    ###
///                                    * Bit to indicate programming of horizontal or vertical scaling coefficients.1: Horizontal table0: Vertical table
///                                    ###
///               %unsigned 1  coeffload                 0x0
///                                    ###
///                                    * Initiates loading of scaler coefficients from the microprocessor addresses (ADPSCL_COEFF0 - ADPSCL_COEFF11) to the appropriate hardware table location.
///                                    ###
///               %unsigned 1  coeffread                 0x0
///                                    ###
///                                    * Initiates Reading of scaler coefficients from the microprocessor addresses (ADPSCL_COEFF0 - ADPSCL_COEFF11) to the appropriate hardware table location.
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00004 CFG1                 (RW)
///               %unsigned 12 coeff0                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff0[12] : signcoeff0[11:0] : magnitude
///                                    ###
///               %unsigned 12 coeff1                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff1[12] : signcoeff1[11:0] : magnitude
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00008 CFG2                 (RW)
///               %unsigned 12 coeff2                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff2[12] : signcoeff211:0] : magnitude
///                                    ###
///               %unsigned 12 coeff3                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff3[12] : signcoeff3[11:0] : magnitude
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x0000C CFG3                 (RW)
///               %unsigned 12 coeff4                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff4[12] : signcoeff4[1:0] : magnitude
///                                    ###
///               %unsigned 12 coeff5                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff5[12] : signcoeff5[11:0] : magnitude
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00010 CFG4                 (RW)
///               %unsigned 12 coeff6                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff6[12] : signcoeff6[1:0] : magnitude
///                                    ###
///               %unsigned 12 coeff7                    0x0
///                                    ###
///                                    * Temporary Place holders for the coefficients of the filter corresponding to a phase of the horizontal or vertical scaler coefficient table. This phase is represented by the register ADPSCL_COEFFCTRL[5:0]. Coefficients should be in sign magnitude for. Coeff7[12] : signcoeff7[11:0] : magnitude
///                                    * End of scl1d_yc_coeff register group
///                                    ###
///               %%        8          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      20B, bits:     112b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SCL1D_YC_COEFF
#define h_SCL1D_YC_COEFF (){}

    #define     RA_SCL1D_YC_COEFF_CFG0                         0x0000

    #define     BA_SCL1D_YC_COEFF_CFG0_htap                    0x0000
    #define     B16SCL1D_YC_COEFF_CFG0_htap                    0x0000
    #define   LSb32SCL1D_YC_COEFF_CFG0_htap                       0
    #define   LSb16SCL1D_YC_COEFF_CFG0_htap                       0
    #define       bSCL1D_YC_COEFF_CFG0_htap                    4
    #define   MSK32SCL1D_YC_COEFF_CFG0_htap                       0x0000000F

    #define     BA_SCL1D_YC_COEFF_CFG0_vtap                    0x0000
    #define     B16SCL1D_YC_COEFF_CFG0_vtap                    0x0000
    #define   LSb32SCL1D_YC_COEFF_CFG0_vtap                       4
    #define   LSb16SCL1D_YC_COEFF_CFG0_vtap                       4
    #define       bSCL1D_YC_COEFF_CFG0_vtap                    4
    #define   MSK32SCL1D_YC_COEFF_CFG0_vtap                       0x000000F0

    #define     BA_SCL1D_YC_COEFF_CFG0_coeff_index             0x0001
    #define     B16SCL1D_YC_COEFF_CFG0_coeff_index             0x0000
    #define   LSb32SCL1D_YC_COEFF_CFG0_coeff_index                8
    #define   LSb16SCL1D_YC_COEFF_CFG0_coeff_index                8
    #define       bSCL1D_YC_COEFF_CFG0_coeff_index             5
    #define   MSK32SCL1D_YC_COEFF_CFG0_coeff_index                0x00001F00

    #define     BA_SCL1D_YC_COEFF_CFG0_coeff_hvsel             0x0001
    #define     B16SCL1D_YC_COEFF_CFG0_coeff_hvsel             0x0000
    #define   LSb32SCL1D_YC_COEFF_CFG0_coeff_hvsel                13
    #define   LSb16SCL1D_YC_COEFF_CFG0_coeff_hvsel                13
    #define       bSCL1D_YC_COEFF_CFG0_coeff_hvsel             1
    #define   MSK32SCL1D_YC_COEFF_CFG0_coeff_hvsel                0x00002000

    #define     BA_SCL1D_YC_COEFF_CFG0_coeffload               0x0001
    #define     B16SCL1D_YC_COEFF_CFG0_coeffload               0x0000
    #define   LSb32SCL1D_YC_COEFF_CFG0_coeffload                  14
    #define   LSb16SCL1D_YC_COEFF_CFG0_coeffload                  14
    #define       bSCL1D_YC_COEFF_CFG0_coeffload               1
    #define   MSK32SCL1D_YC_COEFF_CFG0_coeffload                  0x00004000

    #define     BA_SCL1D_YC_COEFF_CFG0_coeffread               0x0001
    #define     B16SCL1D_YC_COEFF_CFG0_coeffread               0x0000
    #define   LSb32SCL1D_YC_COEFF_CFG0_coeffread                  15
    #define   LSb16SCL1D_YC_COEFF_CFG0_coeffread                  15
    #define       bSCL1D_YC_COEFF_CFG0_coeffread               1
    #define   MSK32SCL1D_YC_COEFF_CFG0_coeffread                  0x00008000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_COEFF_CFG1                         0x0004

    #define     BA_SCL1D_YC_COEFF_CFG1_coeff0                  0x0004
    #define     B16SCL1D_YC_COEFF_CFG1_coeff0                  0x0004
    #define   LSb32SCL1D_YC_COEFF_CFG1_coeff0                     0
    #define   LSb16SCL1D_YC_COEFF_CFG1_coeff0                     0
    #define       bSCL1D_YC_COEFF_CFG1_coeff0                  12
    #define   MSK32SCL1D_YC_COEFF_CFG1_coeff0                     0x00000FFF

    #define     BA_SCL1D_YC_COEFF_CFG1_coeff1                  0x0005
    #define     B16SCL1D_YC_COEFF_CFG1_coeff1                  0x0004
    #define   LSb32SCL1D_YC_COEFF_CFG1_coeff1                     12
    #define   LSb16SCL1D_YC_COEFF_CFG1_coeff1                     12
    #define       bSCL1D_YC_COEFF_CFG1_coeff1                  12
    #define   MSK32SCL1D_YC_COEFF_CFG1_coeff1                     0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_COEFF_CFG2                         0x0008

    #define     BA_SCL1D_YC_COEFF_CFG2_coeff2                  0x0008
    #define     B16SCL1D_YC_COEFF_CFG2_coeff2                  0x0008
    #define   LSb32SCL1D_YC_COEFF_CFG2_coeff2                     0
    #define   LSb16SCL1D_YC_COEFF_CFG2_coeff2                     0
    #define       bSCL1D_YC_COEFF_CFG2_coeff2                  12
    #define   MSK32SCL1D_YC_COEFF_CFG2_coeff2                     0x00000FFF

    #define     BA_SCL1D_YC_COEFF_CFG2_coeff3                  0x0009
    #define     B16SCL1D_YC_COEFF_CFG2_coeff3                  0x0008
    #define   LSb32SCL1D_YC_COEFF_CFG2_coeff3                     12
    #define   LSb16SCL1D_YC_COEFF_CFG2_coeff3                     12
    #define       bSCL1D_YC_COEFF_CFG2_coeff3                  12
    #define   MSK32SCL1D_YC_COEFF_CFG2_coeff3                     0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_COEFF_CFG3                         0x000C

    #define     BA_SCL1D_YC_COEFF_CFG3_coeff4                  0x000C
    #define     B16SCL1D_YC_COEFF_CFG3_coeff4                  0x000C
    #define   LSb32SCL1D_YC_COEFF_CFG3_coeff4                     0
    #define   LSb16SCL1D_YC_COEFF_CFG3_coeff4                     0
    #define       bSCL1D_YC_COEFF_CFG3_coeff4                  12
    #define   MSK32SCL1D_YC_COEFF_CFG3_coeff4                     0x00000FFF

    #define     BA_SCL1D_YC_COEFF_CFG3_coeff5                  0x000D
    #define     B16SCL1D_YC_COEFF_CFG3_coeff5                  0x000C
    #define   LSb32SCL1D_YC_COEFF_CFG3_coeff5                     12
    #define   LSb16SCL1D_YC_COEFF_CFG3_coeff5                     12
    #define       bSCL1D_YC_COEFF_CFG3_coeff5                  12
    #define   MSK32SCL1D_YC_COEFF_CFG3_coeff5                     0x00FFF000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_COEFF_CFG4                         0x0010

    #define     BA_SCL1D_YC_COEFF_CFG4_coeff6                  0x0010
    #define     B16SCL1D_YC_COEFF_CFG4_coeff6                  0x0010
    #define   LSb32SCL1D_YC_COEFF_CFG4_coeff6                     0
    #define   LSb16SCL1D_YC_COEFF_CFG4_coeff6                     0
    #define       bSCL1D_YC_COEFF_CFG4_coeff6                  12
    #define   MSK32SCL1D_YC_COEFF_CFG4_coeff6                     0x00000FFF

    #define     BA_SCL1D_YC_COEFF_CFG4_coeff7                  0x0011
    #define     B16SCL1D_YC_COEFF_CFG4_coeff7                  0x0010
    #define   LSb32SCL1D_YC_COEFF_CFG4_coeff7                     12
    #define   LSb16SCL1D_YC_COEFF_CFG4_coeff7                     12
    #define       bSCL1D_YC_COEFF_CFG4_coeff7                  12
    #define   MSK32SCL1D_YC_COEFF_CFG4_coeff7                     0x00FFF000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SCL1D_YC_COEFF {
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_COEFF_CFG0_htap(r32)               _BFGET_(r32, 3, 0)
    #define   SET32SCL1D_YC_COEFF_CFG0_htap(r32,v)             _BFSET_(r32, 3, 0,v)
    #define   GET16SCL1D_YC_COEFF_CFG0_htap(r16)               _BFGET_(r16, 3, 0)
    #define   SET16SCL1D_YC_COEFF_CFG0_htap(r16,v)             _BFSET_(r16, 3, 0,v)

    #define   GET32SCL1D_YC_COEFF_CFG0_vtap(r32)               _BFGET_(r32, 7, 4)
    #define   SET32SCL1D_YC_COEFF_CFG0_vtap(r32,v)             _BFSET_(r32, 7, 4,v)
    #define   GET16SCL1D_YC_COEFF_CFG0_vtap(r16)               _BFGET_(r16, 7, 4)
    #define   SET16SCL1D_YC_COEFF_CFG0_vtap(r16,v)             _BFSET_(r16, 7, 4,v)

    #define   GET32SCL1D_YC_COEFF_CFG0_coeff_index(r32)        _BFGET_(r32,12, 8)
    #define   SET32SCL1D_YC_COEFF_CFG0_coeff_index(r32,v)      _BFSET_(r32,12, 8,v)
    #define   GET16SCL1D_YC_COEFF_CFG0_coeff_index(r16)        _BFGET_(r16,12, 8)
    #define   SET16SCL1D_YC_COEFF_CFG0_coeff_index(r16,v)      _BFSET_(r16,12, 8,v)

    #define   GET32SCL1D_YC_COEFF_CFG0_coeff_hvsel(r32)        _BFGET_(r32,13,13)
    #define   SET32SCL1D_YC_COEFF_CFG0_coeff_hvsel(r32,v)      _BFSET_(r32,13,13,v)
    #define   GET16SCL1D_YC_COEFF_CFG0_coeff_hvsel(r16)        _BFGET_(r16,13,13)
    #define   SET16SCL1D_YC_COEFF_CFG0_coeff_hvsel(r16,v)      _BFSET_(r16,13,13,v)

    #define   GET32SCL1D_YC_COEFF_CFG0_coeffload(r32)          _BFGET_(r32,14,14)
    #define   SET32SCL1D_YC_COEFF_CFG0_coeffload(r32,v)        _BFSET_(r32,14,14,v)
    #define   GET16SCL1D_YC_COEFF_CFG0_coeffload(r16)          _BFGET_(r16,14,14)
    #define   SET16SCL1D_YC_COEFF_CFG0_coeffload(r16,v)        _BFSET_(r16,14,14,v)

    #define   GET32SCL1D_YC_COEFF_CFG0_coeffread(r32)          _BFGET_(r32,15,15)
    #define   SET32SCL1D_YC_COEFF_CFG0_coeffread(r32,v)        _BFSET_(r32,15,15,v)
    #define   GET16SCL1D_YC_COEFF_CFG0_coeffread(r16)          _BFGET_(r16,15,15)
    #define   SET16SCL1D_YC_COEFF_CFG0_coeffread(r16,v)        _BFSET_(r16,15,15,v)

    #define     w32SCL1D_YC_COEFF_CFG0                         {\
            UNSG32 uCFG0_htap                                  :  4;\
            UNSG32 uCFG0_vtap                                  :  4;\
            UNSG32 uCFG0_coeff_index                           :  5;\
            UNSG32 uCFG0_coeff_hvsel                           :  1;\
            UNSG32 uCFG0_coeffload                             :  1;\
            UNSG32 uCFG0_coeffread                             :  1;\
            UNSG32 RSVDx0_b16                                  : 16;\
          }
    union { UNSG32 u32SCL1D_YC_COEFF_CFG0;
            struct w32SCL1D_YC_COEFF_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_COEFF_CFG1_coeff0(r32)             _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_COEFF_CFG1_coeff0(r32,v)           _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_COEFF_CFG1_coeff0(r16)             _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_COEFF_CFG1_coeff0(r16,v)           _BFSET_(r16,11, 0,v)

    #define   GET32SCL1D_YC_COEFF_CFG1_coeff1(r32)             _BFGET_(r32,23,12)
    #define   SET32SCL1D_YC_COEFF_CFG1_coeff1(r32,v)           _BFSET_(r32,23,12,v)

    #define     w32SCL1D_YC_COEFF_CFG1                         {\
            UNSG32 uCFG1_coeff0                                : 12;\
            UNSG32 uCFG1_coeff1                                : 12;\
            UNSG32 RSVDx4_b24                                  :  8;\
          }
    union { UNSG32 u32SCL1D_YC_COEFF_CFG1;
            struct w32SCL1D_YC_COEFF_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_COEFF_CFG2_coeff2(r32)             _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_COEFF_CFG2_coeff2(r32,v)           _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_COEFF_CFG2_coeff2(r16)             _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_COEFF_CFG2_coeff2(r16,v)           _BFSET_(r16,11, 0,v)

    #define   GET32SCL1D_YC_COEFF_CFG2_coeff3(r32)             _BFGET_(r32,23,12)
    #define   SET32SCL1D_YC_COEFF_CFG2_coeff3(r32,v)           _BFSET_(r32,23,12,v)

    #define     w32SCL1D_YC_COEFF_CFG2                         {\
            UNSG32 uCFG2_coeff2                                : 12;\
            UNSG32 uCFG2_coeff3                                : 12;\
            UNSG32 RSVDx8_b24                                  :  8;\
          }
    union { UNSG32 u32SCL1D_YC_COEFF_CFG2;
            struct w32SCL1D_YC_COEFF_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_COEFF_CFG3_coeff4(r32)             _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_COEFF_CFG3_coeff4(r32,v)           _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_COEFF_CFG3_coeff4(r16)             _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_COEFF_CFG3_coeff4(r16,v)           _BFSET_(r16,11, 0,v)

    #define   GET32SCL1D_YC_COEFF_CFG3_coeff5(r32)             _BFGET_(r32,23,12)
    #define   SET32SCL1D_YC_COEFF_CFG3_coeff5(r32,v)           _BFSET_(r32,23,12,v)

    #define     w32SCL1D_YC_COEFF_CFG3                         {\
            UNSG32 uCFG3_coeff4                                : 12;\
            UNSG32 uCFG3_coeff5                                : 12;\
            UNSG32 RSVDxC_b24                                  :  8;\
          }
    union { UNSG32 u32SCL1D_YC_COEFF_CFG3;
            struct w32SCL1D_YC_COEFF_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_COEFF_CFG4_coeff6(r32)             _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_COEFF_CFG4_coeff6(r32,v)           _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_COEFF_CFG4_coeff6(r16)             _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_COEFF_CFG4_coeff6(r16,v)           _BFSET_(r16,11, 0,v)

    #define   GET32SCL1D_YC_COEFF_CFG4_coeff7(r32)             _BFGET_(r32,23,12)
    #define   SET32SCL1D_YC_COEFF_CFG4_coeff7(r32,v)           _BFSET_(r32,23,12,v)

    #define     w32SCL1D_YC_COEFF_CFG4                         {\
            UNSG32 uCFG4_coeff6                                : 12;\
            UNSG32 uCFG4_coeff7                                : 12;\
            UNSG32 RSVDx10_b24                                 :  8;\
          }
    union { UNSG32 u32SCL1D_YC_COEFF_CFG4;
            struct w32SCL1D_YC_COEFF_CFG4;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SCL1D_YC_COEFF;

    typedef union  T32SCL1D_YC_COEFF_CFG0
          { UNSG32 u32;
            struct w32SCL1D_YC_COEFF_CFG0;
                 } T32SCL1D_YC_COEFF_CFG0;
    typedef union  T32SCL1D_YC_COEFF_CFG1
          { UNSG32 u32;
            struct w32SCL1D_YC_COEFF_CFG1;
                 } T32SCL1D_YC_COEFF_CFG1;
    typedef union  T32SCL1D_YC_COEFF_CFG2
          { UNSG32 u32;
            struct w32SCL1D_YC_COEFF_CFG2;
                 } T32SCL1D_YC_COEFF_CFG2;
    typedef union  T32SCL1D_YC_COEFF_CFG3
          { UNSG32 u32;
            struct w32SCL1D_YC_COEFF_CFG3;
                 } T32SCL1D_YC_COEFF_CFG3;
    typedef union  T32SCL1D_YC_COEFF_CFG4
          { UNSG32 u32;
            struct w32SCL1D_YC_COEFF_CFG4;
                 } T32SCL1D_YC_COEFF_CFG4;
    ///////////////////////////////////////////////////////////

    typedef union  TSCL1D_YC_COEFF_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_COEFF_CFG0;
                   };
                 } TSCL1D_YC_COEFF_CFG0;
    typedef union  TSCL1D_YC_COEFF_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_COEFF_CFG1;
                   };
                 } TSCL1D_YC_COEFF_CFG1;
    typedef union  TSCL1D_YC_COEFF_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_COEFF_CFG2;
                   };
                 } TSCL1D_YC_COEFF_CFG2;
    typedef union  TSCL1D_YC_COEFF_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_COEFF_CFG3;
                   };
                 } TSCL1D_YC_COEFF_CFG3;
    typedef union  TSCL1D_YC_COEFF_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_COEFF_CFG4;
                   };
                 } TSCL1D_YC_COEFF_CFG4;

    ///////////////////////////////////////////////////////////
     SIGN32 SCL1D_YC_COEFF_drvrd(SIE_SCL1D_YC_COEFF *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SCL1D_YC_COEFF_drvwr(SIE_SCL1D_YC_COEFF *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SCL1D_YC_COEFF_reset(SIE_SCL1D_YC_COEFF *p);
     SIGN32 SCL1D_YC_COEFF_cmp  (SIE_SCL1D_YC_COEFF *p, SIE_SCL1D_YC_COEFF *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SCL1D_YC_COEFF_check(p,pie,pfx,hLOG) SCL1D_YC_COEFF_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SCL1D_YC_COEFF_print(p,    pfx,hLOG) SCL1D_YC_COEFF_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SCL1D_YC_COEFF
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SCL1D_YC_FRC            biu              (4,4)
///     ###
///     * Register specification of interface SCL1D_YC_FRC
///     * Defines the size of the scl1d_yc_frc
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 8  sclclk_ctrl               0x80
///                                    ###
///                                    * ADPSCLCLK_CTRL_REGS
///                                    * Clock puncture value.
///                                    * The Scaler is capable of generating its output in large burst. In Slot1 mode, this can create load on SDRAM bandwidth. This register can be used even-out the load on SDRAM bandwidth. This register controls the data request to Scaler by puncturing the clock to the request generating logic, hence reducing the rate at which Scaler pumps the data out. Default value of this register is 128 (also the maximum allowed value), which means no puncturing, hence full load on bandwidth. Lower the value of this register, lower is the pressure on SDRAM bandwidth. For example, if the Scaler is downscaling a frame by 2, the puncture value should be at least greater than 64.
///                                    ###
///               %unsigned 8  sclclk_ctrl1              0x80
///                                    ###
///                                    * ADPSCLCLK_CTRL1_REGS
///                                    ###
///               %unsigned 8  ctrl0                     0x0
///                                    ###
///                                    * ADPCTRL0_REGS
///                                    * Not used.
///                                    * frc_mode[1:0]
///                                    * 00 : Sync mode (Only for MAIN and AUX)
///                                    * 01 : No scaler (Bypass scaling)
///                                    * 10 : Scaler occupies Slot1 (Before memory)
///                                    * 11 : Scaler occupies Slot2 (After memory : Only for MAIN and PIP)
///                                    * mosaic_mode[2]
///                                    * 0 : Mosaic Off (always off for AUX)
///                                    * 1 : Mosaic On
///                                    * bit_mode[3] : 24/16 bit modes (Can be overridden by FRC_PACKMODE register, address offset 0x2A)
///                                    * 1 : 24 bit mode
///                                    * 0 : 16 bit mode (Always 16 bit for AUX)
///                                    * sp_mode[7:4] : Special tearless modes
///                                    * 0000 : Normal tearless.
///                                    * 0001 : Smooth movie mode. 3:2 to 3:3 conversion based on film flag from deinterlacer.
///                                    * 0010 : Smooth movie mode. 3:2 to 1:1 conversion based on film flag from deinterlacer.
///                                    * 0011 : Stable output vsync mode on interlaced input with four frame buffers.
///                                    * 0100 : Stable output vsync mode on interlaced input with three frame buffers.
///                                    * 0101 : Stable output vsync mode on progressive input with two frame buffers.
///                                    * 0111 : Interlacing the progressive input frames into fields. This mode also needs FRC_SDRAM_MOS_LOFF register to be programmed as the number of SDRAM words corresponding to the size of one line of the input frame.
///                                    * 1010 : Smooth movie mode. 3:2 to 2:2 conversion based on film flag from deinterlacer.
///                                    * others – Reserved.
///                                    ###
///               %unsigned 8  ctrl1                     0x0
///                                    ###
///                                    * ADPCTRL1_REGS
///                                    * Not used.
///                                    * load_read[0]
///                                    * 0 to 1 transition loads tearless modes on SDRAM read control
///                                    * load_write[1]
///                                    * 0 to 1 transition loads tearless modes on SDRAM write control
///                                    * read_ctrl[2]
///                                    * 0 : Loads tearless modes on SDRAM read control immediately
///                                    * 1 : Loads tearless modes on SDRAM read control on frame reset
///                                    * write_ctrl[3]
///                                    * 0 : Loads tearless modes on SDRAM write control immediately
///                                    * 1 : Loads tearless modes on SDRAM write control on frame reset
///                                    * freeze[4] : Freeze modes
///                                    * 0 : No freeze
///                                    * 1 : Freeze
///                                    * inv_fe_fld[5] : Invert FE field
///                                    * inv_be_fld[6] : Invert BE Field
///                                    * be_frst_shft_en[7] : Enable BE Frame Reset Shift
///                                    ###
///     @ 0x00004 CFG1                 (P)
///               %unsigned 8  ctrl2                     0x0
///                                    ###
///                                    * ADPCTRL2_REGS
///                                    * Not used.
///                                    * tearless_read_ctrl[3:0]
///                                    * Tearless modes for SDRAM read control
///                                    * 0000 : Read from 0th frame buffer
///                                    * 0001 : Read from 1st frame buffer
///                                    * 0010 : Read from 2nd frame buffer
///                                    * 0011 : Read in 0-1-2-0 sequence (when read frame rate is slower than write frame rate, applicable for tearless mode only)
///                                    * 0100 : Read in tearless mode (keeping one frame distance with write pointer)
///                                    * NOTE : tearless write ctrl must be programmed to 0011 when tearless read control is 0100
///                                    * tearless_write_ctrl[7:4]
///                                    * Tearless modes for SDRAM write control
///                                    * 0000 : Write to 0th frame buffer
///                                    * 0001 : Write to 1st frame buffer
///                                    * 0010 : Write to 2nd frame buffer
///                                    * 0011 : Write in 0-1-2-0 sequence (when write frame rate is slower than read frame rate, applicable for tearless mode only)
///                                    * 0100 : Write in tearless mode (keeping one frame distance with read pointer)
///                                    * NOTE : tearless read ctrl must be programmed to 0011 when tearless write control is 0100
///                                    ###
///               %unsigned 8  dly_frst_de               0x40
///                                    ###
///                                    * Controls delay between frame reset and data-enable supplied to Scaler (Only in Slot2)
///                                    ###
///               %unsigned 10 dly_de_lrst               0x28
///                                    ###
///                                    * Controls delay between data-enable and line reset supplied to Scaler (Only in Slot2)
///                                    ###
///               %unsigned 1  auto_lrst                 0x0
///                                    ###
///                                    * Select lrst (line reset) generation.
///                                    * =0 : lrst generation depends on programmed dly_de_lrst.
///                                    * =1 : lrst generation is automatic. Should be enabled if HSCALE is placed before VSCALE (i.e., SCL's up_down=1)
///                                    ###
///               %%        5          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %unsigned 12 bevres                    0x0
///                                    ###
///                                    * If FRC is in No-scaler or Slot1 mode, program this to Back-end vertical resolution, else, program to Front-end vertical resolution
///                                    ###
///               %unsigned 12 fevres                    0x0
///                                    ###
///                                    * If FRC is in No-scaler or Slot2 mode, program this to Front-end vertical resolution else program to Back-end vertical resolution
///                                    ###
///               %unsigned 8  dly_lrst_de               0x28
///                                    ###
///                                    * Controls delay between line reset and data-enable supplied to Scaler (Only in Slot2)
///                                    ###
///     @ 0x0000C CFG3                 (P)
///               %unsigned 13 behres                    0x0
///                                    ###
///                                    * If FRC is in No-scaler or Slot1 mode, program this to Back-end horizontal resolution, else, program to Front-end horizontal resolution
///                                    ###
///               %unsigned 2  clnt_ctrl                 0x3
///                                    ###
///                                    * Not used.
///                                    * ADPCLNT_CTRL_REGS
///                                    * frc_clnt_ctrl0[0] :
///                                    * FRC write client mask. By enabling this mask, the request from write client to SDRAM controller is masked, thereby preventing the FRC from writing any data into SDRAM.
///                                    * 0 : Mask disabled
///                                    * 1 : Mask enabled
///                                    * frc_clnt_ctrl1[1] :
///                                    * FRC read client mask. By enabling this mask, the request from read client to SDRAM controller is masked, thereby preventing the FRC from reading any data from SDRAM.
///                                    * 0 : Mask disabled
///                                    * 1 : Mask enabled
///                                    ###
///               %unsigned 8  ctrl                      0x0
///                                    ###
///                                    * Not used. ADPCTRL_REGS
///                                    ###
///               %unsigned 8  rff_ctrl                  0x0
///                                    ###
///                                    * Not used. ADPRFF_CTRL_REGS
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %unsigned 1  ols                       0x0
///                                    ###
///                                    * Controls off-line scaler mode for adaptive scalar
///                                    * 0 : ADPSCL4K Scaler works in in-line mode
///                                    * 1 : ADPSCL4K Scaler works in off-line mode
///                                    ###
///               %unsigned 1  wclient                   0x0
///                                    ###
///                                    * Enables the write to ADPSCL4K Scaler's write client in in-line mode. Make this bit 1 for the last frame of in-line scaling (the frame before moving to off-line scaling). This is to facilitate smooth in-line to off-line transition.
///                                    * 0 : No write generated to write client in in-line mode.
///                                    * 1 : send the scaler output to write client (the data from scaler is pulled at the CPCB rate).
///                                    * This bit is don't care when en bit of ols register is 1.
///                                    ###
///               %unsigned 1  luma_key_en               0x0
///                                    ###
///                                    * Not used.
///                                    * Must be 0 as no alpha scaling suport.
///                                    ###
///               %unsigned 10 luma_key_min              0x0
///               %unsigned 10 luma_key_max              0x0
///                                    ###
///                                    * Not used.
///                                    ###
///               %%        9          # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 10 al_en_hit_al              0x0
///               %unsigned 12 al_en_non_hit_al          0xFF
///                                    ###
///                                    * Not used.
///                                    ###
///               %%        10         # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 10 al_out_threshold          0x80
///                                    ###
///                                    * Not used.
///                                    ###
///               %unsigned 10 al_out_zeroluma           0x0
///                                    ###
///                                    * Not used.
///                                    * End of scl1d_yc_frc register group
///                                    ###
///               %%        12         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     187b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SCL1D_YC_FRC
#define h_SCL1D_YC_FRC (){}

    #define     RA_SCL1D_YC_FRC_CFG0                           0x0000

    #define     BA_SCL1D_YC_FRC_CFG0_sclclk_ctrl               0x0000
    #define     B16SCL1D_YC_FRC_CFG0_sclclk_ctrl               0x0000
    #define   LSb32SCL1D_YC_FRC_CFG0_sclclk_ctrl                  0
    #define   LSb16SCL1D_YC_FRC_CFG0_sclclk_ctrl                  0
    #define       bSCL1D_YC_FRC_CFG0_sclclk_ctrl               8
    #define   MSK32SCL1D_YC_FRC_CFG0_sclclk_ctrl                  0x000000FF

    #define     BA_SCL1D_YC_FRC_CFG0_sclclk_ctrl1              0x0001
    #define     B16SCL1D_YC_FRC_CFG0_sclclk_ctrl1              0x0000
    #define   LSb32SCL1D_YC_FRC_CFG0_sclclk_ctrl1                 8
    #define   LSb16SCL1D_YC_FRC_CFG0_sclclk_ctrl1                 8
    #define       bSCL1D_YC_FRC_CFG0_sclclk_ctrl1              8
    #define   MSK32SCL1D_YC_FRC_CFG0_sclclk_ctrl1                 0x0000FF00

    #define     BA_SCL1D_YC_FRC_CFG0_ctrl0                     0x0002
    #define     B16SCL1D_YC_FRC_CFG0_ctrl0                     0x0002
    #define   LSb32SCL1D_YC_FRC_CFG0_ctrl0                        16
    #define   LSb16SCL1D_YC_FRC_CFG0_ctrl0                        0
    #define       bSCL1D_YC_FRC_CFG0_ctrl0                     8
    #define   MSK32SCL1D_YC_FRC_CFG0_ctrl0                        0x00FF0000

    #define     BA_SCL1D_YC_FRC_CFG0_ctrl1                     0x0003
    #define     B16SCL1D_YC_FRC_CFG0_ctrl1                     0x0002
    #define   LSb32SCL1D_YC_FRC_CFG0_ctrl1                        24
    #define   LSb16SCL1D_YC_FRC_CFG0_ctrl1                        8
    #define       bSCL1D_YC_FRC_CFG0_ctrl1                     8
    #define   MSK32SCL1D_YC_FRC_CFG0_ctrl1                        0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_FRC_CFG1                           0x0004

    #define     BA_SCL1D_YC_FRC_CFG1_ctrl2                     0x0004
    #define     B16SCL1D_YC_FRC_CFG1_ctrl2                     0x0004
    #define   LSb32SCL1D_YC_FRC_CFG1_ctrl2                        0
    #define   LSb16SCL1D_YC_FRC_CFG1_ctrl2                        0
    #define       bSCL1D_YC_FRC_CFG1_ctrl2                     8
    #define   MSK32SCL1D_YC_FRC_CFG1_ctrl2                        0x000000FF

    #define     BA_SCL1D_YC_FRC_CFG1_dly_frst_de               0x0005
    #define     B16SCL1D_YC_FRC_CFG1_dly_frst_de               0x0004
    #define   LSb32SCL1D_YC_FRC_CFG1_dly_frst_de                  8
    #define   LSb16SCL1D_YC_FRC_CFG1_dly_frst_de                  8
    #define       bSCL1D_YC_FRC_CFG1_dly_frst_de               8
    #define   MSK32SCL1D_YC_FRC_CFG1_dly_frst_de                  0x0000FF00

    #define     BA_SCL1D_YC_FRC_CFG1_dly_de_lrst               0x0006
    #define     B16SCL1D_YC_FRC_CFG1_dly_de_lrst               0x0006
    #define   LSb32SCL1D_YC_FRC_CFG1_dly_de_lrst                  16
    #define   LSb16SCL1D_YC_FRC_CFG1_dly_de_lrst                  0
    #define       bSCL1D_YC_FRC_CFG1_dly_de_lrst               10
    #define   MSK32SCL1D_YC_FRC_CFG1_dly_de_lrst                  0x03FF0000

    #define     BA_SCL1D_YC_FRC_CFG1_auto_lrst                 0x0007
    #define     B16SCL1D_YC_FRC_CFG1_auto_lrst                 0x0006
    #define   LSb32SCL1D_YC_FRC_CFG1_auto_lrst                    26
    #define   LSb16SCL1D_YC_FRC_CFG1_auto_lrst                    10
    #define       bSCL1D_YC_FRC_CFG1_auto_lrst                 1
    #define   MSK32SCL1D_YC_FRC_CFG1_auto_lrst                    0x04000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_FRC_CFG2                           0x0008

    #define     BA_SCL1D_YC_FRC_CFG2_bevres                    0x0008
    #define     B16SCL1D_YC_FRC_CFG2_bevres                    0x0008
    #define   LSb32SCL1D_YC_FRC_CFG2_bevres                       0
    #define   LSb16SCL1D_YC_FRC_CFG2_bevres                       0
    #define       bSCL1D_YC_FRC_CFG2_bevres                    12
    #define   MSK32SCL1D_YC_FRC_CFG2_bevres                       0x00000FFF

    #define     BA_SCL1D_YC_FRC_CFG2_fevres                    0x0009
    #define     B16SCL1D_YC_FRC_CFG2_fevres                    0x0008
    #define   LSb32SCL1D_YC_FRC_CFG2_fevres                       12
    #define   LSb16SCL1D_YC_FRC_CFG2_fevres                       12
    #define       bSCL1D_YC_FRC_CFG2_fevres                    12
    #define   MSK32SCL1D_YC_FRC_CFG2_fevres                       0x00FFF000

    #define     BA_SCL1D_YC_FRC_CFG2_dly_lrst_de               0x000B
    #define     B16SCL1D_YC_FRC_CFG2_dly_lrst_de               0x000A
    #define   LSb32SCL1D_YC_FRC_CFG2_dly_lrst_de                  24
    #define   LSb16SCL1D_YC_FRC_CFG2_dly_lrst_de                  8
    #define       bSCL1D_YC_FRC_CFG2_dly_lrst_de               8
    #define   MSK32SCL1D_YC_FRC_CFG2_dly_lrst_de                  0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_FRC_CFG3                           0x000C

    #define     BA_SCL1D_YC_FRC_CFG3_behres                    0x000C
    #define     B16SCL1D_YC_FRC_CFG3_behres                    0x000C
    #define   LSb32SCL1D_YC_FRC_CFG3_behres                       0
    #define   LSb16SCL1D_YC_FRC_CFG3_behres                       0
    #define       bSCL1D_YC_FRC_CFG3_behres                    13
    #define   MSK32SCL1D_YC_FRC_CFG3_behres                       0x00001FFF

    #define     BA_SCL1D_YC_FRC_CFG3_clnt_ctrl                 0x000D
    #define     B16SCL1D_YC_FRC_CFG3_clnt_ctrl                 0x000C
    #define   LSb32SCL1D_YC_FRC_CFG3_clnt_ctrl                    13
    #define   LSb16SCL1D_YC_FRC_CFG3_clnt_ctrl                    13
    #define       bSCL1D_YC_FRC_CFG3_clnt_ctrl                 2
    #define   MSK32SCL1D_YC_FRC_CFG3_clnt_ctrl                    0x00006000

    #define     BA_SCL1D_YC_FRC_CFG3_ctrl                      0x000D
    #define     B16SCL1D_YC_FRC_CFG3_ctrl                      0x000C
    #define   LSb32SCL1D_YC_FRC_CFG3_ctrl                         15
    #define   LSb16SCL1D_YC_FRC_CFG3_ctrl                         15
    #define       bSCL1D_YC_FRC_CFG3_ctrl                      8
    #define   MSK32SCL1D_YC_FRC_CFG3_ctrl                         0x007F8000

    #define     BA_SCL1D_YC_FRC_CFG3_rff_ctrl                  0x000E
    #define     B16SCL1D_YC_FRC_CFG3_rff_ctrl                  0x000E
    #define   LSb32SCL1D_YC_FRC_CFG3_rff_ctrl                     23
    #define   LSb16SCL1D_YC_FRC_CFG3_rff_ctrl                     7
    #define       bSCL1D_YC_FRC_CFG3_rff_ctrl                  8
    #define   MSK32SCL1D_YC_FRC_CFG3_rff_ctrl                     0x7F800000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_FRC_CFG4                           0x0010

    #define     BA_SCL1D_YC_FRC_CFG4_ols                       0x0010
    #define     B16SCL1D_YC_FRC_CFG4_ols                       0x0010
    #define   LSb32SCL1D_YC_FRC_CFG4_ols                          0
    #define   LSb16SCL1D_YC_FRC_CFG4_ols                          0
    #define       bSCL1D_YC_FRC_CFG4_ols                       1
    #define   MSK32SCL1D_YC_FRC_CFG4_ols                          0x00000001

    #define     BA_SCL1D_YC_FRC_CFG4_wclient                   0x0010
    #define     B16SCL1D_YC_FRC_CFG4_wclient                   0x0010
    #define   LSb32SCL1D_YC_FRC_CFG4_wclient                      1
    #define   LSb16SCL1D_YC_FRC_CFG4_wclient                      1
    #define       bSCL1D_YC_FRC_CFG4_wclient                   1
    #define   MSK32SCL1D_YC_FRC_CFG4_wclient                      0x00000002

    #define     BA_SCL1D_YC_FRC_CFG4_luma_key_en               0x0010
    #define     B16SCL1D_YC_FRC_CFG4_luma_key_en               0x0010
    #define   LSb32SCL1D_YC_FRC_CFG4_luma_key_en                  2
    #define   LSb16SCL1D_YC_FRC_CFG4_luma_key_en                  2
    #define       bSCL1D_YC_FRC_CFG4_luma_key_en               1
    #define   MSK32SCL1D_YC_FRC_CFG4_luma_key_en                  0x00000004

    #define     BA_SCL1D_YC_FRC_CFG4_luma_key_min              0x0010
    #define     B16SCL1D_YC_FRC_CFG4_luma_key_min              0x0010
    #define   LSb32SCL1D_YC_FRC_CFG4_luma_key_min                 3
    #define   LSb16SCL1D_YC_FRC_CFG4_luma_key_min                 3
    #define       bSCL1D_YC_FRC_CFG4_luma_key_min              10
    #define   MSK32SCL1D_YC_FRC_CFG4_luma_key_min                 0x00001FF8

    #define     BA_SCL1D_YC_FRC_CFG4_luma_key_max              0x0011
    #define     B16SCL1D_YC_FRC_CFG4_luma_key_max              0x0010
    #define   LSb32SCL1D_YC_FRC_CFG4_luma_key_max                 13
    #define   LSb16SCL1D_YC_FRC_CFG4_luma_key_max                 13
    #define       bSCL1D_YC_FRC_CFG4_luma_key_max              10
    #define   MSK32SCL1D_YC_FRC_CFG4_luma_key_max                 0x007FE000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_FRC_CFG5                           0x0014

    #define     BA_SCL1D_YC_FRC_CFG5_al_en_hit_al              0x0014
    #define     B16SCL1D_YC_FRC_CFG5_al_en_hit_al              0x0014
    #define   LSb32SCL1D_YC_FRC_CFG5_al_en_hit_al                 0
    #define   LSb16SCL1D_YC_FRC_CFG5_al_en_hit_al                 0
    #define       bSCL1D_YC_FRC_CFG5_al_en_hit_al              10
    #define   MSK32SCL1D_YC_FRC_CFG5_al_en_hit_al                 0x000003FF

    #define     BA_SCL1D_YC_FRC_CFG5_al_en_non_hit_al          0x0015
    #define     B16SCL1D_YC_FRC_CFG5_al_en_non_hit_al          0x0014
    #define   LSb32SCL1D_YC_FRC_CFG5_al_en_non_hit_al             10
    #define   LSb16SCL1D_YC_FRC_CFG5_al_en_non_hit_al             10
    #define       bSCL1D_YC_FRC_CFG5_al_en_non_hit_al          12
    #define   MSK32SCL1D_YC_FRC_CFG5_al_en_non_hit_al             0x003FFC00
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_FRC_CFG6                           0x0018

    #define     BA_SCL1D_YC_FRC_CFG6_al_out_threshold          0x0018
    #define     B16SCL1D_YC_FRC_CFG6_al_out_threshold          0x0018
    #define   LSb32SCL1D_YC_FRC_CFG6_al_out_threshold             0
    #define   LSb16SCL1D_YC_FRC_CFG6_al_out_threshold             0
    #define       bSCL1D_YC_FRC_CFG6_al_out_threshold          10
    #define   MSK32SCL1D_YC_FRC_CFG6_al_out_threshold             0x000003FF

    #define     BA_SCL1D_YC_FRC_CFG6_al_out_zeroluma           0x0019
    #define     B16SCL1D_YC_FRC_CFG6_al_out_zeroluma           0x0018
    #define   LSb32SCL1D_YC_FRC_CFG6_al_out_zeroluma              10
    #define   LSb16SCL1D_YC_FRC_CFG6_al_out_zeroluma              10
    #define       bSCL1D_YC_FRC_CFG6_al_out_zeroluma           10
    #define   MSK32SCL1D_YC_FRC_CFG6_al_out_zeroluma              0x000FFC00
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SCL1D_YC_FRC {
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_FRC_CFG0_sclclk_ctrl(r32)          _BFGET_(r32, 7, 0)
    #define   SET32SCL1D_YC_FRC_CFG0_sclclk_ctrl(r32,v)        _BFSET_(r32, 7, 0,v)
    #define   GET16SCL1D_YC_FRC_CFG0_sclclk_ctrl(r16)          _BFGET_(r16, 7, 0)
    #define   SET16SCL1D_YC_FRC_CFG0_sclclk_ctrl(r16,v)        _BFSET_(r16, 7, 0,v)

    #define   GET32SCL1D_YC_FRC_CFG0_sclclk_ctrl1(r32)         _BFGET_(r32,15, 8)
    #define   SET32SCL1D_YC_FRC_CFG0_sclclk_ctrl1(r32,v)       _BFSET_(r32,15, 8,v)
    #define   GET16SCL1D_YC_FRC_CFG0_sclclk_ctrl1(r16)         _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_FRC_CFG0_sclclk_ctrl1(r16,v)       _BFSET_(r16,15, 8,v)

    #define   GET32SCL1D_YC_FRC_CFG0_ctrl0(r32)                _BFGET_(r32,23,16)
    #define   SET32SCL1D_YC_FRC_CFG0_ctrl0(r32,v)              _BFSET_(r32,23,16,v)
    #define   GET16SCL1D_YC_FRC_CFG0_ctrl0(r16)                _BFGET_(r16, 7, 0)
    #define   SET16SCL1D_YC_FRC_CFG0_ctrl0(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32SCL1D_YC_FRC_CFG0_ctrl1(r32)                _BFGET_(r32,31,24)
    #define   SET32SCL1D_YC_FRC_CFG0_ctrl1(r32,v)              _BFSET_(r32,31,24,v)
    #define   GET16SCL1D_YC_FRC_CFG0_ctrl1(r16)                _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_FRC_CFG0_ctrl1(r16,v)              _BFSET_(r16,15, 8,v)

    #define     w32SCL1D_YC_FRC_CFG0                           {\
            UNSG32 uCFG0_sclclk_ctrl                           :  8;\
            UNSG32 uCFG0_sclclk_ctrl1                          :  8;\
            UNSG32 uCFG0_ctrl0                                 :  8;\
            UNSG32 uCFG0_ctrl1                                 :  8;\
          }
    union { UNSG32 u32SCL1D_YC_FRC_CFG0;
            struct w32SCL1D_YC_FRC_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_FRC_CFG1_ctrl2(r32)                _BFGET_(r32, 7, 0)
    #define   SET32SCL1D_YC_FRC_CFG1_ctrl2(r32,v)              _BFSET_(r32, 7, 0,v)
    #define   GET16SCL1D_YC_FRC_CFG1_ctrl2(r16)                _BFGET_(r16, 7, 0)
    #define   SET16SCL1D_YC_FRC_CFG1_ctrl2(r16,v)              _BFSET_(r16, 7, 0,v)

    #define   GET32SCL1D_YC_FRC_CFG1_dly_frst_de(r32)          _BFGET_(r32,15, 8)
    #define   SET32SCL1D_YC_FRC_CFG1_dly_frst_de(r32,v)        _BFSET_(r32,15, 8,v)
    #define   GET16SCL1D_YC_FRC_CFG1_dly_frst_de(r16)          _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_FRC_CFG1_dly_frst_de(r16,v)        _BFSET_(r16,15, 8,v)

    #define   GET32SCL1D_YC_FRC_CFG1_dly_de_lrst(r32)          _BFGET_(r32,25,16)
    #define   SET32SCL1D_YC_FRC_CFG1_dly_de_lrst(r32,v)        _BFSET_(r32,25,16,v)
    #define   GET16SCL1D_YC_FRC_CFG1_dly_de_lrst(r16)          _BFGET_(r16, 9, 0)
    #define   SET16SCL1D_YC_FRC_CFG1_dly_de_lrst(r16,v)        _BFSET_(r16, 9, 0,v)

    #define   GET32SCL1D_YC_FRC_CFG1_auto_lrst(r32)            _BFGET_(r32,26,26)
    #define   SET32SCL1D_YC_FRC_CFG1_auto_lrst(r32,v)          _BFSET_(r32,26,26,v)
    #define   GET16SCL1D_YC_FRC_CFG1_auto_lrst(r16)            _BFGET_(r16,10,10)
    #define   SET16SCL1D_YC_FRC_CFG1_auto_lrst(r16,v)          _BFSET_(r16,10,10,v)

    #define     w32SCL1D_YC_FRC_CFG1                           {\
            UNSG32 uCFG1_ctrl2                                 :  8;\
            UNSG32 uCFG1_dly_frst_de                           :  8;\
            UNSG32 uCFG1_dly_de_lrst                           : 10;\
            UNSG32 uCFG1_auto_lrst                             :  1;\
            UNSG32 RSVDx4_b27                                  :  5;\
          }
    union { UNSG32 u32SCL1D_YC_FRC_CFG1;
            struct w32SCL1D_YC_FRC_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_FRC_CFG2_bevres(r32)               _BFGET_(r32,11, 0)
    #define   SET32SCL1D_YC_FRC_CFG2_bevres(r32,v)             _BFSET_(r32,11, 0,v)
    #define   GET16SCL1D_YC_FRC_CFG2_bevres(r16)               _BFGET_(r16,11, 0)
    #define   SET16SCL1D_YC_FRC_CFG2_bevres(r16,v)             _BFSET_(r16,11, 0,v)

    #define   GET32SCL1D_YC_FRC_CFG2_fevres(r32)               _BFGET_(r32,23,12)
    #define   SET32SCL1D_YC_FRC_CFG2_fevres(r32,v)             _BFSET_(r32,23,12,v)

    #define   GET32SCL1D_YC_FRC_CFG2_dly_lrst_de(r32)          _BFGET_(r32,31,24)
    #define   SET32SCL1D_YC_FRC_CFG2_dly_lrst_de(r32,v)        _BFSET_(r32,31,24,v)
    #define   GET16SCL1D_YC_FRC_CFG2_dly_lrst_de(r16)          _BFGET_(r16,15, 8)
    #define   SET16SCL1D_YC_FRC_CFG2_dly_lrst_de(r16,v)        _BFSET_(r16,15, 8,v)

    #define     w32SCL1D_YC_FRC_CFG2                           {\
            UNSG32 uCFG2_bevres                                : 12;\
            UNSG32 uCFG2_fevres                                : 12;\
            UNSG32 uCFG2_dly_lrst_de                           :  8;\
          }
    union { UNSG32 u32SCL1D_YC_FRC_CFG2;
            struct w32SCL1D_YC_FRC_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_FRC_CFG3_behres(r32)               _BFGET_(r32,12, 0)
    #define   SET32SCL1D_YC_FRC_CFG3_behres(r32,v)             _BFSET_(r32,12, 0,v)
    #define   GET16SCL1D_YC_FRC_CFG3_behres(r16)               _BFGET_(r16,12, 0)
    #define   SET16SCL1D_YC_FRC_CFG3_behres(r16,v)             _BFSET_(r16,12, 0,v)

    #define   GET32SCL1D_YC_FRC_CFG3_clnt_ctrl(r32)            _BFGET_(r32,14,13)
    #define   SET32SCL1D_YC_FRC_CFG3_clnt_ctrl(r32,v)          _BFSET_(r32,14,13,v)
    #define   GET16SCL1D_YC_FRC_CFG3_clnt_ctrl(r16)            _BFGET_(r16,14,13)
    #define   SET16SCL1D_YC_FRC_CFG3_clnt_ctrl(r16,v)          _BFSET_(r16,14,13,v)

    #define   GET32SCL1D_YC_FRC_CFG3_ctrl(r32)                 _BFGET_(r32,22,15)
    #define   SET32SCL1D_YC_FRC_CFG3_ctrl(r32,v)               _BFSET_(r32,22,15,v)

    #define   GET32SCL1D_YC_FRC_CFG3_rff_ctrl(r32)             _BFGET_(r32,30,23)
    #define   SET32SCL1D_YC_FRC_CFG3_rff_ctrl(r32,v)           _BFSET_(r32,30,23,v)
    #define   GET16SCL1D_YC_FRC_CFG3_rff_ctrl(r16)             _BFGET_(r16,14, 7)
    #define   SET16SCL1D_YC_FRC_CFG3_rff_ctrl(r16,v)           _BFSET_(r16,14, 7,v)

    #define     w32SCL1D_YC_FRC_CFG3                           {\
            UNSG32 uCFG3_behres                                : 13;\
            UNSG32 uCFG3_clnt_ctrl                             :  2;\
            UNSG32 uCFG3_ctrl                                  :  8;\
            UNSG32 uCFG3_rff_ctrl                              :  8;\
            UNSG32 RSVDxC_b31                                  :  1;\
          }
    union { UNSG32 u32SCL1D_YC_FRC_CFG3;
            struct w32SCL1D_YC_FRC_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_FRC_CFG4_ols(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32SCL1D_YC_FRC_CFG4_ols(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16SCL1D_YC_FRC_CFG4_ols(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16SCL1D_YC_FRC_CFG4_ols(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32SCL1D_YC_FRC_CFG4_wclient(r32)              _BFGET_(r32, 1, 1)
    #define   SET32SCL1D_YC_FRC_CFG4_wclient(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16SCL1D_YC_FRC_CFG4_wclient(r16)              _BFGET_(r16, 1, 1)
    #define   SET16SCL1D_YC_FRC_CFG4_wclient(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32SCL1D_YC_FRC_CFG4_luma_key_en(r32)          _BFGET_(r32, 2, 2)
    #define   SET32SCL1D_YC_FRC_CFG4_luma_key_en(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16SCL1D_YC_FRC_CFG4_luma_key_en(r16)          _BFGET_(r16, 2, 2)
    #define   SET16SCL1D_YC_FRC_CFG4_luma_key_en(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32SCL1D_YC_FRC_CFG4_luma_key_min(r32)         _BFGET_(r32,12, 3)
    #define   SET32SCL1D_YC_FRC_CFG4_luma_key_min(r32,v)       _BFSET_(r32,12, 3,v)
    #define   GET16SCL1D_YC_FRC_CFG4_luma_key_min(r16)         _BFGET_(r16,12, 3)
    #define   SET16SCL1D_YC_FRC_CFG4_luma_key_min(r16,v)       _BFSET_(r16,12, 3,v)

    #define   GET32SCL1D_YC_FRC_CFG4_luma_key_max(r32)         _BFGET_(r32,22,13)
    #define   SET32SCL1D_YC_FRC_CFG4_luma_key_max(r32,v)       _BFSET_(r32,22,13,v)

    #define     w32SCL1D_YC_FRC_CFG4                           {\
            UNSG32 uCFG4_ols                                   :  1;\
            UNSG32 uCFG4_wclient                               :  1;\
            UNSG32 uCFG4_luma_key_en                           :  1;\
            UNSG32 uCFG4_luma_key_min                          : 10;\
            UNSG32 uCFG4_luma_key_max                          : 10;\
            UNSG32 RSVDx10_b23                                 :  9;\
          }
    union { UNSG32 u32SCL1D_YC_FRC_CFG4;
            struct w32SCL1D_YC_FRC_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_FRC_CFG5_al_en_hit_al(r32)         _BFGET_(r32, 9, 0)
    #define   SET32SCL1D_YC_FRC_CFG5_al_en_hit_al(r32,v)       _BFSET_(r32, 9, 0,v)
    #define   GET16SCL1D_YC_FRC_CFG5_al_en_hit_al(r16)         _BFGET_(r16, 9, 0)
    #define   SET16SCL1D_YC_FRC_CFG5_al_en_hit_al(r16,v)       _BFSET_(r16, 9, 0,v)

    #define   GET32SCL1D_YC_FRC_CFG5_al_en_non_hit_al(r32)     _BFGET_(r32,21,10)
    #define   SET32SCL1D_YC_FRC_CFG5_al_en_non_hit_al(r32,v)   _BFSET_(r32,21,10,v)

    #define     w32SCL1D_YC_FRC_CFG5                           {\
            UNSG32 uCFG5_al_en_hit_al                          : 10;\
            UNSG32 uCFG5_al_en_non_hit_al                      : 12;\
            UNSG32 RSVDx14_b22                                 : 10;\
          }
    union { UNSG32 u32SCL1D_YC_FRC_CFG5;
            struct w32SCL1D_YC_FRC_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_FRC_CFG6_al_out_threshold(r32)     _BFGET_(r32, 9, 0)
    #define   SET32SCL1D_YC_FRC_CFG6_al_out_threshold(r32,v)   _BFSET_(r32, 9, 0,v)
    #define   GET16SCL1D_YC_FRC_CFG6_al_out_threshold(r16)     _BFGET_(r16, 9, 0)
    #define   SET16SCL1D_YC_FRC_CFG6_al_out_threshold(r16,v)   _BFSET_(r16, 9, 0,v)

    #define   GET32SCL1D_YC_FRC_CFG6_al_out_zeroluma(r32)      _BFGET_(r32,19,10)
    #define   SET32SCL1D_YC_FRC_CFG6_al_out_zeroluma(r32,v)    _BFSET_(r32,19,10,v)

    #define     w32SCL1D_YC_FRC_CFG6                           {\
            UNSG32 uCFG6_al_out_threshold                      : 10;\
            UNSG32 uCFG6_al_out_zeroluma                       : 10;\
            UNSG32 RSVDx18_b20                                 : 12;\
          }
    union { UNSG32 u32SCL1D_YC_FRC_CFG6;
            struct w32SCL1D_YC_FRC_CFG6;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SCL1D_YC_FRC;

    typedef union  T32SCL1D_YC_FRC_CFG0
          { UNSG32 u32;
            struct w32SCL1D_YC_FRC_CFG0;
                 } T32SCL1D_YC_FRC_CFG0;
    typedef union  T32SCL1D_YC_FRC_CFG1
          { UNSG32 u32;
            struct w32SCL1D_YC_FRC_CFG1;
                 } T32SCL1D_YC_FRC_CFG1;
    typedef union  T32SCL1D_YC_FRC_CFG2
          { UNSG32 u32;
            struct w32SCL1D_YC_FRC_CFG2;
                 } T32SCL1D_YC_FRC_CFG2;
    typedef union  T32SCL1D_YC_FRC_CFG3
          { UNSG32 u32;
            struct w32SCL1D_YC_FRC_CFG3;
                 } T32SCL1D_YC_FRC_CFG3;
    typedef union  T32SCL1D_YC_FRC_CFG4
          { UNSG32 u32;
            struct w32SCL1D_YC_FRC_CFG4;
                 } T32SCL1D_YC_FRC_CFG4;
    typedef union  T32SCL1D_YC_FRC_CFG5
          { UNSG32 u32;
            struct w32SCL1D_YC_FRC_CFG5;
                 } T32SCL1D_YC_FRC_CFG5;
    typedef union  T32SCL1D_YC_FRC_CFG6
          { UNSG32 u32;
            struct w32SCL1D_YC_FRC_CFG6;
                 } T32SCL1D_YC_FRC_CFG6;
    ///////////////////////////////////////////////////////////

    typedef union  TSCL1D_YC_FRC_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_FRC_CFG0;
                   };
                 } TSCL1D_YC_FRC_CFG0;
    typedef union  TSCL1D_YC_FRC_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_FRC_CFG1;
                   };
                 } TSCL1D_YC_FRC_CFG1;
    typedef union  TSCL1D_YC_FRC_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_FRC_CFG2;
                   };
                 } TSCL1D_YC_FRC_CFG2;
    typedef union  TSCL1D_YC_FRC_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_FRC_CFG3;
                   };
                 } TSCL1D_YC_FRC_CFG3;
    typedef union  TSCL1D_YC_FRC_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_FRC_CFG4;
                   };
                 } TSCL1D_YC_FRC_CFG4;
    typedef union  TSCL1D_YC_FRC_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_FRC_CFG5;
                   };
                 } TSCL1D_YC_FRC_CFG5;
    typedef union  TSCL1D_YC_FRC_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_FRC_CFG6;
                   };
                 } TSCL1D_YC_FRC_CFG6;

    ///////////////////////////////////////////////////////////
     SIGN32 SCL1D_YC_FRC_drvrd(SIE_SCL1D_YC_FRC *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SCL1D_YC_FRC_drvwr(SIE_SCL1D_YC_FRC *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SCL1D_YC_FRC_reset(SIE_SCL1D_YC_FRC *p);
     SIGN32 SCL1D_YC_FRC_cmp  (SIE_SCL1D_YC_FRC *p, SIE_SCL1D_YC_FRC *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SCL1D_YC_FRC_check(p,pie,pfx,hLOG) SCL1D_YC_FRC_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SCL1D_YC_FRC_print(p,    pfx,hLOG) SCL1D_YC_FRC_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SCL1D_YC_FRC
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DITHER                  biu              (4,4)
///     ###
///     * Register specification of interface DITHER
///     * Defines the size of the dither
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 2  mode                      0x2
///                                    ###
///                                    * Selects dithering method
///                                    * 0: Simple truncation
///                                    * 1: rounding
///                                    * 2: 1D Error diffusion(truncation)
///                                    * 3: 1D Error diffusion(rounding)
///                                    ###
///               %unsigned 2  ctrl                      0x0
///                                    ###
///                                    * Dither Output Control
///                                    * [0]: Dither Off(input bits=output bits)
///                                    * 0: 2lsb Dither off(Input bits-2=Output bits)
///                                    * 1: 4lsb Dither off(Input bits-4=Output bits)
///                                    * [1]: Dither ON/OFF
///                                    * 0: Dither ON
///                                    * 1: Dither OFF
///                                    ###
///               %unsigned 1  ycmode                    0x0
///                                    ###
///                                    * 1: Input in YUV422 or YUV420 format
///                                    * only 2 components Y and C(U and V alternate clocks) dithered.
///                                    * 0: Input in RGB or YUV444 format.
///                                    * all 3 components are dithered
///                                    * End of dither register group
///                                    ###
///               %%        27         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       5b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DITHER
#define h_DITHER (){}

    #define     RA_DITHER_CFG0                                 0x0000

    #define     BA_DITHER_CFG0_mode                            0x0000
    #define     B16DITHER_CFG0_mode                            0x0000
    #define   LSb32DITHER_CFG0_mode                               0
    #define   LSb16DITHER_CFG0_mode                               0
    #define       bDITHER_CFG0_mode                            2
    #define   MSK32DITHER_CFG0_mode                               0x00000003

    #define     BA_DITHER_CFG0_ctrl                            0x0000
    #define     B16DITHER_CFG0_ctrl                            0x0000
    #define   LSb32DITHER_CFG0_ctrl                               2
    #define   LSb16DITHER_CFG0_ctrl                               2
    #define       bDITHER_CFG0_ctrl                            2
    #define   MSK32DITHER_CFG0_ctrl                               0x0000000C

    #define     BA_DITHER_CFG0_ycmode                          0x0000
    #define     B16DITHER_CFG0_ycmode                          0x0000
    #define   LSb32DITHER_CFG0_ycmode                             4
    #define   LSb16DITHER_CFG0_ycmode                             4
    #define       bDITHER_CFG0_ycmode                          1
    #define   MSK32DITHER_CFG0_ycmode                             0x00000010
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DITHER {
    ///////////////////////////////////////////////////////////
    #define   GET32DITHER_CFG0_mode(r32)                       _BFGET_(r32, 1, 0)
    #define   SET32DITHER_CFG0_mode(r32,v)                     _BFSET_(r32, 1, 0,v)
    #define   GET16DITHER_CFG0_mode(r16)                       _BFGET_(r16, 1, 0)
    #define   SET16DITHER_CFG0_mode(r16,v)                     _BFSET_(r16, 1, 0,v)

    #define   GET32DITHER_CFG0_ctrl(r32)                       _BFGET_(r32, 3, 2)
    #define   SET32DITHER_CFG0_ctrl(r32,v)                     _BFSET_(r32, 3, 2,v)
    #define   GET16DITHER_CFG0_ctrl(r16)                       _BFGET_(r16, 3, 2)
    #define   SET16DITHER_CFG0_ctrl(r16,v)                     _BFSET_(r16, 3, 2,v)

    #define   GET32DITHER_CFG0_ycmode(r32)                     _BFGET_(r32, 4, 4)
    #define   SET32DITHER_CFG0_ycmode(r32,v)                   _BFSET_(r32, 4, 4,v)
    #define   GET16DITHER_CFG0_ycmode(r16)                     _BFGET_(r16, 4, 4)
    #define   SET16DITHER_CFG0_ycmode(r16,v)                   _BFSET_(r16, 4, 4,v)

    #define     w32DITHER_CFG0                                 {\
            UNSG32 uCFG0_mode                                  :  2;\
            UNSG32 uCFG0_ctrl                                  :  2;\
            UNSG32 uCFG0_ycmode                                :  1;\
            UNSG32 RSVDx0_b5                                   : 27;\
          }
    union { UNSG32 u32DITHER_CFG0;
            struct w32DITHER_CFG0;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DITHER;

    typedef union  T32DITHER_CFG0
          { UNSG32 u32;
            struct w32DITHER_CFG0;
                 } T32DITHER_CFG0;
    ///////////////////////////////////////////////////////////

    typedef union  TDITHER_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32DITHER_CFG0;
                   };
                 } TDITHER_CFG0;

    ///////////////////////////////////////////////////////////
     SIGN32 DITHER_drvrd(SIE_DITHER *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DITHER_drvwr(SIE_DITHER *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DITHER_reset(SIE_DITHER *p);
     SIGN32 DITHER_cmp  (SIE_DITHER *p, SIE_DITHER *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DITHER_check(p,pie,pfx,hLOG) DITHER_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DITHER_print(p,    pfx,hLOG) DITHER_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DITHER
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE SCL1D_YC_HSQ            biu              (4,4)
///     ###
///     * Register specification of interface 1D SCL HSQ MODE
///     * Defines the size of the adpscl
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 1  hsq_mode                  0x0
///                                    ###
///                                    * Hscale Status Query Mode.
///                                    * If hsq_mode=1, hscale computes and provides requested values at horizontal indicies hsq_indx_0/1/2/3 onto their respecitve status registers.
///                                    * Must be 0 for normal scaler operations.
///                                    * If hsq_mode=1, downstream's request to the scaler is ignored. And Upstream should not provide any data to scaler.
///                                    * Related fields: hsq_indx_*, hsq_frph_*, hsq_cidx_*, hsq_done.
///                                    * Refer separate Guideline doc for hsq_mode.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %unsigned 13 hsq_indx_0                0x0
///                                    ###
///                                    * If hsq_mode=1, for this index value, HW provides center index value and fractional next phase increment value in status registers and then asserts hsq_done flag.
///                                    ###
///               %unsigned 3  rsv0                      0x0
///                                    ###
///                                    * Reserve bits.
///                                    ###
///               %unsigned 13 hsq_indx_1                0x0
///                                    ###
///                                    * If hsq_mode=1, for this index value, HW provides center index value and fractional next phase increment value in status registers and then asserts hsq_done flag.
///                                    ###
///               %unsigned 3  rsv1                      0x0
///                                    ###
///                                    * Reserve bits.
///                                    ###
///     @ 0x00008 CFG2                 (P)
///               %unsigned 13 hsq_indx_2                0x0
///                                    ###
///                                    * If hsq_mode=1, for this index value, HW provides center index value and fractional next phase increment value in status registers and then asserts hsq_done flag.
///                                    ###
///               %unsigned 3  rsv2                      0x0
///                                    ###
///                                    * Reserve bits.
///                                    ###
///               %unsigned 13 hsq_indx_3                0x0
///                                    ###
///                                    * Reserve bits.
///                                    ###
///               %unsigned 3  rsv3                      0x0
///                                    ###
///                                    * Reserve bits.
///                                    ###
///     @ 0x0000C CFG3                 (R-)
///               %unsigned 1  hsq_done                  0x0
///                                    ###
///                                    * =0 (clears) when scaler receives frst=1 pulse.
///                                    * =1 (if hsq_mode=1) level signal indicates that the status values for the locations as pointed by the hsq_ind_0/1/2/3 are available at the respective hsq_frph_0/1/2/3 and hsq_cidx_0/1/2/3 register fields. Generally asserted within 1scaler line duration after frst.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00010 CFG4                 (R-)
///               %unsigned 20 hsq_frph_0                0x0
///                                    ###
///                                    * If hsq_mode=1, fractional next phase increment value at output pixel index = hsq_indx_0.
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x00014 CFG5                 (R-)
///               %unsigned 20 hsq_frph_1                0x0
///                                    ###
///                                    * If hsq_mode=1, fractional next phase increment value at output pixel index = hsq_indx_1.
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x00018 CFG6                 (R-)
///               %unsigned 20 hsq_frph_2                0x0
///                                    ###
///                                    * If hsq_mode=1, fractional next phase increment value at output pixel index = hsq_indx_2.
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x0001C CFG7                 (R-)
///               %unsigned 20 hsq_frph_3                0x0
///                                    ###
///                                    * If hsq_mode=1, fractional next phase increment value at output pixel index = hsq_indx_3.
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x00020 CFG8                 (R-)
///               %unsigned 13 hsq_cidx_0                0x0
///                                    ###
///                                    * If hsq_mode=1, center index value for output pixel index=hsq_indx_0.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00024 CFG9                 (R-)
///               %unsigned 13 hsq_cidx_1                0x0
///                                    ###
///                                    * If hsq_mode=1, center index value for output pixel index=hsq_indx_1.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x00028 CFG10                (R-)
///               %unsigned 13 hsq_cidx_2                0x0
///                                    ###
///                                    * If hsq_mode=1, center index value for output pixel index=hsq_indx_2.
///                                    ###
///               %%        19         # Stuffing bits...
///     @ 0x0002C CFG11                (R-)
///               %unsigned 13 hsq_cidx_3                0x0
///                                    ###
///                                    * If hsq_mode=1, center index value for output pixel index=hsq_indx_3.
///                                    * End of scl1d_y c nregister group
///                                    ###
///               %%        19         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      48B, bits:     198b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_SCL1D_YC_HSQ
#define h_SCL1D_YC_HSQ (){}

    #define     RA_SCL1D_YC_HSQ_CFG0                           0x0000

    #define     BA_SCL1D_YC_HSQ_CFG0_hsq_mode                  0x0000
    #define     B16SCL1D_YC_HSQ_CFG0_hsq_mode                  0x0000
    #define   LSb32SCL1D_YC_HSQ_CFG0_hsq_mode                     0
    #define   LSb16SCL1D_YC_HSQ_CFG0_hsq_mode                     0
    #define       bSCL1D_YC_HSQ_CFG0_hsq_mode                  1
    #define   MSK32SCL1D_YC_HSQ_CFG0_hsq_mode                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_HSQ_CFG1                           0x0004

    #define     BA_SCL1D_YC_HSQ_CFG1_hsq_indx_0                0x0004
    #define     B16SCL1D_YC_HSQ_CFG1_hsq_indx_0                0x0004
    #define   LSb32SCL1D_YC_HSQ_CFG1_hsq_indx_0                   0
    #define   LSb16SCL1D_YC_HSQ_CFG1_hsq_indx_0                   0
    #define       bSCL1D_YC_HSQ_CFG1_hsq_indx_0                13
    #define   MSK32SCL1D_YC_HSQ_CFG1_hsq_indx_0                   0x00001FFF

    #define     BA_SCL1D_YC_HSQ_CFG1_rsv0                      0x0005
    #define     B16SCL1D_YC_HSQ_CFG1_rsv0                      0x0004
    #define   LSb32SCL1D_YC_HSQ_CFG1_rsv0                         13
    #define   LSb16SCL1D_YC_HSQ_CFG1_rsv0                         13
    #define       bSCL1D_YC_HSQ_CFG1_rsv0                      3
    #define   MSK32SCL1D_YC_HSQ_CFG1_rsv0                         0x0000E000

    #define     BA_SCL1D_YC_HSQ_CFG1_hsq_indx_1                0x0006
    #define     B16SCL1D_YC_HSQ_CFG1_hsq_indx_1                0x0006
    #define   LSb32SCL1D_YC_HSQ_CFG1_hsq_indx_1                   16
    #define   LSb16SCL1D_YC_HSQ_CFG1_hsq_indx_1                   0
    #define       bSCL1D_YC_HSQ_CFG1_hsq_indx_1                13
    #define   MSK32SCL1D_YC_HSQ_CFG1_hsq_indx_1                   0x1FFF0000

    #define     BA_SCL1D_YC_HSQ_CFG1_rsv1                      0x0007
    #define     B16SCL1D_YC_HSQ_CFG1_rsv1                      0x0006
    #define   LSb32SCL1D_YC_HSQ_CFG1_rsv1                         29
    #define   LSb16SCL1D_YC_HSQ_CFG1_rsv1                         13
    #define       bSCL1D_YC_HSQ_CFG1_rsv1                      3
    #define   MSK32SCL1D_YC_HSQ_CFG1_rsv1                         0xE0000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_HSQ_CFG2                           0x0008

    #define     BA_SCL1D_YC_HSQ_CFG2_hsq_indx_2                0x0008
    #define     B16SCL1D_YC_HSQ_CFG2_hsq_indx_2                0x0008
    #define   LSb32SCL1D_YC_HSQ_CFG2_hsq_indx_2                   0
    #define   LSb16SCL1D_YC_HSQ_CFG2_hsq_indx_2                   0
    #define       bSCL1D_YC_HSQ_CFG2_hsq_indx_2                13
    #define   MSK32SCL1D_YC_HSQ_CFG2_hsq_indx_2                   0x00001FFF

    #define     BA_SCL1D_YC_HSQ_CFG2_rsv2                      0x0009
    #define     B16SCL1D_YC_HSQ_CFG2_rsv2                      0x0008
    #define   LSb32SCL1D_YC_HSQ_CFG2_rsv2                         13
    #define   LSb16SCL1D_YC_HSQ_CFG2_rsv2                         13
    #define       bSCL1D_YC_HSQ_CFG2_rsv2                      3
    #define   MSK32SCL1D_YC_HSQ_CFG2_rsv2                         0x0000E000

    #define     BA_SCL1D_YC_HSQ_CFG2_hsq_indx_3                0x000A
    #define     B16SCL1D_YC_HSQ_CFG2_hsq_indx_3                0x000A
    #define   LSb32SCL1D_YC_HSQ_CFG2_hsq_indx_3                   16
    #define   LSb16SCL1D_YC_HSQ_CFG2_hsq_indx_3                   0
    #define       bSCL1D_YC_HSQ_CFG2_hsq_indx_3                13
    #define   MSK32SCL1D_YC_HSQ_CFG2_hsq_indx_3                   0x1FFF0000

    #define     BA_SCL1D_YC_HSQ_CFG2_rsv3                      0x000B
    #define     B16SCL1D_YC_HSQ_CFG2_rsv3                      0x000A
    #define   LSb32SCL1D_YC_HSQ_CFG2_rsv3                         29
    #define   LSb16SCL1D_YC_HSQ_CFG2_rsv3                         13
    #define       bSCL1D_YC_HSQ_CFG2_rsv3                      3
    #define   MSK32SCL1D_YC_HSQ_CFG2_rsv3                         0xE0000000
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_HSQ_CFG3                           0x000C

    #define     BA_SCL1D_YC_HSQ_CFG3_hsq_done                  0x000C
    #define     B16SCL1D_YC_HSQ_CFG3_hsq_done                  0x000C
    #define   LSb32SCL1D_YC_HSQ_CFG3_hsq_done                     0
    #define   LSb16SCL1D_YC_HSQ_CFG3_hsq_done                     0
    #define       bSCL1D_YC_HSQ_CFG3_hsq_done                  1
    #define   MSK32SCL1D_YC_HSQ_CFG3_hsq_done                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_HSQ_CFG4                           0x0010

    #define     BA_SCL1D_YC_HSQ_CFG4_hsq_frph_0                0x0010
    #define     B16SCL1D_YC_HSQ_CFG4_hsq_frph_0                0x0010
    #define   LSb32SCL1D_YC_HSQ_CFG4_hsq_frph_0                   0
    #define   LSb16SCL1D_YC_HSQ_CFG4_hsq_frph_0                   0
    #define       bSCL1D_YC_HSQ_CFG4_hsq_frph_0                20
    #define   MSK32SCL1D_YC_HSQ_CFG4_hsq_frph_0                   0x000FFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_HSQ_CFG5                           0x0014

    #define     BA_SCL1D_YC_HSQ_CFG5_hsq_frph_1                0x0014
    #define     B16SCL1D_YC_HSQ_CFG5_hsq_frph_1                0x0014
    #define   LSb32SCL1D_YC_HSQ_CFG5_hsq_frph_1                   0
    #define   LSb16SCL1D_YC_HSQ_CFG5_hsq_frph_1                   0
    #define       bSCL1D_YC_HSQ_CFG5_hsq_frph_1                20
    #define   MSK32SCL1D_YC_HSQ_CFG5_hsq_frph_1                   0x000FFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_HSQ_CFG6                           0x0018

    #define     BA_SCL1D_YC_HSQ_CFG6_hsq_frph_2                0x0018
    #define     B16SCL1D_YC_HSQ_CFG6_hsq_frph_2                0x0018
    #define   LSb32SCL1D_YC_HSQ_CFG6_hsq_frph_2                   0
    #define   LSb16SCL1D_YC_HSQ_CFG6_hsq_frph_2                   0
    #define       bSCL1D_YC_HSQ_CFG6_hsq_frph_2                20
    #define   MSK32SCL1D_YC_HSQ_CFG6_hsq_frph_2                   0x000FFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_HSQ_CFG7                           0x001C

    #define     BA_SCL1D_YC_HSQ_CFG7_hsq_frph_3                0x001C
    #define     B16SCL1D_YC_HSQ_CFG7_hsq_frph_3                0x001C
    #define   LSb32SCL1D_YC_HSQ_CFG7_hsq_frph_3                   0
    #define   LSb16SCL1D_YC_HSQ_CFG7_hsq_frph_3                   0
    #define       bSCL1D_YC_HSQ_CFG7_hsq_frph_3                20
    #define   MSK32SCL1D_YC_HSQ_CFG7_hsq_frph_3                   0x000FFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_HSQ_CFG8                           0x0020

    #define     BA_SCL1D_YC_HSQ_CFG8_hsq_cidx_0                0x0020
    #define     B16SCL1D_YC_HSQ_CFG8_hsq_cidx_0                0x0020
    #define   LSb32SCL1D_YC_HSQ_CFG8_hsq_cidx_0                   0
    #define   LSb16SCL1D_YC_HSQ_CFG8_hsq_cidx_0                   0
    #define       bSCL1D_YC_HSQ_CFG8_hsq_cidx_0                13
    #define   MSK32SCL1D_YC_HSQ_CFG8_hsq_cidx_0                   0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_HSQ_CFG9                           0x0024

    #define     BA_SCL1D_YC_HSQ_CFG9_hsq_cidx_1                0x0024
    #define     B16SCL1D_YC_HSQ_CFG9_hsq_cidx_1                0x0024
    #define   LSb32SCL1D_YC_HSQ_CFG9_hsq_cidx_1                   0
    #define   LSb16SCL1D_YC_HSQ_CFG9_hsq_cidx_1                   0
    #define       bSCL1D_YC_HSQ_CFG9_hsq_cidx_1                13
    #define   MSK32SCL1D_YC_HSQ_CFG9_hsq_cidx_1                   0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_HSQ_CFG10                          0x0028

    #define     BA_SCL1D_YC_HSQ_CFG10_hsq_cidx_2               0x0028
    #define     B16SCL1D_YC_HSQ_CFG10_hsq_cidx_2               0x0028
    #define   LSb32SCL1D_YC_HSQ_CFG10_hsq_cidx_2                  0
    #define   LSb16SCL1D_YC_HSQ_CFG10_hsq_cidx_2                  0
    #define       bSCL1D_YC_HSQ_CFG10_hsq_cidx_2               13
    #define   MSK32SCL1D_YC_HSQ_CFG10_hsq_cidx_2                  0x00001FFF
    ///////////////////////////////////////////////////////////
    #define     RA_SCL1D_YC_HSQ_CFG11                          0x002C

    #define     BA_SCL1D_YC_HSQ_CFG11_hsq_cidx_3               0x002C
    #define     B16SCL1D_YC_HSQ_CFG11_hsq_cidx_3               0x002C
    #define   LSb32SCL1D_YC_HSQ_CFG11_hsq_cidx_3                  0
    #define   LSb16SCL1D_YC_HSQ_CFG11_hsq_cidx_3                  0
    #define       bSCL1D_YC_HSQ_CFG11_hsq_cidx_3               13
    #define   MSK32SCL1D_YC_HSQ_CFG11_hsq_cidx_3                  0x00001FFF
    ///////////////////////////////////////////////////////////

    typedef struct SIE_SCL1D_YC_HSQ {
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG0_hsq_mode(r32)             _BFGET_(r32, 0, 0)
    #define   SET32SCL1D_YC_HSQ_CFG0_hsq_mode(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16SCL1D_YC_HSQ_CFG0_hsq_mode(r16)             _BFGET_(r16, 0, 0)
    #define   SET16SCL1D_YC_HSQ_CFG0_hsq_mode(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32SCL1D_YC_HSQ_CFG0                           {\
            UNSG32 uCFG0_hsq_mode                              :  1;\
            UNSG32 RSVDx0_b1                                   : 31;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG0;
            struct w32SCL1D_YC_HSQ_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG1_hsq_indx_0(r32)           _BFGET_(r32,12, 0)
    #define   SET32SCL1D_YC_HSQ_CFG1_hsq_indx_0(r32,v)         _BFSET_(r32,12, 0,v)
    #define   GET16SCL1D_YC_HSQ_CFG1_hsq_indx_0(r16)           _BFGET_(r16,12, 0)
    #define   SET16SCL1D_YC_HSQ_CFG1_hsq_indx_0(r16,v)         _BFSET_(r16,12, 0,v)

    #define   GET32SCL1D_YC_HSQ_CFG1_rsv0(r32)                 _BFGET_(r32,15,13)
    #define   SET32SCL1D_YC_HSQ_CFG1_rsv0(r32,v)               _BFSET_(r32,15,13,v)
    #define   GET16SCL1D_YC_HSQ_CFG1_rsv0(r16)                 _BFGET_(r16,15,13)
    #define   SET16SCL1D_YC_HSQ_CFG1_rsv0(r16,v)               _BFSET_(r16,15,13,v)

    #define   GET32SCL1D_YC_HSQ_CFG1_hsq_indx_1(r32)           _BFGET_(r32,28,16)
    #define   SET32SCL1D_YC_HSQ_CFG1_hsq_indx_1(r32,v)         _BFSET_(r32,28,16,v)
    #define   GET16SCL1D_YC_HSQ_CFG1_hsq_indx_1(r16)           _BFGET_(r16,12, 0)
    #define   SET16SCL1D_YC_HSQ_CFG1_hsq_indx_1(r16,v)         _BFSET_(r16,12, 0,v)

    #define   GET32SCL1D_YC_HSQ_CFG1_rsv1(r32)                 _BFGET_(r32,31,29)
    #define   SET32SCL1D_YC_HSQ_CFG1_rsv1(r32,v)               _BFSET_(r32,31,29,v)
    #define   GET16SCL1D_YC_HSQ_CFG1_rsv1(r16)                 _BFGET_(r16,15,13)
    #define   SET16SCL1D_YC_HSQ_CFG1_rsv1(r16,v)               _BFSET_(r16,15,13,v)

    #define     w32SCL1D_YC_HSQ_CFG1                           {\
            UNSG32 uCFG1_hsq_indx_0                            : 13;\
            UNSG32 uCFG1_rsv0                                  :  3;\
            UNSG32 uCFG1_hsq_indx_1                            : 13;\
            UNSG32 uCFG1_rsv1                                  :  3;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG1;
            struct w32SCL1D_YC_HSQ_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG2_hsq_indx_2(r32)           _BFGET_(r32,12, 0)
    #define   SET32SCL1D_YC_HSQ_CFG2_hsq_indx_2(r32,v)         _BFSET_(r32,12, 0,v)
    #define   GET16SCL1D_YC_HSQ_CFG2_hsq_indx_2(r16)           _BFGET_(r16,12, 0)
    #define   SET16SCL1D_YC_HSQ_CFG2_hsq_indx_2(r16,v)         _BFSET_(r16,12, 0,v)

    #define   GET32SCL1D_YC_HSQ_CFG2_rsv2(r32)                 _BFGET_(r32,15,13)
    #define   SET32SCL1D_YC_HSQ_CFG2_rsv2(r32,v)               _BFSET_(r32,15,13,v)
    #define   GET16SCL1D_YC_HSQ_CFG2_rsv2(r16)                 _BFGET_(r16,15,13)
    #define   SET16SCL1D_YC_HSQ_CFG2_rsv2(r16,v)               _BFSET_(r16,15,13,v)

    #define   GET32SCL1D_YC_HSQ_CFG2_hsq_indx_3(r32)           _BFGET_(r32,28,16)
    #define   SET32SCL1D_YC_HSQ_CFG2_hsq_indx_3(r32,v)         _BFSET_(r32,28,16,v)
    #define   GET16SCL1D_YC_HSQ_CFG2_hsq_indx_3(r16)           _BFGET_(r16,12, 0)
    #define   SET16SCL1D_YC_HSQ_CFG2_hsq_indx_3(r16,v)         _BFSET_(r16,12, 0,v)

    #define   GET32SCL1D_YC_HSQ_CFG2_rsv3(r32)                 _BFGET_(r32,31,29)
    #define   SET32SCL1D_YC_HSQ_CFG2_rsv3(r32,v)               _BFSET_(r32,31,29,v)
    #define   GET16SCL1D_YC_HSQ_CFG2_rsv3(r16)                 _BFGET_(r16,15,13)
    #define   SET16SCL1D_YC_HSQ_CFG2_rsv3(r16,v)               _BFSET_(r16,15,13,v)

    #define     w32SCL1D_YC_HSQ_CFG2                           {\
            UNSG32 uCFG2_hsq_indx_2                            : 13;\
            UNSG32 uCFG2_rsv2                                  :  3;\
            UNSG32 uCFG2_hsq_indx_3                            : 13;\
            UNSG32 uCFG2_rsv3                                  :  3;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG2;
            struct w32SCL1D_YC_HSQ_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG3_hsq_done(r32)             _BFGET_(r32, 0, 0)
    #define   SET32SCL1D_YC_HSQ_CFG3_hsq_done(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16SCL1D_YC_HSQ_CFG3_hsq_done(r16)             _BFGET_(r16, 0, 0)
    #define   SET16SCL1D_YC_HSQ_CFG3_hsq_done(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32SCL1D_YC_HSQ_CFG3                           {\
            UNSG32 uCFG3_hsq_done                              :  1;\
            UNSG32 RSVDxC_b1                                   : 31;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG3;
            struct w32SCL1D_YC_HSQ_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG4_hsq_frph_0(r32)           _BFGET_(r32,19, 0)
    #define   SET32SCL1D_YC_HSQ_CFG4_hsq_frph_0(r32,v)         _BFSET_(r32,19, 0,v)

    #define     w32SCL1D_YC_HSQ_CFG4                           {\
            UNSG32 uCFG4_hsq_frph_0                            : 20;\
            UNSG32 RSVDx10_b20                                 : 12;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG4;
            struct w32SCL1D_YC_HSQ_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG5_hsq_frph_1(r32)           _BFGET_(r32,19, 0)
    #define   SET32SCL1D_YC_HSQ_CFG5_hsq_frph_1(r32,v)         _BFSET_(r32,19, 0,v)

    #define     w32SCL1D_YC_HSQ_CFG5                           {\
            UNSG32 uCFG5_hsq_frph_1                            : 20;\
            UNSG32 RSVDx14_b20                                 : 12;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG5;
            struct w32SCL1D_YC_HSQ_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG6_hsq_frph_2(r32)           _BFGET_(r32,19, 0)
    #define   SET32SCL1D_YC_HSQ_CFG6_hsq_frph_2(r32,v)         _BFSET_(r32,19, 0,v)

    #define     w32SCL1D_YC_HSQ_CFG6                           {\
            UNSG32 uCFG6_hsq_frph_2                            : 20;\
            UNSG32 RSVDx18_b20                                 : 12;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG6;
            struct w32SCL1D_YC_HSQ_CFG6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG7_hsq_frph_3(r32)           _BFGET_(r32,19, 0)
    #define   SET32SCL1D_YC_HSQ_CFG7_hsq_frph_3(r32,v)         _BFSET_(r32,19, 0,v)

    #define     w32SCL1D_YC_HSQ_CFG7                           {\
            UNSG32 uCFG7_hsq_frph_3                            : 20;\
            UNSG32 RSVDx1C_b20                                 : 12;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG7;
            struct w32SCL1D_YC_HSQ_CFG7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG8_hsq_cidx_0(r32)           _BFGET_(r32,12, 0)
    #define   SET32SCL1D_YC_HSQ_CFG8_hsq_cidx_0(r32,v)         _BFSET_(r32,12, 0,v)
    #define   GET16SCL1D_YC_HSQ_CFG8_hsq_cidx_0(r16)           _BFGET_(r16,12, 0)
    #define   SET16SCL1D_YC_HSQ_CFG8_hsq_cidx_0(r16,v)         _BFSET_(r16,12, 0,v)

    #define     w32SCL1D_YC_HSQ_CFG8                           {\
            UNSG32 uCFG8_hsq_cidx_0                            : 13;\
            UNSG32 RSVDx20_b13                                 : 19;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG8;
            struct w32SCL1D_YC_HSQ_CFG8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG9_hsq_cidx_1(r32)           _BFGET_(r32,12, 0)
    #define   SET32SCL1D_YC_HSQ_CFG9_hsq_cidx_1(r32,v)         _BFSET_(r32,12, 0,v)
    #define   GET16SCL1D_YC_HSQ_CFG9_hsq_cidx_1(r16)           _BFGET_(r16,12, 0)
    #define   SET16SCL1D_YC_HSQ_CFG9_hsq_cidx_1(r16,v)         _BFSET_(r16,12, 0,v)

    #define     w32SCL1D_YC_HSQ_CFG9                           {\
            UNSG32 uCFG9_hsq_cidx_1                            : 13;\
            UNSG32 RSVDx24_b13                                 : 19;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG9;
            struct w32SCL1D_YC_HSQ_CFG9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG10_hsq_cidx_2(r32)          _BFGET_(r32,12, 0)
    #define   SET32SCL1D_YC_HSQ_CFG10_hsq_cidx_2(r32,v)        _BFSET_(r32,12, 0,v)
    #define   GET16SCL1D_YC_HSQ_CFG10_hsq_cidx_2(r16)          _BFGET_(r16,12, 0)
    #define   SET16SCL1D_YC_HSQ_CFG10_hsq_cidx_2(r16,v)        _BFSET_(r16,12, 0,v)

    #define     w32SCL1D_YC_HSQ_CFG10                          {\
            UNSG32 uCFG10_hsq_cidx_2                           : 13;\
            UNSG32 RSVDx28_b13                                 : 19;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG10;
            struct w32SCL1D_YC_HSQ_CFG10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32SCL1D_YC_HSQ_CFG11_hsq_cidx_3(r32)          _BFGET_(r32,12, 0)
    #define   SET32SCL1D_YC_HSQ_CFG11_hsq_cidx_3(r32,v)        _BFSET_(r32,12, 0,v)
    #define   GET16SCL1D_YC_HSQ_CFG11_hsq_cidx_3(r16)          _BFGET_(r16,12, 0)
    #define   SET16SCL1D_YC_HSQ_CFG11_hsq_cidx_3(r16,v)        _BFSET_(r16,12, 0,v)

    #define     w32SCL1D_YC_HSQ_CFG11                          {\
            UNSG32 uCFG11_hsq_cidx_3                           : 13;\
            UNSG32 RSVDx2C_b13                                 : 19;\
          }
    union { UNSG32 u32SCL1D_YC_HSQ_CFG11;
            struct w32SCL1D_YC_HSQ_CFG11;
          };
    ///////////////////////////////////////////////////////////
    } SIE_SCL1D_YC_HSQ;

    typedef union  T32SCL1D_YC_HSQ_CFG0
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG0;
                 } T32SCL1D_YC_HSQ_CFG0;
    typedef union  T32SCL1D_YC_HSQ_CFG1
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG1;
                 } T32SCL1D_YC_HSQ_CFG1;
    typedef union  T32SCL1D_YC_HSQ_CFG2
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG2;
                 } T32SCL1D_YC_HSQ_CFG2;
    typedef union  T32SCL1D_YC_HSQ_CFG3
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG3;
                 } T32SCL1D_YC_HSQ_CFG3;
    typedef union  T32SCL1D_YC_HSQ_CFG4
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG4;
                 } T32SCL1D_YC_HSQ_CFG4;
    typedef union  T32SCL1D_YC_HSQ_CFG5
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG5;
                 } T32SCL1D_YC_HSQ_CFG5;
    typedef union  T32SCL1D_YC_HSQ_CFG6
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG6;
                 } T32SCL1D_YC_HSQ_CFG6;
    typedef union  T32SCL1D_YC_HSQ_CFG7
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG7;
                 } T32SCL1D_YC_HSQ_CFG7;
    typedef union  T32SCL1D_YC_HSQ_CFG8
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG8;
                 } T32SCL1D_YC_HSQ_CFG8;
    typedef union  T32SCL1D_YC_HSQ_CFG9
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG9;
                 } T32SCL1D_YC_HSQ_CFG9;
    typedef union  T32SCL1D_YC_HSQ_CFG10
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG10;
                 } T32SCL1D_YC_HSQ_CFG10;
    typedef union  T32SCL1D_YC_HSQ_CFG11
          { UNSG32 u32;
            struct w32SCL1D_YC_HSQ_CFG11;
                 } T32SCL1D_YC_HSQ_CFG11;
    ///////////////////////////////////////////////////////////

    typedef union  TSCL1D_YC_HSQ_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG0;
                   };
                 } TSCL1D_YC_HSQ_CFG0;
    typedef union  TSCL1D_YC_HSQ_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG1;
                   };
                 } TSCL1D_YC_HSQ_CFG1;
    typedef union  TSCL1D_YC_HSQ_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG2;
                   };
                 } TSCL1D_YC_HSQ_CFG2;
    typedef union  TSCL1D_YC_HSQ_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG3;
                   };
                 } TSCL1D_YC_HSQ_CFG3;
    typedef union  TSCL1D_YC_HSQ_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG4;
                   };
                 } TSCL1D_YC_HSQ_CFG4;
    typedef union  TSCL1D_YC_HSQ_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG5;
                   };
                 } TSCL1D_YC_HSQ_CFG5;
    typedef union  TSCL1D_YC_HSQ_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG6;
                   };
                 } TSCL1D_YC_HSQ_CFG6;
    typedef union  TSCL1D_YC_HSQ_CFG7
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG7;
                   };
                 } TSCL1D_YC_HSQ_CFG7;
    typedef union  TSCL1D_YC_HSQ_CFG8
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG8;
                   };
                 } TSCL1D_YC_HSQ_CFG8;
    typedef union  TSCL1D_YC_HSQ_CFG9
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG9;
                   };
                 } TSCL1D_YC_HSQ_CFG9;
    typedef union  TSCL1D_YC_HSQ_CFG10
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG10;
                   };
                 } TSCL1D_YC_HSQ_CFG10;
    typedef union  TSCL1D_YC_HSQ_CFG11
          { UNSG32 u32[1];
            struct {
            struct w32SCL1D_YC_HSQ_CFG11;
                   };
                 } TSCL1D_YC_HSQ_CFG11;

    ///////////////////////////////////////////////////////////
     SIGN32 SCL1D_YC_HSQ_drvrd(SIE_SCL1D_YC_HSQ *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 SCL1D_YC_HSQ_drvwr(SIE_SCL1D_YC_HSQ *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void SCL1D_YC_HSQ_reset(SIE_SCL1D_YC_HSQ *p);
     SIGN32 SCL1D_YC_HSQ_cmp  (SIE_SCL1D_YC_HSQ *p, SIE_SCL1D_YC_HSQ *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define SCL1D_YC_HSQ_check(p,pie,pfx,hLOG) SCL1D_YC_HSQ_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define SCL1D_YC_HSQ_print(p,    pfx,hLOG) SCL1D_YC_HSQ_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: SCL1D_YC_HSQ
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE OVPSCL                  biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               %unsigned 1  SCL_CLKEN_CTRL            0x0
///                                    ###
///                                    * 0: Clock enable to scaler depends on the input FIFO status; scaler clken is deasserted when FE can't supply data to scaler.
///                                    * 1: Clock enable to scaler is always high.
///                                    * Since AUX scaler input always comes from CPCB0 – its clock enable should be 1 whenever it is being used.
///                                    ###
///               %unsigned 1  sb_clkg_en                0x1
///                                    ###
///                                    * Clock gating enable for separate clock to 1D SCL (except LUT logic). Default enabled. Write 0 to clock gate logic except LUT logic.
///                                    ###
///               %unsigned 1  cfg_rst                   0x0
///                                    ###
///                                    * Configurable soft reset for Scalar1D
///                                    ###
///               %unsigned 1  scl1d_sw_rst              0x0
///                                    ###
///                                    * Scalar1D software controlled reset. Write 1 to reset   scalar-1D
///                                    ###
///               %unsigned 1  scl_rst_en0               0x1
///                                    ###
///                                    * Scalar1D will get reset on scalar start
///                                    * Disable this bit for not-resetting Scalar-1D on scalar start.
///                                    ###
///               %unsigned 1  scl_rst_en1               0x1
///                                    ###
///                                    * Enable this bit to soft-reset adaptive scalar. Software will have control to soft-reset scalar during VBI
///                                    ###
///               %unsigned 1  scl_rst_en2               0x1
///                                    ###
///                                    * Enable this bit to soft-reset adaptive scalar. Software will have control to soft-reset scalar during VBI
///                                    ###
///               %unsigned 1  scl1d_YC_bypass           0x0
///                                    ###
///                                    * 1- Enables 1D-SCL YC bypass
///                                    * 0- Disables 1D-SCL YC bypass
///                                    ###
///               %unsigned 1  dither_bypass             0x0
///                                    ###
///                                    * DITHER hard-bypass. Write 1 to bypass dither IP
///                                    ###
///               %unsigned 1  tiler_bypass              0x1
///                                    ###
///                                    * tiler hard-bypass. Write 1 to bypass tiler IP
///                                    ###
///               %unsigned 1  uvrd_en_mask              0x1
///                                    ###
///                                    * Alternate enable mask for UV data.
///                                    * Should be disabled (1'b0) for YUV420SP Tile formats.
///                                    ###
///               %unsigned 1  uvrd_en_init0             0x0
///                                    ###
///                                    * Initial value at EoF for read enable of ovpScl_Ofifo (UV) FIFO.
///                                    ###
///               %unsigned 1  uvrd_en_init1             0x0
///                                    ###
///                                    * Initial value at soft reset for read enable of ovpScl_Ofifo (UV) FIFO.
///                                    ###
///               %unsigned 1  uvrd_swap_reg             0x0
///                                    ###
///                                    * Control bit to swap the U & V during unpacking at ovpScl_Ofifo.
///                                    ###
///               %unsigned 1  uv_unpack_bypass          0x1
///                                    ###
///                                    * Control bit to bypass UV unpacking at the output of ovpScl_Ofifo.
///                                    * Should be disabled(1'b0) for YUV420SP Tile formats.
///                                    ###
///               %%        17         # Stuffing bits...
///     @ 0x00004 tiler                (P)
///               %unsigned 12 xres                      0x40
///                                    ###
///                                    * Horizontal resolution at tiler input
///                                    ###
///               %unsigned 12 yres                      0x40
///                                    ###
///                                    * Vertical resolution at tiler input
///                                    ###
///               %unsigned 4  tile_width                0x8
///                                    ###
///                                    * Tile width. Supported values are 8 and 6
///                                    ###
///               %unsigned 4  tile_height               0x8
///                                    ###
///                                    * Tile height. Supported value is 8.
///                                    ###
///     @ 0x00008 scl1d_Inpix          (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of pixels expected at the input of SCL1D-InFIFO. It should be programmed with (ivres*ihres).
///                                    ###
///     @ 0x0000C scl1d_Outpix         (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of pixels expected at the input of SCL1D-Output FIFO. It should be programmed with (ovres*ohres) of Scalar
///                                    ###
///     @ 0x00010                      (P)
///     # 0x00010 SCL1D_YC             
///               $SCL1D_YC            SCL1D_YC          REG          
///                                    ###
///                                    * 1D -Scalar registers
///                                    ###
///     @ 0x0006C                      (P)
///     # 0x0006C SCL1D_YC_COEFF       
///               $SCL1D_YC_COEFF      SCL1D_YC_COEFF    REG          
///                                    ###
///                                    * COEFF related registers.
///                                    ###
///     @ 0x00080                      (P)
///     # 0x00080 SCL1D_YC_FRC         
///               $SCL1D_YC_FRC        SCL1D_YC_FRC      REG          
///                                    ###
///                                    * FRC related registers.
///                                    ###
///     @ 0x0009C                      (P)
///     # 0x0009C DITHER               
///               $DITHER              DITHER            REG          
///                                    ###
///                                    * DITHER IP registers in OVP SCL Pipe path.
///                                    * End of OVPSCL definition.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     160B, bits:     996b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_OVPSCL
#define h_OVPSCL (){}

    #define     RA_OVPSCL_CTRL                                 0x0000

    #define     BA_OVPSCL_CTRL_SCL_CLKEN_CTRL                  0x0000
    #define     B16OVPSCL_CTRL_SCL_CLKEN_CTRL                  0x0000
    #define   LSb32OVPSCL_CTRL_SCL_CLKEN_CTRL                     0
    #define   LSb16OVPSCL_CTRL_SCL_CLKEN_CTRL                     0
    #define       bOVPSCL_CTRL_SCL_CLKEN_CTRL                  1
    #define   MSK32OVPSCL_CTRL_SCL_CLKEN_CTRL                     0x00000001

    #define     BA_OVPSCL_CTRL_sb_clkg_en                      0x0000
    #define     B16OVPSCL_CTRL_sb_clkg_en                      0x0000
    #define   LSb32OVPSCL_CTRL_sb_clkg_en                         1
    #define   LSb16OVPSCL_CTRL_sb_clkg_en                         1
    #define       bOVPSCL_CTRL_sb_clkg_en                      1
    #define   MSK32OVPSCL_CTRL_sb_clkg_en                         0x00000002

    #define     BA_OVPSCL_CTRL_cfg_rst                         0x0000
    #define     B16OVPSCL_CTRL_cfg_rst                         0x0000
    #define   LSb32OVPSCL_CTRL_cfg_rst                            2
    #define   LSb16OVPSCL_CTRL_cfg_rst                            2
    #define       bOVPSCL_CTRL_cfg_rst                         1
    #define   MSK32OVPSCL_CTRL_cfg_rst                            0x00000004

    #define     BA_OVPSCL_CTRL_scl1d_sw_rst                    0x0000
    #define     B16OVPSCL_CTRL_scl1d_sw_rst                    0x0000
    #define   LSb32OVPSCL_CTRL_scl1d_sw_rst                       3
    #define   LSb16OVPSCL_CTRL_scl1d_sw_rst                       3
    #define       bOVPSCL_CTRL_scl1d_sw_rst                    1
    #define   MSK32OVPSCL_CTRL_scl1d_sw_rst                       0x00000008

    #define     BA_OVPSCL_CTRL_scl_rst_en0                     0x0000
    #define     B16OVPSCL_CTRL_scl_rst_en0                     0x0000
    #define   LSb32OVPSCL_CTRL_scl_rst_en0                        4
    #define   LSb16OVPSCL_CTRL_scl_rst_en0                        4
    #define       bOVPSCL_CTRL_scl_rst_en0                     1
    #define   MSK32OVPSCL_CTRL_scl_rst_en0                        0x00000010

    #define     BA_OVPSCL_CTRL_scl_rst_en1                     0x0000
    #define     B16OVPSCL_CTRL_scl_rst_en1                     0x0000
    #define   LSb32OVPSCL_CTRL_scl_rst_en1                        5
    #define   LSb16OVPSCL_CTRL_scl_rst_en1                        5
    #define       bOVPSCL_CTRL_scl_rst_en1                     1
    #define   MSK32OVPSCL_CTRL_scl_rst_en1                        0x00000020

    #define     BA_OVPSCL_CTRL_scl_rst_en2                     0x0000
    #define     B16OVPSCL_CTRL_scl_rst_en2                     0x0000
    #define   LSb32OVPSCL_CTRL_scl_rst_en2                        6
    #define   LSb16OVPSCL_CTRL_scl_rst_en2                        6
    #define       bOVPSCL_CTRL_scl_rst_en2                     1
    #define   MSK32OVPSCL_CTRL_scl_rst_en2                        0x00000040

    #define     BA_OVPSCL_CTRL_scl1d_YC_bypass                 0x0000
    #define     B16OVPSCL_CTRL_scl1d_YC_bypass                 0x0000
    #define   LSb32OVPSCL_CTRL_scl1d_YC_bypass                    7
    #define   LSb16OVPSCL_CTRL_scl1d_YC_bypass                    7
    #define       bOVPSCL_CTRL_scl1d_YC_bypass                 1
    #define   MSK32OVPSCL_CTRL_scl1d_YC_bypass                    0x00000080

    #define     BA_OVPSCL_CTRL_dither_bypass                   0x0001
    #define     B16OVPSCL_CTRL_dither_bypass                   0x0000
    #define   LSb32OVPSCL_CTRL_dither_bypass                      8
    #define   LSb16OVPSCL_CTRL_dither_bypass                      8
    #define       bOVPSCL_CTRL_dither_bypass                   1
    #define   MSK32OVPSCL_CTRL_dither_bypass                      0x00000100

    #define     BA_OVPSCL_CTRL_tiler_bypass                    0x0001
    #define     B16OVPSCL_CTRL_tiler_bypass                    0x0000
    #define   LSb32OVPSCL_CTRL_tiler_bypass                       9
    #define   LSb16OVPSCL_CTRL_tiler_bypass                       9
    #define       bOVPSCL_CTRL_tiler_bypass                    1
    #define   MSK32OVPSCL_CTRL_tiler_bypass                       0x00000200

    #define     BA_OVPSCL_CTRL_uvrd_en_mask                    0x0001
    #define     B16OVPSCL_CTRL_uvrd_en_mask                    0x0000
    #define   LSb32OVPSCL_CTRL_uvrd_en_mask                       10
    #define   LSb16OVPSCL_CTRL_uvrd_en_mask                       10
    #define       bOVPSCL_CTRL_uvrd_en_mask                    1
    #define   MSK32OVPSCL_CTRL_uvrd_en_mask                       0x00000400

    #define     BA_OVPSCL_CTRL_uvrd_en_init0                   0x0001
    #define     B16OVPSCL_CTRL_uvrd_en_init0                   0x0000
    #define   LSb32OVPSCL_CTRL_uvrd_en_init0                      11
    #define   LSb16OVPSCL_CTRL_uvrd_en_init0                      11
    #define       bOVPSCL_CTRL_uvrd_en_init0                   1
    #define   MSK32OVPSCL_CTRL_uvrd_en_init0                      0x00000800

    #define     BA_OVPSCL_CTRL_uvrd_en_init1                   0x0001
    #define     B16OVPSCL_CTRL_uvrd_en_init1                   0x0000
    #define   LSb32OVPSCL_CTRL_uvrd_en_init1                      12
    #define   LSb16OVPSCL_CTRL_uvrd_en_init1                      12
    #define       bOVPSCL_CTRL_uvrd_en_init1                   1
    #define   MSK32OVPSCL_CTRL_uvrd_en_init1                      0x00001000

    #define     BA_OVPSCL_CTRL_uvrd_swap_reg                   0x0001
    #define     B16OVPSCL_CTRL_uvrd_swap_reg                   0x0000
    #define   LSb32OVPSCL_CTRL_uvrd_swap_reg                      13
    #define   LSb16OVPSCL_CTRL_uvrd_swap_reg                      13
    #define       bOVPSCL_CTRL_uvrd_swap_reg                   1
    #define   MSK32OVPSCL_CTRL_uvrd_swap_reg                      0x00002000

    #define     BA_OVPSCL_CTRL_uv_unpack_bypass                0x0001
    #define     B16OVPSCL_CTRL_uv_unpack_bypass                0x0000
    #define   LSb32OVPSCL_CTRL_uv_unpack_bypass                   14
    #define   LSb16OVPSCL_CTRL_uv_unpack_bypass                   14
    #define       bOVPSCL_CTRL_uv_unpack_bypass                1
    #define   MSK32OVPSCL_CTRL_uv_unpack_bypass                   0x00004000
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCL_tiler                                0x0004

    #define     BA_OVPSCL_tiler_xres                           0x0004
    #define     B16OVPSCL_tiler_xres                           0x0004
    #define   LSb32OVPSCL_tiler_xres                              0
    #define   LSb16OVPSCL_tiler_xres                              0
    #define       bOVPSCL_tiler_xres                           12
    #define   MSK32OVPSCL_tiler_xres                              0x00000FFF

    #define     BA_OVPSCL_tiler_yres                           0x0005
    #define     B16OVPSCL_tiler_yres                           0x0004
    #define   LSb32OVPSCL_tiler_yres                              12
    #define   LSb16OVPSCL_tiler_yres                              12
    #define       bOVPSCL_tiler_yres                           12
    #define   MSK32OVPSCL_tiler_yres                              0x00FFF000

    #define     BA_OVPSCL_tiler_tile_width                     0x0007
    #define     B16OVPSCL_tiler_tile_width                     0x0006
    #define   LSb32OVPSCL_tiler_tile_width                        24
    #define   LSb16OVPSCL_tiler_tile_width                        8
    #define       bOVPSCL_tiler_tile_width                     4
    #define   MSK32OVPSCL_tiler_tile_width                        0x0F000000

    #define     BA_OVPSCL_tiler_tile_height                    0x0007
    #define     B16OVPSCL_tiler_tile_height                    0x0006
    #define   LSb32OVPSCL_tiler_tile_height                       28
    #define   LSb16OVPSCL_tiler_tile_height                       12
    #define       bOVPSCL_tiler_tile_height                    4
    #define   MSK32OVPSCL_tiler_tile_height                       0xF0000000
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCL_scl1d_Inpix                          0x0008

    #define     BA_OVPSCL_scl1d_Inpix_tot                      0x0008
    #define     B16OVPSCL_scl1d_Inpix_tot                      0x0008
    #define   LSb32OVPSCL_scl1d_Inpix_tot                         0
    #define   LSb16OVPSCL_scl1d_Inpix_tot                         0
    #define       bOVPSCL_scl1d_Inpix_tot                      32
    #define   MSK32OVPSCL_scl1d_Inpix_tot                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCL_scl1d_Outpix                         0x000C

    #define     BA_OVPSCL_scl1d_Outpix_tot                     0x000C
    #define     B16OVPSCL_scl1d_Outpix_tot                     0x000C
    #define   LSb32OVPSCL_scl1d_Outpix_tot                        0
    #define   LSb16OVPSCL_scl1d_Outpix_tot                        0
    #define       bOVPSCL_scl1d_Outpix_tot                     32
    #define   MSK32OVPSCL_scl1d_Outpix_tot                        0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCL_SCL1D_YC                             0x0010
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCL_SCL1D_YC_COEFF                       0x006C
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCL_SCL1D_YC_FRC                         0x0080
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCL_DITHER                               0x009C
    ///////////////////////////////////////////////////////////

    typedef struct SIE_OVPSCL {
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCL_CTRL_SCL_CLKEN_CTRL(r32)             _BFGET_(r32, 0, 0)
    #define   SET32OVPSCL_CTRL_SCL_CLKEN_CTRL(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16OVPSCL_CTRL_SCL_CLKEN_CTRL(r16)             _BFGET_(r16, 0, 0)
    #define   SET16OVPSCL_CTRL_SCL_CLKEN_CTRL(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32OVPSCL_CTRL_sb_clkg_en(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32OVPSCL_CTRL_sb_clkg_en(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16OVPSCL_CTRL_sb_clkg_en(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16OVPSCL_CTRL_sb_clkg_en(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32OVPSCL_CTRL_cfg_rst(r32)                    _BFGET_(r32, 2, 2)
    #define   SET32OVPSCL_CTRL_cfg_rst(r32,v)                  _BFSET_(r32, 2, 2,v)
    #define   GET16OVPSCL_CTRL_cfg_rst(r16)                    _BFGET_(r16, 2, 2)
    #define   SET16OVPSCL_CTRL_cfg_rst(r16,v)                  _BFSET_(r16, 2, 2,v)

    #define   GET32OVPSCL_CTRL_scl1d_sw_rst(r32)               _BFGET_(r32, 3, 3)
    #define   SET32OVPSCL_CTRL_scl1d_sw_rst(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16OVPSCL_CTRL_scl1d_sw_rst(r16)               _BFGET_(r16, 3, 3)
    #define   SET16OVPSCL_CTRL_scl1d_sw_rst(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32OVPSCL_CTRL_scl_rst_en0(r32)                _BFGET_(r32, 4, 4)
    #define   SET32OVPSCL_CTRL_scl_rst_en0(r32,v)              _BFSET_(r32, 4, 4,v)
    #define   GET16OVPSCL_CTRL_scl_rst_en0(r16)                _BFGET_(r16, 4, 4)
    #define   SET16OVPSCL_CTRL_scl_rst_en0(r16,v)              _BFSET_(r16, 4, 4,v)

    #define   GET32OVPSCL_CTRL_scl_rst_en1(r32)                _BFGET_(r32, 5, 5)
    #define   SET32OVPSCL_CTRL_scl_rst_en1(r32,v)              _BFSET_(r32, 5, 5,v)
    #define   GET16OVPSCL_CTRL_scl_rst_en1(r16)                _BFGET_(r16, 5, 5)
    #define   SET16OVPSCL_CTRL_scl_rst_en1(r16,v)              _BFSET_(r16, 5, 5,v)

    #define   GET32OVPSCL_CTRL_scl_rst_en2(r32)                _BFGET_(r32, 6, 6)
    #define   SET32OVPSCL_CTRL_scl_rst_en2(r32,v)              _BFSET_(r32, 6, 6,v)
    #define   GET16OVPSCL_CTRL_scl_rst_en2(r16)                _BFGET_(r16, 6, 6)
    #define   SET16OVPSCL_CTRL_scl_rst_en2(r16,v)              _BFSET_(r16, 6, 6,v)

    #define   GET32OVPSCL_CTRL_scl1d_YC_bypass(r32)            _BFGET_(r32, 7, 7)
    #define   SET32OVPSCL_CTRL_scl1d_YC_bypass(r32,v)          _BFSET_(r32, 7, 7,v)
    #define   GET16OVPSCL_CTRL_scl1d_YC_bypass(r16)            _BFGET_(r16, 7, 7)
    #define   SET16OVPSCL_CTRL_scl1d_YC_bypass(r16,v)          _BFSET_(r16, 7, 7,v)

    #define   GET32OVPSCL_CTRL_dither_bypass(r32)              _BFGET_(r32, 8, 8)
    #define   SET32OVPSCL_CTRL_dither_bypass(r32,v)            _BFSET_(r32, 8, 8,v)
    #define   GET16OVPSCL_CTRL_dither_bypass(r16)              _BFGET_(r16, 8, 8)
    #define   SET16OVPSCL_CTRL_dither_bypass(r16,v)            _BFSET_(r16, 8, 8,v)

    #define   GET32OVPSCL_CTRL_tiler_bypass(r32)               _BFGET_(r32, 9, 9)
    #define   SET32OVPSCL_CTRL_tiler_bypass(r32,v)             _BFSET_(r32, 9, 9,v)
    #define   GET16OVPSCL_CTRL_tiler_bypass(r16)               _BFGET_(r16, 9, 9)
    #define   SET16OVPSCL_CTRL_tiler_bypass(r16,v)             _BFSET_(r16, 9, 9,v)

    #define   GET32OVPSCL_CTRL_uvrd_en_mask(r32)               _BFGET_(r32,10,10)
    #define   SET32OVPSCL_CTRL_uvrd_en_mask(r32,v)             _BFSET_(r32,10,10,v)
    #define   GET16OVPSCL_CTRL_uvrd_en_mask(r16)               _BFGET_(r16,10,10)
    #define   SET16OVPSCL_CTRL_uvrd_en_mask(r16,v)             _BFSET_(r16,10,10,v)

    #define   GET32OVPSCL_CTRL_uvrd_en_init0(r32)              _BFGET_(r32,11,11)
    #define   SET32OVPSCL_CTRL_uvrd_en_init0(r32,v)            _BFSET_(r32,11,11,v)
    #define   GET16OVPSCL_CTRL_uvrd_en_init0(r16)              _BFGET_(r16,11,11)
    #define   SET16OVPSCL_CTRL_uvrd_en_init0(r16,v)            _BFSET_(r16,11,11,v)

    #define   GET32OVPSCL_CTRL_uvrd_en_init1(r32)              _BFGET_(r32,12,12)
    #define   SET32OVPSCL_CTRL_uvrd_en_init1(r32,v)            _BFSET_(r32,12,12,v)
    #define   GET16OVPSCL_CTRL_uvrd_en_init1(r16)              _BFGET_(r16,12,12)
    #define   SET16OVPSCL_CTRL_uvrd_en_init1(r16,v)            _BFSET_(r16,12,12,v)

    #define   GET32OVPSCL_CTRL_uvrd_swap_reg(r32)              _BFGET_(r32,13,13)
    #define   SET32OVPSCL_CTRL_uvrd_swap_reg(r32,v)            _BFSET_(r32,13,13,v)
    #define   GET16OVPSCL_CTRL_uvrd_swap_reg(r16)              _BFGET_(r16,13,13)
    #define   SET16OVPSCL_CTRL_uvrd_swap_reg(r16,v)            _BFSET_(r16,13,13,v)

    #define   GET32OVPSCL_CTRL_uv_unpack_bypass(r32)           _BFGET_(r32,14,14)
    #define   SET32OVPSCL_CTRL_uv_unpack_bypass(r32,v)         _BFSET_(r32,14,14,v)
    #define   GET16OVPSCL_CTRL_uv_unpack_bypass(r16)           _BFGET_(r16,14,14)
    #define   SET16OVPSCL_CTRL_uv_unpack_bypass(r16,v)         _BFSET_(r16,14,14,v)

    #define     w32OVPSCL_CTRL                                 {\
            UNSG32 uCTRL_SCL_CLKEN_CTRL                        :  1;\
            UNSG32 uCTRL_sb_clkg_en                            :  1;\
            UNSG32 uCTRL_cfg_rst                               :  1;\
            UNSG32 uCTRL_scl1d_sw_rst                          :  1;\
            UNSG32 uCTRL_scl_rst_en0                           :  1;\
            UNSG32 uCTRL_scl_rst_en1                           :  1;\
            UNSG32 uCTRL_scl_rst_en2                           :  1;\
            UNSG32 uCTRL_scl1d_YC_bypass                       :  1;\
            UNSG32 uCTRL_dither_bypass                         :  1;\
            UNSG32 uCTRL_tiler_bypass                          :  1;\
            UNSG32 uCTRL_uvrd_en_mask                          :  1;\
            UNSG32 uCTRL_uvrd_en_init0                         :  1;\
            UNSG32 uCTRL_uvrd_en_init1                         :  1;\
            UNSG32 uCTRL_uvrd_swap_reg                         :  1;\
            UNSG32 uCTRL_uv_unpack_bypass                      :  1;\
            UNSG32 RSVDx0_b15                                  : 17;\
          }
    union { UNSG32 u32OVPSCL_CTRL;
            struct w32OVPSCL_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCL_tiler_xres(r32)                      _BFGET_(r32,11, 0)
    #define   SET32OVPSCL_tiler_xres(r32,v)                    _BFSET_(r32,11, 0,v)
    #define   GET16OVPSCL_tiler_xres(r16)                      _BFGET_(r16,11, 0)
    #define   SET16OVPSCL_tiler_xres(r16,v)                    _BFSET_(r16,11, 0,v)

    #define   GET32OVPSCL_tiler_yres(r32)                      _BFGET_(r32,23,12)
    #define   SET32OVPSCL_tiler_yres(r32,v)                    _BFSET_(r32,23,12,v)

    #define   GET32OVPSCL_tiler_tile_width(r32)                _BFGET_(r32,27,24)
    #define   SET32OVPSCL_tiler_tile_width(r32,v)              _BFSET_(r32,27,24,v)
    #define   GET16OVPSCL_tiler_tile_width(r16)                _BFGET_(r16,11, 8)
    #define   SET16OVPSCL_tiler_tile_width(r16,v)              _BFSET_(r16,11, 8,v)

    #define   GET32OVPSCL_tiler_tile_height(r32)               _BFGET_(r32,31,28)
    #define   SET32OVPSCL_tiler_tile_height(r32,v)             _BFSET_(r32,31,28,v)
    #define   GET16OVPSCL_tiler_tile_height(r16)               _BFGET_(r16,15,12)
    #define   SET16OVPSCL_tiler_tile_height(r16,v)             _BFSET_(r16,15,12,v)

    #define     w32OVPSCL_tiler                                {\
            UNSG32 utiler_xres                                 : 12;\
            UNSG32 utiler_yres                                 : 12;\
            UNSG32 utiler_tile_width                           :  4;\
            UNSG32 utiler_tile_height                          :  4;\
          }
    union { UNSG32 u32OVPSCL_tiler;
            struct w32OVPSCL_tiler;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCL_scl1d_Inpix_tot(r32)                 _BFGET_(r32,31, 0)
    #define   SET32OVPSCL_scl1d_Inpix_tot(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32OVPSCL_scl1d_Inpix                          {\
            UNSG32 uscl1d_Inpix_tot                            : 32;\
          }
    union { UNSG32 u32OVPSCL_scl1d_Inpix;
            struct w32OVPSCL_scl1d_Inpix;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCL_scl1d_Outpix_tot(r32)                _BFGET_(r32,31, 0)
    #define   SET32OVPSCL_scl1d_Outpix_tot(r32,v)              _BFSET_(r32,31, 0,v)

    #define     w32OVPSCL_scl1d_Outpix                         {\
            UNSG32 uscl1d_Outpix_tot                           : 32;\
          }
    union { UNSG32 u32OVPSCL_scl1d_Outpix;
            struct w32OVPSCL_scl1d_Outpix;
          };
    ///////////////////////////////////////////////////////////
              SIE_SCL1D_YC                                     ie_SCL1D_YC;
    ///////////////////////////////////////////////////////////
              SIE_SCL1D_YC_COEFF                               ie_SCL1D_YC_COEFF;
    ///////////////////////////////////////////////////////////
              SIE_SCL1D_YC_FRC                                 ie_SCL1D_YC_FRC;
    ///////////////////////////////////////////////////////////
              SIE_DITHER                                       ie_DITHER;
    ///////////////////////////////////////////////////////////
    } SIE_OVPSCL;

    typedef union  T32OVPSCL_CTRL
          { UNSG32 u32;
            struct w32OVPSCL_CTRL;
                 } T32OVPSCL_CTRL;
    typedef union  T32OVPSCL_tiler
          { UNSG32 u32;
            struct w32OVPSCL_tiler;
                 } T32OVPSCL_tiler;
    typedef union  T32OVPSCL_scl1d_Inpix
          { UNSG32 u32;
            struct w32OVPSCL_scl1d_Inpix;
                 } T32OVPSCL_scl1d_Inpix;
    typedef union  T32OVPSCL_scl1d_Outpix
          { UNSG32 u32;
            struct w32OVPSCL_scl1d_Outpix;
                 } T32OVPSCL_scl1d_Outpix;
    ///////////////////////////////////////////////////////////

    typedef union  TOVPSCL_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCL_CTRL;
                   };
                 } TOVPSCL_CTRL;
    typedef union  TOVPSCL_tiler
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCL_tiler;
                   };
                 } TOVPSCL_tiler;
    typedef union  TOVPSCL_scl1d_Inpix
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCL_scl1d_Inpix;
                   };
                 } TOVPSCL_scl1d_Inpix;
    typedef union  TOVPSCL_scl1d_Outpix
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCL_scl1d_Outpix;
                   };
                 } TOVPSCL_scl1d_Outpix;

    ///////////////////////////////////////////////////////////
     SIGN32 OVPSCL_drvrd(SIE_OVPSCL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 OVPSCL_drvwr(SIE_OVPSCL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void OVPSCL_reset(SIE_OVPSCL *p);
     SIGN32 OVPSCL_cmp  (SIE_OVPSCL *p, SIE_OVPSCL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define OVPSCL_check(p,pie,pfx,hLOG) OVPSCL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define OVPSCL_print(p,    pfx,hLOG) OVPSCL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: OVPSCL
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE OVPSCLWRAP              biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               %unsigned 1  ofifo_sts0_ctrl           0x1
///                                    ###
///                                    * SCL Input FIFO full status control for luma (used for clk_en generation). Write 1 to enable fifo full status for clk_en generation.
///                                    ###
///               %unsigned 1  ofifo_sts1_ctrl           0x1
///                                    ###
///                                    * SCL Output FIFO full status control for chroma (used for clk_en generation). Write 0 to disable fifo full status for clk_en generation.
///                                    ###
///               %unsigned 1  sclOutrdy_sts0_en         0x1
///                                    ###
///                                    * 1: Take care of rdy from Write Client0 while generating clken for output Tg
///                                    * 0 : don't consider rdy from Write Client0
///                                    * Write 0 to disable ready status from write client 0 for clock enable generation
///                                    ###
///               %unsigned 1  sclOutrdy_sts1_en         0x1
///                                    ###
///                                    * 1: Take care of rdy from Write Client1 while generating clken for output Tg
///                                    * 0 : don't consider rdy from Write Client1
///                                    * Write 0 to disable ready status from write client 1 for clock enable generation
///                                    ###
///               %unsigned 2  luma_data_sel             0x0
///                                    ###
///                                    * 00: 10 bit 420SP luma support
///                                    * 01: 8 bit 420SP luma support
///                                    * 10: 10 bit 422 support
///                                    * 11: 8 bit 422 support
///                                    ###
///               %unsigned 1  chroma_data_sel           0x0
///                                    ###
///                                    * 1 : 8 bit 420SP support
///                                    * 0 : 10 bit 420SP chroma support
///                                    ###
///               %unsigned 1  420sp_wrbk                0x0
///                                    ###
///                                    * 1: 420 sp supported
///                                    * 0: No support from write client 1.(tied with zero)
///                                    ###
///               %unsigned 1  hde_initval0              0x0
///                                    ###
///                                    * Initialization value for hde mask for Croma
///                                    ###
///               %unsigned 1  hde_initval1              0x1
///                                    ###
///                                    * Initialization value for hde mask for Croma
///                                    ###
///               %unsigned 3  ovpscl_ictrl_sel          0x0
///                                    ###
///                                    * [000]: Data/control from Main clients output [BL]
///                                    * [001]: Data/control from 2k path input [EL]
///                                    * [010]: Data/control from Main DTILE-UPS420 output [BL]
///                                    * [011] : Data/control from 2K DTILE-UPS420 output [EL]
///                                    * [100] : Data/control from PIP Clients output [420-SP]
///                                    * [101] : Data/control from OVP ReadClient
///                                    ###
///               %unsigned 1  idata_frmt_ctrl           0x0
///                                    ###
///                                    * Input data control bit for Y and UV Pipe
///                                    * [0] : Input data is YUV420
///                                    * [1] : Input data is YUV422
///                                    ###
///               %unsigned 2  clk_en_sel                0x0
///                                    ###
///                                    * Clock enable select between BL, EL pipe or PIP plane. Default BL
///                                    * [00] : BL Plane
///                                    * [01] : EL Plane
///                                    * [10] : PIP Plane
///                                    * [11] : OVP Plane
///                                    ###
///               %unsigned 1  hde_msk_en                0x0
///                                    ###
///                                    * Hde mask enable for alternate UV input to Scalar
///                                    * Write 1 to disable masking of alternate UV to scalar
///                                    ###
///               %unsigned 1  ngptv_bypass              0x0
///                                    ###
///                                    * [0] : Enable NGPTV IP in path
///                                    * [1] : Bypass
///                                    ###
///               %unsigned 1  ngptv_scl_sel             0x0
///                                    ###
///                                    * [0] : Scalar O/P Select
///                                    * [1] : NGPTV O/P Select
///                                    ###
///               %unsigned 1  bitmap128_Rd0_en          0x0
///                                    ###
///                                    * [1] : enable for H inverse scan
///                                    * [0] : Default value
///                                    ###
///               %unsigned 1  bitmap128_Rd1_en          0x0
///                                    ###
///                                    * [1] : enable for H inverse scan
///                                    * [0] : Default value
///                                    ###
///               %unsigned 1  rdsel_420SP               0x0
///                                    ###
///                                    * Read select from read client (R1) for 420 SP format case
///                                    ###
///               %unsigned 1  rd_mask_sftrst            0x0
///                                    ###
///                                    * Soft reset to initialize read mask for UPS420 SP.
///                                    ###
///               %unsigned 1  clken_ctrl0               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of ready status from Read Client0
///                                    ###
///               %unsigned 1  clken_ctrl1               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of ready status from Read Client1
///                                    ###
///               %unsigned 1  ups420_idatactrl          0x0
///                                    ###
///                                    * Input data control for 8bit and 10bit from respective clients :
///                                    * [0] : 10bpc 420 data from OVPSCL Clients
///                                    * [1] : 8bpc 420 data from OVPSCL Clients
///                                    ###
///               %unsigned 1  bitMap32_en               0x0
///                                    ###
///                                    * Control bit to enable BITMAP32 in OVPSCL path. Default disabled. Write 1 to enable BITMAP32
///                                    ###
///               %unsigned 1  rd_initval0               0x0
///                                    ###
///                                    * Initialization value for read Mask for UPS420 SP Clients
///                                    ###
///               %unsigned 1  rd_initval1               0x0
///                                    ###
///                                    * Initialization value for read Mask for UPS420 SP Clients
///                                    ###
///               %unsigned 1  ififo_sts0_ctrl           0x1
///                                    ###
///                                    * SCL input fifo full status control for luma (used for clock en generation) . Write 0 to disable fifo full status for clk en generation.
///                                    ###
///               %unsigned 1  ififo_sts1_ctrl           0x1
///                                    ###
///                                    * SCL input fifo full status control for croma (used for clock en generation) . Write 0 to disable fifo full status for clk en generation.
///                                    ###
///               %unsigned 1  fifo_full_ctrlEn          0x1
///     @ 0x00004 CTRL0                (P-)
///               %unsigned 1  ClientR0_start            0x0
///                                    ###
///                                    * Start bit for Read Client R0
///                                    * 0: no effect on hardware
///                                    * 1: Start the client
///                                    * the write 1 to this register is used to kick the hardware
///                                    ###
///               %unsigned 1  ClientR1_start            0x0
///                                    ###
///                                    * Start bit for Read Client R1
///                                    * 0: no effect on hardware
///                                    * 1: Start the client
///                                    * the write 1 to this register is used to kick the hardware
///                                    ###
///               %unsigned 1  ClientR0_clear            0x0
///                                    ###
///                                    * 0: Don't clear, Normal state
///                                    * 1: Clear the asynchronous fifo between the respective client and dhub
///                                    ###
///               %unsigned 1  ClientR1_clear            0x0
///                                    ###
///                                    * 0: Don't clear, Normal state
///                                    * 1: Clear the asynchronous fifo between the respective client and dhub
///                                    ###
///               %unsigned 1  inptg_start               0x0
///                                    ###
///                                    * Start bit OVP scalar input tg.
///                                    * 0 : No effect on hardware.
///                                    * 1 : Start the client
///                                    * The write 1 to this register is used to kick start the hardware
///                                    ###
///               %unsigned 1  inptg_clear               0x0
///                                    ###
///                                    * 0 : Dont clear, normal state.
///                                    * 1 : Clear VOP scalar input tg.
///                                    ###
///               %unsigned 1  wr_bitmap_en              0x0
///               %%        25         # Stuffing bits...
///     @ 0x00008 CTRL1                (P)
///               %unsigned 2  packSel_R0                0x0
///                                    ###
///                                    * Pack Select for Read Client R0
///                                    * [00] : 8 bit unpacking (YUV420)
///                                    * [01] : 10 bit unpacking (YUV420)
///                                    * [10] : 10 bit unpacking (Tile format V4H6/V4H48)
///                                    * [11] : Invalid
///                                    ###
///               %unsigned 13 pixlineTot_R0             0x64
///                                    ###
///                                    * Total number of pixels in a line(for Read client R0)
///                                    ###
///               %unsigned 1  nonStdResEn_R0            0x0
///                                    ###
///                                    * Enable for Read Client 0 when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 4  flushCnt_R0               0x5
///                                    ###
///                                    * Counter to determine the ready status of Read Client 0 after end of line (only used when nonStdResEn_R0 = 1)
///                                    ###
///               %unsigned 1  ovp_flush_sel             0x1
///                                    ###
///                                    * This bit selects the auto flush used for OVP Path.
///                                    * 0: OVP Path clear is independent on display TG frst. It is cleared by enabling ovp_flush bit.
///                                    * 1: OVP path is being cleaerd on display TG frst.
///                                    ###
///               %unsigned 1  ovp_intr_sel              0x0
///                                    ###
///                                    * This bit selects the end of frame interrupt
///                                    * generated by either Luma TG or combined by both
///                                    * (Luma & Croma) TG in OVP Pipe.
///                                    * 0: Interrupt by Y (Luma) TG.
///                                    * 1: Interrupt by Y & UV TG.
///                                    ###
///               %%        10         # Stuffing bits...
///     @ 0x0000C CTRL2                (P)
///               %unsigned 2  packSel_R1                0x0
///                                    ###
///                                    * Pack Select for Read Client R1
///                                    * [00] : 8 bit unpacking (YUV420)
///                                    * [01] : 10 bit unpacking (YUV420)
///                                    * [10] : 10 bit unpacking (Tile format V4H6/V4H48)
///                                    * [11] : Invalid
///                                    ###
///               %unsigned 13 pixlineTot_R1             0x64
///                                    ###
///                                    * Total number of pixels in a line(for Read client R1)
///                                    ###
///               %unsigned 1  nonStdResEn_R1            0x0
///                                    ###
///                                    * Enable for Read Client 1 when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 4  flushCnt_R1               0x5
///                                    ###
///                                    * Counter to determine the ready status of Read Client 0 after end of line (only used when nonStdResEn_R1 = 1)
///                                    ###
///               %%        12         # Stuffing bits...
///     @ 0x00010 CTRL3                (P)
///               %unsigned 32 wordTot_R0                0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for R0 read client. Should be programmed as:
///                                    * ceil( ohres*ovres*16 / 128 )
///                                    * Note : In case of resolution which is not integer multiple of 128, word total should be programmed as follows :
///                                    * For eg if ohres = 116, then (ohres*24/128) = 21.75. Then word total should be (22*ovres). Where '24' = no of bits in a pixel
///                                    * Note1 : In case of DETILE UPS420 10Bit Mode 0, word total should be programmed as
///                                    * (ihres*ivres*NoB*16/15)/(128*2) where NoB = 10
///                                    ###
///     @ 0x00014 CTRL4                (P)
///               %unsigned 32 wordTot_R1                0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for R1 read client. Should be programmed as:
///                                    * ceil( ohres*ovres*16 / 128 )
///                                    * Note : In case of resolution which is not integer multiple of 128, word total should be programmed as follows :
///                                    * For eg if ohres = 116, then (ohres*24/128) = 21.75. Then word total should be (22*ovres). Where '24' = no of bits in a pixel
///                                    * Note1 : In case of DETILE UPS420 10Bit Mode 0, word total should be programmed as
///                                    * (ihres*ivres*NoB*16/15)/(128*2) where NoB = 10
///                                    ###
///     @ 0x00018 tg_ctrl              (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * Start bit to start input scalar FIFO.
///                                    ###
///               %unsigned 1  clear                     0x0
///                                    ###
///                                    * Clear bit to clear input scalar FIFO. Level signal.
///                                    ###
///               %unsigned 1  Y_otg_start               0x0
///                                    ###
///                                    * Start bit to start output FIFO and output TG for luma.
///                                    ###
///               %unsigned 1  Y_otg_clear               0x0
///                                    ###
///                                    * Clear bit to reset scalar output FIFO, and output TG for luma. Level signal.
///                                    ###
///               %unsigned 1  wr0_start                 0x0
///               %unsigned 1  wr1_start                 0x0
///               %unsigned 1  wr0_clear                 0x0
///                                    ###
///                                    * Clear bit to reset write client 0.
///                                    ###
///               %unsigned 1  wr1_clear                 0x0
///                                    ###
///                                    * Clear bit to reset write client 1.
///                                    ###
///               %unsigned 1  UV_otg_start              0x0
///                                    ###
///                                    * Start bit to start output FIFO and output TG for chroma.
///                                    ###
///               %unsigned 1  UV_otg_clear              0x0
///                                    ###
///                                    * Clear bit to reset scalar output FIFO, and output TG for chroma. Level signal.
///                                    ###
///               %unsigned 1  420sp_rd_start            0x0
///                                    ###
///                                    * 420SP tg start bit -
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the 420SP Mode.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  ovp_flush                 0x0
///                                    ###
///                                    * OVPSCL flush enable bit. Default disable. Write 1 to flush OVPSCL when ovp_flush_sel = 0.
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x0001C STATUS               (R-)
///               %unsigned 16 OVPSCL_Y_oTg              0x0
///                                    ###
///                                    * Vcount status for OVPSCL luma OTG
///                                    ###
///               %unsigned 16 OVPSCL_UV_oTg             0x0
///                                    ###
///                                    * Vcount status for OVPSCL chroma OTG
///                                    ###
///     @ 0x00020 INTR_EN              (P)
///               %unsigned 1  OVPSCL_Y_EOF              0x0
///                                    ###
///                                    * Enable for End of Frame interrupt from OVPSCL Pipe.
///                                    ###
///               %unsigned 1  OVPSCL_UV_EOF             0x0
///                                    ###
///                                    * Enable for End of Frame interrupt from OVPSCL Pipe.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00024 STATUS0              (R-)
///               %unsigned 16 INPTG_OVPSCL_sts          0x0
///                                    ###
///                                    * Vcount status for OVP INPUT TG
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00028                      (P)
///     # 0x00028 OVPSCL_WR0           
///               $WriteClient         OVPSCL_WR0        REG          
///                                    ###
///                                    * Write client registers for Y(luma) component
///                                    ###
///     @ 0x00038                      (P)
///     # 0x00038 OVPSCL_WR1           
///               $WriteClient         OVPSCL_WR1        REG          
///                                    ###
///                                    * Write client registers for UV(chroma) component
///                                    ###
///     @ 0x00048                      (P)
///     # 0x00048 OVPSCL_Y             
///               $OVPSCL              OVPSCL_Y          REG          
///                                    ###
///                                    * 1D -Scalar registers for Y(luma) component.
///                                    ###
///     @ 0x000E8                      (P)
///     # 0x000E8 OVPSCL_UV            
///               $OVPSCL              OVPSCL_UV         REG          
///                                    ###
///                                    * registers for UV(chroma) component.
///                                    ###
///     @ 0x00188                      (P)
///     # 0x00188 OVPSCL_OTG_Y         
///               $TG                  OVPSCL_OTG_Y      REG          
///                                    ###
///                                    * OVP SCL Pipe Timing Generator related registers for luma
///                                    ###
///     @ 0x001C8                      (P)
///     # 0x001C8 OVPSCL_OTG_UV        
///               $TG                  OVPSCL_OTG_UV     REG          
///                                    ###
///                                    * OVP SCL Pipe Timing Generator related registers for chroma
///                                    ###
///     @ 0x00208                      (P)
///     # 0x00208 BITMAP32             
///               $BITMAP32            BITMAP32          REG          
///                                    ###
///                                    * BITMAP registers for mapping 32bits of pixel data before giving to Pipe
///                                    * Default [1:1] mapping.
///                                    ###
///     @ 0x00220                      (P)
///     # 0x00220 INPTG_OVPSCL         
///               $TG_MAIN             INPTG_OVPSCL      REG          
///                                    ###
///                                    * OVP SCL Pipe input TG related registers
///                                    ###
///     @ 0x00268                      (P)
///     # 0x00268 SRAMPWR_Y            
///               $SRAMPWR             SRAMPWR_Y         REG          
///                                    ###
///                                    * Power down register for OVP SCL Pipe LUMA pixel storage.
///                                    ###
///     @ 0x0026C                      (P)
///     # 0x0026C SRAMPWR_UV           
///               $SRAMPWR             SRAMPWR_UV        REG          
///                                    ###
///                                    * Power down register for OVP SCL Pipe CHROMA pixel storage.
///                                    ###
///     @ 0x00270                      (P)
///     # 0x00270 SRAMPWR_Y_HLUT       
///               $SRAMPWR             SRAMPWR_Y_HLUT    REG          
///                                    ###
///                                    * Power down register for OVP SCL LUMA Pipe HLUT storage.
///                                    ###
///     @ 0x00274                      (P)
///     # 0x00274 SRAMPWR_Y_VLUT       
///               $SRAMPWR             SRAMPWR_Y_VLUT    REG          
///                                    ###
///                                    * Power down register for OVP SCL LUMA Pipe VLUT storage.
///                                    ###
///     @ 0x00278                      (P)
///     # 0x00278 SRAMPWR_C_HLUT       
///               $SRAMPWR             SRAMPWR_C_HLUT    REG          
///                                    ###
///                                    * Power down register for OVP SCL CHROMA Pipe HLUT storage.
///                                    ###
///     @ 0x0027C                      (P)
///     # 0x0027C SRAMPWR_C_VLUT       
///               $SRAMPWR             SRAMPWR_C_VLUT    REG          
///                                    ###
///                                    * Power down register for OVP SCL CHROMA Pipe VLUT storage.
///                                    * End of OVPSCL PIPE definition.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     640B, bits:    3805b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_OVPSCLWRAP
#define h_OVPSCLWRAP (){}

    #define     RA_OVPSCLWRAP_CTRL                             0x0000

    #define     BA_OVPSCLWRAP_CTRL_ofifo_sts0_ctrl             0x0000
    #define     B16OVPSCLWRAP_CTRL_ofifo_sts0_ctrl             0x0000
    #define   LSb32OVPSCLWRAP_CTRL_ofifo_sts0_ctrl                0
    #define   LSb16OVPSCLWRAP_CTRL_ofifo_sts0_ctrl                0
    #define       bOVPSCLWRAP_CTRL_ofifo_sts0_ctrl             1
    #define   MSK32OVPSCLWRAP_CTRL_ofifo_sts0_ctrl                0x00000001

    #define     BA_OVPSCLWRAP_CTRL_ofifo_sts1_ctrl             0x0000
    #define     B16OVPSCLWRAP_CTRL_ofifo_sts1_ctrl             0x0000
    #define   LSb32OVPSCLWRAP_CTRL_ofifo_sts1_ctrl                1
    #define   LSb16OVPSCLWRAP_CTRL_ofifo_sts1_ctrl                1
    #define       bOVPSCLWRAP_CTRL_ofifo_sts1_ctrl             1
    #define   MSK32OVPSCLWRAP_CTRL_ofifo_sts1_ctrl                0x00000002

    #define     BA_OVPSCLWRAP_CTRL_sclOutrdy_sts0_en           0x0000
    #define     B16OVPSCLWRAP_CTRL_sclOutrdy_sts0_en           0x0000
    #define   LSb32OVPSCLWRAP_CTRL_sclOutrdy_sts0_en              2
    #define   LSb16OVPSCLWRAP_CTRL_sclOutrdy_sts0_en              2
    #define       bOVPSCLWRAP_CTRL_sclOutrdy_sts0_en           1
    #define   MSK32OVPSCLWRAP_CTRL_sclOutrdy_sts0_en              0x00000004

    #define     BA_OVPSCLWRAP_CTRL_sclOutrdy_sts1_en           0x0000
    #define     B16OVPSCLWRAP_CTRL_sclOutrdy_sts1_en           0x0000
    #define   LSb32OVPSCLWRAP_CTRL_sclOutrdy_sts1_en              3
    #define   LSb16OVPSCLWRAP_CTRL_sclOutrdy_sts1_en              3
    #define       bOVPSCLWRAP_CTRL_sclOutrdy_sts1_en           1
    #define   MSK32OVPSCLWRAP_CTRL_sclOutrdy_sts1_en              0x00000008

    #define     BA_OVPSCLWRAP_CTRL_luma_data_sel               0x0000
    #define     B16OVPSCLWRAP_CTRL_luma_data_sel               0x0000
    #define   LSb32OVPSCLWRAP_CTRL_luma_data_sel                  4
    #define   LSb16OVPSCLWRAP_CTRL_luma_data_sel                  4
    #define       bOVPSCLWRAP_CTRL_luma_data_sel               2
    #define   MSK32OVPSCLWRAP_CTRL_luma_data_sel                  0x00000030

    #define     BA_OVPSCLWRAP_CTRL_chroma_data_sel             0x0000
    #define     B16OVPSCLWRAP_CTRL_chroma_data_sel             0x0000
    #define   LSb32OVPSCLWRAP_CTRL_chroma_data_sel                6
    #define   LSb16OVPSCLWRAP_CTRL_chroma_data_sel                6
    #define       bOVPSCLWRAP_CTRL_chroma_data_sel             1
    #define   MSK32OVPSCLWRAP_CTRL_chroma_data_sel                0x00000040

    #define     BA_OVPSCLWRAP_CTRL_420sp_wrbk                  0x0000
    #define     B16OVPSCLWRAP_CTRL_420sp_wrbk                  0x0000
    #define   LSb32OVPSCLWRAP_CTRL_420sp_wrbk                     7
    #define   LSb16OVPSCLWRAP_CTRL_420sp_wrbk                     7
    #define       bOVPSCLWRAP_CTRL_420sp_wrbk                  1
    #define   MSK32OVPSCLWRAP_CTRL_420sp_wrbk                     0x00000080

    #define     BA_OVPSCLWRAP_CTRL_hde_initval0                0x0001
    #define     B16OVPSCLWRAP_CTRL_hde_initval0                0x0000
    #define   LSb32OVPSCLWRAP_CTRL_hde_initval0                   8
    #define   LSb16OVPSCLWRAP_CTRL_hde_initval0                   8
    #define       bOVPSCLWRAP_CTRL_hde_initval0                1
    #define   MSK32OVPSCLWRAP_CTRL_hde_initval0                   0x00000100

    #define     BA_OVPSCLWRAP_CTRL_hde_initval1                0x0001
    #define     B16OVPSCLWRAP_CTRL_hde_initval1                0x0000
    #define   LSb32OVPSCLWRAP_CTRL_hde_initval1                   9
    #define   LSb16OVPSCLWRAP_CTRL_hde_initval1                   9
    #define       bOVPSCLWRAP_CTRL_hde_initval1                1
    #define   MSK32OVPSCLWRAP_CTRL_hde_initval1                   0x00000200

    #define     BA_OVPSCLWRAP_CTRL_ovpscl_ictrl_sel            0x0001
    #define     B16OVPSCLWRAP_CTRL_ovpscl_ictrl_sel            0x0000
    #define   LSb32OVPSCLWRAP_CTRL_ovpscl_ictrl_sel               10
    #define   LSb16OVPSCLWRAP_CTRL_ovpscl_ictrl_sel               10
    #define       bOVPSCLWRAP_CTRL_ovpscl_ictrl_sel            3
    #define   MSK32OVPSCLWRAP_CTRL_ovpscl_ictrl_sel               0x00001C00

    #define     BA_OVPSCLWRAP_CTRL_idata_frmt_ctrl             0x0001
    #define     B16OVPSCLWRAP_CTRL_idata_frmt_ctrl             0x0000
    #define   LSb32OVPSCLWRAP_CTRL_idata_frmt_ctrl                13
    #define   LSb16OVPSCLWRAP_CTRL_idata_frmt_ctrl                13
    #define       bOVPSCLWRAP_CTRL_idata_frmt_ctrl             1
    #define   MSK32OVPSCLWRAP_CTRL_idata_frmt_ctrl                0x00002000

    #define     BA_OVPSCLWRAP_CTRL_clk_en_sel                  0x0001
    #define     B16OVPSCLWRAP_CTRL_clk_en_sel                  0x0000
    #define   LSb32OVPSCLWRAP_CTRL_clk_en_sel                     14
    #define   LSb16OVPSCLWRAP_CTRL_clk_en_sel                     14
    #define       bOVPSCLWRAP_CTRL_clk_en_sel                  2
    #define   MSK32OVPSCLWRAP_CTRL_clk_en_sel                     0x0000C000

    #define     BA_OVPSCLWRAP_CTRL_hde_msk_en                  0x0002
    #define     B16OVPSCLWRAP_CTRL_hde_msk_en                  0x0002
    #define   LSb32OVPSCLWRAP_CTRL_hde_msk_en                     16
    #define   LSb16OVPSCLWRAP_CTRL_hde_msk_en                     0
    #define       bOVPSCLWRAP_CTRL_hde_msk_en                  1
    #define   MSK32OVPSCLWRAP_CTRL_hde_msk_en                     0x00010000

    #define     BA_OVPSCLWRAP_CTRL_ngptv_bypass                0x0002
    #define     B16OVPSCLWRAP_CTRL_ngptv_bypass                0x0002
    #define   LSb32OVPSCLWRAP_CTRL_ngptv_bypass                   17
    #define   LSb16OVPSCLWRAP_CTRL_ngptv_bypass                   1
    #define       bOVPSCLWRAP_CTRL_ngptv_bypass                1
    #define   MSK32OVPSCLWRAP_CTRL_ngptv_bypass                   0x00020000

    #define     BA_OVPSCLWRAP_CTRL_ngptv_scl_sel               0x0002
    #define     B16OVPSCLWRAP_CTRL_ngptv_scl_sel               0x0002
    #define   LSb32OVPSCLWRAP_CTRL_ngptv_scl_sel                  18
    #define   LSb16OVPSCLWRAP_CTRL_ngptv_scl_sel                  2
    #define       bOVPSCLWRAP_CTRL_ngptv_scl_sel               1
    #define   MSK32OVPSCLWRAP_CTRL_ngptv_scl_sel                  0x00040000

    #define     BA_OVPSCLWRAP_CTRL_bitmap128_Rd0_en            0x0002
    #define     B16OVPSCLWRAP_CTRL_bitmap128_Rd0_en            0x0002
    #define   LSb32OVPSCLWRAP_CTRL_bitmap128_Rd0_en               19
    #define   LSb16OVPSCLWRAP_CTRL_bitmap128_Rd0_en               3
    #define       bOVPSCLWRAP_CTRL_bitmap128_Rd0_en            1
    #define   MSK32OVPSCLWRAP_CTRL_bitmap128_Rd0_en               0x00080000

    #define     BA_OVPSCLWRAP_CTRL_bitmap128_Rd1_en            0x0002
    #define     B16OVPSCLWRAP_CTRL_bitmap128_Rd1_en            0x0002
    #define   LSb32OVPSCLWRAP_CTRL_bitmap128_Rd1_en               20
    #define   LSb16OVPSCLWRAP_CTRL_bitmap128_Rd1_en               4
    #define       bOVPSCLWRAP_CTRL_bitmap128_Rd1_en            1
    #define   MSK32OVPSCLWRAP_CTRL_bitmap128_Rd1_en               0x00100000

    #define     BA_OVPSCLWRAP_CTRL_rdsel_420SP                 0x0002
    #define     B16OVPSCLWRAP_CTRL_rdsel_420SP                 0x0002
    #define   LSb32OVPSCLWRAP_CTRL_rdsel_420SP                    21
    #define   LSb16OVPSCLWRAP_CTRL_rdsel_420SP                    5
    #define       bOVPSCLWRAP_CTRL_rdsel_420SP                 1
    #define   MSK32OVPSCLWRAP_CTRL_rdsel_420SP                    0x00200000

    #define     BA_OVPSCLWRAP_CTRL_rd_mask_sftrst              0x0002
    #define     B16OVPSCLWRAP_CTRL_rd_mask_sftrst              0x0002
    #define   LSb32OVPSCLWRAP_CTRL_rd_mask_sftrst                 22
    #define   LSb16OVPSCLWRAP_CTRL_rd_mask_sftrst                 6
    #define       bOVPSCLWRAP_CTRL_rd_mask_sftrst              1
    #define   MSK32OVPSCLWRAP_CTRL_rd_mask_sftrst                 0x00400000

    #define     BA_OVPSCLWRAP_CTRL_clken_ctrl0                 0x0002
    #define     B16OVPSCLWRAP_CTRL_clken_ctrl0                 0x0002
    #define   LSb32OVPSCLWRAP_CTRL_clken_ctrl0                    23
    #define   LSb16OVPSCLWRAP_CTRL_clken_ctrl0                    7
    #define       bOVPSCLWRAP_CTRL_clken_ctrl0                 1
    #define   MSK32OVPSCLWRAP_CTRL_clken_ctrl0                    0x00800000

    #define     BA_OVPSCLWRAP_CTRL_clken_ctrl1                 0x0003
    #define     B16OVPSCLWRAP_CTRL_clken_ctrl1                 0x0002
    #define   LSb32OVPSCLWRAP_CTRL_clken_ctrl1                    24
    #define   LSb16OVPSCLWRAP_CTRL_clken_ctrl1                    8
    #define       bOVPSCLWRAP_CTRL_clken_ctrl1                 1
    #define   MSK32OVPSCLWRAP_CTRL_clken_ctrl1                    0x01000000

    #define     BA_OVPSCLWRAP_CTRL_ups420_idatactrl            0x0003
    #define     B16OVPSCLWRAP_CTRL_ups420_idatactrl            0x0002
    #define   LSb32OVPSCLWRAP_CTRL_ups420_idatactrl               25
    #define   LSb16OVPSCLWRAP_CTRL_ups420_idatactrl               9
    #define       bOVPSCLWRAP_CTRL_ups420_idatactrl            1
    #define   MSK32OVPSCLWRAP_CTRL_ups420_idatactrl               0x02000000

    #define     BA_OVPSCLWRAP_CTRL_bitMap32_en                 0x0003
    #define     B16OVPSCLWRAP_CTRL_bitMap32_en                 0x0002
    #define   LSb32OVPSCLWRAP_CTRL_bitMap32_en                    26
    #define   LSb16OVPSCLWRAP_CTRL_bitMap32_en                    10
    #define       bOVPSCLWRAP_CTRL_bitMap32_en                 1
    #define   MSK32OVPSCLWRAP_CTRL_bitMap32_en                    0x04000000

    #define     BA_OVPSCLWRAP_CTRL_rd_initval0                 0x0003
    #define     B16OVPSCLWRAP_CTRL_rd_initval0                 0x0002
    #define   LSb32OVPSCLWRAP_CTRL_rd_initval0                    27
    #define   LSb16OVPSCLWRAP_CTRL_rd_initval0                    11
    #define       bOVPSCLWRAP_CTRL_rd_initval0                 1
    #define   MSK32OVPSCLWRAP_CTRL_rd_initval0                    0x08000000

    #define     BA_OVPSCLWRAP_CTRL_rd_initval1                 0x0003
    #define     B16OVPSCLWRAP_CTRL_rd_initval1                 0x0002
    #define   LSb32OVPSCLWRAP_CTRL_rd_initval1                    28
    #define   LSb16OVPSCLWRAP_CTRL_rd_initval1                    12
    #define       bOVPSCLWRAP_CTRL_rd_initval1                 1
    #define   MSK32OVPSCLWRAP_CTRL_rd_initval1                    0x10000000

    #define     BA_OVPSCLWRAP_CTRL_ififo_sts0_ctrl             0x0003
    #define     B16OVPSCLWRAP_CTRL_ififo_sts0_ctrl             0x0002
    #define   LSb32OVPSCLWRAP_CTRL_ififo_sts0_ctrl                29
    #define   LSb16OVPSCLWRAP_CTRL_ififo_sts0_ctrl                13
    #define       bOVPSCLWRAP_CTRL_ififo_sts0_ctrl             1
    #define   MSK32OVPSCLWRAP_CTRL_ififo_sts0_ctrl                0x20000000

    #define     BA_OVPSCLWRAP_CTRL_ififo_sts1_ctrl             0x0003
    #define     B16OVPSCLWRAP_CTRL_ififo_sts1_ctrl             0x0002
    #define   LSb32OVPSCLWRAP_CTRL_ififo_sts1_ctrl                30
    #define   LSb16OVPSCLWRAP_CTRL_ififo_sts1_ctrl                14
    #define       bOVPSCLWRAP_CTRL_ififo_sts1_ctrl             1
    #define   MSK32OVPSCLWRAP_CTRL_ififo_sts1_ctrl                0x40000000

    #define     BA_OVPSCLWRAP_CTRL_fifo_full_ctrlEn            0x0003
    #define     B16OVPSCLWRAP_CTRL_fifo_full_ctrlEn            0x0002
    #define   LSb32OVPSCLWRAP_CTRL_fifo_full_ctrlEn               31
    #define   LSb16OVPSCLWRAP_CTRL_fifo_full_ctrlEn               15
    #define       bOVPSCLWRAP_CTRL_fifo_full_ctrlEn            1
    #define   MSK32OVPSCLWRAP_CTRL_fifo_full_ctrlEn               0x80000000
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_CTRL0                            0x0004

    #define     BA_OVPSCLWRAP_CTRL0_ClientR0_start             0x0004
    #define     B16OVPSCLWRAP_CTRL0_ClientR0_start             0x0004
    #define   LSb32OVPSCLWRAP_CTRL0_ClientR0_start                0
    #define   LSb16OVPSCLWRAP_CTRL0_ClientR0_start                0
    #define       bOVPSCLWRAP_CTRL0_ClientR0_start             1
    #define   MSK32OVPSCLWRAP_CTRL0_ClientR0_start                0x00000001

    #define     BA_OVPSCLWRAP_CTRL0_ClientR1_start             0x0004
    #define     B16OVPSCLWRAP_CTRL0_ClientR1_start             0x0004
    #define   LSb32OVPSCLWRAP_CTRL0_ClientR1_start                1
    #define   LSb16OVPSCLWRAP_CTRL0_ClientR1_start                1
    #define       bOVPSCLWRAP_CTRL0_ClientR1_start             1
    #define   MSK32OVPSCLWRAP_CTRL0_ClientR1_start                0x00000002

    #define     BA_OVPSCLWRAP_CTRL0_ClientR0_clear             0x0004
    #define     B16OVPSCLWRAP_CTRL0_ClientR0_clear             0x0004
    #define   LSb32OVPSCLWRAP_CTRL0_ClientR0_clear                2
    #define   LSb16OVPSCLWRAP_CTRL0_ClientR0_clear                2
    #define       bOVPSCLWRAP_CTRL0_ClientR0_clear             1
    #define   MSK32OVPSCLWRAP_CTRL0_ClientR0_clear                0x00000004

    #define     BA_OVPSCLWRAP_CTRL0_ClientR1_clear             0x0004
    #define     B16OVPSCLWRAP_CTRL0_ClientR1_clear             0x0004
    #define   LSb32OVPSCLWRAP_CTRL0_ClientR1_clear                3
    #define   LSb16OVPSCLWRAP_CTRL0_ClientR1_clear                3
    #define       bOVPSCLWRAP_CTRL0_ClientR1_clear             1
    #define   MSK32OVPSCLWRAP_CTRL0_ClientR1_clear                0x00000008

    #define     BA_OVPSCLWRAP_CTRL0_inptg_start                0x0004
    #define     B16OVPSCLWRAP_CTRL0_inptg_start                0x0004
    #define   LSb32OVPSCLWRAP_CTRL0_inptg_start                   4
    #define   LSb16OVPSCLWRAP_CTRL0_inptg_start                   4
    #define       bOVPSCLWRAP_CTRL0_inptg_start                1
    #define   MSK32OVPSCLWRAP_CTRL0_inptg_start                   0x00000010

    #define     BA_OVPSCLWRAP_CTRL0_inptg_clear                0x0004
    #define     B16OVPSCLWRAP_CTRL0_inptg_clear                0x0004
    #define   LSb32OVPSCLWRAP_CTRL0_inptg_clear                   5
    #define   LSb16OVPSCLWRAP_CTRL0_inptg_clear                   5
    #define       bOVPSCLWRAP_CTRL0_inptg_clear                1
    #define   MSK32OVPSCLWRAP_CTRL0_inptg_clear                   0x00000020

    #define     BA_OVPSCLWRAP_CTRL0_wr_bitmap_en               0x0004
    #define     B16OVPSCLWRAP_CTRL0_wr_bitmap_en               0x0004
    #define   LSb32OVPSCLWRAP_CTRL0_wr_bitmap_en                  6
    #define   LSb16OVPSCLWRAP_CTRL0_wr_bitmap_en                  6
    #define       bOVPSCLWRAP_CTRL0_wr_bitmap_en               1
    #define   MSK32OVPSCLWRAP_CTRL0_wr_bitmap_en                  0x00000040
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_CTRL1                            0x0008

    #define     BA_OVPSCLWRAP_CTRL1_packSel_R0                 0x0008
    #define     B16OVPSCLWRAP_CTRL1_packSel_R0                 0x0008
    #define   LSb32OVPSCLWRAP_CTRL1_packSel_R0                    0
    #define   LSb16OVPSCLWRAP_CTRL1_packSel_R0                    0
    #define       bOVPSCLWRAP_CTRL1_packSel_R0                 2
    #define   MSK32OVPSCLWRAP_CTRL1_packSel_R0                    0x00000003

    #define     BA_OVPSCLWRAP_CTRL1_pixlineTot_R0              0x0008
    #define     B16OVPSCLWRAP_CTRL1_pixlineTot_R0              0x0008
    #define   LSb32OVPSCLWRAP_CTRL1_pixlineTot_R0                 2
    #define   LSb16OVPSCLWRAP_CTRL1_pixlineTot_R0                 2
    #define       bOVPSCLWRAP_CTRL1_pixlineTot_R0              13
    #define   MSK32OVPSCLWRAP_CTRL1_pixlineTot_R0                 0x00007FFC

    #define     BA_OVPSCLWRAP_CTRL1_nonStdResEn_R0             0x0009
    #define     B16OVPSCLWRAP_CTRL1_nonStdResEn_R0             0x0008
    #define   LSb32OVPSCLWRAP_CTRL1_nonStdResEn_R0                15
    #define   LSb16OVPSCLWRAP_CTRL1_nonStdResEn_R0                15
    #define       bOVPSCLWRAP_CTRL1_nonStdResEn_R0             1
    #define   MSK32OVPSCLWRAP_CTRL1_nonStdResEn_R0                0x00008000

    #define     BA_OVPSCLWRAP_CTRL1_flushCnt_R0                0x000A
    #define     B16OVPSCLWRAP_CTRL1_flushCnt_R0                0x000A
    #define   LSb32OVPSCLWRAP_CTRL1_flushCnt_R0                   16
    #define   LSb16OVPSCLWRAP_CTRL1_flushCnt_R0                   0
    #define       bOVPSCLWRAP_CTRL1_flushCnt_R0                4
    #define   MSK32OVPSCLWRAP_CTRL1_flushCnt_R0                   0x000F0000

    #define     BA_OVPSCLWRAP_CTRL1_ovp_flush_sel              0x000A
    #define     B16OVPSCLWRAP_CTRL1_ovp_flush_sel              0x000A
    #define   LSb32OVPSCLWRAP_CTRL1_ovp_flush_sel                 20
    #define   LSb16OVPSCLWRAP_CTRL1_ovp_flush_sel                 4
    #define       bOVPSCLWRAP_CTRL1_ovp_flush_sel              1
    #define   MSK32OVPSCLWRAP_CTRL1_ovp_flush_sel                 0x00100000

    #define     BA_OVPSCLWRAP_CTRL1_ovp_intr_sel               0x000A
    #define     B16OVPSCLWRAP_CTRL1_ovp_intr_sel               0x000A
    #define   LSb32OVPSCLWRAP_CTRL1_ovp_intr_sel                  21
    #define   LSb16OVPSCLWRAP_CTRL1_ovp_intr_sel                  5
    #define       bOVPSCLWRAP_CTRL1_ovp_intr_sel               1
    #define   MSK32OVPSCLWRAP_CTRL1_ovp_intr_sel                  0x00200000
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_CTRL2                            0x000C

    #define     BA_OVPSCLWRAP_CTRL2_packSel_R1                 0x000C
    #define     B16OVPSCLWRAP_CTRL2_packSel_R1                 0x000C
    #define   LSb32OVPSCLWRAP_CTRL2_packSel_R1                    0
    #define   LSb16OVPSCLWRAP_CTRL2_packSel_R1                    0
    #define       bOVPSCLWRAP_CTRL2_packSel_R1                 2
    #define   MSK32OVPSCLWRAP_CTRL2_packSel_R1                    0x00000003

    #define     BA_OVPSCLWRAP_CTRL2_pixlineTot_R1              0x000C
    #define     B16OVPSCLWRAP_CTRL2_pixlineTot_R1              0x000C
    #define   LSb32OVPSCLWRAP_CTRL2_pixlineTot_R1                 2
    #define   LSb16OVPSCLWRAP_CTRL2_pixlineTot_R1                 2
    #define       bOVPSCLWRAP_CTRL2_pixlineTot_R1              13
    #define   MSK32OVPSCLWRAP_CTRL2_pixlineTot_R1                 0x00007FFC

    #define     BA_OVPSCLWRAP_CTRL2_nonStdResEn_R1             0x000D
    #define     B16OVPSCLWRAP_CTRL2_nonStdResEn_R1             0x000C
    #define   LSb32OVPSCLWRAP_CTRL2_nonStdResEn_R1                15
    #define   LSb16OVPSCLWRAP_CTRL2_nonStdResEn_R1                15
    #define       bOVPSCLWRAP_CTRL2_nonStdResEn_R1             1
    #define   MSK32OVPSCLWRAP_CTRL2_nonStdResEn_R1                0x00008000

    #define     BA_OVPSCLWRAP_CTRL2_flushCnt_R1                0x000E
    #define     B16OVPSCLWRAP_CTRL2_flushCnt_R1                0x000E
    #define   LSb32OVPSCLWRAP_CTRL2_flushCnt_R1                   16
    #define   LSb16OVPSCLWRAP_CTRL2_flushCnt_R1                   0
    #define       bOVPSCLWRAP_CTRL2_flushCnt_R1                4
    #define   MSK32OVPSCLWRAP_CTRL2_flushCnt_R1                   0x000F0000
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_CTRL3                            0x0010

    #define     BA_OVPSCLWRAP_CTRL3_wordTot_R0                 0x0010
    #define     B16OVPSCLWRAP_CTRL3_wordTot_R0                 0x0010
    #define   LSb32OVPSCLWRAP_CTRL3_wordTot_R0                    0
    #define   LSb16OVPSCLWRAP_CTRL3_wordTot_R0                    0
    #define       bOVPSCLWRAP_CTRL3_wordTot_R0                 32
    #define   MSK32OVPSCLWRAP_CTRL3_wordTot_R0                    0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_CTRL4                            0x0014

    #define     BA_OVPSCLWRAP_CTRL4_wordTot_R1                 0x0014
    #define     B16OVPSCLWRAP_CTRL4_wordTot_R1                 0x0014
    #define   LSb32OVPSCLWRAP_CTRL4_wordTot_R1                    0
    #define   LSb16OVPSCLWRAP_CTRL4_wordTot_R1                    0
    #define       bOVPSCLWRAP_CTRL4_wordTot_R1                 32
    #define   MSK32OVPSCLWRAP_CTRL4_wordTot_R1                    0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_tg_ctrl                          0x0018

    #define     BA_OVPSCLWRAP_tg_ctrl_start                    0x0018
    #define     B16OVPSCLWRAP_tg_ctrl_start                    0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_start                       0
    #define   LSb16OVPSCLWRAP_tg_ctrl_start                       0
    #define       bOVPSCLWRAP_tg_ctrl_start                    1
    #define   MSK32OVPSCLWRAP_tg_ctrl_start                       0x00000001

    #define     BA_OVPSCLWRAP_tg_ctrl_clear                    0x0018
    #define     B16OVPSCLWRAP_tg_ctrl_clear                    0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_clear                       1
    #define   LSb16OVPSCLWRAP_tg_ctrl_clear                       1
    #define       bOVPSCLWRAP_tg_ctrl_clear                    1
    #define   MSK32OVPSCLWRAP_tg_ctrl_clear                       0x00000002

    #define     BA_OVPSCLWRAP_tg_ctrl_Y_otg_start              0x0018
    #define     B16OVPSCLWRAP_tg_ctrl_Y_otg_start              0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_Y_otg_start                 2
    #define   LSb16OVPSCLWRAP_tg_ctrl_Y_otg_start                 2
    #define       bOVPSCLWRAP_tg_ctrl_Y_otg_start              1
    #define   MSK32OVPSCLWRAP_tg_ctrl_Y_otg_start                 0x00000004

    #define     BA_OVPSCLWRAP_tg_ctrl_Y_otg_clear              0x0018
    #define     B16OVPSCLWRAP_tg_ctrl_Y_otg_clear              0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_Y_otg_clear                 3
    #define   LSb16OVPSCLWRAP_tg_ctrl_Y_otg_clear                 3
    #define       bOVPSCLWRAP_tg_ctrl_Y_otg_clear              1
    #define   MSK32OVPSCLWRAP_tg_ctrl_Y_otg_clear                 0x00000008

    #define     BA_OVPSCLWRAP_tg_ctrl_wr0_start                0x0018
    #define     B16OVPSCLWRAP_tg_ctrl_wr0_start                0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_wr0_start                   4
    #define   LSb16OVPSCLWRAP_tg_ctrl_wr0_start                   4
    #define       bOVPSCLWRAP_tg_ctrl_wr0_start                1
    #define   MSK32OVPSCLWRAP_tg_ctrl_wr0_start                   0x00000010

    #define     BA_OVPSCLWRAP_tg_ctrl_wr1_start                0x0018
    #define     B16OVPSCLWRAP_tg_ctrl_wr1_start                0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_wr1_start                   5
    #define   LSb16OVPSCLWRAP_tg_ctrl_wr1_start                   5
    #define       bOVPSCLWRAP_tg_ctrl_wr1_start                1
    #define   MSK32OVPSCLWRAP_tg_ctrl_wr1_start                   0x00000020

    #define     BA_OVPSCLWRAP_tg_ctrl_wr0_clear                0x0018
    #define     B16OVPSCLWRAP_tg_ctrl_wr0_clear                0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_wr0_clear                   6
    #define   LSb16OVPSCLWRAP_tg_ctrl_wr0_clear                   6
    #define       bOVPSCLWRAP_tg_ctrl_wr0_clear                1
    #define   MSK32OVPSCLWRAP_tg_ctrl_wr0_clear                   0x00000040

    #define     BA_OVPSCLWRAP_tg_ctrl_wr1_clear                0x0018
    #define     B16OVPSCLWRAP_tg_ctrl_wr1_clear                0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_wr1_clear                   7
    #define   LSb16OVPSCLWRAP_tg_ctrl_wr1_clear                   7
    #define       bOVPSCLWRAP_tg_ctrl_wr1_clear                1
    #define   MSK32OVPSCLWRAP_tg_ctrl_wr1_clear                   0x00000080

    #define     BA_OVPSCLWRAP_tg_ctrl_UV_otg_start             0x0019
    #define     B16OVPSCLWRAP_tg_ctrl_UV_otg_start             0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_UV_otg_start                8
    #define   LSb16OVPSCLWRAP_tg_ctrl_UV_otg_start                8
    #define       bOVPSCLWRAP_tg_ctrl_UV_otg_start             1
    #define   MSK32OVPSCLWRAP_tg_ctrl_UV_otg_start                0x00000100

    #define     BA_OVPSCLWRAP_tg_ctrl_UV_otg_clear             0x0019
    #define     B16OVPSCLWRAP_tg_ctrl_UV_otg_clear             0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_UV_otg_clear                9
    #define   LSb16OVPSCLWRAP_tg_ctrl_UV_otg_clear                9
    #define       bOVPSCLWRAP_tg_ctrl_UV_otg_clear             1
    #define   MSK32OVPSCLWRAP_tg_ctrl_UV_otg_clear                0x00000200

    #define     BA_OVPSCLWRAP_tg_ctrl_420sp_rd_start           0x0019
    #define     B16OVPSCLWRAP_tg_ctrl_420sp_rd_start           0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_420sp_rd_start              10
    #define   LSb16OVPSCLWRAP_tg_ctrl_420sp_rd_start              10
    #define       bOVPSCLWRAP_tg_ctrl_420sp_rd_start           1
    #define   MSK32OVPSCLWRAP_tg_ctrl_420sp_rd_start              0x00000400

    #define     BA_OVPSCLWRAP_tg_ctrl_ovp_flush                0x0019
    #define     B16OVPSCLWRAP_tg_ctrl_ovp_flush                0x0018
    #define   LSb32OVPSCLWRAP_tg_ctrl_ovp_flush                   11
    #define   LSb16OVPSCLWRAP_tg_ctrl_ovp_flush                   11
    #define       bOVPSCLWRAP_tg_ctrl_ovp_flush                1
    #define   MSK32OVPSCLWRAP_tg_ctrl_ovp_flush                   0x00000800
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_STATUS                           0x001C

    #define     BA_OVPSCLWRAP_STATUS_OVPSCL_Y_oTg              0x001C
    #define     B16OVPSCLWRAP_STATUS_OVPSCL_Y_oTg              0x001C
    #define   LSb32OVPSCLWRAP_STATUS_OVPSCL_Y_oTg                 0
    #define   LSb16OVPSCLWRAP_STATUS_OVPSCL_Y_oTg                 0
    #define       bOVPSCLWRAP_STATUS_OVPSCL_Y_oTg              16
    #define   MSK32OVPSCLWRAP_STATUS_OVPSCL_Y_oTg                 0x0000FFFF

    #define     BA_OVPSCLWRAP_STATUS_OVPSCL_UV_oTg             0x001E
    #define     B16OVPSCLWRAP_STATUS_OVPSCL_UV_oTg             0x001E
    #define   LSb32OVPSCLWRAP_STATUS_OVPSCL_UV_oTg                16
    #define   LSb16OVPSCLWRAP_STATUS_OVPSCL_UV_oTg                0
    #define       bOVPSCLWRAP_STATUS_OVPSCL_UV_oTg             16
    #define   MSK32OVPSCLWRAP_STATUS_OVPSCL_UV_oTg                0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_INTR_EN                          0x0020

    #define     BA_OVPSCLWRAP_INTR_EN_OVPSCL_Y_EOF             0x0020
    #define     B16OVPSCLWRAP_INTR_EN_OVPSCL_Y_EOF             0x0020
    #define   LSb32OVPSCLWRAP_INTR_EN_OVPSCL_Y_EOF                0
    #define   LSb16OVPSCLWRAP_INTR_EN_OVPSCL_Y_EOF                0
    #define       bOVPSCLWRAP_INTR_EN_OVPSCL_Y_EOF             1
    #define   MSK32OVPSCLWRAP_INTR_EN_OVPSCL_Y_EOF                0x00000001

    #define     BA_OVPSCLWRAP_INTR_EN_OVPSCL_UV_EOF            0x0020
    #define     B16OVPSCLWRAP_INTR_EN_OVPSCL_UV_EOF            0x0020
    #define   LSb32OVPSCLWRAP_INTR_EN_OVPSCL_UV_EOF               1
    #define   LSb16OVPSCLWRAP_INTR_EN_OVPSCL_UV_EOF               1
    #define       bOVPSCLWRAP_INTR_EN_OVPSCL_UV_EOF            1
    #define   MSK32OVPSCLWRAP_INTR_EN_OVPSCL_UV_EOF               0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_STATUS0                          0x0024

    #define     BA_OVPSCLWRAP_STATUS0_INPTG_OVPSCL_sts         0x0024
    #define     B16OVPSCLWRAP_STATUS0_INPTG_OVPSCL_sts         0x0024
    #define   LSb32OVPSCLWRAP_STATUS0_INPTG_OVPSCL_sts            0
    #define   LSb16OVPSCLWRAP_STATUS0_INPTG_OVPSCL_sts            0
    #define       bOVPSCLWRAP_STATUS0_INPTG_OVPSCL_sts         16
    #define   MSK32OVPSCLWRAP_STATUS0_INPTG_OVPSCL_sts            0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_OVPSCL_WR0                       0x0028
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_OVPSCL_WR1                       0x0038
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_OVPSCL_Y                         0x0048
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_OVPSCL_UV                        0x00E8
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_OVPSCL_OTG_Y                     0x0188
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_OVPSCL_OTG_UV                    0x01C8
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_BITMAP32                         0x0208
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_INPTG_OVPSCL                     0x0220
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_SRAMPWR_Y                        0x0268
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_SRAMPWR_UV                       0x026C
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_SRAMPWR_Y_HLUT                   0x0270
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_SRAMPWR_Y_VLUT                   0x0274
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_SRAMPWR_C_HLUT                   0x0278
    ///////////////////////////////////////////////////////////
    #define     RA_OVPSCLWRAP_SRAMPWR_C_VLUT                   0x027C
    ///////////////////////////////////////////////////////////

    typedef struct SIE_OVPSCLWRAP {
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCLWRAP_CTRL_ofifo_sts0_ctrl(r32)        _BFGET_(r32, 0, 0)
    #define   SET32OVPSCLWRAP_CTRL_ofifo_sts0_ctrl(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16OVPSCLWRAP_CTRL_ofifo_sts0_ctrl(r16)        _BFGET_(r16, 0, 0)
    #define   SET16OVPSCLWRAP_CTRL_ofifo_sts0_ctrl(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32OVPSCLWRAP_CTRL_ofifo_sts1_ctrl(r32)        _BFGET_(r32, 1, 1)
    #define   SET32OVPSCLWRAP_CTRL_ofifo_sts1_ctrl(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16OVPSCLWRAP_CTRL_ofifo_sts1_ctrl(r16)        _BFGET_(r16, 1, 1)
    #define   SET16OVPSCLWRAP_CTRL_ofifo_sts1_ctrl(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32OVPSCLWRAP_CTRL_sclOutrdy_sts0_en(r32)      _BFGET_(r32, 2, 2)
    #define   SET32OVPSCLWRAP_CTRL_sclOutrdy_sts0_en(r32,v)    _BFSET_(r32, 2, 2,v)
    #define   GET16OVPSCLWRAP_CTRL_sclOutrdy_sts0_en(r16)      _BFGET_(r16, 2, 2)
    #define   SET16OVPSCLWRAP_CTRL_sclOutrdy_sts0_en(r16,v)    _BFSET_(r16, 2, 2,v)

    #define   GET32OVPSCLWRAP_CTRL_sclOutrdy_sts1_en(r32)      _BFGET_(r32, 3, 3)
    #define   SET32OVPSCLWRAP_CTRL_sclOutrdy_sts1_en(r32,v)    _BFSET_(r32, 3, 3,v)
    #define   GET16OVPSCLWRAP_CTRL_sclOutrdy_sts1_en(r16)      _BFGET_(r16, 3, 3)
    #define   SET16OVPSCLWRAP_CTRL_sclOutrdy_sts1_en(r16,v)    _BFSET_(r16, 3, 3,v)

    #define   GET32OVPSCLWRAP_CTRL_luma_data_sel(r32)          _BFGET_(r32, 5, 4)
    #define   SET32OVPSCLWRAP_CTRL_luma_data_sel(r32,v)        _BFSET_(r32, 5, 4,v)
    #define   GET16OVPSCLWRAP_CTRL_luma_data_sel(r16)          _BFGET_(r16, 5, 4)
    #define   SET16OVPSCLWRAP_CTRL_luma_data_sel(r16,v)        _BFSET_(r16, 5, 4,v)

    #define   GET32OVPSCLWRAP_CTRL_chroma_data_sel(r32)        _BFGET_(r32, 6, 6)
    #define   SET32OVPSCLWRAP_CTRL_chroma_data_sel(r32,v)      _BFSET_(r32, 6, 6,v)
    #define   GET16OVPSCLWRAP_CTRL_chroma_data_sel(r16)        _BFGET_(r16, 6, 6)
    #define   SET16OVPSCLWRAP_CTRL_chroma_data_sel(r16,v)      _BFSET_(r16, 6, 6,v)

    #define   GET32OVPSCLWRAP_CTRL_420sp_wrbk(r32)             _BFGET_(r32, 7, 7)
    #define   SET32OVPSCLWRAP_CTRL_420sp_wrbk(r32,v)           _BFSET_(r32, 7, 7,v)
    #define   GET16OVPSCLWRAP_CTRL_420sp_wrbk(r16)             _BFGET_(r16, 7, 7)
    #define   SET16OVPSCLWRAP_CTRL_420sp_wrbk(r16,v)           _BFSET_(r16, 7, 7,v)

    #define   GET32OVPSCLWRAP_CTRL_hde_initval0(r32)           _BFGET_(r32, 8, 8)
    #define   SET32OVPSCLWRAP_CTRL_hde_initval0(r32,v)         _BFSET_(r32, 8, 8,v)
    #define   GET16OVPSCLWRAP_CTRL_hde_initval0(r16)           _BFGET_(r16, 8, 8)
    #define   SET16OVPSCLWRAP_CTRL_hde_initval0(r16,v)         _BFSET_(r16, 8, 8,v)

    #define   GET32OVPSCLWRAP_CTRL_hde_initval1(r32)           _BFGET_(r32, 9, 9)
    #define   SET32OVPSCLWRAP_CTRL_hde_initval1(r32,v)         _BFSET_(r32, 9, 9,v)
    #define   GET16OVPSCLWRAP_CTRL_hde_initval1(r16)           _BFGET_(r16, 9, 9)
    #define   SET16OVPSCLWRAP_CTRL_hde_initval1(r16,v)         _BFSET_(r16, 9, 9,v)

    #define   GET32OVPSCLWRAP_CTRL_ovpscl_ictrl_sel(r32)       _BFGET_(r32,12,10)
    #define   SET32OVPSCLWRAP_CTRL_ovpscl_ictrl_sel(r32,v)     _BFSET_(r32,12,10,v)
    #define   GET16OVPSCLWRAP_CTRL_ovpscl_ictrl_sel(r16)       _BFGET_(r16,12,10)
    #define   SET16OVPSCLWRAP_CTRL_ovpscl_ictrl_sel(r16,v)     _BFSET_(r16,12,10,v)

    #define   GET32OVPSCLWRAP_CTRL_idata_frmt_ctrl(r32)        _BFGET_(r32,13,13)
    #define   SET32OVPSCLWRAP_CTRL_idata_frmt_ctrl(r32,v)      _BFSET_(r32,13,13,v)
    #define   GET16OVPSCLWRAP_CTRL_idata_frmt_ctrl(r16)        _BFGET_(r16,13,13)
    #define   SET16OVPSCLWRAP_CTRL_idata_frmt_ctrl(r16,v)      _BFSET_(r16,13,13,v)

    #define   GET32OVPSCLWRAP_CTRL_clk_en_sel(r32)             _BFGET_(r32,15,14)
    #define   SET32OVPSCLWRAP_CTRL_clk_en_sel(r32,v)           _BFSET_(r32,15,14,v)
    #define   GET16OVPSCLWRAP_CTRL_clk_en_sel(r16)             _BFGET_(r16,15,14)
    #define   SET16OVPSCLWRAP_CTRL_clk_en_sel(r16,v)           _BFSET_(r16,15,14,v)

    #define   GET32OVPSCLWRAP_CTRL_hde_msk_en(r32)             _BFGET_(r32,16,16)
    #define   SET32OVPSCLWRAP_CTRL_hde_msk_en(r32,v)           _BFSET_(r32,16,16,v)
    #define   GET16OVPSCLWRAP_CTRL_hde_msk_en(r16)             _BFGET_(r16, 0, 0)
    #define   SET16OVPSCLWRAP_CTRL_hde_msk_en(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32OVPSCLWRAP_CTRL_ngptv_bypass(r32)           _BFGET_(r32,17,17)
    #define   SET32OVPSCLWRAP_CTRL_ngptv_bypass(r32,v)         _BFSET_(r32,17,17,v)
    #define   GET16OVPSCLWRAP_CTRL_ngptv_bypass(r16)           _BFGET_(r16, 1, 1)
    #define   SET16OVPSCLWRAP_CTRL_ngptv_bypass(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32OVPSCLWRAP_CTRL_ngptv_scl_sel(r32)          _BFGET_(r32,18,18)
    #define   SET32OVPSCLWRAP_CTRL_ngptv_scl_sel(r32,v)        _BFSET_(r32,18,18,v)
    #define   GET16OVPSCLWRAP_CTRL_ngptv_scl_sel(r16)          _BFGET_(r16, 2, 2)
    #define   SET16OVPSCLWRAP_CTRL_ngptv_scl_sel(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32OVPSCLWRAP_CTRL_bitmap128_Rd0_en(r32)       _BFGET_(r32,19,19)
    #define   SET32OVPSCLWRAP_CTRL_bitmap128_Rd0_en(r32,v)     _BFSET_(r32,19,19,v)
    #define   GET16OVPSCLWRAP_CTRL_bitmap128_Rd0_en(r16)       _BFGET_(r16, 3, 3)
    #define   SET16OVPSCLWRAP_CTRL_bitmap128_Rd0_en(r16,v)     _BFSET_(r16, 3, 3,v)

    #define   GET32OVPSCLWRAP_CTRL_bitmap128_Rd1_en(r32)       _BFGET_(r32,20,20)
    #define   SET32OVPSCLWRAP_CTRL_bitmap128_Rd1_en(r32,v)     _BFSET_(r32,20,20,v)
    #define   GET16OVPSCLWRAP_CTRL_bitmap128_Rd1_en(r16)       _BFGET_(r16, 4, 4)
    #define   SET16OVPSCLWRAP_CTRL_bitmap128_Rd1_en(r16,v)     _BFSET_(r16, 4, 4,v)

    #define   GET32OVPSCLWRAP_CTRL_rdsel_420SP(r32)            _BFGET_(r32,21,21)
    #define   SET32OVPSCLWRAP_CTRL_rdsel_420SP(r32,v)          _BFSET_(r32,21,21,v)
    #define   GET16OVPSCLWRAP_CTRL_rdsel_420SP(r16)            _BFGET_(r16, 5, 5)
    #define   SET16OVPSCLWRAP_CTRL_rdsel_420SP(r16,v)          _BFSET_(r16, 5, 5,v)

    #define   GET32OVPSCLWRAP_CTRL_rd_mask_sftrst(r32)         _BFGET_(r32,22,22)
    #define   SET32OVPSCLWRAP_CTRL_rd_mask_sftrst(r32,v)       _BFSET_(r32,22,22,v)
    #define   GET16OVPSCLWRAP_CTRL_rd_mask_sftrst(r16)         _BFGET_(r16, 6, 6)
    #define   SET16OVPSCLWRAP_CTRL_rd_mask_sftrst(r16,v)       _BFSET_(r16, 6, 6,v)

    #define   GET32OVPSCLWRAP_CTRL_clken_ctrl0(r32)            _BFGET_(r32,23,23)
    #define   SET32OVPSCLWRAP_CTRL_clken_ctrl0(r32,v)          _BFSET_(r32,23,23,v)
    #define   GET16OVPSCLWRAP_CTRL_clken_ctrl0(r16)            _BFGET_(r16, 7, 7)
    #define   SET16OVPSCLWRAP_CTRL_clken_ctrl0(r16,v)          _BFSET_(r16, 7, 7,v)

    #define   GET32OVPSCLWRAP_CTRL_clken_ctrl1(r32)            _BFGET_(r32,24,24)
    #define   SET32OVPSCLWRAP_CTRL_clken_ctrl1(r32,v)          _BFSET_(r32,24,24,v)
    #define   GET16OVPSCLWRAP_CTRL_clken_ctrl1(r16)            _BFGET_(r16, 8, 8)
    #define   SET16OVPSCLWRAP_CTRL_clken_ctrl1(r16,v)          _BFSET_(r16, 8, 8,v)

    #define   GET32OVPSCLWRAP_CTRL_ups420_idatactrl(r32)       _BFGET_(r32,25,25)
    #define   SET32OVPSCLWRAP_CTRL_ups420_idatactrl(r32,v)     _BFSET_(r32,25,25,v)
    #define   GET16OVPSCLWRAP_CTRL_ups420_idatactrl(r16)       _BFGET_(r16, 9, 9)
    #define   SET16OVPSCLWRAP_CTRL_ups420_idatactrl(r16,v)     _BFSET_(r16, 9, 9,v)

    #define   GET32OVPSCLWRAP_CTRL_bitMap32_en(r32)            _BFGET_(r32,26,26)
    #define   SET32OVPSCLWRAP_CTRL_bitMap32_en(r32,v)          _BFSET_(r32,26,26,v)
    #define   GET16OVPSCLWRAP_CTRL_bitMap32_en(r16)            _BFGET_(r16,10,10)
    #define   SET16OVPSCLWRAP_CTRL_bitMap32_en(r16,v)          _BFSET_(r16,10,10,v)

    #define   GET32OVPSCLWRAP_CTRL_rd_initval0(r32)            _BFGET_(r32,27,27)
    #define   SET32OVPSCLWRAP_CTRL_rd_initval0(r32,v)          _BFSET_(r32,27,27,v)
    #define   GET16OVPSCLWRAP_CTRL_rd_initval0(r16)            _BFGET_(r16,11,11)
    #define   SET16OVPSCLWRAP_CTRL_rd_initval0(r16,v)          _BFSET_(r16,11,11,v)

    #define   GET32OVPSCLWRAP_CTRL_rd_initval1(r32)            _BFGET_(r32,28,28)
    #define   SET32OVPSCLWRAP_CTRL_rd_initval1(r32,v)          _BFSET_(r32,28,28,v)
    #define   GET16OVPSCLWRAP_CTRL_rd_initval1(r16)            _BFGET_(r16,12,12)
    #define   SET16OVPSCLWRAP_CTRL_rd_initval1(r16,v)          _BFSET_(r16,12,12,v)

    #define   GET32OVPSCLWRAP_CTRL_ififo_sts0_ctrl(r32)        _BFGET_(r32,29,29)
    #define   SET32OVPSCLWRAP_CTRL_ififo_sts0_ctrl(r32,v)      _BFSET_(r32,29,29,v)
    #define   GET16OVPSCLWRAP_CTRL_ififo_sts0_ctrl(r16)        _BFGET_(r16,13,13)
    #define   SET16OVPSCLWRAP_CTRL_ififo_sts0_ctrl(r16,v)      _BFSET_(r16,13,13,v)

    #define   GET32OVPSCLWRAP_CTRL_ififo_sts1_ctrl(r32)        _BFGET_(r32,30,30)
    #define   SET32OVPSCLWRAP_CTRL_ififo_sts1_ctrl(r32,v)      _BFSET_(r32,30,30,v)
    #define   GET16OVPSCLWRAP_CTRL_ififo_sts1_ctrl(r16)        _BFGET_(r16,14,14)
    #define   SET16OVPSCLWRAP_CTRL_ififo_sts1_ctrl(r16,v)      _BFSET_(r16,14,14,v)

    #define   GET32OVPSCLWRAP_CTRL_fifo_full_ctrlEn(r32)       _BFGET_(r32,31,31)
    #define   SET32OVPSCLWRAP_CTRL_fifo_full_ctrlEn(r32,v)     _BFSET_(r32,31,31,v)
    #define   GET16OVPSCLWRAP_CTRL_fifo_full_ctrlEn(r16)       _BFGET_(r16,15,15)
    #define   SET16OVPSCLWRAP_CTRL_fifo_full_ctrlEn(r16,v)     _BFSET_(r16,15,15,v)

    #define     w32OVPSCLWRAP_CTRL                             {\
            UNSG32 uCTRL_ofifo_sts0_ctrl                       :  1;\
            UNSG32 uCTRL_ofifo_sts1_ctrl                       :  1;\
            UNSG32 uCTRL_sclOutrdy_sts0_en                     :  1;\
            UNSG32 uCTRL_sclOutrdy_sts1_en                     :  1;\
            UNSG32 uCTRL_luma_data_sel                         :  2;\
            UNSG32 uCTRL_chroma_data_sel                       :  1;\
            UNSG32 uCTRL_420sp_wrbk                            :  1;\
            UNSG32 uCTRL_hde_initval0                          :  1;\
            UNSG32 uCTRL_hde_initval1                          :  1;\
            UNSG32 uCTRL_ovpscl_ictrl_sel                      :  3;\
            UNSG32 uCTRL_idata_frmt_ctrl                       :  1;\
            UNSG32 uCTRL_clk_en_sel                            :  2;\
            UNSG32 uCTRL_hde_msk_en                            :  1;\
            UNSG32 uCTRL_ngptv_bypass                          :  1;\
            UNSG32 uCTRL_ngptv_scl_sel                         :  1;\
            UNSG32 uCTRL_bitmap128_Rd0_en                      :  1;\
            UNSG32 uCTRL_bitmap128_Rd1_en                      :  1;\
            UNSG32 uCTRL_rdsel_420SP                           :  1;\
            UNSG32 uCTRL_rd_mask_sftrst                        :  1;\
            UNSG32 uCTRL_clken_ctrl0                           :  1;\
            UNSG32 uCTRL_clken_ctrl1                           :  1;\
            UNSG32 uCTRL_ups420_idatactrl                      :  1;\
            UNSG32 uCTRL_bitMap32_en                           :  1;\
            UNSG32 uCTRL_rd_initval0                           :  1;\
            UNSG32 uCTRL_rd_initval1                           :  1;\
            UNSG32 uCTRL_ififo_sts0_ctrl                       :  1;\
            UNSG32 uCTRL_ififo_sts1_ctrl                       :  1;\
            UNSG32 uCTRL_fifo_full_ctrlEn                      :  1;\
          }
    union { UNSG32 u32OVPSCLWRAP_CTRL;
            struct w32OVPSCLWRAP_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCLWRAP_CTRL0_ClientR0_start(r32)        _BFGET_(r32, 0, 0)
    #define   SET32OVPSCLWRAP_CTRL0_ClientR0_start(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16OVPSCLWRAP_CTRL0_ClientR0_start(r16)        _BFGET_(r16, 0, 0)
    #define   SET16OVPSCLWRAP_CTRL0_ClientR0_start(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32OVPSCLWRAP_CTRL0_ClientR1_start(r32)        _BFGET_(r32, 1, 1)
    #define   SET32OVPSCLWRAP_CTRL0_ClientR1_start(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16OVPSCLWRAP_CTRL0_ClientR1_start(r16)        _BFGET_(r16, 1, 1)
    #define   SET16OVPSCLWRAP_CTRL0_ClientR1_start(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32OVPSCLWRAP_CTRL0_ClientR0_clear(r32)        _BFGET_(r32, 2, 2)
    #define   SET32OVPSCLWRAP_CTRL0_ClientR0_clear(r32,v)      _BFSET_(r32, 2, 2,v)
    #define   GET16OVPSCLWRAP_CTRL0_ClientR0_clear(r16)        _BFGET_(r16, 2, 2)
    #define   SET16OVPSCLWRAP_CTRL0_ClientR0_clear(r16,v)      _BFSET_(r16, 2, 2,v)

    #define   GET32OVPSCLWRAP_CTRL0_ClientR1_clear(r32)        _BFGET_(r32, 3, 3)
    #define   SET32OVPSCLWRAP_CTRL0_ClientR1_clear(r32,v)      _BFSET_(r32, 3, 3,v)
    #define   GET16OVPSCLWRAP_CTRL0_ClientR1_clear(r16)        _BFGET_(r16, 3, 3)
    #define   SET16OVPSCLWRAP_CTRL0_ClientR1_clear(r16,v)      _BFSET_(r16, 3, 3,v)

    #define   GET32OVPSCLWRAP_CTRL0_inptg_start(r32)           _BFGET_(r32, 4, 4)
    #define   SET32OVPSCLWRAP_CTRL0_inptg_start(r32,v)         _BFSET_(r32, 4, 4,v)
    #define   GET16OVPSCLWRAP_CTRL0_inptg_start(r16)           _BFGET_(r16, 4, 4)
    #define   SET16OVPSCLWRAP_CTRL0_inptg_start(r16,v)         _BFSET_(r16, 4, 4,v)

    #define   GET32OVPSCLWRAP_CTRL0_inptg_clear(r32)           _BFGET_(r32, 5, 5)
    #define   SET32OVPSCLWRAP_CTRL0_inptg_clear(r32,v)         _BFSET_(r32, 5, 5,v)
    #define   GET16OVPSCLWRAP_CTRL0_inptg_clear(r16)           _BFGET_(r16, 5, 5)
    #define   SET16OVPSCLWRAP_CTRL0_inptg_clear(r16,v)         _BFSET_(r16, 5, 5,v)

    #define   GET32OVPSCLWRAP_CTRL0_wr_bitmap_en(r32)          _BFGET_(r32, 6, 6)
    #define   SET32OVPSCLWRAP_CTRL0_wr_bitmap_en(r32,v)        _BFSET_(r32, 6, 6,v)
    #define   GET16OVPSCLWRAP_CTRL0_wr_bitmap_en(r16)          _BFGET_(r16, 6, 6)
    #define   SET16OVPSCLWRAP_CTRL0_wr_bitmap_en(r16,v)        _BFSET_(r16, 6, 6,v)

    #define     w32OVPSCLWRAP_CTRL0                            {\
            UNSG32 uCTRL0_ClientR0_start                       :  1;\
            UNSG32 uCTRL0_ClientR1_start                       :  1;\
            UNSG32 uCTRL0_ClientR0_clear                       :  1;\
            UNSG32 uCTRL0_ClientR1_clear                       :  1;\
            UNSG32 uCTRL0_inptg_start                          :  1;\
            UNSG32 uCTRL0_inptg_clear                          :  1;\
            UNSG32 uCTRL0_wr_bitmap_en                         :  1;\
            UNSG32 RSVDx4_b7                                   : 25;\
          }
    union { UNSG32 u32OVPSCLWRAP_CTRL0;
            struct w32OVPSCLWRAP_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCLWRAP_CTRL1_packSel_R0(r32)            _BFGET_(r32, 1, 0)
    #define   SET32OVPSCLWRAP_CTRL1_packSel_R0(r32,v)          _BFSET_(r32, 1, 0,v)
    #define   GET16OVPSCLWRAP_CTRL1_packSel_R0(r16)            _BFGET_(r16, 1, 0)
    #define   SET16OVPSCLWRAP_CTRL1_packSel_R0(r16,v)          _BFSET_(r16, 1, 0,v)

    #define   GET32OVPSCLWRAP_CTRL1_pixlineTot_R0(r32)         _BFGET_(r32,14, 2)
    #define   SET32OVPSCLWRAP_CTRL1_pixlineTot_R0(r32,v)       _BFSET_(r32,14, 2,v)
    #define   GET16OVPSCLWRAP_CTRL1_pixlineTot_R0(r16)         _BFGET_(r16,14, 2)
    #define   SET16OVPSCLWRAP_CTRL1_pixlineTot_R0(r16,v)       _BFSET_(r16,14, 2,v)

    #define   GET32OVPSCLWRAP_CTRL1_nonStdResEn_R0(r32)        _BFGET_(r32,15,15)
    #define   SET32OVPSCLWRAP_CTRL1_nonStdResEn_R0(r32,v)      _BFSET_(r32,15,15,v)
    #define   GET16OVPSCLWRAP_CTRL1_nonStdResEn_R0(r16)        _BFGET_(r16,15,15)
    #define   SET16OVPSCLWRAP_CTRL1_nonStdResEn_R0(r16,v)      _BFSET_(r16,15,15,v)

    #define   GET32OVPSCLWRAP_CTRL1_flushCnt_R0(r32)           _BFGET_(r32,19,16)
    #define   SET32OVPSCLWRAP_CTRL1_flushCnt_R0(r32,v)         _BFSET_(r32,19,16,v)
    #define   GET16OVPSCLWRAP_CTRL1_flushCnt_R0(r16)           _BFGET_(r16, 3, 0)
    #define   SET16OVPSCLWRAP_CTRL1_flushCnt_R0(r16,v)         _BFSET_(r16, 3, 0,v)

    #define   GET32OVPSCLWRAP_CTRL1_ovp_flush_sel(r32)         _BFGET_(r32,20,20)
    #define   SET32OVPSCLWRAP_CTRL1_ovp_flush_sel(r32,v)       _BFSET_(r32,20,20,v)
    #define   GET16OVPSCLWRAP_CTRL1_ovp_flush_sel(r16)         _BFGET_(r16, 4, 4)
    #define   SET16OVPSCLWRAP_CTRL1_ovp_flush_sel(r16,v)       _BFSET_(r16, 4, 4,v)

    #define   GET32OVPSCLWRAP_CTRL1_ovp_intr_sel(r32)          _BFGET_(r32,21,21)
    #define   SET32OVPSCLWRAP_CTRL1_ovp_intr_sel(r32,v)        _BFSET_(r32,21,21,v)
    #define   GET16OVPSCLWRAP_CTRL1_ovp_intr_sel(r16)          _BFGET_(r16, 5, 5)
    #define   SET16OVPSCLWRAP_CTRL1_ovp_intr_sel(r16,v)        _BFSET_(r16, 5, 5,v)

    #define     w32OVPSCLWRAP_CTRL1                            {\
            UNSG32 uCTRL1_packSel_R0                           :  2;\
            UNSG32 uCTRL1_pixlineTot_R0                        : 13;\
            UNSG32 uCTRL1_nonStdResEn_R0                       :  1;\
            UNSG32 uCTRL1_flushCnt_R0                          :  4;\
            UNSG32 uCTRL1_ovp_flush_sel                        :  1;\
            UNSG32 uCTRL1_ovp_intr_sel                         :  1;\
            UNSG32 RSVDx8_b22                                  : 10;\
          }
    union { UNSG32 u32OVPSCLWRAP_CTRL1;
            struct w32OVPSCLWRAP_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCLWRAP_CTRL2_packSel_R1(r32)            _BFGET_(r32, 1, 0)
    #define   SET32OVPSCLWRAP_CTRL2_packSel_R1(r32,v)          _BFSET_(r32, 1, 0,v)
    #define   GET16OVPSCLWRAP_CTRL2_packSel_R1(r16)            _BFGET_(r16, 1, 0)
    #define   SET16OVPSCLWRAP_CTRL2_packSel_R1(r16,v)          _BFSET_(r16, 1, 0,v)

    #define   GET32OVPSCLWRAP_CTRL2_pixlineTot_R1(r32)         _BFGET_(r32,14, 2)
    #define   SET32OVPSCLWRAP_CTRL2_pixlineTot_R1(r32,v)       _BFSET_(r32,14, 2,v)
    #define   GET16OVPSCLWRAP_CTRL2_pixlineTot_R1(r16)         _BFGET_(r16,14, 2)
    #define   SET16OVPSCLWRAP_CTRL2_pixlineTot_R1(r16,v)       _BFSET_(r16,14, 2,v)

    #define   GET32OVPSCLWRAP_CTRL2_nonStdResEn_R1(r32)        _BFGET_(r32,15,15)
    #define   SET32OVPSCLWRAP_CTRL2_nonStdResEn_R1(r32,v)      _BFSET_(r32,15,15,v)
    #define   GET16OVPSCLWRAP_CTRL2_nonStdResEn_R1(r16)        _BFGET_(r16,15,15)
    #define   SET16OVPSCLWRAP_CTRL2_nonStdResEn_R1(r16,v)      _BFSET_(r16,15,15,v)

    #define   GET32OVPSCLWRAP_CTRL2_flushCnt_R1(r32)           _BFGET_(r32,19,16)
    #define   SET32OVPSCLWRAP_CTRL2_flushCnt_R1(r32,v)         _BFSET_(r32,19,16,v)
    #define   GET16OVPSCLWRAP_CTRL2_flushCnt_R1(r16)           _BFGET_(r16, 3, 0)
    #define   SET16OVPSCLWRAP_CTRL2_flushCnt_R1(r16,v)         _BFSET_(r16, 3, 0,v)

    #define     w32OVPSCLWRAP_CTRL2                            {\
            UNSG32 uCTRL2_packSel_R1                           :  2;\
            UNSG32 uCTRL2_pixlineTot_R1                        : 13;\
            UNSG32 uCTRL2_nonStdResEn_R1                       :  1;\
            UNSG32 uCTRL2_flushCnt_R1                          :  4;\
            UNSG32 RSVDxC_b20                                  : 12;\
          }
    union { UNSG32 u32OVPSCLWRAP_CTRL2;
            struct w32OVPSCLWRAP_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCLWRAP_CTRL3_wordTot_R0(r32)            _BFGET_(r32,31, 0)
    #define   SET32OVPSCLWRAP_CTRL3_wordTot_R0(r32,v)          _BFSET_(r32,31, 0,v)

    #define     w32OVPSCLWRAP_CTRL3                            {\
            UNSG32 uCTRL3_wordTot_R0                           : 32;\
          }
    union { UNSG32 u32OVPSCLWRAP_CTRL3;
            struct w32OVPSCLWRAP_CTRL3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCLWRAP_CTRL4_wordTot_R1(r32)            _BFGET_(r32,31, 0)
    #define   SET32OVPSCLWRAP_CTRL4_wordTot_R1(r32,v)          _BFSET_(r32,31, 0,v)

    #define     w32OVPSCLWRAP_CTRL4                            {\
            UNSG32 uCTRL4_wordTot_R1                           : 32;\
          }
    union { UNSG32 u32OVPSCLWRAP_CTRL4;
            struct w32OVPSCLWRAP_CTRL4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCLWRAP_tg_ctrl_start(r32)               _BFGET_(r32, 0, 0)
    #define   SET32OVPSCLWRAP_tg_ctrl_start(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_start(r16)               _BFGET_(r16, 0, 0)
    #define   SET16OVPSCLWRAP_tg_ctrl_start(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32OVPSCLWRAP_tg_ctrl_clear(r32)               _BFGET_(r32, 1, 1)
    #define   SET32OVPSCLWRAP_tg_ctrl_clear(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_clear(r16)               _BFGET_(r16, 1, 1)
    #define   SET16OVPSCLWRAP_tg_ctrl_clear(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32OVPSCLWRAP_tg_ctrl_Y_otg_start(r32)         _BFGET_(r32, 2, 2)
    #define   SET32OVPSCLWRAP_tg_ctrl_Y_otg_start(r32,v)       _BFSET_(r32, 2, 2,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_Y_otg_start(r16)         _BFGET_(r16, 2, 2)
    #define   SET16OVPSCLWRAP_tg_ctrl_Y_otg_start(r16,v)       _BFSET_(r16, 2, 2,v)

    #define   GET32OVPSCLWRAP_tg_ctrl_Y_otg_clear(r32)         _BFGET_(r32, 3, 3)
    #define   SET32OVPSCLWRAP_tg_ctrl_Y_otg_clear(r32,v)       _BFSET_(r32, 3, 3,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_Y_otg_clear(r16)         _BFGET_(r16, 3, 3)
    #define   SET16OVPSCLWRAP_tg_ctrl_Y_otg_clear(r16,v)       _BFSET_(r16, 3, 3,v)

    #define   GET32OVPSCLWRAP_tg_ctrl_wr0_start(r32)           _BFGET_(r32, 4, 4)
    #define   SET32OVPSCLWRAP_tg_ctrl_wr0_start(r32,v)         _BFSET_(r32, 4, 4,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_wr0_start(r16)           _BFGET_(r16, 4, 4)
    #define   SET16OVPSCLWRAP_tg_ctrl_wr0_start(r16,v)         _BFSET_(r16, 4, 4,v)

    #define   GET32OVPSCLWRAP_tg_ctrl_wr1_start(r32)           _BFGET_(r32, 5, 5)
    #define   SET32OVPSCLWRAP_tg_ctrl_wr1_start(r32,v)         _BFSET_(r32, 5, 5,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_wr1_start(r16)           _BFGET_(r16, 5, 5)
    #define   SET16OVPSCLWRAP_tg_ctrl_wr1_start(r16,v)         _BFSET_(r16, 5, 5,v)

    #define   GET32OVPSCLWRAP_tg_ctrl_wr0_clear(r32)           _BFGET_(r32, 6, 6)
    #define   SET32OVPSCLWRAP_tg_ctrl_wr0_clear(r32,v)         _BFSET_(r32, 6, 6,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_wr0_clear(r16)           _BFGET_(r16, 6, 6)
    #define   SET16OVPSCLWRAP_tg_ctrl_wr0_clear(r16,v)         _BFSET_(r16, 6, 6,v)

    #define   GET32OVPSCLWRAP_tg_ctrl_wr1_clear(r32)           _BFGET_(r32, 7, 7)
    #define   SET32OVPSCLWRAP_tg_ctrl_wr1_clear(r32,v)         _BFSET_(r32, 7, 7,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_wr1_clear(r16)           _BFGET_(r16, 7, 7)
    #define   SET16OVPSCLWRAP_tg_ctrl_wr1_clear(r16,v)         _BFSET_(r16, 7, 7,v)

    #define   GET32OVPSCLWRAP_tg_ctrl_UV_otg_start(r32)        _BFGET_(r32, 8, 8)
    #define   SET32OVPSCLWRAP_tg_ctrl_UV_otg_start(r32,v)      _BFSET_(r32, 8, 8,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_UV_otg_start(r16)        _BFGET_(r16, 8, 8)
    #define   SET16OVPSCLWRAP_tg_ctrl_UV_otg_start(r16,v)      _BFSET_(r16, 8, 8,v)

    #define   GET32OVPSCLWRAP_tg_ctrl_UV_otg_clear(r32)        _BFGET_(r32, 9, 9)
    #define   SET32OVPSCLWRAP_tg_ctrl_UV_otg_clear(r32,v)      _BFSET_(r32, 9, 9,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_UV_otg_clear(r16)        _BFGET_(r16, 9, 9)
    #define   SET16OVPSCLWRAP_tg_ctrl_UV_otg_clear(r16,v)      _BFSET_(r16, 9, 9,v)

    #define   GET32OVPSCLWRAP_tg_ctrl_420sp_rd_start(r32)      _BFGET_(r32,10,10)
    #define   SET32OVPSCLWRAP_tg_ctrl_420sp_rd_start(r32,v)    _BFSET_(r32,10,10,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_420sp_rd_start(r16)      _BFGET_(r16,10,10)
    #define   SET16OVPSCLWRAP_tg_ctrl_420sp_rd_start(r16,v)    _BFSET_(r16,10,10,v)

    #define   GET32OVPSCLWRAP_tg_ctrl_ovp_flush(r32)           _BFGET_(r32,11,11)
    #define   SET32OVPSCLWRAP_tg_ctrl_ovp_flush(r32,v)         _BFSET_(r32,11,11,v)
    #define   GET16OVPSCLWRAP_tg_ctrl_ovp_flush(r16)           _BFGET_(r16,11,11)
    #define   SET16OVPSCLWRAP_tg_ctrl_ovp_flush(r16,v)         _BFSET_(r16,11,11,v)

    #define     w32OVPSCLWRAP_tg_ctrl                          {\
            UNSG32 utg_ctrl_start                              :  1;\
            UNSG32 utg_ctrl_clear                              :  1;\
            UNSG32 utg_ctrl_Y_otg_start                        :  1;\
            UNSG32 utg_ctrl_Y_otg_clear                        :  1;\
            UNSG32 utg_ctrl_wr0_start                          :  1;\
            UNSG32 utg_ctrl_wr1_start                          :  1;\
            UNSG32 utg_ctrl_wr0_clear                          :  1;\
            UNSG32 utg_ctrl_wr1_clear                          :  1;\
            UNSG32 utg_ctrl_UV_otg_start                       :  1;\
            UNSG32 utg_ctrl_UV_otg_clear                       :  1;\
            UNSG32 utg_ctrl_420sp_rd_start                     :  1;\
            UNSG32 utg_ctrl_ovp_flush                          :  1;\
            UNSG32 RSVDx18_b12                                 : 20;\
          }
    union { UNSG32 u32OVPSCLWRAP_tg_ctrl;
            struct w32OVPSCLWRAP_tg_ctrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCLWRAP_STATUS_OVPSCL_Y_oTg(r32)         _BFGET_(r32,15, 0)
    #define   SET32OVPSCLWRAP_STATUS_OVPSCL_Y_oTg(r32,v)       _BFSET_(r32,15, 0,v)
    #define   GET16OVPSCLWRAP_STATUS_OVPSCL_Y_oTg(r16)         _BFGET_(r16,15, 0)
    #define   SET16OVPSCLWRAP_STATUS_OVPSCL_Y_oTg(r16,v)       _BFSET_(r16,15, 0,v)

    #define   GET32OVPSCLWRAP_STATUS_OVPSCL_UV_oTg(r32)        _BFGET_(r32,31,16)
    #define   SET32OVPSCLWRAP_STATUS_OVPSCL_UV_oTg(r32,v)      _BFSET_(r32,31,16,v)
    #define   GET16OVPSCLWRAP_STATUS_OVPSCL_UV_oTg(r16)        _BFGET_(r16,15, 0)
    #define   SET16OVPSCLWRAP_STATUS_OVPSCL_UV_oTg(r16,v)      _BFSET_(r16,15, 0,v)

    #define     w32OVPSCLWRAP_STATUS                           {\
            UNSG32 uSTATUS_OVPSCL_Y_oTg                        : 16;\
            UNSG32 uSTATUS_OVPSCL_UV_oTg                       : 16;\
          }
    union { UNSG32 u32OVPSCLWRAP_STATUS;
            struct w32OVPSCLWRAP_STATUS;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCLWRAP_INTR_EN_OVPSCL_Y_EOF(r32)        _BFGET_(r32, 0, 0)
    #define   SET32OVPSCLWRAP_INTR_EN_OVPSCL_Y_EOF(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16OVPSCLWRAP_INTR_EN_OVPSCL_Y_EOF(r16)        _BFGET_(r16, 0, 0)
    #define   SET16OVPSCLWRAP_INTR_EN_OVPSCL_Y_EOF(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32OVPSCLWRAP_INTR_EN_OVPSCL_UV_EOF(r32)       _BFGET_(r32, 1, 1)
    #define   SET32OVPSCLWRAP_INTR_EN_OVPSCL_UV_EOF(r32,v)     _BFSET_(r32, 1, 1,v)
    #define   GET16OVPSCLWRAP_INTR_EN_OVPSCL_UV_EOF(r16)       _BFGET_(r16, 1, 1)
    #define   SET16OVPSCLWRAP_INTR_EN_OVPSCL_UV_EOF(r16,v)     _BFSET_(r16, 1, 1,v)

    #define     w32OVPSCLWRAP_INTR_EN                          {\
            UNSG32 uINTR_EN_OVPSCL_Y_EOF                       :  1;\
            UNSG32 uINTR_EN_OVPSCL_UV_EOF                      :  1;\
            UNSG32 RSVDx20_b2                                  : 30;\
          }
    union { UNSG32 u32OVPSCLWRAP_INTR_EN;
            struct w32OVPSCLWRAP_INTR_EN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVPSCLWRAP_STATUS0_INPTG_OVPSCL_sts(r32)    _BFGET_(r32,15, 0)
    #define   SET32OVPSCLWRAP_STATUS0_INPTG_OVPSCL_sts(r32,v)  _BFSET_(r32,15, 0,v)
    #define   GET16OVPSCLWRAP_STATUS0_INPTG_OVPSCL_sts(r16)    _BFGET_(r16,15, 0)
    #define   SET16OVPSCLWRAP_STATUS0_INPTG_OVPSCL_sts(r16,v)  _BFSET_(r16,15, 0,v)

    #define     w32OVPSCLWRAP_STATUS0                          {\
            UNSG32 uSTATUS0_INPTG_OVPSCL_sts                   : 16;\
            UNSG32 RSVDx24_b16                                 : 16;\
          }
    union { UNSG32 u32OVPSCLWRAP_STATUS0;
            struct w32OVPSCLWRAP_STATUS0;
          };
    ///////////////////////////////////////////////////////////
              SIE_WriteClient                                  ie_OVPSCL_WR0;
    ///////////////////////////////////////////////////////////
              SIE_WriteClient                                  ie_OVPSCL_WR1;
    ///////////////////////////////////////////////////////////
              SIE_OVPSCL                                       ie_OVPSCL_Y;
    ///////////////////////////////////////////////////////////
              SIE_OVPSCL                                       ie_OVPSCL_UV;
    ///////////////////////////////////////////////////////////
              SIE_TG                                           ie_OVPSCL_OTG_Y;
    ///////////////////////////////////////////////////////////
              SIE_TG                                           ie_OVPSCL_OTG_UV;
    ///////////////////////////////////////////////////////////
              SIE_BITMAP32                                     ie_BITMAP32;
    ///////////////////////////////////////////////////////////
              SIE_TG_MAIN                                      ie_INPTG_OVPSCL;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_Y;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_UV;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_Y_HLUT;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_Y_VLUT;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_C_HLUT;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_C_VLUT;
    ///////////////////////////////////////////////////////////
    } SIE_OVPSCLWRAP;

    typedef union  T32OVPSCLWRAP_CTRL
          { UNSG32 u32;
            struct w32OVPSCLWRAP_CTRL;
                 } T32OVPSCLWRAP_CTRL;
    typedef union  T32OVPSCLWRAP_CTRL0
          { UNSG32 u32;
            struct w32OVPSCLWRAP_CTRL0;
                 } T32OVPSCLWRAP_CTRL0;
    typedef union  T32OVPSCLWRAP_CTRL1
          { UNSG32 u32;
            struct w32OVPSCLWRAP_CTRL1;
                 } T32OVPSCLWRAP_CTRL1;
    typedef union  T32OVPSCLWRAP_CTRL2
          { UNSG32 u32;
            struct w32OVPSCLWRAP_CTRL2;
                 } T32OVPSCLWRAP_CTRL2;
    typedef union  T32OVPSCLWRAP_CTRL3
          { UNSG32 u32;
            struct w32OVPSCLWRAP_CTRL3;
                 } T32OVPSCLWRAP_CTRL3;
    typedef union  T32OVPSCLWRAP_CTRL4
          { UNSG32 u32;
            struct w32OVPSCLWRAP_CTRL4;
                 } T32OVPSCLWRAP_CTRL4;
    typedef union  T32OVPSCLWRAP_tg_ctrl
          { UNSG32 u32;
            struct w32OVPSCLWRAP_tg_ctrl;
                 } T32OVPSCLWRAP_tg_ctrl;
    typedef union  T32OVPSCLWRAP_STATUS
          { UNSG32 u32;
            struct w32OVPSCLWRAP_STATUS;
                 } T32OVPSCLWRAP_STATUS;
    typedef union  T32OVPSCLWRAP_INTR_EN
          { UNSG32 u32;
            struct w32OVPSCLWRAP_INTR_EN;
                 } T32OVPSCLWRAP_INTR_EN;
    typedef union  T32OVPSCLWRAP_STATUS0
          { UNSG32 u32;
            struct w32OVPSCLWRAP_STATUS0;
                 } T32OVPSCLWRAP_STATUS0;
    ///////////////////////////////////////////////////////////

    typedef union  TOVPSCLWRAP_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCLWRAP_CTRL;
                   };
                 } TOVPSCLWRAP_CTRL;
    typedef union  TOVPSCLWRAP_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCLWRAP_CTRL0;
                   };
                 } TOVPSCLWRAP_CTRL0;
    typedef union  TOVPSCLWRAP_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCLWRAP_CTRL1;
                   };
                 } TOVPSCLWRAP_CTRL1;
    typedef union  TOVPSCLWRAP_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCLWRAP_CTRL2;
                   };
                 } TOVPSCLWRAP_CTRL2;
    typedef union  TOVPSCLWRAP_CTRL3
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCLWRAP_CTRL3;
                   };
                 } TOVPSCLWRAP_CTRL3;
    typedef union  TOVPSCLWRAP_CTRL4
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCLWRAP_CTRL4;
                   };
                 } TOVPSCLWRAP_CTRL4;
    typedef union  TOVPSCLWRAP_tg_ctrl
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCLWRAP_tg_ctrl;
                   };
                 } TOVPSCLWRAP_tg_ctrl;
    typedef union  TOVPSCLWRAP_STATUS
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCLWRAP_STATUS;
                   };
                 } TOVPSCLWRAP_STATUS;
    typedef union  TOVPSCLWRAP_INTR_EN
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCLWRAP_INTR_EN;
                   };
                 } TOVPSCLWRAP_INTR_EN;
    typedef union  TOVPSCLWRAP_STATUS0
          { UNSG32 u32[1];
            struct {
            struct w32OVPSCLWRAP_STATUS0;
                   };
                 } TOVPSCLWRAP_STATUS0;

    ///////////////////////////////////////////////////////////
     SIGN32 OVPSCLWRAP_drvrd(SIE_OVPSCLWRAP *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 OVPSCLWRAP_drvwr(SIE_OVPSCLWRAP *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void OVPSCLWRAP_reset(SIE_OVPSCLWRAP *p);
     SIGN32 OVPSCLWRAP_cmp  (SIE_OVPSCLWRAP *p, SIE_OVPSCLWRAP *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define OVPSCLWRAP_check(p,pie,pfx,hLOG) OVPSCLWRAP_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define OVPSCLWRAP_print(p,    pfx,hLOG) OVPSCLWRAP_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: OVPSCLWRAP
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE DNS444_422              biu              (4,4)
///     ###
///     * Required registers for Down-sampler
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %signmagn 13 c4_14_11tap_regs          21
///                                    ###
///                                    * Programmable coefficients for 11tap in Dns. The value is signed magnitude form with 13 bit (s0.12 format) as sign bit
///                                    ###
///               %signmagn 13 c5_13_11tap_regs          0
///                                    ###
///                                    * Programmable coefficients for 11tap in Dns. The value is signed magnitude form with 13 bit (s0.12 format) as sign bit
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %signmagn 13 c6_12_11tap_regs          4268
///                                    ###
///                                    * Programmable coefficients for 11tap in Dns. The value is signed magnitude form with 13 bit (s0.12 format) as sign bit
///                                    ###
///               %signmagn 13 c7_11_11tap_regs          0
///                                    ###
///                                    * Programmable coefficients for 11tap in Dns. The value is signed magnitude form with 13 bit (s0.12 format) as sign bit
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00008 CFG2                 (P)
///               %signmagn 13 c8_10_11tap_regs          1182
///                                    ###
///                                    * Programmable coefficients for 11tap in Dns. The value is signed magnitude form with 13 bit (s0.12 format) as sign bit
///                                    ###
///               %signmagn 13 c9_11tap_regs             2034
///                                    ###
///                                    * Programmable coefficients for 11tap in Dns. The value is signed magnitude form with 13 bit (s0.12 format) as sign bit
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x0000C CFG3                 (P)
///               %signmagn 13 c6_12_7tap_regs           4132
///                                    ###
///                                    * Programmable coefficients for 7tap in Dns. The value is signed magnitude form with 13 bit (s0.12 format) as sign bit
///                                    ###
///               %signmagn 13 c7_11_7tap_regs           0
///                                    ###
///                                    * Programmable coefficients for 7tap in Dns. The value is signed magnitude form with 13 bit (s0.12 format) as sign bit
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00010 CFG4                 (P)
///               %signmagn 13 c8_10_7tap_regs           1032
///                                    ###
///                                    * Programmable coefficients for 7tap in Dns. The value is signed magnitude form with 13 bit (s0.12 format) as sign bit
///                                    ###
///               %signmagn 13 c9_7tap_regs              2104
///                                    ###
///                                    * Programmable coefficients for 7tap in Dns. The value is signed magnitude form with 13 bit (s0.12 format) as sign bit
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00014 CFG5                 (P)
///               %unsigned 8  edge_thresh_y             0x28
///                                    ###
///                                    * 8bit fixed Luma threshold for adaptive DNS during 8/10/12bit data pipe
///                                    ###
///               %unsigned 8  edge_thresh_c             0x28
///                                    ###
///                                    * 8bit fixed Chroma threshold for adaptive DNS during 8/10/12bit data pipe
///                                    ###
///               %unsigned 2  mode_regs                 0x3
///                                    ###
///                                    * en[0]: Sampler enable/disable
///                                    * 0: disables down sampler
///                                    * 1: enables  down sampler
///                                    * en[1]:
///                                    * 1: enables adaptive sampling 0: Fixed 11 taps
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x00018 CFG6                 (P)
///               %unsigned 12 yblank                    0x0
///                                    ###
///                                    * Blanking Interval forced data for Luma Channel
///                                    ###
///               %unsigned 12 cblank                    0x200
///                                    ###
///                                    * Blanking Interval forced data for Chroma Channel
///                                    ###
///               %unsigned 1  use_blank_regs            0x1
///                                    ###
///                                    * 1: Use programmed Blank data at video border.
///                                    * 0: Use pixel repeat at Video Border area
///                                    ###
///               %%        7          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     173b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_DNS444_422
#define h_DNS444_422 (){}

    #define     RA_DNS444_422_CFG0                             0x0000

    #define     BA_DNS444_422_CFG0_c4_14_11tap_regs            0x0000
    #define     B16DNS444_422_CFG0_c4_14_11tap_regs            0x0000
    #define   LSb32DNS444_422_CFG0_c4_14_11tap_regs               0
    #define   LSb16DNS444_422_CFG0_c4_14_11tap_regs               0
    #define       bDNS444_422_CFG0_c4_14_11tap_regs            13
    #define   MSK32DNS444_422_CFG0_c4_14_11tap_regs               0x00001FFF

    #define     BA_DNS444_422_CFG0_c5_13_11tap_regs            0x0001
    #define     B16DNS444_422_CFG0_c5_13_11tap_regs            0x0000
    #define   LSb32DNS444_422_CFG0_c5_13_11tap_regs               13
    #define   LSb16DNS444_422_CFG0_c5_13_11tap_regs               13
    #define       bDNS444_422_CFG0_c5_13_11tap_regs            13
    #define   MSK32DNS444_422_CFG0_c5_13_11tap_regs               0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_DNS444_422_CFG1                             0x0004

    #define     BA_DNS444_422_CFG1_c6_12_11tap_regs            0x0004
    #define     B16DNS444_422_CFG1_c6_12_11tap_regs            0x0004
    #define   LSb32DNS444_422_CFG1_c6_12_11tap_regs               0
    #define   LSb16DNS444_422_CFG1_c6_12_11tap_regs               0
    #define       bDNS444_422_CFG1_c6_12_11tap_regs            13
    #define   MSK32DNS444_422_CFG1_c6_12_11tap_regs               0x00001FFF

    #define     BA_DNS444_422_CFG1_c7_11_11tap_regs            0x0005
    #define     B16DNS444_422_CFG1_c7_11_11tap_regs            0x0004
    #define   LSb32DNS444_422_CFG1_c7_11_11tap_regs               13
    #define   LSb16DNS444_422_CFG1_c7_11_11tap_regs               13
    #define       bDNS444_422_CFG1_c7_11_11tap_regs            13
    #define   MSK32DNS444_422_CFG1_c7_11_11tap_regs               0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_DNS444_422_CFG2                             0x0008

    #define     BA_DNS444_422_CFG2_c8_10_11tap_regs            0x0008
    #define     B16DNS444_422_CFG2_c8_10_11tap_regs            0x0008
    #define   LSb32DNS444_422_CFG2_c8_10_11tap_regs               0
    #define   LSb16DNS444_422_CFG2_c8_10_11tap_regs               0
    #define       bDNS444_422_CFG2_c8_10_11tap_regs            13
    #define   MSK32DNS444_422_CFG2_c8_10_11tap_regs               0x00001FFF

    #define     BA_DNS444_422_CFG2_c9_11tap_regs               0x0009
    #define     B16DNS444_422_CFG2_c9_11tap_regs               0x0008
    #define   LSb32DNS444_422_CFG2_c9_11tap_regs                  13
    #define   LSb16DNS444_422_CFG2_c9_11tap_regs                  13
    #define       bDNS444_422_CFG2_c9_11tap_regs               13
    #define   MSK32DNS444_422_CFG2_c9_11tap_regs                  0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_DNS444_422_CFG3                             0x000C

    #define     BA_DNS444_422_CFG3_c6_12_7tap_regs             0x000C
    #define     B16DNS444_422_CFG3_c6_12_7tap_regs             0x000C
    #define   LSb32DNS444_422_CFG3_c6_12_7tap_regs                0
    #define   LSb16DNS444_422_CFG3_c6_12_7tap_regs                0
    #define       bDNS444_422_CFG3_c6_12_7tap_regs             13
    #define   MSK32DNS444_422_CFG3_c6_12_7tap_regs                0x00001FFF

    #define     BA_DNS444_422_CFG3_c7_11_7tap_regs             0x000D
    #define     B16DNS444_422_CFG3_c7_11_7tap_regs             0x000C
    #define   LSb32DNS444_422_CFG3_c7_11_7tap_regs                13
    #define   LSb16DNS444_422_CFG3_c7_11_7tap_regs                13
    #define       bDNS444_422_CFG3_c7_11_7tap_regs             13
    #define   MSK32DNS444_422_CFG3_c7_11_7tap_regs                0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_DNS444_422_CFG4                             0x0010

    #define     BA_DNS444_422_CFG4_c8_10_7tap_regs             0x0010
    #define     B16DNS444_422_CFG4_c8_10_7tap_regs             0x0010
    #define   LSb32DNS444_422_CFG4_c8_10_7tap_regs                0
    #define   LSb16DNS444_422_CFG4_c8_10_7tap_regs                0
    #define       bDNS444_422_CFG4_c8_10_7tap_regs             13
    #define   MSK32DNS444_422_CFG4_c8_10_7tap_regs                0x00001FFF

    #define     BA_DNS444_422_CFG4_c9_7tap_regs                0x0011
    #define     B16DNS444_422_CFG4_c9_7tap_regs                0x0010
    #define   LSb32DNS444_422_CFG4_c9_7tap_regs                   13
    #define   LSb16DNS444_422_CFG4_c9_7tap_regs                   13
    #define       bDNS444_422_CFG4_c9_7tap_regs                13
    #define   MSK32DNS444_422_CFG4_c9_7tap_regs                   0x03FFE000
    ///////////////////////////////////////////////////////////
    #define     RA_DNS444_422_CFG5                             0x0014

    #define     BA_DNS444_422_CFG5_edge_thresh_y               0x0014
    #define     B16DNS444_422_CFG5_edge_thresh_y               0x0014
    #define   LSb32DNS444_422_CFG5_edge_thresh_y                  0
    #define   LSb16DNS444_422_CFG5_edge_thresh_y                  0
    #define       bDNS444_422_CFG5_edge_thresh_y               8
    #define   MSK32DNS444_422_CFG5_edge_thresh_y                  0x000000FF

    #define     BA_DNS444_422_CFG5_edge_thresh_c               0x0015
    #define     B16DNS444_422_CFG5_edge_thresh_c               0x0014
    #define   LSb32DNS444_422_CFG5_edge_thresh_c                  8
    #define   LSb16DNS444_422_CFG5_edge_thresh_c                  8
    #define       bDNS444_422_CFG5_edge_thresh_c               8
    #define   MSK32DNS444_422_CFG5_edge_thresh_c                  0x0000FF00

    #define     BA_DNS444_422_CFG5_mode_regs                   0x0016
    #define     B16DNS444_422_CFG5_mode_regs                   0x0016
    #define   LSb32DNS444_422_CFG5_mode_regs                      16
    #define   LSb16DNS444_422_CFG5_mode_regs                      0
    #define       bDNS444_422_CFG5_mode_regs                   2
    #define   MSK32DNS444_422_CFG5_mode_regs                      0x00030000
    ///////////////////////////////////////////////////////////
    #define     RA_DNS444_422_CFG6                             0x0018

    #define     BA_DNS444_422_CFG6_yblank                      0x0018
    #define     B16DNS444_422_CFG6_yblank                      0x0018
    #define   LSb32DNS444_422_CFG6_yblank                         0
    #define   LSb16DNS444_422_CFG6_yblank                         0
    #define       bDNS444_422_CFG6_yblank                      12
    #define   MSK32DNS444_422_CFG6_yblank                         0x00000FFF

    #define     BA_DNS444_422_CFG6_cblank                      0x0019
    #define     B16DNS444_422_CFG6_cblank                      0x0018
    #define   LSb32DNS444_422_CFG6_cblank                         12
    #define   LSb16DNS444_422_CFG6_cblank                         12
    #define       bDNS444_422_CFG6_cblank                      12
    #define   MSK32DNS444_422_CFG6_cblank                         0x00FFF000

    #define     BA_DNS444_422_CFG6_use_blank_regs              0x001B
    #define     B16DNS444_422_CFG6_use_blank_regs              0x001A
    #define   LSb32DNS444_422_CFG6_use_blank_regs                 24
    #define   LSb16DNS444_422_CFG6_use_blank_regs                 8
    #define       bDNS444_422_CFG6_use_blank_regs              1
    #define   MSK32DNS444_422_CFG6_use_blank_regs                 0x01000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_DNS444_422 {
    ///////////////////////////////////////////////////////////
    #define   GET32DNS444_422_CFG0_c4_14_11tap_regs(r32)       _BFGET_(r32,12, 0)
    #define   SET32DNS444_422_CFG0_c4_14_11tap_regs(r32,v)     _BFSET_(r32,12, 0,v)
    #define   GET16DNS444_422_CFG0_c4_14_11tap_regs(r16)       _BFGET_(r16,12, 0)
    #define   SET16DNS444_422_CFG0_c4_14_11tap_regs(r16,v)     _BFSET_(r16,12, 0,v)

    #define   GET32DNS444_422_CFG0_c5_13_11tap_regs(r32)       _BFGET_(r32,25,13)
    #define   SET32DNS444_422_CFG0_c5_13_11tap_regs(r32,v)     _BFSET_(r32,25,13,v)

    #define     w32DNS444_422_CFG0                             {\
            UNSG32 mCFG0_c4_14_11tap_regs                      : 13;\
            UNSG32 mCFG0_c5_13_11tap_regs                      : 13;\
            UNSG32 RSVDx0_b26                                  :  6;\
          }
    union { UNSG32 u32DNS444_422_CFG0;
            struct w32DNS444_422_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DNS444_422_CFG1_c6_12_11tap_regs(r32)       _BFGET_(r32,12, 0)
    #define   SET32DNS444_422_CFG1_c6_12_11tap_regs(r32,v)     _BFSET_(r32,12, 0,v)
    #define   GET16DNS444_422_CFG1_c6_12_11tap_regs(r16)       _BFGET_(r16,12, 0)
    #define   SET16DNS444_422_CFG1_c6_12_11tap_regs(r16,v)     _BFSET_(r16,12, 0,v)

    #define   GET32DNS444_422_CFG1_c7_11_11tap_regs(r32)       _BFGET_(r32,25,13)
    #define   SET32DNS444_422_CFG1_c7_11_11tap_regs(r32,v)     _BFSET_(r32,25,13,v)

    #define     w32DNS444_422_CFG1                             {\
            UNSG32 mCFG1_c6_12_11tap_regs                      : 13;\
            UNSG32 mCFG1_c7_11_11tap_regs                      : 13;\
            UNSG32 RSVDx4_b26                                  :  6;\
          }
    union { UNSG32 u32DNS444_422_CFG1;
            struct w32DNS444_422_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DNS444_422_CFG2_c8_10_11tap_regs(r32)       _BFGET_(r32,12, 0)
    #define   SET32DNS444_422_CFG2_c8_10_11tap_regs(r32,v)     _BFSET_(r32,12, 0,v)
    #define   GET16DNS444_422_CFG2_c8_10_11tap_regs(r16)       _BFGET_(r16,12, 0)
    #define   SET16DNS444_422_CFG2_c8_10_11tap_regs(r16,v)     _BFSET_(r16,12, 0,v)

    #define   GET32DNS444_422_CFG2_c9_11tap_regs(r32)          _BFGET_(r32,25,13)
    #define   SET32DNS444_422_CFG2_c9_11tap_regs(r32,v)        _BFSET_(r32,25,13,v)

    #define     w32DNS444_422_CFG2                             {\
            UNSG32 mCFG2_c8_10_11tap_regs                      : 13;\
            UNSG32 mCFG2_c9_11tap_regs                         : 13;\
            UNSG32 RSVDx8_b26                                  :  6;\
          }
    union { UNSG32 u32DNS444_422_CFG2;
            struct w32DNS444_422_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DNS444_422_CFG3_c6_12_7tap_regs(r32)        _BFGET_(r32,12, 0)
    #define   SET32DNS444_422_CFG3_c6_12_7tap_regs(r32,v)      _BFSET_(r32,12, 0,v)
    #define   GET16DNS444_422_CFG3_c6_12_7tap_regs(r16)        _BFGET_(r16,12, 0)
    #define   SET16DNS444_422_CFG3_c6_12_7tap_regs(r16,v)      _BFSET_(r16,12, 0,v)

    #define   GET32DNS444_422_CFG3_c7_11_7tap_regs(r32)        _BFGET_(r32,25,13)
    #define   SET32DNS444_422_CFG3_c7_11_7tap_regs(r32,v)      _BFSET_(r32,25,13,v)

    #define     w32DNS444_422_CFG3                             {\
            UNSG32 mCFG3_c6_12_7tap_regs                       : 13;\
            UNSG32 mCFG3_c7_11_7tap_regs                       : 13;\
            UNSG32 RSVDxC_b26                                  :  6;\
          }
    union { UNSG32 u32DNS444_422_CFG3;
            struct w32DNS444_422_CFG3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DNS444_422_CFG4_c8_10_7tap_regs(r32)        _BFGET_(r32,12, 0)
    #define   SET32DNS444_422_CFG4_c8_10_7tap_regs(r32,v)      _BFSET_(r32,12, 0,v)
    #define   GET16DNS444_422_CFG4_c8_10_7tap_regs(r16)        _BFGET_(r16,12, 0)
    #define   SET16DNS444_422_CFG4_c8_10_7tap_regs(r16,v)      _BFSET_(r16,12, 0,v)

    #define   GET32DNS444_422_CFG4_c9_7tap_regs(r32)           _BFGET_(r32,25,13)
    #define   SET32DNS444_422_CFG4_c9_7tap_regs(r32,v)         _BFSET_(r32,25,13,v)

    #define     w32DNS444_422_CFG4                             {\
            UNSG32 mCFG4_c8_10_7tap_regs                       : 13;\
            UNSG32 mCFG4_c9_7tap_regs                          : 13;\
            UNSG32 RSVDx10_b26                                 :  6;\
          }
    union { UNSG32 u32DNS444_422_CFG4;
            struct w32DNS444_422_CFG4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DNS444_422_CFG5_edge_thresh_y(r32)          _BFGET_(r32, 7, 0)
    #define   SET32DNS444_422_CFG5_edge_thresh_y(r32,v)        _BFSET_(r32, 7, 0,v)
    #define   GET16DNS444_422_CFG5_edge_thresh_y(r16)          _BFGET_(r16, 7, 0)
    #define   SET16DNS444_422_CFG5_edge_thresh_y(r16,v)        _BFSET_(r16, 7, 0,v)

    #define   GET32DNS444_422_CFG5_edge_thresh_c(r32)          _BFGET_(r32,15, 8)
    #define   SET32DNS444_422_CFG5_edge_thresh_c(r32,v)        _BFSET_(r32,15, 8,v)
    #define   GET16DNS444_422_CFG5_edge_thresh_c(r16)          _BFGET_(r16,15, 8)
    #define   SET16DNS444_422_CFG5_edge_thresh_c(r16,v)        _BFSET_(r16,15, 8,v)

    #define   GET32DNS444_422_CFG5_mode_regs(r32)              _BFGET_(r32,17,16)
    #define   SET32DNS444_422_CFG5_mode_regs(r32,v)            _BFSET_(r32,17,16,v)
    #define   GET16DNS444_422_CFG5_mode_regs(r16)              _BFGET_(r16, 1, 0)
    #define   SET16DNS444_422_CFG5_mode_regs(r16,v)            _BFSET_(r16, 1, 0,v)

    #define     w32DNS444_422_CFG5                             {\
            UNSG32 uCFG5_edge_thresh_y                         :  8;\
            UNSG32 uCFG5_edge_thresh_c                         :  8;\
            UNSG32 uCFG5_mode_regs                             :  2;\
            UNSG32 RSVDx14_b18                                 : 14;\
          }
    union { UNSG32 u32DNS444_422_CFG5;
            struct w32DNS444_422_CFG5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32DNS444_422_CFG6_yblank(r32)                 _BFGET_(r32,11, 0)
    #define   SET32DNS444_422_CFG6_yblank(r32,v)               _BFSET_(r32,11, 0,v)
    #define   GET16DNS444_422_CFG6_yblank(r16)                 _BFGET_(r16,11, 0)
    #define   SET16DNS444_422_CFG6_yblank(r16,v)               _BFSET_(r16,11, 0,v)

    #define   GET32DNS444_422_CFG6_cblank(r32)                 _BFGET_(r32,23,12)
    #define   SET32DNS444_422_CFG6_cblank(r32,v)               _BFSET_(r32,23,12,v)

    #define   GET32DNS444_422_CFG6_use_blank_regs(r32)         _BFGET_(r32,24,24)
    #define   SET32DNS444_422_CFG6_use_blank_regs(r32,v)       _BFSET_(r32,24,24,v)
    #define   GET16DNS444_422_CFG6_use_blank_regs(r16)         _BFGET_(r16, 8, 8)
    #define   SET16DNS444_422_CFG6_use_blank_regs(r16,v)       _BFSET_(r16, 8, 8,v)

    #define     w32DNS444_422_CFG6                             {\
            UNSG32 uCFG6_yblank                                : 12;\
            UNSG32 uCFG6_cblank                                : 12;\
            UNSG32 uCFG6_use_blank_regs                        :  1;\
            UNSG32 RSVDx18_b25                                 :  7;\
          }
    union { UNSG32 u32DNS444_422_CFG6;
            struct w32DNS444_422_CFG6;
          };
    ///////////////////////////////////////////////////////////
    } SIE_DNS444_422;

    typedef union  T32DNS444_422_CFG0
          { UNSG32 u32;
            struct w32DNS444_422_CFG0;
                 } T32DNS444_422_CFG0;
    typedef union  T32DNS444_422_CFG1
          { UNSG32 u32;
            struct w32DNS444_422_CFG1;
                 } T32DNS444_422_CFG1;
    typedef union  T32DNS444_422_CFG2
          { UNSG32 u32;
            struct w32DNS444_422_CFG2;
                 } T32DNS444_422_CFG2;
    typedef union  T32DNS444_422_CFG3
          { UNSG32 u32;
            struct w32DNS444_422_CFG3;
                 } T32DNS444_422_CFG3;
    typedef union  T32DNS444_422_CFG4
          { UNSG32 u32;
            struct w32DNS444_422_CFG4;
                 } T32DNS444_422_CFG4;
    typedef union  T32DNS444_422_CFG5
          { UNSG32 u32;
            struct w32DNS444_422_CFG5;
                 } T32DNS444_422_CFG5;
    typedef union  T32DNS444_422_CFG6
          { UNSG32 u32;
            struct w32DNS444_422_CFG6;
                 } T32DNS444_422_CFG6;
    ///////////////////////////////////////////////////////////

    typedef union  TDNS444_422_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32DNS444_422_CFG0;
                   };
                 } TDNS444_422_CFG0;
    typedef union  TDNS444_422_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32DNS444_422_CFG1;
                   };
                 } TDNS444_422_CFG1;
    typedef union  TDNS444_422_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32DNS444_422_CFG2;
                   };
                 } TDNS444_422_CFG2;
    typedef union  TDNS444_422_CFG3
          { UNSG32 u32[1];
            struct {
            struct w32DNS444_422_CFG3;
                   };
                 } TDNS444_422_CFG3;
    typedef union  TDNS444_422_CFG4
          { UNSG32 u32[1];
            struct {
            struct w32DNS444_422_CFG4;
                   };
                 } TDNS444_422_CFG4;
    typedef union  TDNS444_422_CFG5
          { UNSG32 u32[1];
            struct {
            struct w32DNS444_422_CFG5;
                   };
                 } TDNS444_422_CFG5;
    typedef union  TDNS444_422_CFG6
          { UNSG32 u32[1];
            struct {
            struct w32DNS444_422_CFG6;
                   };
                 } TDNS444_422_CFG6;

    ///////////////////////////////////////////////////////////
     SIGN32 DNS444_422_drvrd(SIE_DNS444_422 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 DNS444_422_drvwr(SIE_DNS444_422 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void DNS444_422_reset(SIE_DNS444_422 *p);
     SIGN32 DNS444_422_cmp  (SIE_DNS444_422 *p, SIE_DNS444_422 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define DNS444_422_check(p,pie,pfx,hLOG) DNS444_422_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define DNS444_422_print(p,    pfx,hLOG) DNS444_422_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: DNS444_422
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE ADPSCL_ADP              biu              (4,4)
///     ###
///     * Register specification of interface ADPSCL
///     * Defines the size of the adpscl
///     ###
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               %unsigned 8  dign_dr1                  0x50
///                                    ###
///                                    * In high activity conditions, ratio for smaller derivative of two diagonal directions over derivative difference between two.
///                                    ###
///               %unsigned 8  dign_dr2                  0x14
///                                    ###
///                                    * In high activity conditions, ratio for derivative difference in two diagonal directions over smaller derivative of two.
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00004 CFG1                 (P)
///               %unsigned 12 dign_ydiff                0x0
///                                    ###
///                                    * In high activity conditions, threshold for Y difference in two diagonal directions.
///                                    ###
///               %unsigned 12 dign_ddiff                0xA0
///                                    ###
///                                    * In high activity conditions, threshold for second order derivative difference in two diagonal directions.
///                                    ###
///               %unsigned 8  dign_dr3                  0x30
///                                    ###
///                                    * In high activity conditions, ratio for derivative difference over Y difference in two diagonal directions.
///                                    ###
///     @ 0x00008 CFG2                 (P)
///               %unsigned 12 hp_offset                 0xF0
///                                    ###
///                                    * In 'use original pixels conditions', offset is used for comparing the original pixel difference with the half pixel difference.
///                                    ###
///               %unsigned 12 hp_diff                   0x230
///                                    ###
///                                    * In 'use original pixels conditions', threshold is used for difference between two Y value from original pixels and previously calculated half pixels.
///                                    ###
///               %unsigned 8  dign_nbr                  0x54
///                                    ###
///                                    * ASCL_DGNL_NBR_LOW[3:0]: In high activity conditions, lower bound for the number of neighbors pointing to one diagonal directions.
///                                    * ASCL_DGNL_NBR_HIGH[7:4]: In high activity conditions, upper bound for the number of neighbors pointing to one diagonal directions.
///                                    * End of adpscl register group
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      12B, bits:      80b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_ADPSCL_ADP
#define h_ADPSCL_ADP (){}

    #define     RA_ADPSCL_ADP_CFG0                             0x0000

    #define     BA_ADPSCL_ADP_CFG0_dign_dr1                    0x0000
    #define     B16ADPSCL_ADP_CFG0_dign_dr1                    0x0000
    #define   LSb32ADPSCL_ADP_CFG0_dign_dr1                       0
    #define   LSb16ADPSCL_ADP_CFG0_dign_dr1                       0
    #define       bADPSCL_ADP_CFG0_dign_dr1                    8
    #define   MSK32ADPSCL_ADP_CFG0_dign_dr1                       0x000000FF

    #define     BA_ADPSCL_ADP_CFG0_dign_dr2                    0x0001
    #define     B16ADPSCL_ADP_CFG0_dign_dr2                    0x0000
    #define   LSb32ADPSCL_ADP_CFG0_dign_dr2                       8
    #define   LSb16ADPSCL_ADP_CFG0_dign_dr2                       8
    #define       bADPSCL_ADP_CFG0_dign_dr2                    8
    #define   MSK32ADPSCL_ADP_CFG0_dign_dr2                       0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_ADP_CFG1                             0x0004

    #define     BA_ADPSCL_ADP_CFG1_dign_ydiff                  0x0004
    #define     B16ADPSCL_ADP_CFG1_dign_ydiff                  0x0004
    #define   LSb32ADPSCL_ADP_CFG1_dign_ydiff                     0
    #define   LSb16ADPSCL_ADP_CFG1_dign_ydiff                     0
    #define       bADPSCL_ADP_CFG1_dign_ydiff                  12
    #define   MSK32ADPSCL_ADP_CFG1_dign_ydiff                     0x00000FFF

    #define     BA_ADPSCL_ADP_CFG1_dign_ddiff                  0x0005
    #define     B16ADPSCL_ADP_CFG1_dign_ddiff                  0x0004
    #define   LSb32ADPSCL_ADP_CFG1_dign_ddiff                     12
    #define   LSb16ADPSCL_ADP_CFG1_dign_ddiff                     12
    #define       bADPSCL_ADP_CFG1_dign_ddiff                  12
    #define   MSK32ADPSCL_ADP_CFG1_dign_ddiff                     0x00FFF000

    #define     BA_ADPSCL_ADP_CFG1_dign_dr3                    0x0007
    #define     B16ADPSCL_ADP_CFG1_dign_dr3                    0x0006
    #define   LSb32ADPSCL_ADP_CFG1_dign_dr3                       24
    #define   LSb16ADPSCL_ADP_CFG1_dign_dr3                       8
    #define       bADPSCL_ADP_CFG1_dign_dr3                    8
    #define   MSK32ADPSCL_ADP_CFG1_dign_dr3                       0xFF000000
    ///////////////////////////////////////////////////////////
    #define     RA_ADPSCL_ADP_CFG2                             0x0008

    #define     BA_ADPSCL_ADP_CFG2_hp_offset                   0x0008
    #define     B16ADPSCL_ADP_CFG2_hp_offset                   0x0008
    #define   LSb32ADPSCL_ADP_CFG2_hp_offset                      0
    #define   LSb16ADPSCL_ADP_CFG2_hp_offset                      0
    #define       bADPSCL_ADP_CFG2_hp_offset                   12
    #define   MSK32ADPSCL_ADP_CFG2_hp_offset                      0x00000FFF

    #define     BA_ADPSCL_ADP_CFG2_hp_diff                     0x0009
    #define     B16ADPSCL_ADP_CFG2_hp_diff                     0x0008
    #define   LSb32ADPSCL_ADP_CFG2_hp_diff                        12
    #define   LSb16ADPSCL_ADP_CFG2_hp_diff                        12
    #define       bADPSCL_ADP_CFG2_hp_diff                     12
    #define   MSK32ADPSCL_ADP_CFG2_hp_diff                        0x00FFF000

    #define     BA_ADPSCL_ADP_CFG2_dign_nbr                    0x000B
    #define     B16ADPSCL_ADP_CFG2_dign_nbr                    0x000A
    #define   LSb32ADPSCL_ADP_CFG2_dign_nbr                       24
    #define   LSb16ADPSCL_ADP_CFG2_dign_nbr                       8
    #define       bADPSCL_ADP_CFG2_dign_nbr                    8
    #define   MSK32ADPSCL_ADP_CFG2_dign_nbr                       0xFF000000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_ADPSCL_ADP {
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_ADP_CFG0_dign_dr1(r32)               _BFGET_(r32, 7, 0)
    #define   SET32ADPSCL_ADP_CFG0_dign_dr1(r32,v)             _BFSET_(r32, 7, 0,v)
    #define   GET16ADPSCL_ADP_CFG0_dign_dr1(r16)               _BFGET_(r16, 7, 0)
    #define   SET16ADPSCL_ADP_CFG0_dign_dr1(r16,v)             _BFSET_(r16, 7, 0,v)

    #define   GET32ADPSCL_ADP_CFG0_dign_dr2(r32)               _BFGET_(r32,15, 8)
    #define   SET32ADPSCL_ADP_CFG0_dign_dr2(r32,v)             _BFSET_(r32,15, 8,v)
    #define   GET16ADPSCL_ADP_CFG0_dign_dr2(r16)               _BFGET_(r16,15, 8)
    #define   SET16ADPSCL_ADP_CFG0_dign_dr2(r16,v)             _BFSET_(r16,15, 8,v)

    #define     w32ADPSCL_ADP_CFG0                             {\
            UNSG32 uCFG0_dign_dr1                              :  8;\
            UNSG32 uCFG0_dign_dr2                              :  8;\
            UNSG32 RSVDx0_b16                                  : 16;\
          }
    union { UNSG32 u32ADPSCL_ADP_CFG0;
            struct w32ADPSCL_ADP_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_ADP_CFG1_dign_ydiff(r32)             _BFGET_(r32,11, 0)
    #define   SET32ADPSCL_ADP_CFG1_dign_ydiff(r32,v)           _BFSET_(r32,11, 0,v)
    #define   GET16ADPSCL_ADP_CFG1_dign_ydiff(r16)             _BFGET_(r16,11, 0)
    #define   SET16ADPSCL_ADP_CFG1_dign_ydiff(r16,v)           _BFSET_(r16,11, 0,v)

    #define   GET32ADPSCL_ADP_CFG1_dign_ddiff(r32)             _BFGET_(r32,23,12)
    #define   SET32ADPSCL_ADP_CFG1_dign_ddiff(r32,v)           _BFSET_(r32,23,12,v)

    #define   GET32ADPSCL_ADP_CFG1_dign_dr3(r32)               _BFGET_(r32,31,24)
    #define   SET32ADPSCL_ADP_CFG1_dign_dr3(r32,v)             _BFSET_(r32,31,24,v)
    #define   GET16ADPSCL_ADP_CFG1_dign_dr3(r16)               _BFGET_(r16,15, 8)
    #define   SET16ADPSCL_ADP_CFG1_dign_dr3(r16,v)             _BFSET_(r16,15, 8,v)

    #define     w32ADPSCL_ADP_CFG1                             {\
            UNSG32 uCFG1_dign_ydiff                            : 12;\
            UNSG32 uCFG1_dign_ddiff                            : 12;\
            UNSG32 uCFG1_dign_dr3                              :  8;\
          }
    union { UNSG32 u32ADPSCL_ADP_CFG1;
            struct w32ADPSCL_ADP_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32ADPSCL_ADP_CFG2_hp_offset(r32)              _BFGET_(r32,11, 0)
    #define   SET32ADPSCL_ADP_CFG2_hp_offset(r32,v)            _BFSET_(r32,11, 0,v)
    #define   GET16ADPSCL_ADP_CFG2_hp_offset(r16)              _BFGET_(r16,11, 0)
    #define   SET16ADPSCL_ADP_CFG2_hp_offset(r16,v)            _BFSET_(r16,11, 0,v)

    #define   GET32ADPSCL_ADP_CFG2_hp_diff(r32)                _BFGET_(r32,23,12)
    #define   SET32ADPSCL_ADP_CFG2_hp_diff(r32,v)              _BFSET_(r32,23,12,v)

    #define   GET32ADPSCL_ADP_CFG2_dign_nbr(r32)               _BFGET_(r32,31,24)
    #define   SET32ADPSCL_ADP_CFG2_dign_nbr(r32,v)             _BFSET_(r32,31,24,v)
    #define   GET16ADPSCL_ADP_CFG2_dign_nbr(r16)               _BFGET_(r16,15, 8)
    #define   SET16ADPSCL_ADP_CFG2_dign_nbr(r16,v)             _BFSET_(r16,15, 8,v)

    #define     w32ADPSCL_ADP_CFG2                             {\
            UNSG32 uCFG2_hp_offset                             : 12;\
            UNSG32 uCFG2_hp_diff                               : 12;\
            UNSG32 uCFG2_dign_nbr                              :  8;\
          }
    union { UNSG32 u32ADPSCL_ADP_CFG2;
            struct w32ADPSCL_ADP_CFG2;
          };
    ///////////////////////////////////////////////////////////
    } SIE_ADPSCL_ADP;

    typedef union  T32ADPSCL_ADP_CFG0
          { UNSG32 u32;
            struct w32ADPSCL_ADP_CFG0;
                 } T32ADPSCL_ADP_CFG0;
    typedef union  T32ADPSCL_ADP_CFG1
          { UNSG32 u32;
            struct w32ADPSCL_ADP_CFG1;
                 } T32ADPSCL_ADP_CFG1;
    typedef union  T32ADPSCL_ADP_CFG2
          { UNSG32 u32;
            struct w32ADPSCL_ADP_CFG2;
                 } T32ADPSCL_ADP_CFG2;
    ///////////////////////////////////////////////////////////

    typedef union  TADPSCL_ADP_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_ADP_CFG0;
                   };
                 } TADPSCL_ADP_CFG0;
    typedef union  TADPSCL_ADP_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_ADP_CFG1;
                   };
                 } TADPSCL_ADP_CFG1;
    typedef union  TADPSCL_ADP_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32ADPSCL_ADP_CFG2;
                   };
                 } TADPSCL_ADP_CFG2;

    ///////////////////////////////////////////////////////////
     SIGN32 ADPSCL_ADP_drvrd(SIE_ADPSCL_ADP *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 ADPSCL_ADP_drvwr(SIE_ADPSCL_ADP *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void ADPSCL_ADP_reset(SIE_ADPSCL_ADP *p);
     SIGN32 ADPSCL_ADP_cmp  (SIE_ADPSCL_ADP *p, SIE_ADPSCL_ADP *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define ADPSCL_ADP_check(p,pie,pfx,hLOG) ADPSCL_ADP_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define ADPSCL_ADP_print(p,    pfx,hLOG) ADPSCL_ADP_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: ADPSCL_ADP
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE MAINPL                  biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (P)
///               %unsigned 1  betgCfg_rst               0x0
///                                    ###
///                                    * Configurable Soft reset for BETG
///                                    ###
///               %unsigned 1  betg_sref                 0x0
///                                    ###
///                                    * Sync reference for BETG reg control
///                                    ###
///               %unsigned 1  memlb_cgEnb               0x1
///                                    ###
///                                    * Clock gating enable for Memory Line Buffer (mem : adp1d_scl)
///                                    * Write 0 to clock gate this block. Default enabled.
///                                    ###
///               %unsigned 1  memlb_mode                0x1
///                                    ###
///                                    * 0 : FHD UPS
///                                    * 1 : 4K UPS
///                                    ###
///               %unsigned 1  tgEn_rstEn                0x1
///                                    ###
///                                    * TgEn reset enable bit. Default enabled. Write 0 to disable tgEn being cleared on displayTG frst
///                                    ###
///               %unsigned 1  crop_de2_en               0x0
///                                    ###
///                                    * Enable for cropped de2 to be used for cropping input read from Read Client's which is fed to DETILE-UPS420.
///                                    * Write 1 to enable it. Default disabled.
///                                    * [Note : this bit is to be programmed for cropping MTR input (if required) and providing offset to Luma and Croma input stream
///                                    ###
///               %unsigned 1  dif_blk_en                0x0
///                                    ###
///                                    * Detile Input Formatter Block Enable.
///                                    * For 10bit-Mode0 (TILED Format) or for supporting rotation for tile format V4H8(8bit) and V4H6(10bit) this bit should be enabled.
///                                    ###
///               %unsigned 3  cr_line_cnt               0x3
///                                    ###
///                                    * Croma Line Count Number.
///                                    * (a) For Detile UPS420 cases ( when tile_height =
///                                    * 4), it should be programmed as 0x3 (default value)
///                                    * (b) For Tile Format (tile width=4 && tile height=3),
///                                    * program cr_line_cnt = 0x2
///                                    * (c) For Tile Format (tile width=4 && tile height=8),
///                                    * program cr_line_cnt = 0x7
///                                    * (d) For Tile Format (tile width=4 && tile height=6),
///                                    * program cr_line_cnt = 0x5
///                                    ###
///               %unsigned 1  tgclken_sel               0x0
///                                    ###
///                                    * FeTG clock enable select for fall back option. Write 1 to select mode without power saving option
///                                    * Default : Power Saving Mode
///                                    ###
///               %unsigned 1  clken_st_clr              0x0
///                                    ###
///                                    * Clear Bit for AdpScl ClkEn state. Write 1 to Initialize State. Level Signal
///                                    ###
///               %unsigned 1  vptop_tHdr_ctrl           0x0
///                                    ###
///                                    * Control bit for selecting vp_top and tHdr IP path in main video plane.
///                                    * [1] : 1D scalar input is from tHdr or DV CVM (dolby_ipro)(and as tHdr input will be YUV444, UPS422to444 will be enabled which is inside vptop_wrap)
///                                    * [0] : 1D scalar input is from vptop_wrap (and not from tHdr/dolby_ipro)
///                                    ###
///               %unsigned 1  fifo_sts_ctrl             0x0
///                                    ###
///                                    * Fifo Full status control bit used for clock enable generation.
///                                    * [1] : 1D scalar Input Fifo's full status is used for tg_clken generation (for debug purpose when 1D scalar is hard-bypass as input will never be YUV422)
///                                    * [0] : vptop_wrap's input Fifo's full status is used for tg_clken generation (default)
///                                    ###
///               %unsigned 1  db_clken_ctrl0            0x0
///                                    ###
///                                    * tg_clken control bit to enable use of fifo full status (of BL DV Comp iFifo) in generating clock enable when DV Composer is in path. Default 0. Write 1 to enable this control.
///                                    ###
///               %unsigned 1  fifo_full_ctrlEn          0x0
///                                    ###
///                                    * tg_clken control bit to enable use of fifo full status (either from 1D-SCL iFifo or vptop OFifo) in generating clock enable when DV Composer is not in path. Default enable. Write 1 to disable this control when DV Composer in path
///                                    ###
///               %unsigned 1  memlbUPS420_cgEnb         0x1
///                                    ###
///                                    * Clock gating enable for Memory Line Buffer (mem : detileUPS420)
///                                    * Write 0 to clock gate this block. Default enabled.
///                                    ###
///               %unsigned 1  fifo_full_ctrl1           0x0
///                                    ###
///                                    * tg_clken control bit to enable use of fifo full status in generating clock enable from ovpScl iFifo luma. Default enable. Write 1 to disable this control
///                                    ###
///               %unsigned 1  fifo_full_ctrl2           0x0
///                                    ###
///                                    * tg_clken control bit to enable use of fifo full status in generating clock enable from ovpScl iFifo chroma. Default enable. Write 1 to disable this control
///                                    ###
///               %unsigned 1  vptop_fifo_rdsel          0x0
///                                    ###
///                                    * Control bit to enable read from VP_TOP Output FIFO.
///                                    * [0] : Read Enable dependent on whether THDR IP is in path or bypassed
///                                    * [1] : Read Enable is dependent on 'vptop_tHdr_ctrl' bit
///                                    * Enable this control bit when offline scaling is enabled for main plane and THDR IP is not in Path
///                                    ###
///               %unsigned 1  memdlbUPS420_cgEnb        0x1
///                                    ###
///                                    * Clock gating enable for External Memory Delay Line Buffer (memdl : detileUPS420)
///                                    * Write 0 to clock gate this block. Default enabled.
///                                    ###
///               %unsigned 1  fifo_full_ctrl3           0x0
///                                    ###
///                                    * Clock enable control bit for feTG.
///                                    * Write 1 to consider fifo full status of pipInFifo_el for feTG clock enable logic.
///                                    * Write 0 to make feTG clock enable logic independent of fifo full status from pipInFifo_el FIFO.
///                                    ###
///               %unsigned 1  fifo_full_ctrl4           0x0
///                                    ###
///                                    * Clock enable control bit for feTG.
///                                    * Write 1 to consider fifo full status of dvtest_offlinescrl_vppFifo for feTG clock enable logic.
///                                    * Write 0 to make feTG clock enable logic independent of fifo full status from dvtest_offlinescrl_vppFifo.
///                                    * Write 1, when detile4k output is fed back to offline write path (VIP pipe)
///                                    ###
///               %%        9          # Stuffing bits...
///     @ 0x00004 CTRL1                (P)
///               %unsigned 13 betg_hcnt_rstval          0x0
///               %unsigned 12 betg_vcnt_rstval          0x0
///                                    ###
///                                    * Configurable reset values for hcnt & vcnt for BETG
///                                    ###
///               %unsigned 2  line_dly                  0x0
///                                    ###
///                                    * Programmable line delay for cpcb tg
///                                    ###
///               %unsigned 2  lineCnt_R1_rstval0        0x0
///                                    ###
///                                    * Programmable lineCnt reset value at soft reset or End of Frame. Defaule 0
///                                    ###
///               %unsigned 2  lineCnt_R1_rstval1        0x0
///                                    ###
///                                    * Programmable lineCnt reset value at Start of Frame. Defaule 0
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x00008 CTRL2                (P-)
///               %unsigned 1  vmxIP_fStart              0x0
///                                    ###
///                                    * 0 - No effect on hardware.
///                                    * 1 - start
///                                    * write 1 to this register is used to kick the hardware.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0000C CTRL3                (P)
///               %unsigned 32 inpPix_tot                0x64
///                                    ###
///                                    * Specifies the total number of pixels expected at the input of ADPSCL-1D IFifo. should be programmed with (ivres*ihres).
///                                    ###
///     @ 0x00010 CTRL4                (P)
///               %unsigned 1  UPS420_4K_bypass          0x0
///               %unsigned 1  adpScl_bypass             0x1
///               %unsigned 1  bitmap40_bypass           0x1
///               %unsigned 1  vmxIP_bypass              0x1
///               %unsigned 1  UPS420_2K_bypass          0x0
///               %unsigned 1  UPS422_444_10B_bypass     0x0
///               %unsigned 1  UPS422_444_12B_bypass     0x0
///               %unsigned 1  CAR_bypass                0x1
///                                    ###
///                                    * Respective IP's in main video plane hard bypass register bits. Program accordingly to enable/disable IP's in pipe.
///                                    * [1] : HardBypass
///                                    * [0] : In path
///                                    ###
///               %unsigned 1  tHDR_bypass               0x1
///                                    ###
///                                    * Technicolor HDR IP hard-bypass. Write 0 to enable tHDR in main video path
///                                    * [1] : HardBypass
///                                    * [0] : In path
///                                    ###
///               %unsigned 1  DolbyEdr_bypass           0x1
///                                    ###
///                                    * Hard bypass for (Dolby Composer Wrap + Dolby RGB2IPT + CVM) and tHDR IP.
///                                    * [1] : hard-bypass. DeTile-UPS420to422 output sent to downstream (not functional path, YUV422 data output used for debug. 1D SCL hard-bypass)
///                                    * [0] : In this case, dvComposer_bypass should be programmed as 1'b0
///                                    ###
///               %unsigned 1  inline_offline_sel        0x0
///                                    ###
///                                    * [0] : Inline Scalar Path
///                                    * [1] : Offline Read Path
///                                    ###
///               %unsigned 1  tHDR_DolbyCVM_sel         0x1
///                                    ###
///                                    * [1] : DV Composer Wrap + RGB2IPT+ Dolby CVM path.
///                                    * [0] : tHDR in Path.
///                                    ###
///               %unsigned 1  dvComposer_bypass         0x1
///                                    ###
///                                    * DV Composer Hard-bypass.
///                                    * [1] : HardBypass
///                                    * [0] : In path
///                                    ###
///               %unsigned 1  dvTest_path_en            0x0
///                                    ###
///                                    * DvTest path select bit.
///                                    * Write 1 for enabling YUV(IPT)420 16b test data write to DRAM through hdmiRxPipe.
///                                    * Testdata through detile to dvComposer (external formatter).
///                                    ###
///               %unsigned 1  scl1d_ofl_wr_en           0x0
///                                    ###
///                                    * 1D Scalar Write Back (offline write) path enable through hdmiRxPipe.
///                                    * Write 1 to enable this path.
///                                    ###
///               %unsigned 1  dvCVM_test_en             0x0
///                                    ###
///                                    * DvTest path for CVM select bit.
///                                    * Write 1 for enabling YUV(IPT)420 16b test data through DV-CVM. Default 0
///                                    * testdata (420sp) to YUV420toRGB path
///                                    ###
///               %unsigned 1  scl1d_inl_ofl_en          0x0
///                                    ###
///                                    * 1D Scalar inline and simultaneous write back (offline write) path enable through hdmiRxPipe. By enabling this bit, req to scalar is coupled with back pressure from hdmiRxPipe and downstream path
///                                    * Write 1 to enable this path.
///                                    ###
///               %unsigned 1  ITMO_top_bypass           0x1
///                                    ###
///                                    * ITMO Top Hard-bypass.
///                                    * [1] : HardBypass
///                                    * [0] : In path
///                                    ###
///               %unsigned 1  ITMO_YUV444_in_sel        0x0
///                                    ###
///                                    * [1] : ITMO support 422 input 444 output with help of outside UPS422to444 IP.
///                                    * [0] : default path.
///                                    ###
///               %unsigned 1  NGPTVIP_bypass            0x0
///                                    ###
///                                    * NGPTVIP Hard-bypass. Write 0 to enable NGPTV in main video path.
///                                    * [1] : HardBypass
///                                    * [0] : In path
///                                    ###
///               %unsigned 1  VMXIP_NGPTVIP_Sel         0x1
///                                    ###
///                                    * [1] : VMX IP is in path.
///                                    * [0] : NGPTV IP is in path.
///                                    ###
///               %unsigned 1  vdcm_bypass               0x1
///                                    ###
///                                    * VDCM IP Hard-bypass. Write 0 to enable VDCM in main video path.
///                                    * [1] : HardBypass
///                                    * [0] : In path
///                                    ###
///               %unsigned 1  vitm_vdcm_linbuff_bypass  0x1
///                                    ###
///                                    * [1] : DV Composer SRAM gets the gated clock.
///                                    * [0] : VDCM/VITM/DV Composer is in path.
///                                    * DV Composer SRAM gets free running clock.
///                                    ###
///               %unsigned 2  vitm_vdcm_linbuff_sel     0x0
///               %unsigned 1  vdcm_snr_bypass           0x1
///               %unsigned 1  vdcm_CRMap_bypass         0x1
///               %unsigned 1  VDCM_VITM_sel             0x0
///               %unsigned 1  car_pdwn                  0x0
///                                    ###
///                                    * Wired to internal SRAMs' pwdn port of CAR
///                                    ###
///               %unsigned 1  car_pdlvmc                0x0
///                                    ###
///                                    * Wired to internal SRAMs' pdlvmc port of CAR
///                                    ###
///               %unsigned 1  car_pdfvssm               0x0
///                                    ###
///                                    * Wired to internal SRAMs' pdfvssm ports of CAR
///                                    ###
///               %unsigned 1  car_out8b                 0x0
///                                    ###
///                                    * 1 : 8-bit data output from CAR
///                                    * 0 : 10-bit data output from CAR
///                                    ###
///     @ 0x00014 CTRL5                (P-)
///               %unsigned 1  tHDR_start                0x0
///               %unsigned 1  tHDR_clear                0x0
///                                    ###
///                                    * [1] : start/clear to THDR IP.
///                                    * [0] : Don't start/clear to THDR IP.
///                                    ###
///               %unsigned 1  detEE_start               0x0
///               %unsigned 1  detEE_clear               0x0
///                                    ###
///                                    * [1] : start/clear to fifo done for detEE.
///                                    * [0] : Don't start/clear
///                                    ###
///               %unsigned 1  detEE_ofline_start        0x0
///               %unsigned 1  detEE_offline_clear       0x0
///                                    ###
///                                    * [1] : start/clear to fifo done for detEE when offline path is present before scalar.
///                                    * [0] : Don't start/clear
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00018 INVSCAN              (P)
///               %unsigned 1  bitmap128_Rd0_en          0x0
///               %unsigned 1  bitmap128_Rd1_en          0x0
///                                    ###
///                                    * [1] : enable for H Inverse Scan.
///                                    * [0] : Default Value.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x0001C CTRL6                (P-)
///               %unsigned 1  dvComp_start              0x0
///               %unsigned 1  dvComp_clear              0x0
///               %%        30         # Stuffing bits...
///     @ 0x00020 CTRL7                (P)
///               %unsigned 1  dvComp_pdwn_regs          0x0
///                                    ###
///                                    * Wired to internal SRAM's pwdn port of DVComp Wrapper
///                                    ###
///               %unsigned 1  dvComp_pdlvmc_regs        0x0
///                                    ###
///                                    * Wired to internal SRAM's pdlvmc port of DVComp Wrapper
///                                    ###
///               %unsigned 1  dvComp_pdfvssm_regs       0x0
///                                    ###
///                                    * Wired to internal SRAM's pdfvssm ports of DVComp Wrapper
///                                    ###
///               %unsigned 1  CS                        0x1
///                                    ###
///                                    * 1: SRAM's selected
///                                    * 0: SRAM's unselected
///                                    * this signal should be 0 when PDWN toggled and should be 1 when the function is working. Default can set to 1.
///                                    ###
///               %unsigned 1  gtclken_ctrl              0x0
///                                    ###
///                                    * Gtclken control for dvComposer wrapper
///                                    * Default : 0 , write 1 to make gtclk input to dvComposer wrapper independent of gtclken
///                                    ###
///               %unsigned 1  idata_422_sel             0x0
///                                    ###
///                                    * Input test data format select for dvComposer wrapper
///                                    * 0 : Input test data is 420SP format
///                                    * 1 : Input test data is 422YC format
///                                    ###
///               %unsigned 1  offline_rdsel_1dscl       0x0
///                                    ###
///                                    * Selection Bit for Input Data to 1D Scalar in Main Video Path
///                                    * 0 : Input Data is from inline datapath
///                                    * 1 : Input Data is from Offline Read path (fetched from DHUB)
///                                    ###
///               %unsigned 1  main_video_wrbk           0x0
///                                    ###
///                                    * Selection Bit for Input Video Data (main plane) written back to DRAM through HDMIRX-PIPE
///                                    * 0 : Normal Mode
///                                    * 1 : Data written into 'dvtest_offlinescrl_vppFifo' FIFO is main video data (Non Scaled)
///                                    ###
///               %unsigned 1  write_sel_1dscl_dram      0x0
///                                    ###
///                                    * Selection Bit for Input Video Data (main plane) written back to DRAM through HDMIRX-PIPE and simultaneously being given to 1D Scalar
///                                    * 0 : default, data written back to DRAM through HDMIRx-PIPE is dependent on 'main_video_wrbk' register bit value
///                                    * 1 : Data written into 'dvtest_offlinescrl_vppFifo' FIFO is main video data (Non Scaled) and simultaneously fed to 1D Scalar in main video plane
///                                    ###
///               %unsigned 1  crop_de1_en               0x0
///                                    ###
///                                    * Selection bit for cropping support (before sending data to DTILE_UPS420_SP or downstream pipe)
///                                    * 0 : Default, no cropping support
///                                    * 1 : Input data read from ReadClient (MR0 and MR1) can be cropped before input to DTILE_UPS420 (programming alongwith crop_de2_en and using feTG controls for the same
///                                    ###
///               %unsigned 1  itmotop_pdwn_regs         0x0
///                                    ###
///                                    * Wired to internal SRAM's pwdn port of ITMO TOP Wrapper
///                                    ###
///               %unsigned 1  itmotop_pdlvmc_regs       0x0
///                                    ###
///                                    * Wired to internal SRAM's pdlvmc port of ITMO TOP Wrapper
///                                    ###
///               %unsigned 1  itmotop_pdfvssm_regs      0x0
///                                    ###
///                                    * Wired to internal SRAM's pdfvssm ports of ITMO    TOP Wrapper
///                                    ###
///               %unsigned 1  sp_dwa_10b_normal_mode    0x0
///                                    ###
///                                    * 1: used for only sp DWA 10 bit format support in normal mode.
///                                    * 0: default path (other formats)
///                                    ###
///               %unsigned 1  sp_dwa_10b_inverse_mode   0x0
///                                    ###
///                                    * 1: used for only sp DWA 10 bit format support in inverse scan mode.
///                                    * 0: default path (other formats)
///                                    ###
///               %unsigned 1  yuv422_sp_en              0x0
///                                    ###
///                                    * 1: used for YUV422SP format supports (YUV422SP-8b, YUV422SP-DWA-10b).
///                                    * 0: default path (other formats)
///                                    ###
///               %unsigned 1  uv_mask_val0              0x0
///                                    ###
///                                    * Mask value for UV data read control for OVPSCLWRAP
///                                    * Default 0. For Front-end, alternate line control to be independent of UV
///                                    ###
///               %unsigned 1  uv_mask_val1              0x0
///                                    ###
///                                    * Mask value for UV data read control for OVPSCLWRAP
///                                    * Default 0. For Front-end, alternate line control to be independent of UV
///                                    ###
///               %unsigned 1  uv_mask_disable           0x0
///                                    ###
///                                    * Control bit to diable uv_mask generation for OVP SCL Pipe (Croma control)
///                                    * Write 1 to disable UV mask generation. Default enabled.
///                                    ###
///               %unsigned 1  dvcomp_gtclk_ctrl         0x0
///                                    ###
///                                    * DV Composer GTCLK gating control bit
///                                    * [0] : gtClk is controlled by DV Composer's gtclken
///                                    * [1] : gtClk is gated. No clock propagation
///                                    ###
///               %unsigned 1  vdcm_pdwn_regs            0x0
///                                    ###
///                                    * Wired to internal SRAM's pdwn port of VDCM IP
///                                    ###
///               %unsigned 1  vdcm_pdlvmc_regs          0x0
///                                    ###
///                                    * Wired to internal SRAM's pdlvmc port of VDCM IP
///                                    ###
///               %unsigned 1  vdcm_pdfvssm_regs         0x0
///                                    ###
///                                    * Wired to internal SRAM's pdfvssm port of VDCM IP
///                                    ###
///               %unsigned 1  vmx_pdwn_regs             0x0
///                                    ###
///                                    * Wired to internal SRAM's pdwn port of VMX IP
///                                    ###
///               %unsigned 1  vmx_pdlvmc_regs           0x0
///                                    ###
///                                    * Wired to internal SRAM's pdlvmc port of VMX IP
///                                    ###
///               %unsigned 1  vmx_pdfvssm_regs          0x0
///                                    ###
///                                    * Wired to internal SRAM's pdfvssm port of VMX IP
///                                    ###
///               %unsigned 1  hdrlut_pdwn_regs          0x0
///                                    ###
///                                    * Wired to internal SRAM's pdwn port of HDR LUT
///                                    ###
///               %unsigned 1  hdrlut_pdlvmc_regs        0x0
///                                    ###
///                                    * Wired to internal SRAM's pdlvmc port of HDR LUT
///                                    ###
///               %unsigned 1  hdrlut_pdfvssm_regs       0x0
///                                    ###
///                                    * Wired to internal SRAM's pdfvssm port of HDR LUT
///                                    ###
///               %unsigned 1  hdrlut_bypass             0x1
///                                    ###
///                                    * [0] : HDR LUT in path
///                                    * [1] : Hard Bypass
///                                    ###
///               %unsigned 1  detile4k_out_wrbk_en      0x0
///                                    ###
///                                    * 1: Select detile4k output to offline write back, (main_video_wrbk and write_sel_1dscl_dram bits should be 0).
///                                    * 0 : Select Main Scalar output to offline write back.
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x00024 CTRL8                (P-)
///               %unsigned 1  itmotop_frst              0x0
///                                    ###
///                                    * Frame Reset for ITMO
///                                    * [0] : No effect
///                                    * [1] : Make 1 to reset
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00028 CTRL9                (P-)
///               %unsigned 1  vdcm_frst                 0x0
///                                    ###
///                                    * Frame Reset for VDCM
///                                    * [0] : No effect
///                                    * [1] : Make 1 to reset
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0002C CTRL10               (P)
///               %unsigned 1  detEE_top_bypass          0x1
///                                    ###
///                                    * 0: To enable detEE_top
///                                    * 1: To bypass detEE_top
///                                    ###
///               %unsigned 1  eecmu_top_bypass          0x1
///                                    ###
///                                    * 0: To enable eecmu_top
///                                    * 1: To bypass eecmu_top
///                                    ###
///               %unsigned 1  adpDetScl_bypass          0x1
///                                    ###
///                                    * 0: To enable apdDetScl
///                                    * 1: bypass
///                                    ###
///               %unsigned 1  eeTop_sel                 0x0
///                                    ###
///                                    * 0: To select main scalar outputs
///                                    * 1: To select eeTop outputs
///                                    ###
///               %unsigned 1  detEE_top_ctrl0           0x0
///                                    ###
///                                    * enable control register when detEE IP inputs from offline path.
///                                    ###
///               %unsigned 1  detEE_top_ctrl1           0x0
///                                    ###
///                                    * enable control register when detEE IP inputs from dolby path.
///                                    ###
///               %unsigned 1  detEE_top_ctrl2           0x0
///                                    ###
///                                    * enable control register when detEE IP inputs direct from vpTop path means detEE inputs not from offline or dolby path.
///                                    ###
///               %unsigned 1  ee_cmu_sel                0x0
///                                    ###
///                                    * 0: To select main scalar outputs
///                                    * 1: To select ee_cmu outputs
///                                    ###
///               %unsigned 1  bl_ups420Out_sel          0x0
///                                    ###
///                                    * 0: To select unfiltered ups420 output
///                                    * 1: To select ups420 output (w/ UV filtered)
///                                    ###
///               %unsigned 1  inline_offline_eecmu_sel  0x0
///                                    ###
///                                    * 0: To select inline with EE CMU path
///                                    * 1: To select offline with EE CMU path
///                                    ###
///               %unsigned 1  lineDn_eecmu_En           0x0
///               %unsigned 12 pixLineTot_eecmu          0x64
///                                    ###
///                                    * Total number of pixels in a line which are input to detail EE (for Adaptive and detail Scalar output in Main Plane)
///                                    * program corresponding Enable bits for DET-DSCL-EE:
///                                    * Write 1 for Line Done to be used in clock enable generation for EE-CMU TG. Default 0
///                                    ###
///               %%        9          # Stuffing bits...
///     @ 0x00030 CTRL11               (P)
///               %unsigned 32 inpPix_tot                0x64
///                                    ###
///                                    * Specifies the total number of pixels expected at the input of ADPSCL-1D input Fifo with detail EE. should be programmed with (ivres*ihres).
///                                    ###
///     @ 0x00034 CTRL12               (P)
///               %unsigned 32 vptop_iPixTot             0x64
///                                    ###
///                                    * Specifies the total number of pixels expected at the output of vpTop output Fifo with detail EE enable. should be programmed with (ivres*ihres).
///                                    ###
///     @ 0x00038 CTRL13               (P)
///               %unsigned 32 eecmu_iPixTot             0x64
///                                    ###
///                                    * Specifies the total number of pixels expected at the input of EE CMU input Fifo with eeTop or cmu enable. should be programmed with (ivres*ihres).
///                                    ###
///     @ 0x0003C CTRL14               (P)
///               %unsigned 32 offline_iPixTot           0x64
///                                    ###
///                                    * Specifies the total number of pixels expected at the input of offline Fifo with detail EE enable. should be programmed with (ivres*ihres).
///                                    ###
///     @ 0x00040 CTRL15               (P)
///               %unsigned 1  dvEdrInFifo_bl_cg_ctrl    0x0
///                                    ###
///                                    * Control bit to disable the clock gating of dvEdrInFifo_bl based on the functional use case.
///                                    * [1]: Disable clock gating
///                                    * [0]: Enable clock gating
///                                    ###
///               %unsigned 1  dvEdrInFifo_el_cg_ctrl    0x0
///                                    ###
///                                    * Control bit to disable the clock gating of dvEdrInFifo_el based on the functional use case.
///                                    * [1]: Disable clock gating
///                                    * [0]: Enable clock gating
///                                    ###
///               %unsigned 1  dv_iproIFiFo_cg_ctrl      0x0
///                                    ###
///                                    * Control bit to disable the clock gating of dv_iproIFiFo based on the functional use case.
///                                    * [1]: Disable clock gating
///                                    * [0]: Enable clock gating
///                                    ###
///               %unsigned 1  mainOFifo_cg_ctrl         0x0
///                                    ###
///                                    * Control bit to disable the clock gating of mainOFifo based on the functional use case.
///                                    * [1]: Disable clock gating
///                                    * [0]: Enable clock gating
///                                    ###
///               %unsigned 1  mainScliFifo_cg_ctrl      0x0
///                                    ###
///                                    * Control bit to disable the clock gating of mainScliFifo based on the functional use case.
///                                    * [1]: Disable clock gating
///                                    * [0]: Enable clock gating
///                                    ###
///               %unsigned 1  SclOFifo_cg_ctrl          0x0
///                                    ###
///                                    * Control bit to disable the clock gating of SclOFifo based on the functional use case.
///                                    * [1]: Disable clock gating
///                                    * [0]: Enable clock gating
///                                    ###
///               %unsigned 1  VmxVmIFifo_cg_ctrl        0x0
///                                    ###
///                                    * Control bit to disable the clock gating of VmxVmIFifo based on the functional use case.
///                                    * [1]: Disable clock gating
///                                    * [0]: Enable clock gating
///                                    ###
///               %unsigned 1  vptop_IFifo_cg_ctrl       0x0
///                                    ###
///                                    * Control bit to disable the clock gating of vptop_IFifo based on the functional use case.
///                                    * [1]: Disable clock gating
///                                    * [0]: Enable clock gating
///                                    ###
///               %unsigned 1  vptop_OFifo_cg_ctrl       0x0
///                                    ###
///                                    * Control bit to disable the clock gating of vptop_OFifo based on the functional use case.
///                                    * [1]: Disable clock gating
///                                    * [0]: Enable clock gating
///                                    ###
///               %unsigned 1  combo_pwr_opt_en          0x1
///                                    ###
///                                    * Enable bit to switch off the transition in the combo modules when it is not in functional path.
///                                    * [1]: Enable power optimization logic.
///                                    * [0]: Disable power optimization logic.
///                                    ###
///               %%        22         # Stuffing bits...
///     @ 0x00044 RASTERSCAN           (P)
///               %unsigned 1  ovp_rd_sel_420sp          0x0
///                                    ###
///                                    * Select bit to enable 420 SP read from ReadClients in Main Plane.
///                                    * [0]:Read Enable for ReadClients in Main Plane is
///                                    * dependent on feTg control signals.(420SP input for OVP).[1]:Read Enable is dependent on rsFetgcontrol signals(420SP input for OVP).
///                                    ###
///               %unsigned 1  bl_rd_sel_420sp           0x0
///                                    ###
///                                    * Select bit to enable 420 SP read from ReadClients in Main Plane.
///                                    * [0]:Read Enable for ReadClients in Main Plane is
///                                    * dependent on feTg control signals.(420SP input for DV Composer BL Plane).
///                                    * [1]:Read Enable is dependent on rsFetg control signals(420SP input for DV Composer BL Plane).
///                                    ###
///               %unsigned 1  ovp_420sp_datasel         0x0
///                                    ###
///                                    * [0] : Input data(420SP) is from BL readclient and controlled by feTg.(420SP input for OVP).
///                                    * [1] : Input data(420SP) is from any readclient and controlled by rsFetg.(420SP input for OVPthrough BL path).
///                                    ###
///               %unsigned 1  bl_composer_420sp         0x0
///                                    ###
///                                    * Select bit to control input for DV Composer BL
///                                    * Plane.
///                                    * [0]: Input data is controlled by feTg control signals in EL Plane. (420SP input for DV Composer BL Plane). [1]: Input data is controlled by rsFetg controlsignals(420SP input for DV Composer BLPlane).
///                                    ###
///               %unsigned 1  bl_composer_rScan_detile_420sp 0x0
///                                    ###
///                                    * Select bit to control input rsFeTg to Detile
///                                    * Plane.
///                                    * [0]: Input data is controlled by feTg control signals in BL Plane. (420SP input for DV Composer BL Plane). [1]: Input data is controlled by rsFetg controlSignals( rsFetg data to detile formatter).
///                                    ###
///               %%        27         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      72B, bits:     328b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_MAINPL
#define h_MAINPL (){}

    #define     RA_MAINPL_CTRL0                                0x0000

    #define     BA_MAINPL_CTRL0_betgCfg_rst                    0x0000
    #define     B16MAINPL_CTRL0_betgCfg_rst                    0x0000
    #define   LSb32MAINPL_CTRL0_betgCfg_rst                       0
    #define   LSb16MAINPL_CTRL0_betgCfg_rst                       0
    #define       bMAINPL_CTRL0_betgCfg_rst                    1
    #define   MSK32MAINPL_CTRL0_betgCfg_rst                       0x00000001

    #define     BA_MAINPL_CTRL0_betg_sref                      0x0000
    #define     B16MAINPL_CTRL0_betg_sref                      0x0000
    #define   LSb32MAINPL_CTRL0_betg_sref                         1
    #define   LSb16MAINPL_CTRL0_betg_sref                         1
    #define       bMAINPL_CTRL0_betg_sref                      1
    #define   MSK32MAINPL_CTRL0_betg_sref                         0x00000002

    #define     BA_MAINPL_CTRL0_memlb_cgEnb                    0x0000
    #define     B16MAINPL_CTRL0_memlb_cgEnb                    0x0000
    #define   LSb32MAINPL_CTRL0_memlb_cgEnb                       2
    #define   LSb16MAINPL_CTRL0_memlb_cgEnb                       2
    #define       bMAINPL_CTRL0_memlb_cgEnb                    1
    #define   MSK32MAINPL_CTRL0_memlb_cgEnb                       0x00000004

    #define     BA_MAINPL_CTRL0_memlb_mode                     0x0000
    #define     B16MAINPL_CTRL0_memlb_mode                     0x0000
    #define   LSb32MAINPL_CTRL0_memlb_mode                        3
    #define   LSb16MAINPL_CTRL0_memlb_mode                        3
    #define       bMAINPL_CTRL0_memlb_mode                     1
    #define   MSK32MAINPL_CTRL0_memlb_mode                        0x00000008

    #define     BA_MAINPL_CTRL0_tgEn_rstEn                     0x0000
    #define     B16MAINPL_CTRL0_tgEn_rstEn                     0x0000
    #define   LSb32MAINPL_CTRL0_tgEn_rstEn                        4
    #define   LSb16MAINPL_CTRL0_tgEn_rstEn                        4
    #define       bMAINPL_CTRL0_tgEn_rstEn                     1
    #define   MSK32MAINPL_CTRL0_tgEn_rstEn                        0x00000010

    #define     BA_MAINPL_CTRL0_crop_de2_en                    0x0000
    #define     B16MAINPL_CTRL0_crop_de2_en                    0x0000
    #define   LSb32MAINPL_CTRL0_crop_de2_en                       5
    #define   LSb16MAINPL_CTRL0_crop_de2_en                       5
    #define       bMAINPL_CTRL0_crop_de2_en                    1
    #define   MSK32MAINPL_CTRL0_crop_de2_en                       0x00000020

    #define     BA_MAINPL_CTRL0_dif_blk_en                     0x0000
    #define     B16MAINPL_CTRL0_dif_blk_en                     0x0000
    #define   LSb32MAINPL_CTRL0_dif_blk_en                        6
    #define   LSb16MAINPL_CTRL0_dif_blk_en                        6
    #define       bMAINPL_CTRL0_dif_blk_en                     1
    #define   MSK32MAINPL_CTRL0_dif_blk_en                        0x00000040

    #define     BA_MAINPL_CTRL0_cr_line_cnt                    0x0000
    #define     B16MAINPL_CTRL0_cr_line_cnt                    0x0000
    #define   LSb32MAINPL_CTRL0_cr_line_cnt                       7
    #define   LSb16MAINPL_CTRL0_cr_line_cnt                       7
    #define       bMAINPL_CTRL0_cr_line_cnt                    3
    #define   MSK32MAINPL_CTRL0_cr_line_cnt                       0x00000380

    #define     BA_MAINPL_CTRL0_tgclken_sel                    0x0001
    #define     B16MAINPL_CTRL0_tgclken_sel                    0x0000
    #define   LSb32MAINPL_CTRL0_tgclken_sel                       10
    #define   LSb16MAINPL_CTRL0_tgclken_sel                       10
    #define       bMAINPL_CTRL0_tgclken_sel                    1
    #define   MSK32MAINPL_CTRL0_tgclken_sel                       0x00000400

    #define     BA_MAINPL_CTRL0_clken_st_clr                   0x0001
    #define     B16MAINPL_CTRL0_clken_st_clr                   0x0000
    #define   LSb32MAINPL_CTRL0_clken_st_clr                      11
    #define   LSb16MAINPL_CTRL0_clken_st_clr                      11
    #define       bMAINPL_CTRL0_clken_st_clr                   1
    #define   MSK32MAINPL_CTRL0_clken_st_clr                      0x00000800

    #define     BA_MAINPL_CTRL0_vptop_tHdr_ctrl                0x0001
    #define     B16MAINPL_CTRL0_vptop_tHdr_ctrl                0x0000
    #define   LSb32MAINPL_CTRL0_vptop_tHdr_ctrl                   12
    #define   LSb16MAINPL_CTRL0_vptop_tHdr_ctrl                   12
    #define       bMAINPL_CTRL0_vptop_tHdr_ctrl                1
    #define   MSK32MAINPL_CTRL0_vptop_tHdr_ctrl                   0x00001000

    #define     BA_MAINPL_CTRL0_fifo_sts_ctrl                  0x0001
    #define     B16MAINPL_CTRL0_fifo_sts_ctrl                  0x0000
    #define   LSb32MAINPL_CTRL0_fifo_sts_ctrl                     13
    #define   LSb16MAINPL_CTRL0_fifo_sts_ctrl                     13
    #define       bMAINPL_CTRL0_fifo_sts_ctrl                  1
    #define   MSK32MAINPL_CTRL0_fifo_sts_ctrl                     0x00002000

    #define     BA_MAINPL_CTRL0_db_clken_ctrl0                 0x0001
    #define     B16MAINPL_CTRL0_db_clken_ctrl0                 0x0000
    #define   LSb32MAINPL_CTRL0_db_clken_ctrl0                    14
    #define   LSb16MAINPL_CTRL0_db_clken_ctrl0                    14
    #define       bMAINPL_CTRL0_db_clken_ctrl0                 1
    #define   MSK32MAINPL_CTRL0_db_clken_ctrl0                    0x00004000

    #define     BA_MAINPL_CTRL0_fifo_full_ctrlEn               0x0001
    #define     B16MAINPL_CTRL0_fifo_full_ctrlEn               0x0000
    #define   LSb32MAINPL_CTRL0_fifo_full_ctrlEn                  15
    #define   LSb16MAINPL_CTRL0_fifo_full_ctrlEn                  15
    #define       bMAINPL_CTRL0_fifo_full_ctrlEn               1
    #define   MSK32MAINPL_CTRL0_fifo_full_ctrlEn                  0x00008000

    #define     BA_MAINPL_CTRL0_memlbUPS420_cgEnb              0x0002
    #define     B16MAINPL_CTRL0_memlbUPS420_cgEnb              0x0002
    #define   LSb32MAINPL_CTRL0_memlbUPS420_cgEnb                 16
    #define   LSb16MAINPL_CTRL0_memlbUPS420_cgEnb                 0
    #define       bMAINPL_CTRL0_memlbUPS420_cgEnb              1
    #define   MSK32MAINPL_CTRL0_memlbUPS420_cgEnb                 0x00010000

    #define     BA_MAINPL_CTRL0_fifo_full_ctrl1                0x0002
    #define     B16MAINPL_CTRL0_fifo_full_ctrl1                0x0002
    #define   LSb32MAINPL_CTRL0_fifo_full_ctrl1                   17
    #define   LSb16MAINPL_CTRL0_fifo_full_ctrl1                   1
    #define       bMAINPL_CTRL0_fifo_full_ctrl1                1
    #define   MSK32MAINPL_CTRL0_fifo_full_ctrl1                   0x00020000

    #define     BA_MAINPL_CTRL0_fifo_full_ctrl2                0x0002
    #define     B16MAINPL_CTRL0_fifo_full_ctrl2                0x0002
    #define   LSb32MAINPL_CTRL0_fifo_full_ctrl2                   18
    #define   LSb16MAINPL_CTRL0_fifo_full_ctrl2                   2
    #define       bMAINPL_CTRL0_fifo_full_ctrl2                1
    #define   MSK32MAINPL_CTRL0_fifo_full_ctrl2                   0x00040000

    #define     BA_MAINPL_CTRL0_vptop_fifo_rdsel               0x0002
    #define     B16MAINPL_CTRL0_vptop_fifo_rdsel               0x0002
    #define   LSb32MAINPL_CTRL0_vptop_fifo_rdsel                  19
    #define   LSb16MAINPL_CTRL0_vptop_fifo_rdsel                  3
    #define       bMAINPL_CTRL0_vptop_fifo_rdsel               1
    #define   MSK32MAINPL_CTRL0_vptop_fifo_rdsel                  0x00080000

    #define     BA_MAINPL_CTRL0_memdlbUPS420_cgEnb             0x0002
    #define     B16MAINPL_CTRL0_memdlbUPS420_cgEnb             0x0002
    #define   LSb32MAINPL_CTRL0_memdlbUPS420_cgEnb                20
    #define   LSb16MAINPL_CTRL0_memdlbUPS420_cgEnb                4
    #define       bMAINPL_CTRL0_memdlbUPS420_cgEnb             1
    #define   MSK32MAINPL_CTRL0_memdlbUPS420_cgEnb                0x00100000

    #define     BA_MAINPL_CTRL0_fifo_full_ctrl3                0x0002
    #define     B16MAINPL_CTRL0_fifo_full_ctrl3                0x0002
    #define   LSb32MAINPL_CTRL0_fifo_full_ctrl3                   21
    #define   LSb16MAINPL_CTRL0_fifo_full_ctrl3                   5
    #define       bMAINPL_CTRL0_fifo_full_ctrl3                1
    #define   MSK32MAINPL_CTRL0_fifo_full_ctrl3                   0x00200000

    #define     BA_MAINPL_CTRL0_fifo_full_ctrl4                0x0002
    #define     B16MAINPL_CTRL0_fifo_full_ctrl4                0x0002
    #define   LSb32MAINPL_CTRL0_fifo_full_ctrl4                   22
    #define   LSb16MAINPL_CTRL0_fifo_full_ctrl4                   6
    #define       bMAINPL_CTRL0_fifo_full_ctrl4                1
    #define   MSK32MAINPL_CTRL0_fifo_full_ctrl4                   0x00400000
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL1                                0x0004

    #define     BA_MAINPL_CTRL1_betg_hcnt_rstval               0x0004
    #define     B16MAINPL_CTRL1_betg_hcnt_rstval               0x0004
    #define   LSb32MAINPL_CTRL1_betg_hcnt_rstval                  0
    #define   LSb16MAINPL_CTRL1_betg_hcnt_rstval                  0
    #define       bMAINPL_CTRL1_betg_hcnt_rstval               13
    #define   MSK32MAINPL_CTRL1_betg_hcnt_rstval                  0x00001FFF

    #define     BA_MAINPL_CTRL1_betg_vcnt_rstval               0x0005
    #define     B16MAINPL_CTRL1_betg_vcnt_rstval               0x0004
    #define   LSb32MAINPL_CTRL1_betg_vcnt_rstval                  13
    #define   LSb16MAINPL_CTRL1_betg_vcnt_rstval                  13
    #define       bMAINPL_CTRL1_betg_vcnt_rstval               12
    #define   MSK32MAINPL_CTRL1_betg_vcnt_rstval                  0x01FFE000

    #define     BA_MAINPL_CTRL1_line_dly                       0x0007
    #define     B16MAINPL_CTRL1_line_dly                       0x0006
    #define   LSb32MAINPL_CTRL1_line_dly                          25
    #define   LSb16MAINPL_CTRL1_line_dly                          9
    #define       bMAINPL_CTRL1_line_dly                       2
    #define   MSK32MAINPL_CTRL1_line_dly                          0x06000000

    #define     BA_MAINPL_CTRL1_lineCnt_R1_rstval0             0x0007
    #define     B16MAINPL_CTRL1_lineCnt_R1_rstval0             0x0006
    #define   LSb32MAINPL_CTRL1_lineCnt_R1_rstval0                27
    #define   LSb16MAINPL_CTRL1_lineCnt_R1_rstval0                11
    #define       bMAINPL_CTRL1_lineCnt_R1_rstval0             2
    #define   MSK32MAINPL_CTRL1_lineCnt_R1_rstval0                0x18000000

    #define     BA_MAINPL_CTRL1_lineCnt_R1_rstval1             0x0007
    #define     B16MAINPL_CTRL1_lineCnt_R1_rstval1             0x0006
    #define   LSb32MAINPL_CTRL1_lineCnt_R1_rstval1                29
    #define   LSb16MAINPL_CTRL1_lineCnt_R1_rstval1                13
    #define       bMAINPL_CTRL1_lineCnt_R1_rstval1             2
    #define   MSK32MAINPL_CTRL1_lineCnt_R1_rstval1                0x60000000
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL2                                0x0008

    #define     BA_MAINPL_CTRL2_vmxIP_fStart                   0x0008
    #define     B16MAINPL_CTRL2_vmxIP_fStart                   0x0008
    #define   LSb32MAINPL_CTRL2_vmxIP_fStart                      0
    #define   LSb16MAINPL_CTRL2_vmxIP_fStart                      0
    #define       bMAINPL_CTRL2_vmxIP_fStart                   1
    #define   MSK32MAINPL_CTRL2_vmxIP_fStart                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL3                                0x000C

    #define     BA_MAINPL_CTRL3_inpPix_tot                     0x000C
    #define     B16MAINPL_CTRL3_inpPix_tot                     0x000C
    #define   LSb32MAINPL_CTRL3_inpPix_tot                        0
    #define   LSb16MAINPL_CTRL3_inpPix_tot                        0
    #define       bMAINPL_CTRL3_inpPix_tot                     32
    #define   MSK32MAINPL_CTRL3_inpPix_tot                        0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL4                                0x0010

    #define     BA_MAINPL_CTRL4_UPS420_4K_bypass               0x0010
    #define     B16MAINPL_CTRL4_UPS420_4K_bypass               0x0010
    #define   LSb32MAINPL_CTRL4_UPS420_4K_bypass                  0
    #define   LSb16MAINPL_CTRL4_UPS420_4K_bypass                  0
    #define       bMAINPL_CTRL4_UPS420_4K_bypass               1
    #define   MSK32MAINPL_CTRL4_UPS420_4K_bypass                  0x00000001

    #define     BA_MAINPL_CTRL4_adpScl_bypass                  0x0010
    #define     B16MAINPL_CTRL4_adpScl_bypass                  0x0010
    #define   LSb32MAINPL_CTRL4_adpScl_bypass                     1
    #define   LSb16MAINPL_CTRL4_adpScl_bypass                     1
    #define       bMAINPL_CTRL4_adpScl_bypass                  1
    #define   MSK32MAINPL_CTRL4_adpScl_bypass                     0x00000002

    #define     BA_MAINPL_CTRL4_bitmap40_bypass                0x0010
    #define     B16MAINPL_CTRL4_bitmap40_bypass                0x0010
    #define   LSb32MAINPL_CTRL4_bitmap40_bypass                   2
    #define   LSb16MAINPL_CTRL4_bitmap40_bypass                   2
    #define       bMAINPL_CTRL4_bitmap40_bypass                1
    #define   MSK32MAINPL_CTRL4_bitmap40_bypass                   0x00000004

    #define     BA_MAINPL_CTRL4_vmxIP_bypass                   0x0010
    #define     B16MAINPL_CTRL4_vmxIP_bypass                   0x0010
    #define   LSb32MAINPL_CTRL4_vmxIP_bypass                      3
    #define   LSb16MAINPL_CTRL4_vmxIP_bypass                      3
    #define       bMAINPL_CTRL4_vmxIP_bypass                   1
    #define   MSK32MAINPL_CTRL4_vmxIP_bypass                      0x00000008

    #define     BA_MAINPL_CTRL4_UPS420_2K_bypass               0x0010
    #define     B16MAINPL_CTRL4_UPS420_2K_bypass               0x0010
    #define   LSb32MAINPL_CTRL4_UPS420_2K_bypass                  4
    #define   LSb16MAINPL_CTRL4_UPS420_2K_bypass                  4
    #define       bMAINPL_CTRL4_UPS420_2K_bypass               1
    #define   MSK32MAINPL_CTRL4_UPS420_2K_bypass                  0x00000010

    #define     BA_MAINPL_CTRL4_UPS422_444_10B_bypass          0x0010
    #define     B16MAINPL_CTRL4_UPS422_444_10B_bypass          0x0010
    #define   LSb32MAINPL_CTRL4_UPS422_444_10B_bypass             5
    #define   LSb16MAINPL_CTRL4_UPS422_444_10B_bypass             5
    #define       bMAINPL_CTRL4_UPS422_444_10B_bypass          1
    #define   MSK32MAINPL_CTRL4_UPS422_444_10B_bypass             0x00000020

    #define     BA_MAINPL_CTRL4_UPS422_444_12B_bypass          0x0010
    #define     B16MAINPL_CTRL4_UPS422_444_12B_bypass          0x0010
    #define   LSb32MAINPL_CTRL4_UPS422_444_12B_bypass             6
    #define   LSb16MAINPL_CTRL4_UPS422_444_12B_bypass             6
    #define       bMAINPL_CTRL4_UPS422_444_12B_bypass          1
    #define   MSK32MAINPL_CTRL4_UPS422_444_12B_bypass             0x00000040

    #define     BA_MAINPL_CTRL4_CAR_bypass                     0x0010
    #define     B16MAINPL_CTRL4_CAR_bypass                     0x0010
    #define   LSb32MAINPL_CTRL4_CAR_bypass                        7
    #define   LSb16MAINPL_CTRL4_CAR_bypass                        7
    #define       bMAINPL_CTRL4_CAR_bypass                     1
    #define   MSK32MAINPL_CTRL4_CAR_bypass                        0x00000080

    #define     BA_MAINPL_CTRL4_tHDR_bypass                    0x0011
    #define     B16MAINPL_CTRL4_tHDR_bypass                    0x0010
    #define   LSb32MAINPL_CTRL4_tHDR_bypass                       8
    #define   LSb16MAINPL_CTRL4_tHDR_bypass                       8
    #define       bMAINPL_CTRL4_tHDR_bypass                    1
    #define   MSK32MAINPL_CTRL4_tHDR_bypass                       0x00000100

    #define     BA_MAINPL_CTRL4_DolbyEdr_bypass                0x0011
    #define     B16MAINPL_CTRL4_DolbyEdr_bypass                0x0010
    #define   LSb32MAINPL_CTRL4_DolbyEdr_bypass                   9
    #define   LSb16MAINPL_CTRL4_DolbyEdr_bypass                   9
    #define       bMAINPL_CTRL4_DolbyEdr_bypass                1
    #define   MSK32MAINPL_CTRL4_DolbyEdr_bypass                   0x00000200

    #define     BA_MAINPL_CTRL4_inline_offline_sel             0x0011
    #define     B16MAINPL_CTRL4_inline_offline_sel             0x0010
    #define   LSb32MAINPL_CTRL4_inline_offline_sel                10
    #define   LSb16MAINPL_CTRL4_inline_offline_sel                10
    #define       bMAINPL_CTRL4_inline_offline_sel             1
    #define   MSK32MAINPL_CTRL4_inline_offline_sel                0x00000400

    #define     BA_MAINPL_CTRL4_tHDR_DolbyCVM_sel              0x0011
    #define     B16MAINPL_CTRL4_tHDR_DolbyCVM_sel              0x0010
    #define   LSb32MAINPL_CTRL4_tHDR_DolbyCVM_sel                 11
    #define   LSb16MAINPL_CTRL4_tHDR_DolbyCVM_sel                 11
    #define       bMAINPL_CTRL4_tHDR_DolbyCVM_sel              1
    #define   MSK32MAINPL_CTRL4_tHDR_DolbyCVM_sel                 0x00000800

    #define     BA_MAINPL_CTRL4_dvComposer_bypass              0x0011
    #define     B16MAINPL_CTRL4_dvComposer_bypass              0x0010
    #define   LSb32MAINPL_CTRL4_dvComposer_bypass                 12
    #define   LSb16MAINPL_CTRL4_dvComposer_bypass                 12
    #define       bMAINPL_CTRL4_dvComposer_bypass              1
    #define   MSK32MAINPL_CTRL4_dvComposer_bypass                 0x00001000

    #define     BA_MAINPL_CTRL4_dvTest_path_en                 0x0011
    #define     B16MAINPL_CTRL4_dvTest_path_en                 0x0010
    #define   LSb32MAINPL_CTRL4_dvTest_path_en                    13
    #define   LSb16MAINPL_CTRL4_dvTest_path_en                    13
    #define       bMAINPL_CTRL4_dvTest_path_en                 1
    #define   MSK32MAINPL_CTRL4_dvTest_path_en                    0x00002000

    #define     BA_MAINPL_CTRL4_scl1d_ofl_wr_en                0x0011
    #define     B16MAINPL_CTRL4_scl1d_ofl_wr_en                0x0010
    #define   LSb32MAINPL_CTRL4_scl1d_ofl_wr_en                   14
    #define   LSb16MAINPL_CTRL4_scl1d_ofl_wr_en                   14
    #define       bMAINPL_CTRL4_scl1d_ofl_wr_en                1
    #define   MSK32MAINPL_CTRL4_scl1d_ofl_wr_en                   0x00004000

    #define     BA_MAINPL_CTRL4_dvCVM_test_en                  0x0011
    #define     B16MAINPL_CTRL4_dvCVM_test_en                  0x0010
    #define   LSb32MAINPL_CTRL4_dvCVM_test_en                     15
    #define   LSb16MAINPL_CTRL4_dvCVM_test_en                     15
    #define       bMAINPL_CTRL4_dvCVM_test_en                  1
    #define   MSK32MAINPL_CTRL4_dvCVM_test_en                     0x00008000

    #define     BA_MAINPL_CTRL4_scl1d_inl_ofl_en               0x0012
    #define     B16MAINPL_CTRL4_scl1d_inl_ofl_en               0x0012
    #define   LSb32MAINPL_CTRL4_scl1d_inl_ofl_en                  16
    #define   LSb16MAINPL_CTRL4_scl1d_inl_ofl_en                  0
    #define       bMAINPL_CTRL4_scl1d_inl_ofl_en               1
    #define   MSK32MAINPL_CTRL4_scl1d_inl_ofl_en                  0x00010000

    #define     BA_MAINPL_CTRL4_ITMO_top_bypass                0x0012
    #define     B16MAINPL_CTRL4_ITMO_top_bypass                0x0012
    #define   LSb32MAINPL_CTRL4_ITMO_top_bypass                   17
    #define   LSb16MAINPL_CTRL4_ITMO_top_bypass                   1
    #define       bMAINPL_CTRL4_ITMO_top_bypass                1
    #define   MSK32MAINPL_CTRL4_ITMO_top_bypass                   0x00020000

    #define     BA_MAINPL_CTRL4_ITMO_YUV444_in_sel             0x0012
    #define     B16MAINPL_CTRL4_ITMO_YUV444_in_sel             0x0012
    #define   LSb32MAINPL_CTRL4_ITMO_YUV444_in_sel                18
    #define   LSb16MAINPL_CTRL4_ITMO_YUV444_in_sel                2
    #define       bMAINPL_CTRL4_ITMO_YUV444_in_sel             1
    #define   MSK32MAINPL_CTRL4_ITMO_YUV444_in_sel                0x00040000

    #define     BA_MAINPL_CTRL4_NGPTVIP_bypass                 0x0012
    #define     B16MAINPL_CTRL4_NGPTVIP_bypass                 0x0012
    #define   LSb32MAINPL_CTRL4_NGPTVIP_bypass                    19
    #define   LSb16MAINPL_CTRL4_NGPTVIP_bypass                    3
    #define       bMAINPL_CTRL4_NGPTVIP_bypass                 1
    #define   MSK32MAINPL_CTRL4_NGPTVIP_bypass                    0x00080000

    #define     BA_MAINPL_CTRL4_VMXIP_NGPTVIP_Sel              0x0012
    #define     B16MAINPL_CTRL4_VMXIP_NGPTVIP_Sel              0x0012
    #define   LSb32MAINPL_CTRL4_VMXIP_NGPTVIP_Sel                 20
    #define   LSb16MAINPL_CTRL4_VMXIP_NGPTVIP_Sel                 4
    #define       bMAINPL_CTRL4_VMXIP_NGPTVIP_Sel              1
    #define   MSK32MAINPL_CTRL4_VMXIP_NGPTVIP_Sel                 0x00100000

    #define     BA_MAINPL_CTRL4_vdcm_bypass                    0x0012
    #define     B16MAINPL_CTRL4_vdcm_bypass                    0x0012
    #define   LSb32MAINPL_CTRL4_vdcm_bypass                       21
    #define   LSb16MAINPL_CTRL4_vdcm_bypass                       5
    #define       bMAINPL_CTRL4_vdcm_bypass                    1
    #define   MSK32MAINPL_CTRL4_vdcm_bypass                       0x00200000

    #define     BA_MAINPL_CTRL4_vitm_vdcm_linbuff_bypass       0x0012
    #define     B16MAINPL_CTRL4_vitm_vdcm_linbuff_bypass       0x0012
    #define   LSb32MAINPL_CTRL4_vitm_vdcm_linbuff_bypass          22
    #define   LSb16MAINPL_CTRL4_vitm_vdcm_linbuff_bypass          6
    #define       bMAINPL_CTRL4_vitm_vdcm_linbuff_bypass       1
    #define   MSK32MAINPL_CTRL4_vitm_vdcm_linbuff_bypass          0x00400000

    #define     BA_MAINPL_CTRL4_vitm_vdcm_linbuff_sel          0x0012
    #define     B16MAINPL_CTRL4_vitm_vdcm_linbuff_sel          0x0012
    #define   LSb32MAINPL_CTRL4_vitm_vdcm_linbuff_sel             23
    #define   LSb16MAINPL_CTRL4_vitm_vdcm_linbuff_sel             7
    #define       bMAINPL_CTRL4_vitm_vdcm_linbuff_sel          2
    #define   MSK32MAINPL_CTRL4_vitm_vdcm_linbuff_sel             0x01800000

    #define     BA_MAINPL_CTRL4_vdcm_snr_bypass                0x0013
    #define     B16MAINPL_CTRL4_vdcm_snr_bypass                0x0012
    #define   LSb32MAINPL_CTRL4_vdcm_snr_bypass                   25
    #define   LSb16MAINPL_CTRL4_vdcm_snr_bypass                   9
    #define       bMAINPL_CTRL4_vdcm_snr_bypass                1
    #define   MSK32MAINPL_CTRL4_vdcm_snr_bypass                   0x02000000

    #define     BA_MAINPL_CTRL4_vdcm_CRMap_bypass              0x0013
    #define     B16MAINPL_CTRL4_vdcm_CRMap_bypass              0x0012
    #define   LSb32MAINPL_CTRL4_vdcm_CRMap_bypass                 26
    #define   LSb16MAINPL_CTRL4_vdcm_CRMap_bypass                 10
    #define       bMAINPL_CTRL4_vdcm_CRMap_bypass              1
    #define   MSK32MAINPL_CTRL4_vdcm_CRMap_bypass                 0x04000000

    #define     BA_MAINPL_CTRL4_VDCM_VITM_sel                  0x0013
    #define     B16MAINPL_CTRL4_VDCM_VITM_sel                  0x0012
    #define   LSb32MAINPL_CTRL4_VDCM_VITM_sel                     27
    #define   LSb16MAINPL_CTRL4_VDCM_VITM_sel                     11
    #define       bMAINPL_CTRL4_VDCM_VITM_sel                  1
    #define   MSK32MAINPL_CTRL4_VDCM_VITM_sel                     0x08000000

    #define     BA_MAINPL_CTRL4_car_pdwn                       0x0013
    #define     B16MAINPL_CTRL4_car_pdwn                       0x0012
    #define   LSb32MAINPL_CTRL4_car_pdwn                          28
    #define   LSb16MAINPL_CTRL4_car_pdwn                          12
    #define       bMAINPL_CTRL4_car_pdwn                       1
    #define   MSK32MAINPL_CTRL4_car_pdwn                          0x10000000

    #define     BA_MAINPL_CTRL4_car_pdlvmc                     0x0013
    #define     B16MAINPL_CTRL4_car_pdlvmc                     0x0012
    #define   LSb32MAINPL_CTRL4_car_pdlvmc                        29
    #define   LSb16MAINPL_CTRL4_car_pdlvmc                        13
    #define       bMAINPL_CTRL4_car_pdlvmc                     1
    #define   MSK32MAINPL_CTRL4_car_pdlvmc                        0x20000000

    #define     BA_MAINPL_CTRL4_car_pdfvssm                    0x0013
    #define     B16MAINPL_CTRL4_car_pdfvssm                    0x0012
    #define   LSb32MAINPL_CTRL4_car_pdfvssm                       30
    #define   LSb16MAINPL_CTRL4_car_pdfvssm                       14
    #define       bMAINPL_CTRL4_car_pdfvssm                    1
    #define   MSK32MAINPL_CTRL4_car_pdfvssm                       0x40000000

    #define     BA_MAINPL_CTRL4_car_out8b                      0x0013
    #define     B16MAINPL_CTRL4_car_out8b                      0x0012
    #define   LSb32MAINPL_CTRL4_car_out8b                         31
    #define   LSb16MAINPL_CTRL4_car_out8b                         15
    #define       bMAINPL_CTRL4_car_out8b                      1
    #define   MSK32MAINPL_CTRL4_car_out8b                         0x80000000
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL5                                0x0014

    #define     BA_MAINPL_CTRL5_tHDR_start                     0x0014
    #define     B16MAINPL_CTRL5_tHDR_start                     0x0014
    #define   LSb32MAINPL_CTRL5_tHDR_start                        0
    #define   LSb16MAINPL_CTRL5_tHDR_start                        0
    #define       bMAINPL_CTRL5_tHDR_start                     1
    #define   MSK32MAINPL_CTRL5_tHDR_start                        0x00000001

    #define     BA_MAINPL_CTRL5_tHDR_clear                     0x0014
    #define     B16MAINPL_CTRL5_tHDR_clear                     0x0014
    #define   LSb32MAINPL_CTRL5_tHDR_clear                        1
    #define   LSb16MAINPL_CTRL5_tHDR_clear                        1
    #define       bMAINPL_CTRL5_tHDR_clear                     1
    #define   MSK32MAINPL_CTRL5_tHDR_clear                        0x00000002

    #define     BA_MAINPL_CTRL5_detEE_start                    0x0014
    #define     B16MAINPL_CTRL5_detEE_start                    0x0014
    #define   LSb32MAINPL_CTRL5_detEE_start                       2
    #define   LSb16MAINPL_CTRL5_detEE_start                       2
    #define       bMAINPL_CTRL5_detEE_start                    1
    #define   MSK32MAINPL_CTRL5_detEE_start                       0x00000004

    #define     BA_MAINPL_CTRL5_detEE_clear                    0x0014
    #define     B16MAINPL_CTRL5_detEE_clear                    0x0014
    #define   LSb32MAINPL_CTRL5_detEE_clear                       3
    #define   LSb16MAINPL_CTRL5_detEE_clear                       3
    #define       bMAINPL_CTRL5_detEE_clear                    1
    #define   MSK32MAINPL_CTRL5_detEE_clear                       0x00000008

    #define     BA_MAINPL_CTRL5_detEE_ofline_start             0x0014
    #define     B16MAINPL_CTRL5_detEE_ofline_start             0x0014
    #define   LSb32MAINPL_CTRL5_detEE_ofline_start                4
    #define   LSb16MAINPL_CTRL5_detEE_ofline_start                4
    #define       bMAINPL_CTRL5_detEE_ofline_start             1
    #define   MSK32MAINPL_CTRL5_detEE_ofline_start                0x00000010

    #define     BA_MAINPL_CTRL5_detEE_offline_clear            0x0014
    #define     B16MAINPL_CTRL5_detEE_offline_clear            0x0014
    #define   LSb32MAINPL_CTRL5_detEE_offline_clear               5
    #define   LSb16MAINPL_CTRL5_detEE_offline_clear               5
    #define       bMAINPL_CTRL5_detEE_offline_clear            1
    #define   MSK32MAINPL_CTRL5_detEE_offline_clear               0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_INVSCAN                              0x0018

    #define     BA_MAINPL_INVSCAN_bitmap128_Rd0_en             0x0018
    #define     B16MAINPL_INVSCAN_bitmap128_Rd0_en             0x0018
    #define   LSb32MAINPL_INVSCAN_bitmap128_Rd0_en                0
    #define   LSb16MAINPL_INVSCAN_bitmap128_Rd0_en                0
    #define       bMAINPL_INVSCAN_bitmap128_Rd0_en             1
    #define   MSK32MAINPL_INVSCAN_bitmap128_Rd0_en                0x00000001

    #define     BA_MAINPL_INVSCAN_bitmap128_Rd1_en             0x0018
    #define     B16MAINPL_INVSCAN_bitmap128_Rd1_en             0x0018
    #define   LSb32MAINPL_INVSCAN_bitmap128_Rd1_en                1
    #define   LSb16MAINPL_INVSCAN_bitmap128_Rd1_en                1
    #define       bMAINPL_INVSCAN_bitmap128_Rd1_en             1
    #define   MSK32MAINPL_INVSCAN_bitmap128_Rd1_en                0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL6                                0x001C

    #define     BA_MAINPL_CTRL6_dvComp_start                   0x001C
    #define     B16MAINPL_CTRL6_dvComp_start                   0x001C
    #define   LSb32MAINPL_CTRL6_dvComp_start                      0
    #define   LSb16MAINPL_CTRL6_dvComp_start                      0
    #define       bMAINPL_CTRL6_dvComp_start                   1
    #define   MSK32MAINPL_CTRL6_dvComp_start                      0x00000001

    #define     BA_MAINPL_CTRL6_dvComp_clear                   0x001C
    #define     B16MAINPL_CTRL6_dvComp_clear                   0x001C
    #define   LSb32MAINPL_CTRL6_dvComp_clear                      1
    #define   LSb16MAINPL_CTRL6_dvComp_clear                      1
    #define       bMAINPL_CTRL6_dvComp_clear                   1
    #define   MSK32MAINPL_CTRL6_dvComp_clear                      0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL7                                0x0020

    #define     BA_MAINPL_CTRL7_dvComp_pdwn_regs               0x0020
    #define     B16MAINPL_CTRL7_dvComp_pdwn_regs               0x0020
    #define   LSb32MAINPL_CTRL7_dvComp_pdwn_regs                  0
    #define   LSb16MAINPL_CTRL7_dvComp_pdwn_regs                  0
    #define       bMAINPL_CTRL7_dvComp_pdwn_regs               1
    #define   MSK32MAINPL_CTRL7_dvComp_pdwn_regs                  0x00000001

    #define     BA_MAINPL_CTRL7_dvComp_pdlvmc_regs             0x0020
    #define     B16MAINPL_CTRL7_dvComp_pdlvmc_regs             0x0020
    #define   LSb32MAINPL_CTRL7_dvComp_pdlvmc_regs                1
    #define   LSb16MAINPL_CTRL7_dvComp_pdlvmc_regs                1
    #define       bMAINPL_CTRL7_dvComp_pdlvmc_regs             1
    #define   MSK32MAINPL_CTRL7_dvComp_pdlvmc_regs                0x00000002

    #define     BA_MAINPL_CTRL7_dvComp_pdfvssm_regs            0x0020
    #define     B16MAINPL_CTRL7_dvComp_pdfvssm_regs            0x0020
    #define   LSb32MAINPL_CTRL7_dvComp_pdfvssm_regs               2
    #define   LSb16MAINPL_CTRL7_dvComp_pdfvssm_regs               2
    #define       bMAINPL_CTRL7_dvComp_pdfvssm_regs            1
    #define   MSK32MAINPL_CTRL7_dvComp_pdfvssm_regs               0x00000004

    #define     BA_MAINPL_CTRL7_CS                             0x0020
    #define     B16MAINPL_CTRL7_CS                             0x0020
    #define   LSb32MAINPL_CTRL7_CS                                3
    #define   LSb16MAINPL_CTRL7_CS                                3
    #define       bMAINPL_CTRL7_CS                             1
    #define   MSK32MAINPL_CTRL7_CS                                0x00000008

    #define     BA_MAINPL_CTRL7_gtclken_ctrl                   0x0020
    #define     B16MAINPL_CTRL7_gtclken_ctrl                   0x0020
    #define   LSb32MAINPL_CTRL7_gtclken_ctrl                      4
    #define   LSb16MAINPL_CTRL7_gtclken_ctrl                      4
    #define       bMAINPL_CTRL7_gtclken_ctrl                   1
    #define   MSK32MAINPL_CTRL7_gtclken_ctrl                      0x00000010

    #define     BA_MAINPL_CTRL7_idata_422_sel                  0x0020
    #define     B16MAINPL_CTRL7_idata_422_sel                  0x0020
    #define   LSb32MAINPL_CTRL7_idata_422_sel                     5
    #define   LSb16MAINPL_CTRL7_idata_422_sel                     5
    #define       bMAINPL_CTRL7_idata_422_sel                  1
    #define   MSK32MAINPL_CTRL7_idata_422_sel                     0x00000020

    #define     BA_MAINPL_CTRL7_offline_rdsel_1dscl            0x0020
    #define     B16MAINPL_CTRL7_offline_rdsel_1dscl            0x0020
    #define   LSb32MAINPL_CTRL7_offline_rdsel_1dscl               6
    #define   LSb16MAINPL_CTRL7_offline_rdsel_1dscl               6
    #define       bMAINPL_CTRL7_offline_rdsel_1dscl            1
    #define   MSK32MAINPL_CTRL7_offline_rdsel_1dscl               0x00000040

    #define     BA_MAINPL_CTRL7_main_video_wrbk                0x0020
    #define     B16MAINPL_CTRL7_main_video_wrbk                0x0020
    #define   LSb32MAINPL_CTRL7_main_video_wrbk                   7
    #define   LSb16MAINPL_CTRL7_main_video_wrbk                   7
    #define       bMAINPL_CTRL7_main_video_wrbk                1
    #define   MSK32MAINPL_CTRL7_main_video_wrbk                   0x00000080

    #define     BA_MAINPL_CTRL7_write_sel_1dscl_dram           0x0021
    #define     B16MAINPL_CTRL7_write_sel_1dscl_dram           0x0020
    #define   LSb32MAINPL_CTRL7_write_sel_1dscl_dram              8
    #define   LSb16MAINPL_CTRL7_write_sel_1dscl_dram              8
    #define       bMAINPL_CTRL7_write_sel_1dscl_dram           1
    #define   MSK32MAINPL_CTRL7_write_sel_1dscl_dram              0x00000100

    #define     BA_MAINPL_CTRL7_crop_de1_en                    0x0021
    #define     B16MAINPL_CTRL7_crop_de1_en                    0x0020
    #define   LSb32MAINPL_CTRL7_crop_de1_en                       9
    #define   LSb16MAINPL_CTRL7_crop_de1_en                       9
    #define       bMAINPL_CTRL7_crop_de1_en                    1
    #define   MSK32MAINPL_CTRL7_crop_de1_en                       0x00000200

    #define     BA_MAINPL_CTRL7_itmotop_pdwn_regs              0x0021
    #define     B16MAINPL_CTRL7_itmotop_pdwn_regs              0x0020
    #define   LSb32MAINPL_CTRL7_itmotop_pdwn_regs                 10
    #define   LSb16MAINPL_CTRL7_itmotop_pdwn_regs                 10
    #define       bMAINPL_CTRL7_itmotop_pdwn_regs              1
    #define   MSK32MAINPL_CTRL7_itmotop_pdwn_regs                 0x00000400

    #define     BA_MAINPL_CTRL7_itmotop_pdlvmc_regs            0x0021
    #define     B16MAINPL_CTRL7_itmotop_pdlvmc_regs            0x0020
    #define   LSb32MAINPL_CTRL7_itmotop_pdlvmc_regs               11
    #define   LSb16MAINPL_CTRL7_itmotop_pdlvmc_regs               11
    #define       bMAINPL_CTRL7_itmotop_pdlvmc_regs            1
    #define   MSK32MAINPL_CTRL7_itmotop_pdlvmc_regs               0x00000800

    #define     BA_MAINPL_CTRL7_itmotop_pdfvssm_regs           0x0021
    #define     B16MAINPL_CTRL7_itmotop_pdfvssm_regs           0x0020
    #define   LSb32MAINPL_CTRL7_itmotop_pdfvssm_regs              12
    #define   LSb16MAINPL_CTRL7_itmotop_pdfvssm_regs              12
    #define       bMAINPL_CTRL7_itmotop_pdfvssm_regs           1
    #define   MSK32MAINPL_CTRL7_itmotop_pdfvssm_regs              0x00001000

    #define     BA_MAINPL_CTRL7_sp_dwa_10b_normal_mode         0x0021
    #define     B16MAINPL_CTRL7_sp_dwa_10b_normal_mode         0x0020
    #define   LSb32MAINPL_CTRL7_sp_dwa_10b_normal_mode            13
    #define   LSb16MAINPL_CTRL7_sp_dwa_10b_normal_mode            13
    #define       bMAINPL_CTRL7_sp_dwa_10b_normal_mode         1
    #define   MSK32MAINPL_CTRL7_sp_dwa_10b_normal_mode            0x00002000

    #define     BA_MAINPL_CTRL7_sp_dwa_10b_inverse_mode        0x0021
    #define     B16MAINPL_CTRL7_sp_dwa_10b_inverse_mode        0x0020
    #define   LSb32MAINPL_CTRL7_sp_dwa_10b_inverse_mode           14
    #define   LSb16MAINPL_CTRL7_sp_dwa_10b_inverse_mode           14
    #define       bMAINPL_CTRL7_sp_dwa_10b_inverse_mode        1
    #define   MSK32MAINPL_CTRL7_sp_dwa_10b_inverse_mode           0x00004000

    #define     BA_MAINPL_CTRL7_yuv422_sp_en                   0x0021
    #define     B16MAINPL_CTRL7_yuv422_sp_en                   0x0020
    #define   LSb32MAINPL_CTRL7_yuv422_sp_en                      15
    #define   LSb16MAINPL_CTRL7_yuv422_sp_en                      15
    #define       bMAINPL_CTRL7_yuv422_sp_en                   1
    #define   MSK32MAINPL_CTRL7_yuv422_sp_en                      0x00008000

    #define     BA_MAINPL_CTRL7_uv_mask_val0                   0x0022
    #define     B16MAINPL_CTRL7_uv_mask_val0                   0x0022
    #define   LSb32MAINPL_CTRL7_uv_mask_val0                      16
    #define   LSb16MAINPL_CTRL7_uv_mask_val0                      0
    #define       bMAINPL_CTRL7_uv_mask_val0                   1
    #define   MSK32MAINPL_CTRL7_uv_mask_val0                      0x00010000

    #define     BA_MAINPL_CTRL7_uv_mask_val1                   0x0022
    #define     B16MAINPL_CTRL7_uv_mask_val1                   0x0022
    #define   LSb32MAINPL_CTRL7_uv_mask_val1                      17
    #define   LSb16MAINPL_CTRL7_uv_mask_val1                      1
    #define       bMAINPL_CTRL7_uv_mask_val1                   1
    #define   MSK32MAINPL_CTRL7_uv_mask_val1                      0x00020000

    #define     BA_MAINPL_CTRL7_uv_mask_disable                0x0022
    #define     B16MAINPL_CTRL7_uv_mask_disable                0x0022
    #define   LSb32MAINPL_CTRL7_uv_mask_disable                   18
    #define   LSb16MAINPL_CTRL7_uv_mask_disable                   2
    #define       bMAINPL_CTRL7_uv_mask_disable                1
    #define   MSK32MAINPL_CTRL7_uv_mask_disable                   0x00040000

    #define     BA_MAINPL_CTRL7_dvcomp_gtclk_ctrl              0x0022
    #define     B16MAINPL_CTRL7_dvcomp_gtclk_ctrl              0x0022
    #define   LSb32MAINPL_CTRL7_dvcomp_gtclk_ctrl                 19
    #define   LSb16MAINPL_CTRL7_dvcomp_gtclk_ctrl                 3
    #define       bMAINPL_CTRL7_dvcomp_gtclk_ctrl              1
    #define   MSK32MAINPL_CTRL7_dvcomp_gtclk_ctrl                 0x00080000

    #define     BA_MAINPL_CTRL7_vdcm_pdwn_regs                 0x0022
    #define     B16MAINPL_CTRL7_vdcm_pdwn_regs                 0x0022
    #define   LSb32MAINPL_CTRL7_vdcm_pdwn_regs                    20
    #define   LSb16MAINPL_CTRL7_vdcm_pdwn_regs                    4
    #define       bMAINPL_CTRL7_vdcm_pdwn_regs                 1
    #define   MSK32MAINPL_CTRL7_vdcm_pdwn_regs                    0x00100000

    #define     BA_MAINPL_CTRL7_vdcm_pdlvmc_regs               0x0022
    #define     B16MAINPL_CTRL7_vdcm_pdlvmc_regs               0x0022
    #define   LSb32MAINPL_CTRL7_vdcm_pdlvmc_regs                  21
    #define   LSb16MAINPL_CTRL7_vdcm_pdlvmc_regs                  5
    #define       bMAINPL_CTRL7_vdcm_pdlvmc_regs               1
    #define   MSK32MAINPL_CTRL7_vdcm_pdlvmc_regs                  0x00200000

    #define     BA_MAINPL_CTRL7_vdcm_pdfvssm_regs              0x0022
    #define     B16MAINPL_CTRL7_vdcm_pdfvssm_regs              0x0022
    #define   LSb32MAINPL_CTRL7_vdcm_pdfvssm_regs                 22
    #define   LSb16MAINPL_CTRL7_vdcm_pdfvssm_regs                 6
    #define       bMAINPL_CTRL7_vdcm_pdfvssm_regs              1
    #define   MSK32MAINPL_CTRL7_vdcm_pdfvssm_regs                 0x00400000

    #define     BA_MAINPL_CTRL7_vmx_pdwn_regs                  0x0022
    #define     B16MAINPL_CTRL7_vmx_pdwn_regs                  0x0022
    #define   LSb32MAINPL_CTRL7_vmx_pdwn_regs                     23
    #define   LSb16MAINPL_CTRL7_vmx_pdwn_regs                     7
    #define       bMAINPL_CTRL7_vmx_pdwn_regs                  1
    #define   MSK32MAINPL_CTRL7_vmx_pdwn_regs                     0x00800000

    #define     BA_MAINPL_CTRL7_vmx_pdlvmc_regs                0x0023
    #define     B16MAINPL_CTRL7_vmx_pdlvmc_regs                0x0022
    #define   LSb32MAINPL_CTRL7_vmx_pdlvmc_regs                   24
    #define   LSb16MAINPL_CTRL7_vmx_pdlvmc_regs                   8
    #define       bMAINPL_CTRL7_vmx_pdlvmc_regs                1
    #define   MSK32MAINPL_CTRL7_vmx_pdlvmc_regs                   0x01000000

    #define     BA_MAINPL_CTRL7_vmx_pdfvssm_regs               0x0023
    #define     B16MAINPL_CTRL7_vmx_pdfvssm_regs               0x0022
    #define   LSb32MAINPL_CTRL7_vmx_pdfvssm_regs                  25
    #define   LSb16MAINPL_CTRL7_vmx_pdfvssm_regs                  9
    #define       bMAINPL_CTRL7_vmx_pdfvssm_regs               1
    #define   MSK32MAINPL_CTRL7_vmx_pdfvssm_regs                  0x02000000

    #define     BA_MAINPL_CTRL7_hdrlut_pdwn_regs               0x0023
    #define     B16MAINPL_CTRL7_hdrlut_pdwn_regs               0x0022
    #define   LSb32MAINPL_CTRL7_hdrlut_pdwn_regs                  26
    #define   LSb16MAINPL_CTRL7_hdrlut_pdwn_regs                  10
    #define       bMAINPL_CTRL7_hdrlut_pdwn_regs               1
    #define   MSK32MAINPL_CTRL7_hdrlut_pdwn_regs                  0x04000000

    #define     BA_MAINPL_CTRL7_hdrlut_pdlvmc_regs             0x0023
    #define     B16MAINPL_CTRL7_hdrlut_pdlvmc_regs             0x0022
    #define   LSb32MAINPL_CTRL7_hdrlut_pdlvmc_regs                27
    #define   LSb16MAINPL_CTRL7_hdrlut_pdlvmc_regs                11
    #define       bMAINPL_CTRL7_hdrlut_pdlvmc_regs             1
    #define   MSK32MAINPL_CTRL7_hdrlut_pdlvmc_regs                0x08000000

    #define     BA_MAINPL_CTRL7_hdrlut_pdfvssm_regs            0x0023
    #define     B16MAINPL_CTRL7_hdrlut_pdfvssm_regs            0x0022
    #define   LSb32MAINPL_CTRL7_hdrlut_pdfvssm_regs               28
    #define   LSb16MAINPL_CTRL7_hdrlut_pdfvssm_regs               12
    #define       bMAINPL_CTRL7_hdrlut_pdfvssm_regs            1
    #define   MSK32MAINPL_CTRL7_hdrlut_pdfvssm_regs               0x10000000

    #define     BA_MAINPL_CTRL7_hdrlut_bypass                  0x0023
    #define     B16MAINPL_CTRL7_hdrlut_bypass                  0x0022
    #define   LSb32MAINPL_CTRL7_hdrlut_bypass                     29
    #define   LSb16MAINPL_CTRL7_hdrlut_bypass                     13
    #define       bMAINPL_CTRL7_hdrlut_bypass                  1
    #define   MSK32MAINPL_CTRL7_hdrlut_bypass                     0x20000000

    #define     BA_MAINPL_CTRL7_detile4k_out_wrbk_en           0x0023
    #define     B16MAINPL_CTRL7_detile4k_out_wrbk_en           0x0022
    #define   LSb32MAINPL_CTRL7_detile4k_out_wrbk_en              30
    #define   LSb16MAINPL_CTRL7_detile4k_out_wrbk_en              14
    #define       bMAINPL_CTRL7_detile4k_out_wrbk_en           1
    #define   MSK32MAINPL_CTRL7_detile4k_out_wrbk_en              0x40000000
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL8                                0x0024

    #define     BA_MAINPL_CTRL8_itmotop_frst                   0x0024
    #define     B16MAINPL_CTRL8_itmotop_frst                   0x0024
    #define   LSb32MAINPL_CTRL8_itmotop_frst                      0
    #define   LSb16MAINPL_CTRL8_itmotop_frst                      0
    #define       bMAINPL_CTRL8_itmotop_frst                   1
    #define   MSK32MAINPL_CTRL8_itmotop_frst                      0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL9                                0x0028

    #define     BA_MAINPL_CTRL9_vdcm_frst                      0x0028
    #define     B16MAINPL_CTRL9_vdcm_frst                      0x0028
    #define   LSb32MAINPL_CTRL9_vdcm_frst                         0
    #define   LSb16MAINPL_CTRL9_vdcm_frst                         0
    #define       bMAINPL_CTRL9_vdcm_frst                      1
    #define   MSK32MAINPL_CTRL9_vdcm_frst                         0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL10                               0x002C

    #define     BA_MAINPL_CTRL10_detEE_top_bypass              0x002C
    #define     B16MAINPL_CTRL10_detEE_top_bypass              0x002C
    #define   LSb32MAINPL_CTRL10_detEE_top_bypass                 0
    #define   LSb16MAINPL_CTRL10_detEE_top_bypass                 0
    #define       bMAINPL_CTRL10_detEE_top_bypass              1
    #define   MSK32MAINPL_CTRL10_detEE_top_bypass                 0x00000001

    #define     BA_MAINPL_CTRL10_eecmu_top_bypass              0x002C
    #define     B16MAINPL_CTRL10_eecmu_top_bypass              0x002C
    #define   LSb32MAINPL_CTRL10_eecmu_top_bypass                 1
    #define   LSb16MAINPL_CTRL10_eecmu_top_bypass                 1
    #define       bMAINPL_CTRL10_eecmu_top_bypass              1
    #define   MSK32MAINPL_CTRL10_eecmu_top_bypass                 0x00000002

    #define     BA_MAINPL_CTRL10_adpDetScl_bypass              0x002C
    #define     B16MAINPL_CTRL10_adpDetScl_bypass              0x002C
    #define   LSb32MAINPL_CTRL10_adpDetScl_bypass                 2
    #define   LSb16MAINPL_CTRL10_adpDetScl_bypass                 2
    #define       bMAINPL_CTRL10_adpDetScl_bypass              1
    #define   MSK32MAINPL_CTRL10_adpDetScl_bypass                 0x00000004

    #define     BA_MAINPL_CTRL10_eeTop_sel                     0x002C
    #define     B16MAINPL_CTRL10_eeTop_sel                     0x002C
    #define   LSb32MAINPL_CTRL10_eeTop_sel                        3
    #define   LSb16MAINPL_CTRL10_eeTop_sel                        3
    #define       bMAINPL_CTRL10_eeTop_sel                     1
    #define   MSK32MAINPL_CTRL10_eeTop_sel                        0x00000008

    #define     BA_MAINPL_CTRL10_detEE_top_ctrl0               0x002C
    #define     B16MAINPL_CTRL10_detEE_top_ctrl0               0x002C
    #define   LSb32MAINPL_CTRL10_detEE_top_ctrl0                  4
    #define   LSb16MAINPL_CTRL10_detEE_top_ctrl0                  4
    #define       bMAINPL_CTRL10_detEE_top_ctrl0               1
    #define   MSK32MAINPL_CTRL10_detEE_top_ctrl0                  0x00000010

    #define     BA_MAINPL_CTRL10_detEE_top_ctrl1               0x002C
    #define     B16MAINPL_CTRL10_detEE_top_ctrl1               0x002C
    #define   LSb32MAINPL_CTRL10_detEE_top_ctrl1                  5
    #define   LSb16MAINPL_CTRL10_detEE_top_ctrl1                  5
    #define       bMAINPL_CTRL10_detEE_top_ctrl1               1
    #define   MSK32MAINPL_CTRL10_detEE_top_ctrl1                  0x00000020

    #define     BA_MAINPL_CTRL10_detEE_top_ctrl2               0x002C
    #define     B16MAINPL_CTRL10_detEE_top_ctrl2               0x002C
    #define   LSb32MAINPL_CTRL10_detEE_top_ctrl2                  6
    #define   LSb16MAINPL_CTRL10_detEE_top_ctrl2                  6
    #define       bMAINPL_CTRL10_detEE_top_ctrl2               1
    #define   MSK32MAINPL_CTRL10_detEE_top_ctrl2                  0x00000040

    #define     BA_MAINPL_CTRL10_ee_cmu_sel                    0x002C
    #define     B16MAINPL_CTRL10_ee_cmu_sel                    0x002C
    #define   LSb32MAINPL_CTRL10_ee_cmu_sel                       7
    #define   LSb16MAINPL_CTRL10_ee_cmu_sel                       7
    #define       bMAINPL_CTRL10_ee_cmu_sel                    1
    #define   MSK32MAINPL_CTRL10_ee_cmu_sel                       0x00000080

    #define     BA_MAINPL_CTRL10_bl_ups420Out_sel              0x002D
    #define     B16MAINPL_CTRL10_bl_ups420Out_sel              0x002C
    #define   LSb32MAINPL_CTRL10_bl_ups420Out_sel                 8
    #define   LSb16MAINPL_CTRL10_bl_ups420Out_sel                 8
    #define       bMAINPL_CTRL10_bl_ups420Out_sel              1
    #define   MSK32MAINPL_CTRL10_bl_ups420Out_sel                 0x00000100

    #define     BA_MAINPL_CTRL10_inline_offline_eecmu_sel      0x002D
    #define     B16MAINPL_CTRL10_inline_offline_eecmu_sel      0x002C
    #define   LSb32MAINPL_CTRL10_inline_offline_eecmu_sel         9
    #define   LSb16MAINPL_CTRL10_inline_offline_eecmu_sel         9
    #define       bMAINPL_CTRL10_inline_offline_eecmu_sel      1
    #define   MSK32MAINPL_CTRL10_inline_offline_eecmu_sel         0x00000200

    #define     BA_MAINPL_CTRL10_lineDn_eecmu_En               0x002D
    #define     B16MAINPL_CTRL10_lineDn_eecmu_En               0x002C
    #define   LSb32MAINPL_CTRL10_lineDn_eecmu_En                  10
    #define   LSb16MAINPL_CTRL10_lineDn_eecmu_En                  10
    #define       bMAINPL_CTRL10_lineDn_eecmu_En               1
    #define   MSK32MAINPL_CTRL10_lineDn_eecmu_En                  0x00000400

    #define     BA_MAINPL_CTRL10_pixLineTot_eecmu              0x002D
    #define     B16MAINPL_CTRL10_pixLineTot_eecmu              0x002C
    #define   LSb32MAINPL_CTRL10_pixLineTot_eecmu                 11
    #define   LSb16MAINPL_CTRL10_pixLineTot_eecmu                 11
    #define       bMAINPL_CTRL10_pixLineTot_eecmu              12
    #define   MSK32MAINPL_CTRL10_pixLineTot_eecmu                 0x007FF800
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL11                               0x0030

    #define     BA_MAINPL_CTRL11_inpPix_tot                    0x0030
    #define     B16MAINPL_CTRL11_inpPix_tot                    0x0030
    #define   LSb32MAINPL_CTRL11_inpPix_tot                       0
    #define   LSb16MAINPL_CTRL11_inpPix_tot                       0
    #define       bMAINPL_CTRL11_inpPix_tot                    32
    #define   MSK32MAINPL_CTRL11_inpPix_tot                       0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL12                               0x0034

    #define     BA_MAINPL_CTRL12_vptop_iPixTot                 0x0034
    #define     B16MAINPL_CTRL12_vptop_iPixTot                 0x0034
    #define   LSb32MAINPL_CTRL12_vptop_iPixTot                    0
    #define   LSb16MAINPL_CTRL12_vptop_iPixTot                    0
    #define       bMAINPL_CTRL12_vptop_iPixTot                 32
    #define   MSK32MAINPL_CTRL12_vptop_iPixTot                    0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL13                               0x0038

    #define     BA_MAINPL_CTRL13_eecmu_iPixTot                 0x0038
    #define     B16MAINPL_CTRL13_eecmu_iPixTot                 0x0038
    #define   LSb32MAINPL_CTRL13_eecmu_iPixTot                    0
    #define   LSb16MAINPL_CTRL13_eecmu_iPixTot                    0
    #define       bMAINPL_CTRL13_eecmu_iPixTot                 32
    #define   MSK32MAINPL_CTRL13_eecmu_iPixTot                    0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL14                               0x003C

    #define     BA_MAINPL_CTRL14_offline_iPixTot               0x003C
    #define     B16MAINPL_CTRL14_offline_iPixTot               0x003C
    #define   LSb32MAINPL_CTRL14_offline_iPixTot                  0
    #define   LSb16MAINPL_CTRL14_offline_iPixTot                  0
    #define       bMAINPL_CTRL14_offline_iPixTot               32
    #define   MSK32MAINPL_CTRL14_offline_iPixTot                  0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_CTRL15                               0x0040

    #define     BA_MAINPL_CTRL15_dvEdrInFifo_bl_cg_ctrl        0x0040
    #define     B16MAINPL_CTRL15_dvEdrInFifo_bl_cg_ctrl        0x0040
    #define   LSb32MAINPL_CTRL15_dvEdrInFifo_bl_cg_ctrl           0
    #define   LSb16MAINPL_CTRL15_dvEdrInFifo_bl_cg_ctrl           0
    #define       bMAINPL_CTRL15_dvEdrInFifo_bl_cg_ctrl        1
    #define   MSK32MAINPL_CTRL15_dvEdrInFifo_bl_cg_ctrl           0x00000001

    #define     BA_MAINPL_CTRL15_dvEdrInFifo_el_cg_ctrl        0x0040
    #define     B16MAINPL_CTRL15_dvEdrInFifo_el_cg_ctrl        0x0040
    #define   LSb32MAINPL_CTRL15_dvEdrInFifo_el_cg_ctrl           1
    #define   LSb16MAINPL_CTRL15_dvEdrInFifo_el_cg_ctrl           1
    #define       bMAINPL_CTRL15_dvEdrInFifo_el_cg_ctrl        1
    #define   MSK32MAINPL_CTRL15_dvEdrInFifo_el_cg_ctrl           0x00000002

    #define     BA_MAINPL_CTRL15_dv_iproIFiFo_cg_ctrl          0x0040
    #define     B16MAINPL_CTRL15_dv_iproIFiFo_cg_ctrl          0x0040
    #define   LSb32MAINPL_CTRL15_dv_iproIFiFo_cg_ctrl             2
    #define   LSb16MAINPL_CTRL15_dv_iproIFiFo_cg_ctrl             2
    #define       bMAINPL_CTRL15_dv_iproIFiFo_cg_ctrl          1
    #define   MSK32MAINPL_CTRL15_dv_iproIFiFo_cg_ctrl             0x00000004

    #define     BA_MAINPL_CTRL15_mainOFifo_cg_ctrl             0x0040
    #define     B16MAINPL_CTRL15_mainOFifo_cg_ctrl             0x0040
    #define   LSb32MAINPL_CTRL15_mainOFifo_cg_ctrl                3
    #define   LSb16MAINPL_CTRL15_mainOFifo_cg_ctrl                3
    #define       bMAINPL_CTRL15_mainOFifo_cg_ctrl             1
    #define   MSK32MAINPL_CTRL15_mainOFifo_cg_ctrl                0x00000008

    #define     BA_MAINPL_CTRL15_mainScliFifo_cg_ctrl          0x0040
    #define     B16MAINPL_CTRL15_mainScliFifo_cg_ctrl          0x0040
    #define   LSb32MAINPL_CTRL15_mainScliFifo_cg_ctrl             4
    #define   LSb16MAINPL_CTRL15_mainScliFifo_cg_ctrl             4
    #define       bMAINPL_CTRL15_mainScliFifo_cg_ctrl          1
    #define   MSK32MAINPL_CTRL15_mainScliFifo_cg_ctrl             0x00000010

    #define     BA_MAINPL_CTRL15_SclOFifo_cg_ctrl              0x0040
    #define     B16MAINPL_CTRL15_SclOFifo_cg_ctrl              0x0040
    #define   LSb32MAINPL_CTRL15_SclOFifo_cg_ctrl                 5
    #define   LSb16MAINPL_CTRL15_SclOFifo_cg_ctrl                 5
    #define       bMAINPL_CTRL15_SclOFifo_cg_ctrl              1
    #define   MSK32MAINPL_CTRL15_SclOFifo_cg_ctrl                 0x00000020

    #define     BA_MAINPL_CTRL15_VmxVmIFifo_cg_ctrl            0x0040
    #define     B16MAINPL_CTRL15_VmxVmIFifo_cg_ctrl            0x0040
    #define   LSb32MAINPL_CTRL15_VmxVmIFifo_cg_ctrl               6
    #define   LSb16MAINPL_CTRL15_VmxVmIFifo_cg_ctrl               6
    #define       bMAINPL_CTRL15_VmxVmIFifo_cg_ctrl            1
    #define   MSK32MAINPL_CTRL15_VmxVmIFifo_cg_ctrl               0x00000040

    #define     BA_MAINPL_CTRL15_vptop_IFifo_cg_ctrl           0x0040
    #define     B16MAINPL_CTRL15_vptop_IFifo_cg_ctrl           0x0040
    #define   LSb32MAINPL_CTRL15_vptop_IFifo_cg_ctrl              7
    #define   LSb16MAINPL_CTRL15_vptop_IFifo_cg_ctrl              7
    #define       bMAINPL_CTRL15_vptop_IFifo_cg_ctrl           1
    #define   MSK32MAINPL_CTRL15_vptop_IFifo_cg_ctrl              0x00000080

    #define     BA_MAINPL_CTRL15_vptop_OFifo_cg_ctrl           0x0041
    #define     B16MAINPL_CTRL15_vptop_OFifo_cg_ctrl           0x0040
    #define   LSb32MAINPL_CTRL15_vptop_OFifo_cg_ctrl              8
    #define   LSb16MAINPL_CTRL15_vptop_OFifo_cg_ctrl              8
    #define       bMAINPL_CTRL15_vptop_OFifo_cg_ctrl           1
    #define   MSK32MAINPL_CTRL15_vptop_OFifo_cg_ctrl              0x00000100

    #define     BA_MAINPL_CTRL15_combo_pwr_opt_en              0x0041
    #define     B16MAINPL_CTRL15_combo_pwr_opt_en              0x0040
    #define   LSb32MAINPL_CTRL15_combo_pwr_opt_en                 9
    #define   LSb16MAINPL_CTRL15_combo_pwr_opt_en                 9
    #define       bMAINPL_CTRL15_combo_pwr_opt_en              1
    #define   MSK32MAINPL_CTRL15_combo_pwr_opt_en                 0x00000200
    ///////////////////////////////////////////////////////////
    #define     RA_MAINPL_RASTERSCAN                           0x0044

    #define     BA_MAINPL_RASTERSCAN_ovp_rd_sel_420sp          0x0044
    #define     B16MAINPL_RASTERSCAN_ovp_rd_sel_420sp          0x0044
    #define   LSb32MAINPL_RASTERSCAN_ovp_rd_sel_420sp             0
    #define   LSb16MAINPL_RASTERSCAN_ovp_rd_sel_420sp             0
    #define       bMAINPL_RASTERSCAN_ovp_rd_sel_420sp          1
    #define   MSK32MAINPL_RASTERSCAN_ovp_rd_sel_420sp             0x00000001

    #define     BA_MAINPL_RASTERSCAN_bl_rd_sel_420sp           0x0044
    #define     B16MAINPL_RASTERSCAN_bl_rd_sel_420sp           0x0044
    #define   LSb32MAINPL_RASTERSCAN_bl_rd_sel_420sp              1
    #define   LSb16MAINPL_RASTERSCAN_bl_rd_sel_420sp              1
    #define       bMAINPL_RASTERSCAN_bl_rd_sel_420sp           1
    #define   MSK32MAINPL_RASTERSCAN_bl_rd_sel_420sp              0x00000002

    #define     BA_MAINPL_RASTERSCAN_ovp_420sp_datasel         0x0044
    #define     B16MAINPL_RASTERSCAN_ovp_420sp_datasel         0x0044
    #define   LSb32MAINPL_RASTERSCAN_ovp_420sp_datasel            2
    #define   LSb16MAINPL_RASTERSCAN_ovp_420sp_datasel            2
    #define       bMAINPL_RASTERSCAN_ovp_420sp_datasel         1
    #define   MSK32MAINPL_RASTERSCAN_ovp_420sp_datasel            0x00000004

    #define     BA_MAINPL_RASTERSCAN_bl_composer_420sp         0x0044
    #define     B16MAINPL_RASTERSCAN_bl_composer_420sp         0x0044
    #define   LSb32MAINPL_RASTERSCAN_bl_composer_420sp            3
    #define   LSb16MAINPL_RASTERSCAN_bl_composer_420sp            3
    #define       bMAINPL_RASTERSCAN_bl_composer_420sp         1
    #define   MSK32MAINPL_RASTERSCAN_bl_composer_420sp            0x00000008

    #define     BA_MAINPL_RASTERSCAN_bl_composer_rScan_detile_420sp 0x0044
    #define     B16MAINPL_RASTERSCAN_bl_composer_rScan_detile_420sp 0x0044
    #define   LSb32MAINPL_RASTERSCAN_bl_composer_rScan_detile_420sp    4
    #define   LSb16MAINPL_RASTERSCAN_bl_composer_rScan_detile_420sp    4
    #define       bMAINPL_RASTERSCAN_bl_composer_rScan_detile_420sp 1
    #define   MSK32MAINPL_RASTERSCAN_bl_composer_rScan_detile_420sp    0x00000010
    ///////////////////////////////////////////////////////////

    typedef struct SIE_MAINPL {
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL0_betgCfg_rst(r32)               _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_CTRL0_betgCfg_rst(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_CTRL0_betgCfg_rst(r16)               _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL0_betgCfg_rst(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_CTRL0_betg_sref(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32MAINPL_CTRL0_betg_sref(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16MAINPL_CTRL0_betg_sref(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_CTRL0_betg_sref(r16,v)               _BFSET_(r16, 1, 1,v)

    #define   GET32MAINPL_CTRL0_memlb_cgEnb(r32)               _BFGET_(r32, 2, 2)
    #define   SET32MAINPL_CTRL0_memlb_cgEnb(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16MAINPL_CTRL0_memlb_cgEnb(r16)               _BFGET_(r16, 2, 2)
    #define   SET16MAINPL_CTRL0_memlb_cgEnb(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32MAINPL_CTRL0_memlb_mode(r32)                _BFGET_(r32, 3, 3)
    #define   SET32MAINPL_CTRL0_memlb_mode(r32,v)              _BFSET_(r32, 3, 3,v)
    #define   GET16MAINPL_CTRL0_memlb_mode(r16)                _BFGET_(r16, 3, 3)
    #define   SET16MAINPL_CTRL0_memlb_mode(r16,v)              _BFSET_(r16, 3, 3,v)

    #define   GET32MAINPL_CTRL0_tgEn_rstEn(r32)                _BFGET_(r32, 4, 4)
    #define   SET32MAINPL_CTRL0_tgEn_rstEn(r32,v)              _BFSET_(r32, 4, 4,v)
    #define   GET16MAINPL_CTRL0_tgEn_rstEn(r16)                _BFGET_(r16, 4, 4)
    #define   SET16MAINPL_CTRL0_tgEn_rstEn(r16,v)              _BFSET_(r16, 4, 4,v)

    #define   GET32MAINPL_CTRL0_crop_de2_en(r32)               _BFGET_(r32, 5, 5)
    #define   SET32MAINPL_CTRL0_crop_de2_en(r32,v)             _BFSET_(r32, 5, 5,v)
    #define   GET16MAINPL_CTRL0_crop_de2_en(r16)               _BFGET_(r16, 5, 5)
    #define   SET16MAINPL_CTRL0_crop_de2_en(r16,v)             _BFSET_(r16, 5, 5,v)

    #define   GET32MAINPL_CTRL0_dif_blk_en(r32)                _BFGET_(r32, 6, 6)
    #define   SET32MAINPL_CTRL0_dif_blk_en(r32,v)              _BFSET_(r32, 6, 6,v)
    #define   GET16MAINPL_CTRL0_dif_blk_en(r16)                _BFGET_(r16, 6, 6)
    #define   SET16MAINPL_CTRL0_dif_blk_en(r16,v)              _BFSET_(r16, 6, 6,v)

    #define   GET32MAINPL_CTRL0_cr_line_cnt(r32)               _BFGET_(r32, 9, 7)
    #define   SET32MAINPL_CTRL0_cr_line_cnt(r32,v)             _BFSET_(r32, 9, 7,v)
    #define   GET16MAINPL_CTRL0_cr_line_cnt(r16)               _BFGET_(r16, 9, 7)
    #define   SET16MAINPL_CTRL0_cr_line_cnt(r16,v)             _BFSET_(r16, 9, 7,v)

    #define   GET32MAINPL_CTRL0_tgclken_sel(r32)               _BFGET_(r32,10,10)
    #define   SET32MAINPL_CTRL0_tgclken_sel(r32,v)             _BFSET_(r32,10,10,v)
    #define   GET16MAINPL_CTRL0_tgclken_sel(r16)               _BFGET_(r16,10,10)
    #define   SET16MAINPL_CTRL0_tgclken_sel(r16,v)             _BFSET_(r16,10,10,v)

    #define   GET32MAINPL_CTRL0_clken_st_clr(r32)              _BFGET_(r32,11,11)
    #define   SET32MAINPL_CTRL0_clken_st_clr(r32,v)            _BFSET_(r32,11,11,v)
    #define   GET16MAINPL_CTRL0_clken_st_clr(r16)              _BFGET_(r16,11,11)
    #define   SET16MAINPL_CTRL0_clken_st_clr(r16,v)            _BFSET_(r16,11,11,v)

    #define   GET32MAINPL_CTRL0_vptop_tHdr_ctrl(r32)           _BFGET_(r32,12,12)
    #define   SET32MAINPL_CTRL0_vptop_tHdr_ctrl(r32,v)         _BFSET_(r32,12,12,v)
    #define   GET16MAINPL_CTRL0_vptop_tHdr_ctrl(r16)           _BFGET_(r16,12,12)
    #define   SET16MAINPL_CTRL0_vptop_tHdr_ctrl(r16,v)         _BFSET_(r16,12,12,v)

    #define   GET32MAINPL_CTRL0_fifo_sts_ctrl(r32)             _BFGET_(r32,13,13)
    #define   SET32MAINPL_CTRL0_fifo_sts_ctrl(r32,v)           _BFSET_(r32,13,13,v)
    #define   GET16MAINPL_CTRL0_fifo_sts_ctrl(r16)             _BFGET_(r16,13,13)
    #define   SET16MAINPL_CTRL0_fifo_sts_ctrl(r16,v)           _BFSET_(r16,13,13,v)

    #define   GET32MAINPL_CTRL0_db_clken_ctrl0(r32)            _BFGET_(r32,14,14)
    #define   SET32MAINPL_CTRL0_db_clken_ctrl0(r32,v)          _BFSET_(r32,14,14,v)
    #define   GET16MAINPL_CTRL0_db_clken_ctrl0(r16)            _BFGET_(r16,14,14)
    #define   SET16MAINPL_CTRL0_db_clken_ctrl0(r16,v)          _BFSET_(r16,14,14,v)

    #define   GET32MAINPL_CTRL0_fifo_full_ctrlEn(r32)          _BFGET_(r32,15,15)
    #define   SET32MAINPL_CTRL0_fifo_full_ctrlEn(r32,v)        _BFSET_(r32,15,15,v)
    #define   GET16MAINPL_CTRL0_fifo_full_ctrlEn(r16)          _BFGET_(r16,15,15)
    #define   SET16MAINPL_CTRL0_fifo_full_ctrlEn(r16,v)        _BFSET_(r16,15,15,v)

    #define   GET32MAINPL_CTRL0_memlbUPS420_cgEnb(r32)         _BFGET_(r32,16,16)
    #define   SET32MAINPL_CTRL0_memlbUPS420_cgEnb(r32,v)       _BFSET_(r32,16,16,v)
    #define   GET16MAINPL_CTRL0_memlbUPS420_cgEnb(r16)         _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL0_memlbUPS420_cgEnb(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_CTRL0_fifo_full_ctrl1(r32)           _BFGET_(r32,17,17)
    #define   SET32MAINPL_CTRL0_fifo_full_ctrl1(r32,v)         _BFSET_(r32,17,17,v)
    #define   GET16MAINPL_CTRL0_fifo_full_ctrl1(r16)           _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_CTRL0_fifo_full_ctrl1(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32MAINPL_CTRL0_fifo_full_ctrl2(r32)           _BFGET_(r32,18,18)
    #define   SET32MAINPL_CTRL0_fifo_full_ctrl2(r32,v)         _BFSET_(r32,18,18,v)
    #define   GET16MAINPL_CTRL0_fifo_full_ctrl2(r16)           _BFGET_(r16, 2, 2)
    #define   SET16MAINPL_CTRL0_fifo_full_ctrl2(r16,v)         _BFSET_(r16, 2, 2,v)

    #define   GET32MAINPL_CTRL0_vptop_fifo_rdsel(r32)          _BFGET_(r32,19,19)
    #define   SET32MAINPL_CTRL0_vptop_fifo_rdsel(r32,v)        _BFSET_(r32,19,19,v)
    #define   GET16MAINPL_CTRL0_vptop_fifo_rdsel(r16)          _BFGET_(r16, 3, 3)
    #define   SET16MAINPL_CTRL0_vptop_fifo_rdsel(r16,v)        _BFSET_(r16, 3, 3,v)

    #define   GET32MAINPL_CTRL0_memdlbUPS420_cgEnb(r32)        _BFGET_(r32,20,20)
    #define   SET32MAINPL_CTRL0_memdlbUPS420_cgEnb(r32,v)      _BFSET_(r32,20,20,v)
    #define   GET16MAINPL_CTRL0_memdlbUPS420_cgEnb(r16)        _BFGET_(r16, 4, 4)
    #define   SET16MAINPL_CTRL0_memdlbUPS420_cgEnb(r16,v)      _BFSET_(r16, 4, 4,v)

    #define   GET32MAINPL_CTRL0_fifo_full_ctrl3(r32)           _BFGET_(r32,21,21)
    #define   SET32MAINPL_CTRL0_fifo_full_ctrl3(r32,v)         _BFSET_(r32,21,21,v)
    #define   GET16MAINPL_CTRL0_fifo_full_ctrl3(r16)           _BFGET_(r16, 5, 5)
    #define   SET16MAINPL_CTRL0_fifo_full_ctrl3(r16,v)         _BFSET_(r16, 5, 5,v)

    #define   GET32MAINPL_CTRL0_fifo_full_ctrl4(r32)           _BFGET_(r32,22,22)
    #define   SET32MAINPL_CTRL0_fifo_full_ctrl4(r32,v)         _BFSET_(r32,22,22,v)
    #define   GET16MAINPL_CTRL0_fifo_full_ctrl4(r16)           _BFGET_(r16, 6, 6)
    #define   SET16MAINPL_CTRL0_fifo_full_ctrl4(r16,v)         _BFSET_(r16, 6, 6,v)

    #define     w32MAINPL_CTRL0                                {\
            UNSG32 uCTRL0_betgCfg_rst                          :  1;\
            UNSG32 uCTRL0_betg_sref                            :  1;\
            UNSG32 uCTRL0_memlb_cgEnb                          :  1;\
            UNSG32 uCTRL0_memlb_mode                           :  1;\
            UNSG32 uCTRL0_tgEn_rstEn                           :  1;\
            UNSG32 uCTRL0_crop_de2_en                          :  1;\
            UNSG32 uCTRL0_dif_blk_en                           :  1;\
            UNSG32 uCTRL0_cr_line_cnt                          :  3;\
            UNSG32 uCTRL0_tgclken_sel                          :  1;\
            UNSG32 uCTRL0_clken_st_clr                         :  1;\
            UNSG32 uCTRL0_vptop_tHdr_ctrl                      :  1;\
            UNSG32 uCTRL0_fifo_sts_ctrl                        :  1;\
            UNSG32 uCTRL0_db_clken_ctrl0                       :  1;\
            UNSG32 uCTRL0_fifo_full_ctrlEn                     :  1;\
            UNSG32 uCTRL0_memlbUPS420_cgEnb                    :  1;\
            UNSG32 uCTRL0_fifo_full_ctrl1                      :  1;\
            UNSG32 uCTRL0_fifo_full_ctrl2                      :  1;\
            UNSG32 uCTRL0_vptop_fifo_rdsel                     :  1;\
            UNSG32 uCTRL0_memdlbUPS420_cgEnb                   :  1;\
            UNSG32 uCTRL0_fifo_full_ctrl3                      :  1;\
            UNSG32 uCTRL0_fifo_full_ctrl4                      :  1;\
            UNSG32 RSVDx0_b23                                  :  9;\
          }
    union { UNSG32 u32MAINPL_CTRL0;
            struct w32MAINPL_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL1_betg_hcnt_rstval(r32)          _BFGET_(r32,12, 0)
    #define   SET32MAINPL_CTRL1_betg_hcnt_rstval(r32,v)        _BFSET_(r32,12, 0,v)
    #define   GET16MAINPL_CTRL1_betg_hcnt_rstval(r16)          _BFGET_(r16,12, 0)
    #define   SET16MAINPL_CTRL1_betg_hcnt_rstval(r16,v)        _BFSET_(r16,12, 0,v)

    #define   GET32MAINPL_CTRL1_betg_vcnt_rstval(r32)          _BFGET_(r32,24,13)
    #define   SET32MAINPL_CTRL1_betg_vcnt_rstval(r32,v)        _BFSET_(r32,24,13,v)

    #define   GET32MAINPL_CTRL1_line_dly(r32)                  _BFGET_(r32,26,25)
    #define   SET32MAINPL_CTRL1_line_dly(r32,v)                _BFSET_(r32,26,25,v)
    #define   GET16MAINPL_CTRL1_line_dly(r16)                  _BFGET_(r16,10, 9)
    #define   SET16MAINPL_CTRL1_line_dly(r16,v)                _BFSET_(r16,10, 9,v)

    #define   GET32MAINPL_CTRL1_lineCnt_R1_rstval0(r32)        _BFGET_(r32,28,27)
    #define   SET32MAINPL_CTRL1_lineCnt_R1_rstval0(r32,v)      _BFSET_(r32,28,27,v)
    #define   GET16MAINPL_CTRL1_lineCnt_R1_rstval0(r16)        _BFGET_(r16,12,11)
    #define   SET16MAINPL_CTRL1_lineCnt_R1_rstval0(r16,v)      _BFSET_(r16,12,11,v)

    #define   GET32MAINPL_CTRL1_lineCnt_R1_rstval1(r32)        _BFGET_(r32,30,29)
    #define   SET32MAINPL_CTRL1_lineCnt_R1_rstval1(r32,v)      _BFSET_(r32,30,29,v)
    #define   GET16MAINPL_CTRL1_lineCnt_R1_rstval1(r16)        _BFGET_(r16,14,13)
    #define   SET16MAINPL_CTRL1_lineCnt_R1_rstval1(r16,v)      _BFSET_(r16,14,13,v)

    #define     w32MAINPL_CTRL1                                {\
            UNSG32 uCTRL1_betg_hcnt_rstval                     : 13;\
            UNSG32 uCTRL1_betg_vcnt_rstval                     : 12;\
            UNSG32 uCTRL1_line_dly                             :  2;\
            UNSG32 uCTRL1_lineCnt_R1_rstval0                   :  2;\
            UNSG32 uCTRL1_lineCnt_R1_rstval1                   :  2;\
            UNSG32 RSVDx4_b31                                  :  1;\
          }
    union { UNSG32 u32MAINPL_CTRL1;
            struct w32MAINPL_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL2_vmxIP_fStart(r32)              _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_CTRL2_vmxIP_fStart(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_CTRL2_vmxIP_fStart(r16)              _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL2_vmxIP_fStart(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32MAINPL_CTRL2                                {\
            UNSG32 uCTRL2_vmxIP_fStart                         :  1;\
            UNSG32 RSVDx8_b1                                   : 31;\
          }
    union { UNSG32 u32MAINPL_CTRL2;
            struct w32MAINPL_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL3_inpPix_tot(r32)                _BFGET_(r32,31, 0)
    #define   SET32MAINPL_CTRL3_inpPix_tot(r32,v)              _BFSET_(r32,31, 0,v)

    #define     w32MAINPL_CTRL3                                {\
            UNSG32 uCTRL3_inpPix_tot                           : 32;\
          }
    union { UNSG32 u32MAINPL_CTRL3;
            struct w32MAINPL_CTRL3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL4_UPS420_4K_bypass(r32)          _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_CTRL4_UPS420_4K_bypass(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_CTRL4_UPS420_4K_bypass(r16)          _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL4_UPS420_4K_bypass(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_CTRL4_adpScl_bypass(r32)             _BFGET_(r32, 1, 1)
    #define   SET32MAINPL_CTRL4_adpScl_bypass(r32,v)           _BFSET_(r32, 1, 1,v)
    #define   GET16MAINPL_CTRL4_adpScl_bypass(r16)             _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_CTRL4_adpScl_bypass(r16,v)           _BFSET_(r16, 1, 1,v)

    #define   GET32MAINPL_CTRL4_bitmap40_bypass(r32)           _BFGET_(r32, 2, 2)
    #define   SET32MAINPL_CTRL4_bitmap40_bypass(r32,v)         _BFSET_(r32, 2, 2,v)
    #define   GET16MAINPL_CTRL4_bitmap40_bypass(r16)           _BFGET_(r16, 2, 2)
    #define   SET16MAINPL_CTRL4_bitmap40_bypass(r16,v)         _BFSET_(r16, 2, 2,v)

    #define   GET32MAINPL_CTRL4_vmxIP_bypass(r32)              _BFGET_(r32, 3, 3)
    #define   SET32MAINPL_CTRL4_vmxIP_bypass(r32,v)            _BFSET_(r32, 3, 3,v)
    #define   GET16MAINPL_CTRL4_vmxIP_bypass(r16)              _BFGET_(r16, 3, 3)
    #define   SET16MAINPL_CTRL4_vmxIP_bypass(r16,v)            _BFSET_(r16, 3, 3,v)

    #define   GET32MAINPL_CTRL4_UPS420_2K_bypass(r32)          _BFGET_(r32, 4, 4)
    #define   SET32MAINPL_CTRL4_UPS420_2K_bypass(r32,v)        _BFSET_(r32, 4, 4,v)
    #define   GET16MAINPL_CTRL4_UPS420_2K_bypass(r16)          _BFGET_(r16, 4, 4)
    #define   SET16MAINPL_CTRL4_UPS420_2K_bypass(r16,v)        _BFSET_(r16, 4, 4,v)

    #define   GET32MAINPL_CTRL4_UPS422_444_10B_bypass(r32)     _BFGET_(r32, 5, 5)
    #define   SET32MAINPL_CTRL4_UPS422_444_10B_bypass(r32,v)   _BFSET_(r32, 5, 5,v)
    #define   GET16MAINPL_CTRL4_UPS422_444_10B_bypass(r16)     _BFGET_(r16, 5, 5)
    #define   SET16MAINPL_CTRL4_UPS422_444_10B_bypass(r16,v)   _BFSET_(r16, 5, 5,v)

    #define   GET32MAINPL_CTRL4_UPS422_444_12B_bypass(r32)     _BFGET_(r32, 6, 6)
    #define   SET32MAINPL_CTRL4_UPS422_444_12B_bypass(r32,v)   _BFSET_(r32, 6, 6,v)
    #define   GET16MAINPL_CTRL4_UPS422_444_12B_bypass(r16)     _BFGET_(r16, 6, 6)
    #define   SET16MAINPL_CTRL4_UPS422_444_12B_bypass(r16,v)   _BFSET_(r16, 6, 6,v)

    #define   GET32MAINPL_CTRL4_CAR_bypass(r32)                _BFGET_(r32, 7, 7)
    #define   SET32MAINPL_CTRL4_CAR_bypass(r32,v)              _BFSET_(r32, 7, 7,v)
    #define   GET16MAINPL_CTRL4_CAR_bypass(r16)                _BFGET_(r16, 7, 7)
    #define   SET16MAINPL_CTRL4_CAR_bypass(r16,v)              _BFSET_(r16, 7, 7,v)

    #define   GET32MAINPL_CTRL4_tHDR_bypass(r32)               _BFGET_(r32, 8, 8)
    #define   SET32MAINPL_CTRL4_tHDR_bypass(r32,v)             _BFSET_(r32, 8, 8,v)
    #define   GET16MAINPL_CTRL4_tHDR_bypass(r16)               _BFGET_(r16, 8, 8)
    #define   SET16MAINPL_CTRL4_tHDR_bypass(r16,v)             _BFSET_(r16, 8, 8,v)

    #define   GET32MAINPL_CTRL4_DolbyEdr_bypass(r32)           _BFGET_(r32, 9, 9)
    #define   SET32MAINPL_CTRL4_DolbyEdr_bypass(r32,v)         _BFSET_(r32, 9, 9,v)
    #define   GET16MAINPL_CTRL4_DolbyEdr_bypass(r16)           _BFGET_(r16, 9, 9)
    #define   SET16MAINPL_CTRL4_DolbyEdr_bypass(r16,v)         _BFSET_(r16, 9, 9,v)

    #define   GET32MAINPL_CTRL4_inline_offline_sel(r32)        _BFGET_(r32,10,10)
    #define   SET32MAINPL_CTRL4_inline_offline_sel(r32,v)      _BFSET_(r32,10,10,v)
    #define   GET16MAINPL_CTRL4_inline_offline_sel(r16)        _BFGET_(r16,10,10)
    #define   SET16MAINPL_CTRL4_inline_offline_sel(r16,v)      _BFSET_(r16,10,10,v)

    #define   GET32MAINPL_CTRL4_tHDR_DolbyCVM_sel(r32)         _BFGET_(r32,11,11)
    #define   SET32MAINPL_CTRL4_tHDR_DolbyCVM_sel(r32,v)       _BFSET_(r32,11,11,v)
    #define   GET16MAINPL_CTRL4_tHDR_DolbyCVM_sel(r16)         _BFGET_(r16,11,11)
    #define   SET16MAINPL_CTRL4_tHDR_DolbyCVM_sel(r16,v)       _BFSET_(r16,11,11,v)

    #define   GET32MAINPL_CTRL4_dvComposer_bypass(r32)         _BFGET_(r32,12,12)
    #define   SET32MAINPL_CTRL4_dvComposer_bypass(r32,v)       _BFSET_(r32,12,12,v)
    #define   GET16MAINPL_CTRL4_dvComposer_bypass(r16)         _BFGET_(r16,12,12)
    #define   SET16MAINPL_CTRL4_dvComposer_bypass(r16,v)       _BFSET_(r16,12,12,v)

    #define   GET32MAINPL_CTRL4_dvTest_path_en(r32)            _BFGET_(r32,13,13)
    #define   SET32MAINPL_CTRL4_dvTest_path_en(r32,v)          _BFSET_(r32,13,13,v)
    #define   GET16MAINPL_CTRL4_dvTest_path_en(r16)            _BFGET_(r16,13,13)
    #define   SET16MAINPL_CTRL4_dvTest_path_en(r16,v)          _BFSET_(r16,13,13,v)

    #define   GET32MAINPL_CTRL4_scl1d_ofl_wr_en(r32)           _BFGET_(r32,14,14)
    #define   SET32MAINPL_CTRL4_scl1d_ofl_wr_en(r32,v)         _BFSET_(r32,14,14,v)
    #define   GET16MAINPL_CTRL4_scl1d_ofl_wr_en(r16)           _BFGET_(r16,14,14)
    #define   SET16MAINPL_CTRL4_scl1d_ofl_wr_en(r16,v)         _BFSET_(r16,14,14,v)

    #define   GET32MAINPL_CTRL4_dvCVM_test_en(r32)             _BFGET_(r32,15,15)
    #define   SET32MAINPL_CTRL4_dvCVM_test_en(r32,v)           _BFSET_(r32,15,15,v)
    #define   GET16MAINPL_CTRL4_dvCVM_test_en(r16)             _BFGET_(r16,15,15)
    #define   SET16MAINPL_CTRL4_dvCVM_test_en(r16,v)           _BFSET_(r16,15,15,v)

    #define   GET32MAINPL_CTRL4_scl1d_inl_ofl_en(r32)          _BFGET_(r32,16,16)
    #define   SET32MAINPL_CTRL4_scl1d_inl_ofl_en(r32,v)        _BFSET_(r32,16,16,v)
    #define   GET16MAINPL_CTRL4_scl1d_inl_ofl_en(r16)          _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL4_scl1d_inl_ofl_en(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_CTRL4_ITMO_top_bypass(r32)           _BFGET_(r32,17,17)
    #define   SET32MAINPL_CTRL4_ITMO_top_bypass(r32,v)         _BFSET_(r32,17,17,v)
    #define   GET16MAINPL_CTRL4_ITMO_top_bypass(r16)           _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_CTRL4_ITMO_top_bypass(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32MAINPL_CTRL4_ITMO_YUV444_in_sel(r32)        _BFGET_(r32,18,18)
    #define   SET32MAINPL_CTRL4_ITMO_YUV444_in_sel(r32,v)      _BFSET_(r32,18,18,v)
    #define   GET16MAINPL_CTRL4_ITMO_YUV444_in_sel(r16)        _BFGET_(r16, 2, 2)
    #define   SET16MAINPL_CTRL4_ITMO_YUV444_in_sel(r16,v)      _BFSET_(r16, 2, 2,v)

    #define   GET32MAINPL_CTRL4_NGPTVIP_bypass(r32)            _BFGET_(r32,19,19)
    #define   SET32MAINPL_CTRL4_NGPTVIP_bypass(r32,v)          _BFSET_(r32,19,19,v)
    #define   GET16MAINPL_CTRL4_NGPTVIP_bypass(r16)            _BFGET_(r16, 3, 3)
    #define   SET16MAINPL_CTRL4_NGPTVIP_bypass(r16,v)          _BFSET_(r16, 3, 3,v)

    #define   GET32MAINPL_CTRL4_VMXIP_NGPTVIP_Sel(r32)         _BFGET_(r32,20,20)
    #define   SET32MAINPL_CTRL4_VMXIP_NGPTVIP_Sel(r32,v)       _BFSET_(r32,20,20,v)
    #define   GET16MAINPL_CTRL4_VMXIP_NGPTVIP_Sel(r16)         _BFGET_(r16, 4, 4)
    #define   SET16MAINPL_CTRL4_VMXIP_NGPTVIP_Sel(r16,v)       _BFSET_(r16, 4, 4,v)

    #define   GET32MAINPL_CTRL4_vdcm_bypass(r32)               _BFGET_(r32,21,21)
    #define   SET32MAINPL_CTRL4_vdcm_bypass(r32,v)             _BFSET_(r32,21,21,v)
    #define   GET16MAINPL_CTRL4_vdcm_bypass(r16)               _BFGET_(r16, 5, 5)
    #define   SET16MAINPL_CTRL4_vdcm_bypass(r16,v)             _BFSET_(r16, 5, 5,v)

    #define   GET32MAINPL_CTRL4_vitm_vdcm_linbuff_bypass(r32)  _BFGET_(r32,22,22)
    #define   SET32MAINPL_CTRL4_vitm_vdcm_linbuff_bypass(r32,v) _BFSET_(r32,22,22,v)
    #define   GET16MAINPL_CTRL4_vitm_vdcm_linbuff_bypass(r16)  _BFGET_(r16, 6, 6)
    #define   SET16MAINPL_CTRL4_vitm_vdcm_linbuff_bypass(r16,v) _BFSET_(r16, 6, 6,v)

    #define   GET32MAINPL_CTRL4_vitm_vdcm_linbuff_sel(r32)     _BFGET_(r32,24,23)
    #define   SET32MAINPL_CTRL4_vitm_vdcm_linbuff_sel(r32,v)   _BFSET_(r32,24,23,v)
    #define   GET16MAINPL_CTRL4_vitm_vdcm_linbuff_sel(r16)     _BFGET_(r16, 8, 7)
    #define   SET16MAINPL_CTRL4_vitm_vdcm_linbuff_sel(r16,v)   _BFSET_(r16, 8, 7,v)

    #define   GET32MAINPL_CTRL4_vdcm_snr_bypass(r32)           _BFGET_(r32,25,25)
    #define   SET32MAINPL_CTRL4_vdcm_snr_bypass(r32,v)         _BFSET_(r32,25,25,v)
    #define   GET16MAINPL_CTRL4_vdcm_snr_bypass(r16)           _BFGET_(r16, 9, 9)
    #define   SET16MAINPL_CTRL4_vdcm_snr_bypass(r16,v)         _BFSET_(r16, 9, 9,v)

    #define   GET32MAINPL_CTRL4_vdcm_CRMap_bypass(r32)         _BFGET_(r32,26,26)
    #define   SET32MAINPL_CTRL4_vdcm_CRMap_bypass(r32,v)       _BFSET_(r32,26,26,v)
    #define   GET16MAINPL_CTRL4_vdcm_CRMap_bypass(r16)         _BFGET_(r16,10,10)
    #define   SET16MAINPL_CTRL4_vdcm_CRMap_bypass(r16,v)       _BFSET_(r16,10,10,v)

    #define   GET32MAINPL_CTRL4_VDCM_VITM_sel(r32)             _BFGET_(r32,27,27)
    #define   SET32MAINPL_CTRL4_VDCM_VITM_sel(r32,v)           _BFSET_(r32,27,27,v)
    #define   GET16MAINPL_CTRL4_VDCM_VITM_sel(r16)             _BFGET_(r16,11,11)
    #define   SET16MAINPL_CTRL4_VDCM_VITM_sel(r16,v)           _BFSET_(r16,11,11,v)

    #define   GET32MAINPL_CTRL4_car_pdwn(r32)                  _BFGET_(r32,28,28)
    #define   SET32MAINPL_CTRL4_car_pdwn(r32,v)                _BFSET_(r32,28,28,v)
    #define   GET16MAINPL_CTRL4_car_pdwn(r16)                  _BFGET_(r16,12,12)
    #define   SET16MAINPL_CTRL4_car_pdwn(r16,v)                _BFSET_(r16,12,12,v)

    #define   GET32MAINPL_CTRL4_car_pdlvmc(r32)                _BFGET_(r32,29,29)
    #define   SET32MAINPL_CTRL4_car_pdlvmc(r32,v)              _BFSET_(r32,29,29,v)
    #define   GET16MAINPL_CTRL4_car_pdlvmc(r16)                _BFGET_(r16,13,13)
    #define   SET16MAINPL_CTRL4_car_pdlvmc(r16,v)              _BFSET_(r16,13,13,v)

    #define   GET32MAINPL_CTRL4_car_pdfvssm(r32)               _BFGET_(r32,30,30)
    #define   SET32MAINPL_CTRL4_car_pdfvssm(r32,v)             _BFSET_(r32,30,30,v)
    #define   GET16MAINPL_CTRL4_car_pdfvssm(r16)               _BFGET_(r16,14,14)
    #define   SET16MAINPL_CTRL4_car_pdfvssm(r16,v)             _BFSET_(r16,14,14,v)

    #define   GET32MAINPL_CTRL4_car_out8b(r32)                 _BFGET_(r32,31,31)
    #define   SET32MAINPL_CTRL4_car_out8b(r32,v)               _BFSET_(r32,31,31,v)
    #define   GET16MAINPL_CTRL4_car_out8b(r16)                 _BFGET_(r16,15,15)
    #define   SET16MAINPL_CTRL4_car_out8b(r16,v)               _BFSET_(r16,15,15,v)

    #define     w32MAINPL_CTRL4                                {\
            UNSG32 uCTRL4_UPS420_4K_bypass                     :  1;\
            UNSG32 uCTRL4_adpScl_bypass                        :  1;\
            UNSG32 uCTRL4_bitmap40_bypass                      :  1;\
            UNSG32 uCTRL4_vmxIP_bypass                         :  1;\
            UNSG32 uCTRL4_UPS420_2K_bypass                     :  1;\
            UNSG32 uCTRL4_UPS422_444_10B_bypass                :  1;\
            UNSG32 uCTRL4_UPS422_444_12B_bypass                :  1;\
            UNSG32 uCTRL4_CAR_bypass                           :  1;\
            UNSG32 uCTRL4_tHDR_bypass                          :  1;\
            UNSG32 uCTRL4_DolbyEdr_bypass                      :  1;\
            UNSG32 uCTRL4_inline_offline_sel                   :  1;\
            UNSG32 uCTRL4_tHDR_DolbyCVM_sel                    :  1;\
            UNSG32 uCTRL4_dvComposer_bypass                    :  1;\
            UNSG32 uCTRL4_dvTest_path_en                       :  1;\
            UNSG32 uCTRL4_scl1d_ofl_wr_en                      :  1;\
            UNSG32 uCTRL4_dvCVM_test_en                        :  1;\
            UNSG32 uCTRL4_scl1d_inl_ofl_en                     :  1;\
            UNSG32 uCTRL4_ITMO_top_bypass                      :  1;\
            UNSG32 uCTRL4_ITMO_YUV444_in_sel                   :  1;\
            UNSG32 uCTRL4_NGPTVIP_bypass                       :  1;\
            UNSG32 uCTRL4_VMXIP_NGPTVIP_Sel                    :  1;\
            UNSG32 uCTRL4_vdcm_bypass                          :  1;\
            UNSG32 uCTRL4_vitm_vdcm_linbuff_bypass             :  1;\
            UNSG32 uCTRL4_vitm_vdcm_linbuff_sel                :  2;\
            UNSG32 uCTRL4_vdcm_snr_bypass                      :  1;\
            UNSG32 uCTRL4_vdcm_CRMap_bypass                    :  1;\
            UNSG32 uCTRL4_VDCM_VITM_sel                        :  1;\
            UNSG32 uCTRL4_car_pdwn                             :  1;\
            UNSG32 uCTRL4_car_pdlvmc                           :  1;\
            UNSG32 uCTRL4_car_pdfvssm                          :  1;\
            UNSG32 uCTRL4_car_out8b                            :  1;\
          }
    union { UNSG32 u32MAINPL_CTRL4;
            struct w32MAINPL_CTRL4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL5_tHDR_start(r32)                _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_CTRL5_tHDR_start(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_CTRL5_tHDR_start(r16)                _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL5_tHDR_start(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_CTRL5_tHDR_clear(r32)                _BFGET_(r32, 1, 1)
    #define   SET32MAINPL_CTRL5_tHDR_clear(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16MAINPL_CTRL5_tHDR_clear(r16)                _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_CTRL5_tHDR_clear(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32MAINPL_CTRL5_detEE_start(r32)               _BFGET_(r32, 2, 2)
    #define   SET32MAINPL_CTRL5_detEE_start(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16MAINPL_CTRL5_detEE_start(r16)               _BFGET_(r16, 2, 2)
    #define   SET16MAINPL_CTRL5_detEE_start(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32MAINPL_CTRL5_detEE_clear(r32)               _BFGET_(r32, 3, 3)
    #define   SET32MAINPL_CTRL5_detEE_clear(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16MAINPL_CTRL5_detEE_clear(r16)               _BFGET_(r16, 3, 3)
    #define   SET16MAINPL_CTRL5_detEE_clear(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32MAINPL_CTRL5_detEE_ofline_start(r32)        _BFGET_(r32, 4, 4)
    #define   SET32MAINPL_CTRL5_detEE_ofline_start(r32,v)      _BFSET_(r32, 4, 4,v)
    #define   GET16MAINPL_CTRL5_detEE_ofline_start(r16)        _BFGET_(r16, 4, 4)
    #define   SET16MAINPL_CTRL5_detEE_ofline_start(r16,v)      _BFSET_(r16, 4, 4,v)

    #define   GET32MAINPL_CTRL5_detEE_offline_clear(r32)       _BFGET_(r32, 5, 5)
    #define   SET32MAINPL_CTRL5_detEE_offline_clear(r32,v)     _BFSET_(r32, 5, 5,v)
    #define   GET16MAINPL_CTRL5_detEE_offline_clear(r16)       _BFGET_(r16, 5, 5)
    #define   SET16MAINPL_CTRL5_detEE_offline_clear(r16,v)     _BFSET_(r16, 5, 5,v)

    #define     w32MAINPL_CTRL5                                {\
            UNSG32 uCTRL5_tHDR_start                           :  1;\
            UNSG32 uCTRL5_tHDR_clear                           :  1;\
            UNSG32 uCTRL5_detEE_start                          :  1;\
            UNSG32 uCTRL5_detEE_clear                          :  1;\
            UNSG32 uCTRL5_detEE_ofline_start                   :  1;\
            UNSG32 uCTRL5_detEE_offline_clear                  :  1;\
            UNSG32 RSVDx14_b6                                  : 26;\
          }
    union { UNSG32 u32MAINPL_CTRL5;
            struct w32MAINPL_CTRL5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_INVSCAN_bitmap128_Rd0_en(r32)        _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_INVSCAN_bitmap128_Rd0_en(r32,v)      _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_INVSCAN_bitmap128_Rd0_en(r16)        _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_INVSCAN_bitmap128_Rd0_en(r16,v)      _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_INVSCAN_bitmap128_Rd1_en(r32)        _BFGET_(r32, 1, 1)
    #define   SET32MAINPL_INVSCAN_bitmap128_Rd1_en(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16MAINPL_INVSCAN_bitmap128_Rd1_en(r16)        _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_INVSCAN_bitmap128_Rd1_en(r16,v)      _BFSET_(r16, 1, 1,v)

    #define     w32MAINPL_INVSCAN                              {\
            UNSG32 uINVSCAN_bitmap128_Rd0_en                   :  1;\
            UNSG32 uINVSCAN_bitmap128_Rd1_en                   :  1;\
            UNSG32 RSVDx18_b2                                  : 30;\
          }
    union { UNSG32 u32MAINPL_INVSCAN;
            struct w32MAINPL_INVSCAN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL6_dvComp_start(r32)              _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_CTRL6_dvComp_start(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_CTRL6_dvComp_start(r16)              _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL6_dvComp_start(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_CTRL6_dvComp_clear(r32)              _BFGET_(r32, 1, 1)
    #define   SET32MAINPL_CTRL6_dvComp_clear(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16MAINPL_CTRL6_dvComp_clear(r16)              _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_CTRL6_dvComp_clear(r16,v)            _BFSET_(r16, 1, 1,v)

    #define     w32MAINPL_CTRL6                                {\
            UNSG32 uCTRL6_dvComp_start                         :  1;\
            UNSG32 uCTRL6_dvComp_clear                         :  1;\
            UNSG32 RSVDx1C_b2                                  : 30;\
          }
    union { UNSG32 u32MAINPL_CTRL6;
            struct w32MAINPL_CTRL6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL7_dvComp_pdwn_regs(r32)          _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_CTRL7_dvComp_pdwn_regs(r32,v)        _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_CTRL7_dvComp_pdwn_regs(r16)          _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL7_dvComp_pdwn_regs(r16,v)        _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_CTRL7_dvComp_pdlvmc_regs(r32)        _BFGET_(r32, 1, 1)
    #define   SET32MAINPL_CTRL7_dvComp_pdlvmc_regs(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16MAINPL_CTRL7_dvComp_pdlvmc_regs(r16)        _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_CTRL7_dvComp_pdlvmc_regs(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32MAINPL_CTRL7_dvComp_pdfvssm_regs(r32)       _BFGET_(r32, 2, 2)
    #define   SET32MAINPL_CTRL7_dvComp_pdfvssm_regs(r32,v)     _BFSET_(r32, 2, 2,v)
    #define   GET16MAINPL_CTRL7_dvComp_pdfvssm_regs(r16)       _BFGET_(r16, 2, 2)
    #define   SET16MAINPL_CTRL7_dvComp_pdfvssm_regs(r16,v)     _BFSET_(r16, 2, 2,v)

    #define   GET32MAINPL_CTRL7_CS(r32)                        _BFGET_(r32, 3, 3)
    #define   SET32MAINPL_CTRL7_CS(r32,v)                      _BFSET_(r32, 3, 3,v)
    #define   GET16MAINPL_CTRL7_CS(r16)                        _BFGET_(r16, 3, 3)
    #define   SET16MAINPL_CTRL7_CS(r16,v)                      _BFSET_(r16, 3, 3,v)

    #define   GET32MAINPL_CTRL7_gtclken_ctrl(r32)              _BFGET_(r32, 4, 4)
    #define   SET32MAINPL_CTRL7_gtclken_ctrl(r32,v)            _BFSET_(r32, 4, 4,v)
    #define   GET16MAINPL_CTRL7_gtclken_ctrl(r16)              _BFGET_(r16, 4, 4)
    #define   SET16MAINPL_CTRL7_gtclken_ctrl(r16,v)            _BFSET_(r16, 4, 4,v)

    #define   GET32MAINPL_CTRL7_idata_422_sel(r32)             _BFGET_(r32, 5, 5)
    #define   SET32MAINPL_CTRL7_idata_422_sel(r32,v)           _BFSET_(r32, 5, 5,v)
    #define   GET16MAINPL_CTRL7_idata_422_sel(r16)             _BFGET_(r16, 5, 5)
    #define   SET16MAINPL_CTRL7_idata_422_sel(r16,v)           _BFSET_(r16, 5, 5,v)

    #define   GET32MAINPL_CTRL7_offline_rdsel_1dscl(r32)       _BFGET_(r32, 6, 6)
    #define   SET32MAINPL_CTRL7_offline_rdsel_1dscl(r32,v)     _BFSET_(r32, 6, 6,v)
    #define   GET16MAINPL_CTRL7_offline_rdsel_1dscl(r16)       _BFGET_(r16, 6, 6)
    #define   SET16MAINPL_CTRL7_offline_rdsel_1dscl(r16,v)     _BFSET_(r16, 6, 6,v)

    #define   GET32MAINPL_CTRL7_main_video_wrbk(r32)           _BFGET_(r32, 7, 7)
    #define   SET32MAINPL_CTRL7_main_video_wrbk(r32,v)         _BFSET_(r32, 7, 7,v)
    #define   GET16MAINPL_CTRL7_main_video_wrbk(r16)           _BFGET_(r16, 7, 7)
    #define   SET16MAINPL_CTRL7_main_video_wrbk(r16,v)         _BFSET_(r16, 7, 7,v)

    #define   GET32MAINPL_CTRL7_write_sel_1dscl_dram(r32)      _BFGET_(r32, 8, 8)
    #define   SET32MAINPL_CTRL7_write_sel_1dscl_dram(r32,v)    _BFSET_(r32, 8, 8,v)
    #define   GET16MAINPL_CTRL7_write_sel_1dscl_dram(r16)      _BFGET_(r16, 8, 8)
    #define   SET16MAINPL_CTRL7_write_sel_1dscl_dram(r16,v)    _BFSET_(r16, 8, 8,v)

    #define   GET32MAINPL_CTRL7_crop_de1_en(r32)               _BFGET_(r32, 9, 9)
    #define   SET32MAINPL_CTRL7_crop_de1_en(r32,v)             _BFSET_(r32, 9, 9,v)
    #define   GET16MAINPL_CTRL7_crop_de1_en(r16)               _BFGET_(r16, 9, 9)
    #define   SET16MAINPL_CTRL7_crop_de1_en(r16,v)             _BFSET_(r16, 9, 9,v)

    #define   GET32MAINPL_CTRL7_itmotop_pdwn_regs(r32)         _BFGET_(r32,10,10)
    #define   SET32MAINPL_CTRL7_itmotop_pdwn_regs(r32,v)       _BFSET_(r32,10,10,v)
    #define   GET16MAINPL_CTRL7_itmotop_pdwn_regs(r16)         _BFGET_(r16,10,10)
    #define   SET16MAINPL_CTRL7_itmotop_pdwn_regs(r16,v)       _BFSET_(r16,10,10,v)

    #define   GET32MAINPL_CTRL7_itmotop_pdlvmc_regs(r32)       _BFGET_(r32,11,11)
    #define   SET32MAINPL_CTRL7_itmotop_pdlvmc_regs(r32,v)     _BFSET_(r32,11,11,v)
    #define   GET16MAINPL_CTRL7_itmotop_pdlvmc_regs(r16)       _BFGET_(r16,11,11)
    #define   SET16MAINPL_CTRL7_itmotop_pdlvmc_regs(r16,v)     _BFSET_(r16,11,11,v)

    #define   GET32MAINPL_CTRL7_itmotop_pdfvssm_regs(r32)      _BFGET_(r32,12,12)
    #define   SET32MAINPL_CTRL7_itmotop_pdfvssm_regs(r32,v)    _BFSET_(r32,12,12,v)
    #define   GET16MAINPL_CTRL7_itmotop_pdfvssm_regs(r16)      _BFGET_(r16,12,12)
    #define   SET16MAINPL_CTRL7_itmotop_pdfvssm_regs(r16,v)    _BFSET_(r16,12,12,v)

    #define   GET32MAINPL_CTRL7_sp_dwa_10b_normal_mode(r32)    _BFGET_(r32,13,13)
    #define   SET32MAINPL_CTRL7_sp_dwa_10b_normal_mode(r32,v)  _BFSET_(r32,13,13,v)
    #define   GET16MAINPL_CTRL7_sp_dwa_10b_normal_mode(r16)    _BFGET_(r16,13,13)
    #define   SET16MAINPL_CTRL7_sp_dwa_10b_normal_mode(r16,v)  _BFSET_(r16,13,13,v)

    #define   GET32MAINPL_CTRL7_sp_dwa_10b_inverse_mode(r32)   _BFGET_(r32,14,14)
    #define   SET32MAINPL_CTRL7_sp_dwa_10b_inverse_mode(r32,v) _BFSET_(r32,14,14,v)
    #define   GET16MAINPL_CTRL7_sp_dwa_10b_inverse_mode(r16)   _BFGET_(r16,14,14)
    #define   SET16MAINPL_CTRL7_sp_dwa_10b_inverse_mode(r16,v) _BFSET_(r16,14,14,v)

    #define   GET32MAINPL_CTRL7_yuv422_sp_en(r32)              _BFGET_(r32,15,15)
    #define   SET32MAINPL_CTRL7_yuv422_sp_en(r32,v)            _BFSET_(r32,15,15,v)
    #define   GET16MAINPL_CTRL7_yuv422_sp_en(r16)              _BFGET_(r16,15,15)
    #define   SET16MAINPL_CTRL7_yuv422_sp_en(r16,v)            _BFSET_(r16,15,15,v)

    #define   GET32MAINPL_CTRL7_uv_mask_val0(r32)              _BFGET_(r32,16,16)
    #define   SET32MAINPL_CTRL7_uv_mask_val0(r32,v)            _BFSET_(r32,16,16,v)
    #define   GET16MAINPL_CTRL7_uv_mask_val0(r16)              _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL7_uv_mask_val0(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_CTRL7_uv_mask_val1(r32)              _BFGET_(r32,17,17)
    #define   SET32MAINPL_CTRL7_uv_mask_val1(r32,v)            _BFSET_(r32,17,17,v)
    #define   GET16MAINPL_CTRL7_uv_mask_val1(r16)              _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_CTRL7_uv_mask_val1(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32MAINPL_CTRL7_uv_mask_disable(r32)           _BFGET_(r32,18,18)
    #define   SET32MAINPL_CTRL7_uv_mask_disable(r32,v)         _BFSET_(r32,18,18,v)
    #define   GET16MAINPL_CTRL7_uv_mask_disable(r16)           _BFGET_(r16, 2, 2)
    #define   SET16MAINPL_CTRL7_uv_mask_disable(r16,v)         _BFSET_(r16, 2, 2,v)

    #define   GET32MAINPL_CTRL7_dvcomp_gtclk_ctrl(r32)         _BFGET_(r32,19,19)
    #define   SET32MAINPL_CTRL7_dvcomp_gtclk_ctrl(r32,v)       _BFSET_(r32,19,19,v)
    #define   GET16MAINPL_CTRL7_dvcomp_gtclk_ctrl(r16)         _BFGET_(r16, 3, 3)
    #define   SET16MAINPL_CTRL7_dvcomp_gtclk_ctrl(r16,v)       _BFSET_(r16, 3, 3,v)

    #define   GET32MAINPL_CTRL7_vdcm_pdwn_regs(r32)            _BFGET_(r32,20,20)
    #define   SET32MAINPL_CTRL7_vdcm_pdwn_regs(r32,v)          _BFSET_(r32,20,20,v)
    #define   GET16MAINPL_CTRL7_vdcm_pdwn_regs(r16)            _BFGET_(r16, 4, 4)
    #define   SET16MAINPL_CTRL7_vdcm_pdwn_regs(r16,v)          _BFSET_(r16, 4, 4,v)

    #define   GET32MAINPL_CTRL7_vdcm_pdlvmc_regs(r32)          _BFGET_(r32,21,21)
    #define   SET32MAINPL_CTRL7_vdcm_pdlvmc_regs(r32,v)        _BFSET_(r32,21,21,v)
    #define   GET16MAINPL_CTRL7_vdcm_pdlvmc_regs(r16)          _BFGET_(r16, 5, 5)
    #define   SET16MAINPL_CTRL7_vdcm_pdlvmc_regs(r16,v)        _BFSET_(r16, 5, 5,v)

    #define   GET32MAINPL_CTRL7_vdcm_pdfvssm_regs(r32)         _BFGET_(r32,22,22)
    #define   SET32MAINPL_CTRL7_vdcm_pdfvssm_regs(r32,v)       _BFSET_(r32,22,22,v)
    #define   GET16MAINPL_CTRL7_vdcm_pdfvssm_regs(r16)         _BFGET_(r16, 6, 6)
    #define   SET16MAINPL_CTRL7_vdcm_pdfvssm_regs(r16,v)       _BFSET_(r16, 6, 6,v)

    #define   GET32MAINPL_CTRL7_vmx_pdwn_regs(r32)             _BFGET_(r32,23,23)
    #define   SET32MAINPL_CTRL7_vmx_pdwn_regs(r32,v)           _BFSET_(r32,23,23,v)
    #define   GET16MAINPL_CTRL7_vmx_pdwn_regs(r16)             _BFGET_(r16, 7, 7)
    #define   SET16MAINPL_CTRL7_vmx_pdwn_regs(r16,v)           _BFSET_(r16, 7, 7,v)

    #define   GET32MAINPL_CTRL7_vmx_pdlvmc_regs(r32)           _BFGET_(r32,24,24)
    #define   SET32MAINPL_CTRL7_vmx_pdlvmc_regs(r32,v)         _BFSET_(r32,24,24,v)
    #define   GET16MAINPL_CTRL7_vmx_pdlvmc_regs(r16)           _BFGET_(r16, 8, 8)
    #define   SET16MAINPL_CTRL7_vmx_pdlvmc_regs(r16,v)         _BFSET_(r16, 8, 8,v)

    #define   GET32MAINPL_CTRL7_vmx_pdfvssm_regs(r32)          _BFGET_(r32,25,25)
    #define   SET32MAINPL_CTRL7_vmx_pdfvssm_regs(r32,v)        _BFSET_(r32,25,25,v)
    #define   GET16MAINPL_CTRL7_vmx_pdfvssm_regs(r16)          _BFGET_(r16, 9, 9)
    #define   SET16MAINPL_CTRL7_vmx_pdfvssm_regs(r16,v)        _BFSET_(r16, 9, 9,v)

    #define   GET32MAINPL_CTRL7_hdrlut_pdwn_regs(r32)          _BFGET_(r32,26,26)
    #define   SET32MAINPL_CTRL7_hdrlut_pdwn_regs(r32,v)        _BFSET_(r32,26,26,v)
    #define   GET16MAINPL_CTRL7_hdrlut_pdwn_regs(r16)          _BFGET_(r16,10,10)
    #define   SET16MAINPL_CTRL7_hdrlut_pdwn_regs(r16,v)        _BFSET_(r16,10,10,v)

    #define   GET32MAINPL_CTRL7_hdrlut_pdlvmc_regs(r32)        _BFGET_(r32,27,27)
    #define   SET32MAINPL_CTRL7_hdrlut_pdlvmc_regs(r32,v)      _BFSET_(r32,27,27,v)
    #define   GET16MAINPL_CTRL7_hdrlut_pdlvmc_regs(r16)        _BFGET_(r16,11,11)
    #define   SET16MAINPL_CTRL7_hdrlut_pdlvmc_regs(r16,v)      _BFSET_(r16,11,11,v)

    #define   GET32MAINPL_CTRL7_hdrlut_pdfvssm_regs(r32)       _BFGET_(r32,28,28)
    #define   SET32MAINPL_CTRL7_hdrlut_pdfvssm_regs(r32,v)     _BFSET_(r32,28,28,v)
    #define   GET16MAINPL_CTRL7_hdrlut_pdfvssm_regs(r16)       _BFGET_(r16,12,12)
    #define   SET16MAINPL_CTRL7_hdrlut_pdfvssm_regs(r16,v)     _BFSET_(r16,12,12,v)

    #define   GET32MAINPL_CTRL7_hdrlut_bypass(r32)             _BFGET_(r32,29,29)
    #define   SET32MAINPL_CTRL7_hdrlut_bypass(r32,v)           _BFSET_(r32,29,29,v)
    #define   GET16MAINPL_CTRL7_hdrlut_bypass(r16)             _BFGET_(r16,13,13)
    #define   SET16MAINPL_CTRL7_hdrlut_bypass(r16,v)           _BFSET_(r16,13,13,v)

    #define   GET32MAINPL_CTRL7_detile4k_out_wrbk_en(r32)      _BFGET_(r32,30,30)
    #define   SET32MAINPL_CTRL7_detile4k_out_wrbk_en(r32,v)    _BFSET_(r32,30,30,v)
    #define   GET16MAINPL_CTRL7_detile4k_out_wrbk_en(r16)      _BFGET_(r16,14,14)
    #define   SET16MAINPL_CTRL7_detile4k_out_wrbk_en(r16,v)    _BFSET_(r16,14,14,v)

    #define     w32MAINPL_CTRL7                                {\
            UNSG32 uCTRL7_dvComp_pdwn_regs                     :  1;\
            UNSG32 uCTRL7_dvComp_pdlvmc_regs                   :  1;\
            UNSG32 uCTRL7_dvComp_pdfvssm_regs                  :  1;\
            UNSG32 uCTRL7_CS                                   :  1;\
            UNSG32 uCTRL7_gtclken_ctrl                         :  1;\
            UNSG32 uCTRL7_idata_422_sel                        :  1;\
            UNSG32 uCTRL7_offline_rdsel_1dscl                  :  1;\
            UNSG32 uCTRL7_main_video_wrbk                      :  1;\
            UNSG32 uCTRL7_write_sel_1dscl_dram                 :  1;\
            UNSG32 uCTRL7_crop_de1_en                          :  1;\
            UNSG32 uCTRL7_itmotop_pdwn_regs                    :  1;\
            UNSG32 uCTRL7_itmotop_pdlvmc_regs                  :  1;\
            UNSG32 uCTRL7_itmotop_pdfvssm_regs                 :  1;\
            UNSG32 uCTRL7_sp_dwa_10b_normal_mode               :  1;\
            UNSG32 uCTRL7_sp_dwa_10b_inverse_mode              :  1;\
            UNSG32 uCTRL7_yuv422_sp_en                         :  1;\
            UNSG32 uCTRL7_uv_mask_val0                         :  1;\
            UNSG32 uCTRL7_uv_mask_val1                         :  1;\
            UNSG32 uCTRL7_uv_mask_disable                      :  1;\
            UNSG32 uCTRL7_dvcomp_gtclk_ctrl                    :  1;\
            UNSG32 uCTRL7_vdcm_pdwn_regs                       :  1;\
            UNSG32 uCTRL7_vdcm_pdlvmc_regs                     :  1;\
            UNSG32 uCTRL7_vdcm_pdfvssm_regs                    :  1;\
            UNSG32 uCTRL7_vmx_pdwn_regs                        :  1;\
            UNSG32 uCTRL7_vmx_pdlvmc_regs                      :  1;\
            UNSG32 uCTRL7_vmx_pdfvssm_regs                     :  1;\
            UNSG32 uCTRL7_hdrlut_pdwn_regs                     :  1;\
            UNSG32 uCTRL7_hdrlut_pdlvmc_regs                   :  1;\
            UNSG32 uCTRL7_hdrlut_pdfvssm_regs                  :  1;\
            UNSG32 uCTRL7_hdrlut_bypass                        :  1;\
            UNSG32 uCTRL7_detile4k_out_wrbk_en                 :  1;\
            UNSG32 RSVDx20_b31                                 :  1;\
          }
    union { UNSG32 u32MAINPL_CTRL7;
            struct w32MAINPL_CTRL7;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL8_itmotop_frst(r32)              _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_CTRL8_itmotop_frst(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_CTRL8_itmotop_frst(r16)              _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL8_itmotop_frst(r16,v)            _BFSET_(r16, 0, 0,v)

    #define     w32MAINPL_CTRL8                                {\
            UNSG32 uCTRL8_itmotop_frst                         :  1;\
            UNSG32 RSVDx24_b1                                  : 31;\
          }
    union { UNSG32 u32MAINPL_CTRL8;
            struct w32MAINPL_CTRL8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL9_vdcm_frst(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_CTRL9_vdcm_frst(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_CTRL9_vdcm_frst(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL9_vdcm_frst(r16,v)               _BFSET_(r16, 0, 0,v)

    #define     w32MAINPL_CTRL9                                {\
            UNSG32 uCTRL9_vdcm_frst                            :  1;\
            UNSG32 RSVDx28_b1                                  : 31;\
          }
    union { UNSG32 u32MAINPL_CTRL9;
            struct w32MAINPL_CTRL9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL10_detEE_top_bypass(r32)         _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_CTRL10_detEE_top_bypass(r32,v)       _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_CTRL10_detEE_top_bypass(r16)         _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL10_detEE_top_bypass(r16,v)       _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_CTRL10_eecmu_top_bypass(r32)         _BFGET_(r32, 1, 1)
    #define   SET32MAINPL_CTRL10_eecmu_top_bypass(r32,v)       _BFSET_(r32, 1, 1,v)
    #define   GET16MAINPL_CTRL10_eecmu_top_bypass(r16)         _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_CTRL10_eecmu_top_bypass(r16,v)       _BFSET_(r16, 1, 1,v)

    #define   GET32MAINPL_CTRL10_adpDetScl_bypass(r32)         _BFGET_(r32, 2, 2)
    #define   SET32MAINPL_CTRL10_adpDetScl_bypass(r32,v)       _BFSET_(r32, 2, 2,v)
    #define   GET16MAINPL_CTRL10_adpDetScl_bypass(r16)         _BFGET_(r16, 2, 2)
    #define   SET16MAINPL_CTRL10_adpDetScl_bypass(r16,v)       _BFSET_(r16, 2, 2,v)

    #define   GET32MAINPL_CTRL10_eeTop_sel(r32)                _BFGET_(r32, 3, 3)
    #define   SET32MAINPL_CTRL10_eeTop_sel(r32,v)              _BFSET_(r32, 3, 3,v)
    #define   GET16MAINPL_CTRL10_eeTop_sel(r16)                _BFGET_(r16, 3, 3)
    #define   SET16MAINPL_CTRL10_eeTop_sel(r16,v)              _BFSET_(r16, 3, 3,v)

    #define   GET32MAINPL_CTRL10_detEE_top_ctrl0(r32)          _BFGET_(r32, 4, 4)
    #define   SET32MAINPL_CTRL10_detEE_top_ctrl0(r32,v)        _BFSET_(r32, 4, 4,v)
    #define   GET16MAINPL_CTRL10_detEE_top_ctrl0(r16)          _BFGET_(r16, 4, 4)
    #define   SET16MAINPL_CTRL10_detEE_top_ctrl0(r16,v)        _BFSET_(r16, 4, 4,v)

    #define   GET32MAINPL_CTRL10_detEE_top_ctrl1(r32)          _BFGET_(r32, 5, 5)
    #define   SET32MAINPL_CTRL10_detEE_top_ctrl1(r32,v)        _BFSET_(r32, 5, 5,v)
    #define   GET16MAINPL_CTRL10_detEE_top_ctrl1(r16)          _BFGET_(r16, 5, 5)
    #define   SET16MAINPL_CTRL10_detEE_top_ctrl1(r16,v)        _BFSET_(r16, 5, 5,v)

    #define   GET32MAINPL_CTRL10_detEE_top_ctrl2(r32)          _BFGET_(r32, 6, 6)
    #define   SET32MAINPL_CTRL10_detEE_top_ctrl2(r32,v)        _BFSET_(r32, 6, 6,v)
    #define   GET16MAINPL_CTRL10_detEE_top_ctrl2(r16)          _BFGET_(r16, 6, 6)
    #define   SET16MAINPL_CTRL10_detEE_top_ctrl2(r16,v)        _BFSET_(r16, 6, 6,v)

    #define   GET32MAINPL_CTRL10_ee_cmu_sel(r32)               _BFGET_(r32, 7, 7)
    #define   SET32MAINPL_CTRL10_ee_cmu_sel(r32,v)             _BFSET_(r32, 7, 7,v)
    #define   GET16MAINPL_CTRL10_ee_cmu_sel(r16)               _BFGET_(r16, 7, 7)
    #define   SET16MAINPL_CTRL10_ee_cmu_sel(r16,v)             _BFSET_(r16, 7, 7,v)

    #define   GET32MAINPL_CTRL10_bl_ups420Out_sel(r32)         _BFGET_(r32, 8, 8)
    #define   SET32MAINPL_CTRL10_bl_ups420Out_sel(r32,v)       _BFSET_(r32, 8, 8,v)
    #define   GET16MAINPL_CTRL10_bl_ups420Out_sel(r16)         _BFGET_(r16, 8, 8)
    #define   SET16MAINPL_CTRL10_bl_ups420Out_sel(r16,v)       _BFSET_(r16, 8, 8,v)

    #define   GET32MAINPL_CTRL10_inline_offline_eecmu_sel(r32) _BFGET_(r32, 9, 9)
    #define   SET32MAINPL_CTRL10_inline_offline_eecmu_sel(r32,v) _BFSET_(r32, 9, 9,v)
    #define   GET16MAINPL_CTRL10_inline_offline_eecmu_sel(r16) _BFGET_(r16, 9, 9)
    #define   SET16MAINPL_CTRL10_inline_offline_eecmu_sel(r16,v) _BFSET_(r16, 9, 9,v)

    #define   GET32MAINPL_CTRL10_lineDn_eecmu_En(r32)          _BFGET_(r32,10,10)
    #define   SET32MAINPL_CTRL10_lineDn_eecmu_En(r32,v)        _BFSET_(r32,10,10,v)
    #define   GET16MAINPL_CTRL10_lineDn_eecmu_En(r16)          _BFGET_(r16,10,10)
    #define   SET16MAINPL_CTRL10_lineDn_eecmu_En(r16,v)        _BFSET_(r16,10,10,v)

    #define   GET32MAINPL_CTRL10_pixLineTot_eecmu(r32)         _BFGET_(r32,22,11)
    #define   SET32MAINPL_CTRL10_pixLineTot_eecmu(r32,v)       _BFSET_(r32,22,11,v)

    #define     w32MAINPL_CTRL10                               {\
            UNSG32 uCTRL10_detEE_top_bypass                    :  1;\
            UNSG32 uCTRL10_eecmu_top_bypass                    :  1;\
            UNSG32 uCTRL10_adpDetScl_bypass                    :  1;\
            UNSG32 uCTRL10_eeTop_sel                           :  1;\
            UNSG32 uCTRL10_detEE_top_ctrl0                     :  1;\
            UNSG32 uCTRL10_detEE_top_ctrl1                     :  1;\
            UNSG32 uCTRL10_detEE_top_ctrl2                     :  1;\
            UNSG32 uCTRL10_ee_cmu_sel                          :  1;\
            UNSG32 uCTRL10_bl_ups420Out_sel                    :  1;\
            UNSG32 uCTRL10_inline_offline_eecmu_sel            :  1;\
            UNSG32 uCTRL10_lineDn_eecmu_En                     :  1;\
            UNSG32 uCTRL10_pixLineTot_eecmu                    : 12;\
            UNSG32 RSVDx2C_b23                                 :  9;\
          }
    union { UNSG32 u32MAINPL_CTRL10;
            struct w32MAINPL_CTRL10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL11_inpPix_tot(r32)               _BFGET_(r32,31, 0)
    #define   SET32MAINPL_CTRL11_inpPix_tot(r32,v)             _BFSET_(r32,31, 0,v)

    #define     w32MAINPL_CTRL11                               {\
            UNSG32 uCTRL11_inpPix_tot                          : 32;\
          }
    union { UNSG32 u32MAINPL_CTRL11;
            struct w32MAINPL_CTRL11;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL12_vptop_iPixTot(r32)            _BFGET_(r32,31, 0)
    #define   SET32MAINPL_CTRL12_vptop_iPixTot(r32,v)          _BFSET_(r32,31, 0,v)

    #define     w32MAINPL_CTRL12                               {\
            UNSG32 uCTRL12_vptop_iPixTot                       : 32;\
          }
    union { UNSG32 u32MAINPL_CTRL12;
            struct w32MAINPL_CTRL12;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL13_eecmu_iPixTot(r32)            _BFGET_(r32,31, 0)
    #define   SET32MAINPL_CTRL13_eecmu_iPixTot(r32,v)          _BFSET_(r32,31, 0,v)

    #define     w32MAINPL_CTRL13                               {\
            UNSG32 uCTRL13_eecmu_iPixTot                       : 32;\
          }
    union { UNSG32 u32MAINPL_CTRL13;
            struct w32MAINPL_CTRL13;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL14_offline_iPixTot(r32)          _BFGET_(r32,31, 0)
    #define   SET32MAINPL_CTRL14_offline_iPixTot(r32,v)        _BFSET_(r32,31, 0,v)

    #define     w32MAINPL_CTRL14                               {\
            UNSG32 uCTRL14_offline_iPixTot                     : 32;\
          }
    union { UNSG32 u32MAINPL_CTRL14;
            struct w32MAINPL_CTRL14;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_CTRL15_dvEdrInFifo_bl_cg_ctrl(r32)   _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_CTRL15_dvEdrInFifo_bl_cg_ctrl(r32,v) _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_CTRL15_dvEdrInFifo_bl_cg_ctrl(r16)   _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_CTRL15_dvEdrInFifo_bl_cg_ctrl(r16,v) _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_CTRL15_dvEdrInFifo_el_cg_ctrl(r32)   _BFGET_(r32, 1, 1)
    #define   SET32MAINPL_CTRL15_dvEdrInFifo_el_cg_ctrl(r32,v) _BFSET_(r32, 1, 1,v)
    #define   GET16MAINPL_CTRL15_dvEdrInFifo_el_cg_ctrl(r16)   _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_CTRL15_dvEdrInFifo_el_cg_ctrl(r16,v) _BFSET_(r16, 1, 1,v)

    #define   GET32MAINPL_CTRL15_dv_iproIFiFo_cg_ctrl(r32)     _BFGET_(r32, 2, 2)
    #define   SET32MAINPL_CTRL15_dv_iproIFiFo_cg_ctrl(r32,v)   _BFSET_(r32, 2, 2,v)
    #define   GET16MAINPL_CTRL15_dv_iproIFiFo_cg_ctrl(r16)     _BFGET_(r16, 2, 2)
    #define   SET16MAINPL_CTRL15_dv_iproIFiFo_cg_ctrl(r16,v)   _BFSET_(r16, 2, 2,v)

    #define   GET32MAINPL_CTRL15_mainOFifo_cg_ctrl(r32)        _BFGET_(r32, 3, 3)
    #define   SET32MAINPL_CTRL15_mainOFifo_cg_ctrl(r32,v)      _BFSET_(r32, 3, 3,v)
    #define   GET16MAINPL_CTRL15_mainOFifo_cg_ctrl(r16)        _BFGET_(r16, 3, 3)
    #define   SET16MAINPL_CTRL15_mainOFifo_cg_ctrl(r16,v)      _BFSET_(r16, 3, 3,v)

    #define   GET32MAINPL_CTRL15_mainScliFifo_cg_ctrl(r32)     _BFGET_(r32, 4, 4)
    #define   SET32MAINPL_CTRL15_mainScliFifo_cg_ctrl(r32,v)   _BFSET_(r32, 4, 4,v)
    #define   GET16MAINPL_CTRL15_mainScliFifo_cg_ctrl(r16)     _BFGET_(r16, 4, 4)
    #define   SET16MAINPL_CTRL15_mainScliFifo_cg_ctrl(r16,v)   _BFSET_(r16, 4, 4,v)

    #define   GET32MAINPL_CTRL15_SclOFifo_cg_ctrl(r32)         _BFGET_(r32, 5, 5)
    #define   SET32MAINPL_CTRL15_SclOFifo_cg_ctrl(r32,v)       _BFSET_(r32, 5, 5,v)
    #define   GET16MAINPL_CTRL15_SclOFifo_cg_ctrl(r16)         _BFGET_(r16, 5, 5)
    #define   SET16MAINPL_CTRL15_SclOFifo_cg_ctrl(r16,v)       _BFSET_(r16, 5, 5,v)

    #define   GET32MAINPL_CTRL15_VmxVmIFifo_cg_ctrl(r32)       _BFGET_(r32, 6, 6)
    #define   SET32MAINPL_CTRL15_VmxVmIFifo_cg_ctrl(r32,v)     _BFSET_(r32, 6, 6,v)
    #define   GET16MAINPL_CTRL15_VmxVmIFifo_cg_ctrl(r16)       _BFGET_(r16, 6, 6)
    #define   SET16MAINPL_CTRL15_VmxVmIFifo_cg_ctrl(r16,v)     _BFSET_(r16, 6, 6,v)

    #define   GET32MAINPL_CTRL15_vptop_IFifo_cg_ctrl(r32)      _BFGET_(r32, 7, 7)
    #define   SET32MAINPL_CTRL15_vptop_IFifo_cg_ctrl(r32,v)    _BFSET_(r32, 7, 7,v)
    #define   GET16MAINPL_CTRL15_vptop_IFifo_cg_ctrl(r16)      _BFGET_(r16, 7, 7)
    #define   SET16MAINPL_CTRL15_vptop_IFifo_cg_ctrl(r16,v)    _BFSET_(r16, 7, 7,v)

    #define   GET32MAINPL_CTRL15_vptop_OFifo_cg_ctrl(r32)      _BFGET_(r32, 8, 8)
    #define   SET32MAINPL_CTRL15_vptop_OFifo_cg_ctrl(r32,v)    _BFSET_(r32, 8, 8,v)
    #define   GET16MAINPL_CTRL15_vptop_OFifo_cg_ctrl(r16)      _BFGET_(r16, 8, 8)
    #define   SET16MAINPL_CTRL15_vptop_OFifo_cg_ctrl(r16,v)    _BFSET_(r16, 8, 8,v)

    #define   GET32MAINPL_CTRL15_combo_pwr_opt_en(r32)         _BFGET_(r32, 9, 9)
    #define   SET32MAINPL_CTRL15_combo_pwr_opt_en(r32,v)       _BFSET_(r32, 9, 9,v)
    #define   GET16MAINPL_CTRL15_combo_pwr_opt_en(r16)         _BFGET_(r16, 9, 9)
    #define   SET16MAINPL_CTRL15_combo_pwr_opt_en(r16,v)       _BFSET_(r16, 9, 9,v)

    #define     w32MAINPL_CTRL15                               {\
            UNSG32 uCTRL15_dvEdrInFifo_bl_cg_ctrl              :  1;\
            UNSG32 uCTRL15_dvEdrInFifo_el_cg_ctrl              :  1;\
            UNSG32 uCTRL15_dv_iproIFiFo_cg_ctrl                :  1;\
            UNSG32 uCTRL15_mainOFifo_cg_ctrl                   :  1;\
            UNSG32 uCTRL15_mainScliFifo_cg_ctrl                :  1;\
            UNSG32 uCTRL15_SclOFifo_cg_ctrl                    :  1;\
            UNSG32 uCTRL15_VmxVmIFifo_cg_ctrl                  :  1;\
            UNSG32 uCTRL15_vptop_IFifo_cg_ctrl                 :  1;\
            UNSG32 uCTRL15_vptop_OFifo_cg_ctrl                 :  1;\
            UNSG32 uCTRL15_combo_pwr_opt_en                    :  1;\
            UNSG32 RSVDx40_b10                                 : 22;\
          }
    union { UNSG32 u32MAINPL_CTRL15;
            struct w32MAINPL_CTRL15;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32MAINPL_RASTERSCAN_ovp_rd_sel_420sp(r32)     _BFGET_(r32, 0, 0)
    #define   SET32MAINPL_RASTERSCAN_ovp_rd_sel_420sp(r32,v)   _BFSET_(r32, 0, 0,v)
    #define   GET16MAINPL_RASTERSCAN_ovp_rd_sel_420sp(r16)     _BFGET_(r16, 0, 0)
    #define   SET16MAINPL_RASTERSCAN_ovp_rd_sel_420sp(r16,v)   _BFSET_(r16, 0, 0,v)

    #define   GET32MAINPL_RASTERSCAN_bl_rd_sel_420sp(r32)      _BFGET_(r32, 1, 1)
    #define   SET32MAINPL_RASTERSCAN_bl_rd_sel_420sp(r32,v)    _BFSET_(r32, 1, 1,v)
    #define   GET16MAINPL_RASTERSCAN_bl_rd_sel_420sp(r16)      _BFGET_(r16, 1, 1)
    #define   SET16MAINPL_RASTERSCAN_bl_rd_sel_420sp(r16,v)    _BFSET_(r16, 1, 1,v)

    #define   GET32MAINPL_RASTERSCAN_ovp_420sp_datasel(r32)    _BFGET_(r32, 2, 2)
    #define   SET32MAINPL_RASTERSCAN_ovp_420sp_datasel(r32,v)  _BFSET_(r32, 2, 2,v)
    #define   GET16MAINPL_RASTERSCAN_ovp_420sp_datasel(r16)    _BFGET_(r16, 2, 2)
    #define   SET16MAINPL_RASTERSCAN_ovp_420sp_datasel(r16,v)  _BFSET_(r16, 2, 2,v)

    #define   GET32MAINPL_RASTERSCAN_bl_composer_420sp(r32)    _BFGET_(r32, 3, 3)
    #define   SET32MAINPL_RASTERSCAN_bl_composer_420sp(r32,v)  _BFSET_(r32, 3, 3,v)
    #define   GET16MAINPL_RASTERSCAN_bl_composer_420sp(r16)    _BFGET_(r16, 3, 3)
    #define   SET16MAINPL_RASTERSCAN_bl_composer_420sp(r16,v)  _BFSET_(r16, 3, 3,v)

    #define   GET32MAINPL_RASTERSCAN_bl_composer_rScan_detile_420sp(r32) _BFGET_(r32, 4, 4)
    #define   SET32MAINPL_RASTERSCAN_bl_composer_rScan_detile_420sp(r32,v) _BFSET_(r32, 4, 4,v)
    #define   GET16MAINPL_RASTERSCAN_bl_composer_rScan_detile_420sp(r16) _BFGET_(r16, 4, 4)
    #define   SET16MAINPL_RASTERSCAN_bl_composer_rScan_detile_420sp(r16,v) _BFSET_(r16, 4, 4,v)

    #define     w32MAINPL_RASTERSCAN                           {\
            UNSG32 uRASTERSCAN_ovp_rd_sel_420sp                :  1;\
            UNSG32 uRASTERSCAN_bl_rd_sel_420sp                 :  1;\
            UNSG32 uRASTERSCAN_ovp_420sp_datasel               :  1;\
            UNSG32 uRASTERSCAN_bl_composer_420sp               :  1;\
            UNSG32 uRASTERSCAN_bl_composer_rScan_detile_420sp  :  1;\
            UNSG32 RSVDx44_b5                                  : 27;\
          }
    union { UNSG32 u32MAINPL_RASTERSCAN;
            struct w32MAINPL_RASTERSCAN;
          };
    ///////////////////////////////////////////////////////////
    } SIE_MAINPL;

    typedef union  T32MAINPL_CTRL0
          { UNSG32 u32;
            struct w32MAINPL_CTRL0;
                 } T32MAINPL_CTRL0;
    typedef union  T32MAINPL_CTRL1
          { UNSG32 u32;
            struct w32MAINPL_CTRL1;
                 } T32MAINPL_CTRL1;
    typedef union  T32MAINPL_CTRL2
          { UNSG32 u32;
            struct w32MAINPL_CTRL2;
                 } T32MAINPL_CTRL2;
    typedef union  T32MAINPL_CTRL3
          { UNSG32 u32;
            struct w32MAINPL_CTRL3;
                 } T32MAINPL_CTRL3;
    typedef union  T32MAINPL_CTRL4
          { UNSG32 u32;
            struct w32MAINPL_CTRL4;
                 } T32MAINPL_CTRL4;
    typedef union  T32MAINPL_CTRL5
          { UNSG32 u32;
            struct w32MAINPL_CTRL5;
                 } T32MAINPL_CTRL5;
    typedef union  T32MAINPL_INVSCAN
          { UNSG32 u32;
            struct w32MAINPL_INVSCAN;
                 } T32MAINPL_INVSCAN;
    typedef union  T32MAINPL_CTRL6
          { UNSG32 u32;
            struct w32MAINPL_CTRL6;
                 } T32MAINPL_CTRL6;
    typedef union  T32MAINPL_CTRL7
          { UNSG32 u32;
            struct w32MAINPL_CTRL7;
                 } T32MAINPL_CTRL7;
    typedef union  T32MAINPL_CTRL8
          { UNSG32 u32;
            struct w32MAINPL_CTRL8;
                 } T32MAINPL_CTRL8;
    typedef union  T32MAINPL_CTRL9
          { UNSG32 u32;
            struct w32MAINPL_CTRL9;
                 } T32MAINPL_CTRL9;
    typedef union  T32MAINPL_CTRL10
          { UNSG32 u32;
            struct w32MAINPL_CTRL10;
                 } T32MAINPL_CTRL10;
    typedef union  T32MAINPL_CTRL11
          { UNSG32 u32;
            struct w32MAINPL_CTRL11;
                 } T32MAINPL_CTRL11;
    typedef union  T32MAINPL_CTRL12
          { UNSG32 u32;
            struct w32MAINPL_CTRL12;
                 } T32MAINPL_CTRL12;
    typedef union  T32MAINPL_CTRL13
          { UNSG32 u32;
            struct w32MAINPL_CTRL13;
                 } T32MAINPL_CTRL13;
    typedef union  T32MAINPL_CTRL14
          { UNSG32 u32;
            struct w32MAINPL_CTRL14;
                 } T32MAINPL_CTRL14;
    typedef union  T32MAINPL_CTRL15
          { UNSG32 u32;
            struct w32MAINPL_CTRL15;
                 } T32MAINPL_CTRL15;
    typedef union  T32MAINPL_RASTERSCAN
          { UNSG32 u32;
            struct w32MAINPL_RASTERSCAN;
                 } T32MAINPL_RASTERSCAN;
    ///////////////////////////////////////////////////////////

    typedef union  TMAINPL_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL0;
                   };
                 } TMAINPL_CTRL0;
    typedef union  TMAINPL_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL1;
                   };
                 } TMAINPL_CTRL1;
    typedef union  TMAINPL_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL2;
                   };
                 } TMAINPL_CTRL2;
    typedef union  TMAINPL_CTRL3
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL3;
                   };
                 } TMAINPL_CTRL3;
    typedef union  TMAINPL_CTRL4
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL4;
                   };
                 } TMAINPL_CTRL4;
    typedef union  TMAINPL_CTRL5
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL5;
                   };
                 } TMAINPL_CTRL5;
    typedef union  TMAINPL_INVSCAN
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_INVSCAN;
                   };
                 } TMAINPL_INVSCAN;
    typedef union  TMAINPL_CTRL6
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL6;
                   };
                 } TMAINPL_CTRL6;
    typedef union  TMAINPL_CTRL7
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL7;
                   };
                 } TMAINPL_CTRL7;
    typedef union  TMAINPL_CTRL8
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL8;
                   };
                 } TMAINPL_CTRL8;
    typedef union  TMAINPL_CTRL9
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL9;
                   };
                 } TMAINPL_CTRL9;
    typedef union  TMAINPL_CTRL10
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL10;
                   };
                 } TMAINPL_CTRL10;
    typedef union  TMAINPL_CTRL11
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL11;
                   };
                 } TMAINPL_CTRL11;
    typedef union  TMAINPL_CTRL12
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL12;
                   };
                 } TMAINPL_CTRL12;
    typedef union  TMAINPL_CTRL13
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL13;
                   };
                 } TMAINPL_CTRL13;
    typedef union  TMAINPL_CTRL14
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL14;
                   };
                 } TMAINPL_CTRL14;
    typedef union  TMAINPL_CTRL15
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_CTRL15;
                   };
                 } TMAINPL_CTRL15;
    typedef union  TMAINPL_RASTERSCAN
          { UNSG32 u32[1];
            struct {
            struct w32MAINPL_RASTERSCAN;
                   };
                 } TMAINPL_RASTERSCAN;

    ///////////////////////////////////////////////////////////
     SIGN32 MAINPL_drvrd(SIE_MAINPL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 MAINPL_drvwr(SIE_MAINPL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void MAINPL_reset(SIE_MAINPL *p);
     SIGN32 MAINPL_cmp  (SIE_MAINPL *p, SIE_MAINPL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define MAINPL_check(p,pie,pfx,hLOG) MAINPL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define MAINPL_print(p,    pfx,hLOG) MAINPL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: MAINPL
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE OVL                                      (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 SENSE_CTRL           (P)
///               %unsigned 7  sense_ctrl0               0x0
///                                    ###
///                                    * Bit[0] Controls the nature of alpha for pl-1 (main's active)
///                                    * 0: alpha blending equation is => (1-w) * B + w*F
///                                    * 1: alpha blending equation is => w*B + (1-w)*F
///                                    * Similarly, other bits control their respective planes.
///                                    * Bit[1] for PIP/gfx0 active
///                                    * Bit[2] for gfx1 active
///                                    ###
///               %unsigned 7  sense_ctrl1               0x0
///                                    ###
///                                    * Bit[0] Controls the nature of alpha for pl-5 (main's border)
///                                    * 0: alpha blending equation is => (1-w) * B + w*F
///                                    * 1: alpha blending equation is => w*B + (1-w)*F
///                                    * Similarly, other bits control their respective planes.
///                                    * Bit[1] for PIP/gfx0 active
///                                    * Bit[2] for gfx1 active
///                                    ###
///               %%        18         # Stuffing bits...
///     @ 0x00004 ALPHA_CTRL           (P)
///               %unsigned 2  pl3_alpctrl0              0x2
///                                    ###
///                                    * 01: Alpha value for pip/gfx0 selected from most significant byte of data input
///                                    * 10: Alpha value for pip/gfx0 selected from 2nd byte form least significant byte of data input
///                                    * Other values : User defined value through pl3_alpctrl1
///                                    ###
///               %unsigned 12 pl3_alpctrl1              0x0
///                                    ###
///                                    * User defined Alpha value for pip/gfx0
///                                    ###
///               %unsigned 2  pl4_alpctrl0              0x2
///                                    ###
///                                    * 01: Alpha value for gfx1 selected from most significant byte of data input
///                                    * 10: Alpha value for gfx1 selected from 2nd byte form least significant byte of data input
///                                    * Other values : User defined value through pl4_alpctrl1
///                                    ###
///               %unsigned 12 pl4_alpctrl1              0x0
///                                    ###
///                                    * User defined Alpha value for pip/gfx1
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00008 ALPHA0               (P)
///               %unsigned 12 pl1_alpha                 0x7FF
///                                    ###
///                                    * Blending factors for main plane active
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x0000C ALP_UD               (P)
///               %unsigned 12 pl5_al_ud                 0x0
///                                    ###
///                                    * User defined Alpha value for main plane border
///                                    ###
///               %unsigned 12 pl6_al_ud                 0x0
///                                    ###
///                                    * User defined Alpha value for pip/gfx0 plane border
///                                    ###
///               %%        8          # Stuffing bits...
///     # 0x00010 ALP_UD1              
///               %unsigned 12 pl7_al_ud                 0x0
///                                    ###
///                                    * User defined Alpha value for pip/gfx1 plane border
///                                    ###
///               %%        20         # Stuffing bits...
///     @ 0x00014 LAY                  (P)
///               %unsigned 8  lay12                     0x10
///                                    ###
///                                    * The Layer registers indicate the priority of blending the sources. The lower the layer number, lower the priority
///                                    * [2:0]: 000 : Plane 1 (main) is selected in Layer 1
///                                    * 001 : Plane 2 (pip/gfx0) is selected in Layer 1
///                                    * 010 : Plane 3 (gfx1) is selected in Layer 1
///                                    * [6:4]: 000: Plane 1 (main) is selected in Layer 2
///                                    * 001 : Plane 2 (pip/gfx0)is selected in Layer 2
///                                    * 010 : Plane 3 (gfx1) is selected in Layer 2
///                                    ###
///               %unsigned 8  lay34                     0x2
///                                    ###
///                                    * The Layer registers indicate the priority of blending the sources. The lower the layer number, lower the priority
///                                    * [2:0]: 000 : Plane 1 (main) is selected in Layer 3
///                                    * 001 : Plane 2 (pip/gfx0)is selected in Layer 3
///                                    * 010 : Plane 3 (gfx1) is selected in Layer 3
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x00018 FIX                  (P)
///               %unsigned 24 fix                       0x0
///                                    ###
///                                    * Fixed color for Base Plane border
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x0001C FIX0                 (P)
///               %unsigned 24 fix0                      0x0
///                                    ###
///                                    * Fixed color for Base Plane active
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00020 FIX1                 (P)
///               %unsigned 24 fix1                      0x0
///                                    ###
///                                    * Fixed color for Plane 1 (Main Plane) border
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00024 FIX2                 (P)
///               %unsigned 24 fix2                      0x0
///                                    ###
///                                    * Fixed color for Plane 2 (PIP/Graphics-0 Plane)
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x00028 FIX3                 (P)
///               %unsigned 24 fix3                      0x0
///                                    ###
///                                    * Fixed color for Plane 3 (Graphics-1 Plane)
///                                    ###
///               %%        8          # Stuffing bits...
///     @ 0x0002C CTRL                 (P)
///               %unsigned 2  ctrl                      0x0
///                                    ###
///                                    * [0] : 0 : Normal mode
///                                    *         1 : Matte mode
///                                    * [1] : 0 : YUV Domain
///                                    * 1 : RGB Domain
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00030 APM                  (P)
///               %unsigned 1  plane15_en                0x0
///               %unsigned 1  plane26_en                0x0
///               %unsigned 1  plane37_en                0x0
///                                    ###
///                                    * Alpha pre-multiplied enables for different planes. Enabled only for Normal Mode. Must be disabled when Matte Mode.
///                                    ###
///               %%        29         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      52B, bits:     231b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_OVL
#define h_OVL (){}

    #define     RA_OVL_SENSE_CTRL                              0x0000

    #define     BA_OVL_SENSE_CTRL_sense_ctrl0                  0x0000
    #define     B16OVL_SENSE_CTRL_sense_ctrl0                  0x0000
    #define   LSb32OVL_SENSE_CTRL_sense_ctrl0                     0
    #define   LSb16OVL_SENSE_CTRL_sense_ctrl0                     0
    #define       bOVL_SENSE_CTRL_sense_ctrl0                  7
    #define   MSK32OVL_SENSE_CTRL_sense_ctrl0                     0x0000007F

    #define     BA_OVL_SENSE_CTRL_sense_ctrl1                  0x0000
    #define     B16OVL_SENSE_CTRL_sense_ctrl1                  0x0000
    #define   LSb32OVL_SENSE_CTRL_sense_ctrl1                     7
    #define   LSb16OVL_SENSE_CTRL_sense_ctrl1                     7
    #define       bOVL_SENSE_CTRL_sense_ctrl1                  7
    #define   MSK32OVL_SENSE_CTRL_sense_ctrl1                     0x00003F80
    ///////////////////////////////////////////////////////////
    #define     RA_OVL_ALPHA_CTRL                              0x0004

    #define     BA_OVL_ALPHA_CTRL_pl3_alpctrl0                 0x0004
    #define     B16OVL_ALPHA_CTRL_pl3_alpctrl0                 0x0004
    #define   LSb32OVL_ALPHA_CTRL_pl3_alpctrl0                    0
    #define   LSb16OVL_ALPHA_CTRL_pl3_alpctrl0                    0
    #define       bOVL_ALPHA_CTRL_pl3_alpctrl0                 2
    #define   MSK32OVL_ALPHA_CTRL_pl3_alpctrl0                    0x00000003

    #define     BA_OVL_ALPHA_CTRL_pl3_alpctrl1                 0x0004
    #define     B16OVL_ALPHA_CTRL_pl3_alpctrl1                 0x0004
    #define   LSb32OVL_ALPHA_CTRL_pl3_alpctrl1                    2
    #define   LSb16OVL_ALPHA_CTRL_pl3_alpctrl1                    2
    #define       bOVL_ALPHA_CTRL_pl3_alpctrl1                 12
    #define   MSK32OVL_ALPHA_CTRL_pl3_alpctrl1                    0x00003FFC

    #define     BA_OVL_ALPHA_CTRL_pl4_alpctrl0                 0x0005
    #define     B16OVL_ALPHA_CTRL_pl4_alpctrl0                 0x0004
    #define   LSb32OVL_ALPHA_CTRL_pl4_alpctrl0                    14
    #define   LSb16OVL_ALPHA_CTRL_pl4_alpctrl0                    14
    #define       bOVL_ALPHA_CTRL_pl4_alpctrl0                 2
    #define   MSK32OVL_ALPHA_CTRL_pl4_alpctrl0                    0x0000C000

    #define     BA_OVL_ALPHA_CTRL_pl4_alpctrl1                 0x0006
    #define     B16OVL_ALPHA_CTRL_pl4_alpctrl1                 0x0006
    #define   LSb32OVL_ALPHA_CTRL_pl4_alpctrl1                    16
    #define   LSb16OVL_ALPHA_CTRL_pl4_alpctrl1                    0
    #define       bOVL_ALPHA_CTRL_pl4_alpctrl1                 12
    #define   MSK32OVL_ALPHA_CTRL_pl4_alpctrl1                    0x0FFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_OVL_ALPHA0                                  0x0008

    #define     BA_OVL_ALPHA0_pl1_alpha                        0x0008
    #define     B16OVL_ALPHA0_pl1_alpha                        0x0008
    #define   LSb32OVL_ALPHA0_pl1_alpha                           0
    #define   LSb16OVL_ALPHA0_pl1_alpha                           0
    #define       bOVL_ALPHA0_pl1_alpha                        12
    #define   MSK32OVL_ALPHA0_pl1_alpha                           0x00000FFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVL_ALP_UD                                  0x000C

    #define     BA_OVL_ALP_UD_pl5_al_ud                        0x000C
    #define     B16OVL_ALP_UD_pl5_al_ud                        0x000C
    #define   LSb32OVL_ALP_UD_pl5_al_ud                           0
    #define   LSb16OVL_ALP_UD_pl5_al_ud                           0
    #define       bOVL_ALP_UD_pl5_al_ud                        12
    #define   MSK32OVL_ALP_UD_pl5_al_ud                           0x00000FFF

    #define     BA_OVL_ALP_UD_pl6_al_ud                        0x000D
    #define     B16OVL_ALP_UD_pl6_al_ud                        0x000C
    #define   LSb32OVL_ALP_UD_pl6_al_ud                           12
    #define   LSb16OVL_ALP_UD_pl6_al_ud                           12
    #define       bOVL_ALP_UD_pl6_al_ud                        12
    #define   MSK32OVL_ALP_UD_pl6_al_ud                           0x00FFF000

    #define     RA_OVL_ALP_UD1                                 0x0010

    #define     BA_OVL_ALP_UD_pl7_al_ud                        0x0010
    #define     B16OVL_ALP_UD_pl7_al_ud                        0x0010
    #define   LSb32OVL_ALP_UD_pl7_al_ud                           0
    #define   LSb16OVL_ALP_UD_pl7_al_ud                           0
    #define       bOVL_ALP_UD_pl7_al_ud                        12
    #define   MSK32OVL_ALP_UD_pl7_al_ud                           0x00000FFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVL_LAY                                     0x0014

    #define     BA_OVL_LAY_lay12                               0x0014
    #define     B16OVL_LAY_lay12                               0x0014
    #define   LSb32OVL_LAY_lay12                                  0
    #define   LSb16OVL_LAY_lay12                                  0
    #define       bOVL_LAY_lay12                               8
    #define   MSK32OVL_LAY_lay12                                  0x000000FF

    #define     BA_OVL_LAY_lay34                               0x0015
    #define     B16OVL_LAY_lay34                               0x0014
    #define   LSb32OVL_LAY_lay34                                  8
    #define   LSb16OVL_LAY_lay34                                  8
    #define       bOVL_LAY_lay34                               8
    #define   MSK32OVL_LAY_lay34                                  0x0000FF00
    ///////////////////////////////////////////////////////////
    #define     RA_OVL_FIX                                     0x0018

    #define     BA_OVL_FIX_fix                                 0x0018
    #define     B16OVL_FIX_fix                                 0x0018
    #define   LSb32OVL_FIX_fix                                    0
    #define   LSb16OVL_FIX_fix                                    0
    #define       bOVL_FIX_fix                                 24
    #define   MSK32OVL_FIX_fix                                    0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVL_FIX0                                    0x001C

    #define     BA_OVL_FIX0_fix0                               0x001C
    #define     B16OVL_FIX0_fix0                               0x001C
    #define   LSb32OVL_FIX0_fix0                                  0
    #define   LSb16OVL_FIX0_fix0                                  0
    #define       bOVL_FIX0_fix0                               24
    #define   MSK32OVL_FIX0_fix0                                  0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVL_FIX1                                    0x0020

    #define     BA_OVL_FIX1_fix1                               0x0020
    #define     B16OVL_FIX1_fix1                               0x0020
    #define   LSb32OVL_FIX1_fix1                                  0
    #define   LSb16OVL_FIX1_fix1                                  0
    #define       bOVL_FIX1_fix1                               24
    #define   MSK32OVL_FIX1_fix1                                  0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVL_FIX2                                    0x0024

    #define     BA_OVL_FIX2_fix2                               0x0024
    #define     B16OVL_FIX2_fix2                               0x0024
    #define   LSb32OVL_FIX2_fix2                                  0
    #define   LSb16OVL_FIX2_fix2                                  0
    #define       bOVL_FIX2_fix2                               24
    #define   MSK32OVL_FIX2_fix2                                  0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVL_FIX3                                    0x0028

    #define     BA_OVL_FIX3_fix3                               0x0028
    #define     B16OVL_FIX3_fix3                               0x0028
    #define   LSb32OVL_FIX3_fix3                                  0
    #define   LSb16OVL_FIX3_fix3                                  0
    #define       bOVL_FIX3_fix3                               24
    #define   MSK32OVL_FIX3_fix3                                  0x00FFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OVL_CTRL                                    0x002C

    #define     BA_OVL_CTRL_ctrl                               0x002C
    #define     B16OVL_CTRL_ctrl                               0x002C
    #define   LSb32OVL_CTRL_ctrl                                  0
    #define   LSb16OVL_CTRL_ctrl                                  0
    #define       bOVL_CTRL_ctrl                               2
    #define   MSK32OVL_CTRL_ctrl                                  0x00000003
    ///////////////////////////////////////////////////////////
    #define     RA_OVL_APM                                     0x0030

    #define     BA_OVL_APM_plane15_en                          0x0030
    #define     B16OVL_APM_plane15_en                          0x0030
    #define   LSb32OVL_APM_plane15_en                             0
    #define   LSb16OVL_APM_plane15_en                             0
    #define       bOVL_APM_plane15_en                          1
    #define   MSK32OVL_APM_plane15_en                             0x00000001

    #define     BA_OVL_APM_plane26_en                          0x0030
    #define     B16OVL_APM_plane26_en                          0x0030
    #define   LSb32OVL_APM_plane26_en                             1
    #define   LSb16OVL_APM_plane26_en                             1
    #define       bOVL_APM_plane26_en                          1
    #define   MSK32OVL_APM_plane26_en                             0x00000002

    #define     BA_OVL_APM_plane37_en                          0x0030
    #define     B16OVL_APM_plane37_en                          0x0030
    #define   LSb32OVL_APM_plane37_en                             2
    #define   LSb16OVL_APM_plane37_en                             2
    #define       bOVL_APM_plane37_en                          1
    #define   MSK32OVL_APM_plane37_en                             0x00000004
    ///////////////////////////////////////////////////////////

    typedef struct SIE_OVL {
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_SENSE_CTRL_sense_ctrl0(r32)             _BFGET_(r32, 6, 0)
    #define   SET32OVL_SENSE_CTRL_sense_ctrl0(r32,v)           _BFSET_(r32, 6, 0,v)
    #define   GET16OVL_SENSE_CTRL_sense_ctrl0(r16)             _BFGET_(r16, 6, 0)
    #define   SET16OVL_SENSE_CTRL_sense_ctrl0(r16,v)           _BFSET_(r16, 6, 0,v)

    #define   GET32OVL_SENSE_CTRL_sense_ctrl1(r32)             _BFGET_(r32,13, 7)
    #define   SET32OVL_SENSE_CTRL_sense_ctrl1(r32,v)           _BFSET_(r32,13, 7,v)
    #define   GET16OVL_SENSE_CTRL_sense_ctrl1(r16)             _BFGET_(r16,13, 7)
    #define   SET16OVL_SENSE_CTRL_sense_ctrl1(r16,v)           _BFSET_(r16,13, 7,v)

    #define     w32OVL_SENSE_CTRL                              {\
            UNSG32 uSENSE_CTRL_sense_ctrl0                     :  7;\
            UNSG32 uSENSE_CTRL_sense_ctrl1                     :  7;\
            UNSG32 RSVDx0_b14                                  : 18;\
          }
    union { UNSG32 u32OVL_SENSE_CTRL;
            struct w32OVL_SENSE_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_ALPHA_CTRL_pl3_alpctrl0(r32)            _BFGET_(r32, 1, 0)
    #define   SET32OVL_ALPHA_CTRL_pl3_alpctrl0(r32,v)          _BFSET_(r32, 1, 0,v)
    #define   GET16OVL_ALPHA_CTRL_pl3_alpctrl0(r16)            _BFGET_(r16, 1, 0)
    #define   SET16OVL_ALPHA_CTRL_pl3_alpctrl0(r16,v)          _BFSET_(r16, 1, 0,v)

    #define   GET32OVL_ALPHA_CTRL_pl3_alpctrl1(r32)            _BFGET_(r32,13, 2)
    #define   SET32OVL_ALPHA_CTRL_pl3_alpctrl1(r32,v)          _BFSET_(r32,13, 2,v)
    #define   GET16OVL_ALPHA_CTRL_pl3_alpctrl1(r16)            _BFGET_(r16,13, 2)
    #define   SET16OVL_ALPHA_CTRL_pl3_alpctrl1(r16,v)          _BFSET_(r16,13, 2,v)

    #define   GET32OVL_ALPHA_CTRL_pl4_alpctrl0(r32)            _BFGET_(r32,15,14)
    #define   SET32OVL_ALPHA_CTRL_pl4_alpctrl0(r32,v)          _BFSET_(r32,15,14,v)
    #define   GET16OVL_ALPHA_CTRL_pl4_alpctrl0(r16)            _BFGET_(r16,15,14)
    #define   SET16OVL_ALPHA_CTRL_pl4_alpctrl0(r16,v)          _BFSET_(r16,15,14,v)

    #define   GET32OVL_ALPHA_CTRL_pl4_alpctrl1(r32)            _BFGET_(r32,27,16)
    #define   SET32OVL_ALPHA_CTRL_pl4_alpctrl1(r32,v)          _BFSET_(r32,27,16,v)
    #define   GET16OVL_ALPHA_CTRL_pl4_alpctrl1(r16)            _BFGET_(r16,11, 0)
    #define   SET16OVL_ALPHA_CTRL_pl4_alpctrl1(r16,v)          _BFSET_(r16,11, 0,v)

    #define     w32OVL_ALPHA_CTRL                              {\
            UNSG32 uALPHA_CTRL_pl3_alpctrl0                    :  2;\
            UNSG32 uALPHA_CTRL_pl3_alpctrl1                    : 12;\
            UNSG32 uALPHA_CTRL_pl4_alpctrl0                    :  2;\
            UNSG32 uALPHA_CTRL_pl4_alpctrl1                    : 12;\
            UNSG32 RSVDx4_b28                                  :  4;\
          }
    union { UNSG32 u32OVL_ALPHA_CTRL;
            struct w32OVL_ALPHA_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_ALPHA0_pl1_alpha(r32)                   _BFGET_(r32,11, 0)
    #define   SET32OVL_ALPHA0_pl1_alpha(r32,v)                 _BFSET_(r32,11, 0,v)
    #define   GET16OVL_ALPHA0_pl1_alpha(r16)                   _BFGET_(r16,11, 0)
    #define   SET16OVL_ALPHA0_pl1_alpha(r16,v)                 _BFSET_(r16,11, 0,v)

    #define     w32OVL_ALPHA0                                  {\
            UNSG32 uALPHA0_pl1_alpha                           : 12;\
            UNSG32 RSVDx8_b12                                  : 20;\
          }
    union { UNSG32 u32OVL_ALPHA0;
            struct w32OVL_ALPHA0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_ALP_UD_pl5_al_ud(r32)                   _BFGET_(r32,11, 0)
    #define   SET32OVL_ALP_UD_pl5_al_ud(r32,v)                 _BFSET_(r32,11, 0,v)
    #define   GET16OVL_ALP_UD_pl5_al_ud(r16)                   _BFGET_(r16,11, 0)
    #define   SET16OVL_ALP_UD_pl5_al_ud(r16,v)                 _BFSET_(r16,11, 0,v)

    #define   GET32OVL_ALP_UD_pl6_al_ud(r32)                   _BFGET_(r32,23,12)
    #define   SET32OVL_ALP_UD_pl6_al_ud(r32,v)                 _BFSET_(r32,23,12,v)

    #define     w32OVL_ALP_UD                                  {\
            UNSG32 uALP_UD_pl5_al_ud                           : 12;\
            UNSG32 uALP_UD_pl6_al_ud                           : 12;\
            UNSG32 RSVDxC_b24                                  :  8;\
          }
    union { UNSG32 u32OVL_ALP_UD;
            struct w32OVL_ALP_UD;
          };
    #define   GET32OVL_ALP_UD_pl7_al_ud(r32)                   _BFGET_(r32,11, 0)
    #define   SET32OVL_ALP_UD_pl7_al_ud(r32,v)                 _BFSET_(r32,11, 0,v)
    #define   GET16OVL_ALP_UD_pl7_al_ud(r16)                   _BFGET_(r16,11, 0)
    #define   SET16OVL_ALP_UD_pl7_al_ud(r16,v)                 _BFSET_(r16,11, 0,v)

    #define     w32OVL_ALP_UD1                                 {\
            UNSG32 uALP_UD_pl7_al_ud                           : 12;\
            UNSG32 RSVDx10_b12                                 : 20;\
          }
    union { UNSG32 u32OVL_ALP_UD1;
            struct w32OVL_ALP_UD1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_LAY_lay12(r32)                          _BFGET_(r32, 7, 0)
    #define   SET32OVL_LAY_lay12(r32,v)                        _BFSET_(r32, 7, 0,v)
    #define   GET16OVL_LAY_lay12(r16)                          _BFGET_(r16, 7, 0)
    #define   SET16OVL_LAY_lay12(r16,v)                        _BFSET_(r16, 7, 0,v)

    #define   GET32OVL_LAY_lay34(r32)                          _BFGET_(r32,15, 8)
    #define   SET32OVL_LAY_lay34(r32,v)                        _BFSET_(r32,15, 8,v)
    #define   GET16OVL_LAY_lay34(r16)                          _BFGET_(r16,15, 8)
    #define   SET16OVL_LAY_lay34(r16,v)                        _BFSET_(r16,15, 8,v)

    #define     w32OVL_LAY                                     {\
            UNSG32 uLAY_lay12                                  :  8;\
            UNSG32 uLAY_lay34                                  :  8;\
            UNSG32 RSVDx14_b16                                 : 16;\
          }
    union { UNSG32 u32OVL_LAY;
            struct w32OVL_LAY;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_FIX_fix(r32)                            _BFGET_(r32,23, 0)
    #define   SET32OVL_FIX_fix(r32,v)                          _BFSET_(r32,23, 0,v)

    #define     w32OVL_FIX                                     {\
            UNSG32 uFIX_fix                                    : 24;\
            UNSG32 RSVDx18_b24                                 :  8;\
          }
    union { UNSG32 u32OVL_FIX;
            struct w32OVL_FIX;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_FIX0_fix0(r32)                          _BFGET_(r32,23, 0)
    #define   SET32OVL_FIX0_fix0(r32,v)                        _BFSET_(r32,23, 0,v)

    #define     w32OVL_FIX0                                    {\
            UNSG32 uFIX0_fix0                                  : 24;\
            UNSG32 RSVDx1C_b24                                 :  8;\
          }
    union { UNSG32 u32OVL_FIX0;
            struct w32OVL_FIX0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_FIX1_fix1(r32)                          _BFGET_(r32,23, 0)
    #define   SET32OVL_FIX1_fix1(r32,v)                        _BFSET_(r32,23, 0,v)

    #define     w32OVL_FIX1                                    {\
            UNSG32 uFIX1_fix1                                  : 24;\
            UNSG32 RSVDx20_b24                                 :  8;\
          }
    union { UNSG32 u32OVL_FIX1;
            struct w32OVL_FIX1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_FIX2_fix2(r32)                          _BFGET_(r32,23, 0)
    #define   SET32OVL_FIX2_fix2(r32,v)                        _BFSET_(r32,23, 0,v)

    #define     w32OVL_FIX2                                    {\
            UNSG32 uFIX2_fix2                                  : 24;\
            UNSG32 RSVDx24_b24                                 :  8;\
          }
    union { UNSG32 u32OVL_FIX2;
            struct w32OVL_FIX2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_FIX3_fix3(r32)                          _BFGET_(r32,23, 0)
    #define   SET32OVL_FIX3_fix3(r32,v)                        _BFSET_(r32,23, 0,v)

    #define     w32OVL_FIX3                                    {\
            UNSG32 uFIX3_fix3                                  : 24;\
            UNSG32 RSVDx28_b24                                 :  8;\
          }
    union { UNSG32 u32OVL_FIX3;
            struct w32OVL_FIX3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_CTRL_ctrl(r32)                          _BFGET_(r32, 1, 0)
    #define   SET32OVL_CTRL_ctrl(r32,v)                        _BFSET_(r32, 1, 0,v)
    #define   GET16OVL_CTRL_ctrl(r16)                          _BFGET_(r16, 1, 0)
    #define   SET16OVL_CTRL_ctrl(r16,v)                        _BFSET_(r16, 1, 0,v)

    #define     w32OVL_CTRL                                    {\
            UNSG32 uCTRL_ctrl                                  :  2;\
            UNSG32 RSVDx2C_b2                                  : 30;\
          }
    union { UNSG32 u32OVL_CTRL;
            struct w32OVL_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OVL_APM_plane15_en(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32OVL_APM_plane15_en(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16OVL_APM_plane15_en(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16OVL_APM_plane15_en(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32OVL_APM_plane26_en(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32OVL_APM_plane26_en(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16OVL_APM_plane26_en(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16OVL_APM_plane26_en(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define   GET32OVL_APM_plane37_en(r32)                     _BFGET_(r32, 2, 2)
    #define   SET32OVL_APM_plane37_en(r32,v)                   _BFSET_(r32, 2, 2,v)
    #define   GET16OVL_APM_plane37_en(r16)                     _BFGET_(r16, 2, 2)
    #define   SET16OVL_APM_plane37_en(r16,v)                   _BFSET_(r16, 2, 2,v)

    #define     w32OVL_APM                                     {\
            UNSG32 uAPM_plane15_en                             :  1;\
            UNSG32 uAPM_plane26_en                             :  1;\
            UNSG32 uAPM_plane37_en                             :  1;\
            UNSG32 RSVDx30_b3                                  : 29;\
          }
    union { UNSG32 u32OVL_APM;
            struct w32OVL_APM;
          };
    ///////////////////////////////////////////////////////////
    } SIE_OVL;

    typedef union  T32OVL_SENSE_CTRL
          { UNSG32 u32;
            struct w32OVL_SENSE_CTRL;
                 } T32OVL_SENSE_CTRL;
    typedef union  T32OVL_ALPHA_CTRL
          { UNSG32 u32;
            struct w32OVL_ALPHA_CTRL;
                 } T32OVL_ALPHA_CTRL;
    typedef union  T32OVL_ALPHA0
          { UNSG32 u32;
            struct w32OVL_ALPHA0;
                 } T32OVL_ALPHA0;
    typedef union  T32OVL_ALP_UD
          { UNSG32 u32;
            struct w32OVL_ALP_UD;
                 } T32OVL_ALP_UD;
    typedef union  T32OVL_ALP_UD1
          { UNSG32 u32;
            struct w32OVL_ALP_UD1;
                 } T32OVL_ALP_UD1;
    typedef union  T32OVL_LAY
          { UNSG32 u32;
            struct w32OVL_LAY;
                 } T32OVL_LAY;
    typedef union  T32OVL_FIX
          { UNSG32 u32;
            struct w32OVL_FIX;
                 } T32OVL_FIX;
    typedef union  T32OVL_FIX0
          { UNSG32 u32;
            struct w32OVL_FIX0;
                 } T32OVL_FIX0;
    typedef union  T32OVL_FIX1
          { UNSG32 u32;
            struct w32OVL_FIX1;
                 } T32OVL_FIX1;
    typedef union  T32OVL_FIX2
          { UNSG32 u32;
            struct w32OVL_FIX2;
                 } T32OVL_FIX2;
    typedef union  T32OVL_FIX3
          { UNSG32 u32;
            struct w32OVL_FIX3;
                 } T32OVL_FIX3;
    typedef union  T32OVL_CTRL
          { UNSG32 u32;
            struct w32OVL_CTRL;
                 } T32OVL_CTRL;
    typedef union  T32OVL_APM
          { UNSG32 u32;
            struct w32OVL_APM;
                 } T32OVL_APM;
    ///////////////////////////////////////////////////////////

    typedef union  TOVL_SENSE_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32OVL_SENSE_CTRL;
                   };
                 } TOVL_SENSE_CTRL;
    typedef union  TOVL_ALPHA_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32OVL_ALPHA_CTRL;
                   };
                 } TOVL_ALPHA_CTRL;
    typedef union  TOVL_ALPHA0
          { UNSG32 u32[1];
            struct {
            struct w32OVL_ALPHA0;
                   };
                 } TOVL_ALPHA0;
    typedef union  TOVL_ALP_UD
          { UNSG32 u32[2];
            struct {
            struct w32OVL_ALP_UD;
            struct w32OVL_ALP_UD1;
                   };
                 } TOVL_ALP_UD;
    typedef union  TOVL_LAY
          { UNSG32 u32[1];
            struct {
            struct w32OVL_LAY;
                   };
                 } TOVL_LAY;
    typedef union  TOVL_FIX
          { UNSG32 u32[1];
            struct {
            struct w32OVL_FIX;
                   };
                 } TOVL_FIX;
    typedef union  TOVL_FIX0
          { UNSG32 u32[1];
            struct {
            struct w32OVL_FIX0;
                   };
                 } TOVL_FIX0;
    typedef union  TOVL_FIX1
          { UNSG32 u32[1];
            struct {
            struct w32OVL_FIX1;
                   };
                 } TOVL_FIX1;
    typedef union  TOVL_FIX2
          { UNSG32 u32[1];
            struct {
            struct w32OVL_FIX2;
                   };
                 } TOVL_FIX2;
    typedef union  TOVL_FIX3
          { UNSG32 u32[1];
            struct {
            struct w32OVL_FIX3;
                   };
                 } TOVL_FIX3;
    typedef union  TOVL_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32OVL_CTRL;
                   };
                 } TOVL_CTRL;
    typedef union  TOVL_APM
          { UNSG32 u32[1];
            struct {
            struct w32OVL_APM;
                   };
                 } TOVL_APM;

    ///////////////////////////////////////////////////////////
     SIGN32 OVL_drvrd(SIE_OVL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 OVL_drvwr(SIE_OVL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void OVL_reset(SIE_OVL *p);
     SIGN32 OVL_cmp  (SIE_OVL *p, SIE_OVL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define OVL_check(p,pie,pfx,hLOG) OVL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define OVL_print(p,    pfx,hLOG) OVL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: OVL
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE CPCB0                   biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (P)
///               %unsigned 1  osdovl_bypass             0x0
///                                    ###
///                                    * [1] : OSD Overlay1 Hard-bypassed
///                                    * [0] : OSD Overlay1 is present in data-path
///                                    ###
///               %unsigned 1  MAIN_FIFO_bypass          0x0
///                                    ###
///                                    * Hard-bypass for MAIN Fifo. Write 1 to hard-bypass.
///                                    ###
///               %unsigned 1  GFX1_FIFO_bypass          0x0
///                                    ###
///                                    * Hard-bypass for GFX1 Fifo. Write 1 to hard-bypass.
///                                    ###
///               %unsigned 1  GFX2_FIFO_bypass          0x0
///                                    ###
///                                    * Hard-bypass for GFX2 Fifo. Write 1 to hard-bypass.
///                                    ###
///               %unsigned 1  CSC_bypass                0x0
///                                    ###
///                                    * CSC hard bypass
///                                    ###
///               %unsigned 2  osdovl_odat_sel           0x0
///                                    ###
///                                    * Selection bits for Output Data when OSD Overlay1 is hard bypassed -
///                                    * [00] : Main Plane Output is selected
///                                    * [01] : Graphics1/PIP Plane Output is selected
///                                    * [10] : Graphics2 Plane Output is selected
///                                    * [11] : Invalid
///                                    ###
///               %unsigned 1  MAIN_FIFO_flush           0x0
///                                    ###
///                                    * Flush for MAIN FIFO pointers. Write 1 to clear the FIFO.
///                                    ###
///               %unsigned 1  PIP_FIFO_flush            0x0
///                                    ###
///                                    * Flush for PIP FIFO pointers. Write 1 to clear the FIFO.
///                                    ###
///               %unsigned 1  GFX0_FIFO_flush           0x0
///                                    ###
///                                    * Flush for GFX0 FIFO pointers. Write 1 to clear the FIFO.
///                                    ###
///               %unsigned 1  GFX1_FIFO_flush           0x0
///                                    ###
///                                    * Flush for GFX1 FIFO pointers. Write 1 to clear the FIFO.
///                                    ###
///               %%        21         # Stuffing bits...
///     @ 0x00004 CTRL2                (P)
///               %unsigned 5  CLKEN_CTRL                0x0
///                                    ###
///                                    * [0] : main lane
///                                    * [1] : PIP plane
///                                    * [2] : GFX-1 plane
///                                    * [3] : GFX-2 plane
///                                    * [4] : Cursor Plane
///                                    * Write 1 to enable respective plane in CPCB0 Overlay if in path to generate clock enable. Else, it should be 1'b0.
///                                    ###
///               %unsigned 1  cpcb_clken                0x0
///                                    ###
///                                    * Enable for clock enable control for CPCB0 pipe. Write 1 if flow-control clock enable is to be disabled.
///                                    ###
///               %unsigned 1  beFifosts_ctrl            0x0
///                                    ###
///                                    * Back-end FIFO Almost Full status control (enable it by writing 1'b1) to be used for generating clock-en.
///                                    ###
///               %unsigned 1  tgEn                      0x0
///                                    ###
///                                    * Enable for BETG. Write 1 to enable back-end TG (CPCB0).
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00008 CTRL3                (P)
///               %unsigned 32 pixTot_pl1                0x64
///                                    ###
///                                    * Total number of pixels in plane1 which are input to OSD overlay
///                                    ###
///     @ 0x0000C CTRL5                (P)
///               %unsigned 32 pixTot_pl3                0x64
///     @ 0x00010 CTRL6                (P)
///               %unsigned 32 pixTot_pl4                0x64
///     @ 0x00014 CTRL8                (P)
///               %unsigned 12 pixLineTot_gfx0           0x64
///               %unsigned 12 pixLineTot_gfx1           0x64
///               %unsigned 1  lineDn_Gfx0_En            0x0
///               %unsigned 1  lineDn_Gfx1_En            0x0
///                                    ###
///                                    * Total number of pixels in a line which are input to OSD overlay (for GFX0 and GFX1 SCL output)
///                                    * Corresponding Enable bits for GFX0 and GFX1 Planes →
///                                    * Write 1 for LineDone to be used in clock enable generation. Default 0
///                                    ###
///               %%        6          # Stuffing bits...
///     @ 0x00018 CTRL9                (P)
///               %unsigned 12 pixLineTot_adpscl         0x64
///               %unsigned 1  lineDn_ADPSCL_En          0x0
///                                    ###
///                                    * Total number of pixels in a line which are input to OSD overlay (for Adaptive Scalar output in Main Plane)
///                                    * Corresponding Enable bits for Main Plane :
///                                    * Write 1 for LineDone to be used in clock enable generation. Default 0
///                                    ###
///               %unsigned 2  lineDn_RstCtrl            0x0
///                                    ###
///                                    * LineDone reset control
///                                    * [00] : lineDone for all the planes (main, gfx0 and gfx1) will be done based on main plane EOL
///                                    * [01] : lineDone for all the planes (main, gfx0 and gfx1) will be done based on GFX0 plane EOL
///                                    * [11] : lineDone for all the planes (main, gfx0 and gfx1) will be done based on GFX1 plane EOL
///                                    ###
///               %unsigned 1  lineDn_MainPl_RstCtrl_en  0x0
///                                    ###
///                                    * 0: Based on main plane EOL
///                                    * 1: Based on base plane horizontal sync
///                                    ###
///               %unsigned 1  lineDn_GFX0_RstCtrl_en    0x0
///                                    ###
///                                    * 0: Based on Gfx0 plane EOL
///                                    * 1: Based on base plane horizontal sync
///                                    ###
///               %unsigned 1  lineDn_GFX1_RstCtrl_en    0x0
///                                    ###
///                                    * 0: Based on GFX1 plane EOL
///                                    * 1: Based on base plane horizontal sync
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x0001C CTRL10               (P)
///               %unsigned 6  input_swap_sel1           0x24
///                                    ###
///                                    * Input Swap Selection Configuration for Main Plane Input Data to OSD Overlay
///                                    * [1:0] :      0: Will select LSB[11:0] of input data
///                                    * 1: Will select [23:12] of input data
///                                    * else: Will select MSB [35:24] of input data
///                                    * [3:2] :      0: Will select LSB[11:0] of input data
///                                    * 1: Will select [23:12] of input data
///                                    * else: Will select MSB [35:24] of input data
///                                    * [5:4] :     0: Will select LSB[11:0] of input data
///                                    * 1: Will select [23:12] of input data
///                                    * else: Will select MSB [35:24] of input data
///                                    ###
///               %unsigned 6  input_swap_sel2           0x24
///                                    ###
///                                    * Input Swap Selection Configuration for GFX0/PIP Plane Input Data to OSD Overlay
///                                    * [1:0] :      0: Will select LSB[11:0] of input data
///                                    * 1: Will select [23:12] of input data
///                                    * else: Will select MSB [35:24] of input data
///                                    * [3:2] :      0: Will select LSB[11:0] of input data
///                                    * 1: Will select [23:12] of input data
///                                    * else: Will select MSB [35:24] of input data
///                                    * [5:4] :     0: Will select LSB[11:0] of input data
///                                    * 1: Will select [23:12] of input data
///                                    * else: Will select MSB [35:24] of input data
///                                    ###
///               %unsigned 6  input_swap_sel3           0x24
///                                    ###
///                                    * Input Swap Selection Configuration for GFX1 Plane Input Data to OSD Overlay
///                                    * [1:0] :      0: Will select LSB[11:0] of input data
///                                    * 1: Will select [23:12] of input data
///                                    * else: Will select MSB [35:24] of input data
///                                    * [3:2] :      0: Will select LSB[11:0] of input data
///                                    * 1: Will select [23:12] of input data
///                                    * else: Will select MSB [35:24] of input data
///                                    * [5:4] :     0: Will select LSB[11:0] of input data
///                                    * 1: Will select [23:12] of input data
///                                    * else: Will select MSB [35:24] of input data
///                                    ###
///               %%        14         # Stuffing bits...
///     @ 0x00020 status               (R-)
///               %unsigned 1  main_fifo_underflow       0x0
///                                    ###
///                                    * CPCB0 MAIN FIFO underflow status
///                                    ###
///               %unsigned 1  pip_fifo_underflow        0x0
///                                    ###
///                                    * CPCB0 PIP FIFO underflow status
///                                    ###
///               %unsigned 1  gfx0_fifo_underflow       0x0
///                                    ###
///                                    * CPCB0 GFX0 FIFO underflow status
///                                    ###
///               %unsigned 1  gfx1_fifo_underflow       0x0
///                                    ###
///                                    * CPCB0 GFX1 FIFO underflow status
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00024                      (P)
///     # 0x00024 OVL1                 
///               $OVL                 OVL1              REG          
///                                    ###
///                                    * OSD overlay-1 registers
///                                    ###
///     @ 0x00058                      (P)
///     # 0x00058 CPCB_TG              
///               $BETG                CPCB_TG           REG          
///                                    ###
///                                    * Back End Free running TG registers
///                                    ###
///     @ 0x0010C                      (P)
///     # 0x0010C MainPl_CSC           
///               $CSC_C17O24          MainPl_CSC        REG          
///                                    ###
///                                    * Main Plane CSC registers
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     316B, bits:    1727b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_CPCB0
#define h_CPCB0 (){}

    #define     RA_CPCB0_CTRL0                                 0x0000

    #define     BA_CPCB0_CTRL0_osdovl_bypass                   0x0000
    #define     B16CPCB0_CTRL0_osdovl_bypass                   0x0000
    #define   LSb32CPCB0_CTRL0_osdovl_bypass                      0
    #define   LSb16CPCB0_CTRL0_osdovl_bypass                      0
    #define       bCPCB0_CTRL0_osdovl_bypass                   1
    #define   MSK32CPCB0_CTRL0_osdovl_bypass                      0x00000001

    #define     BA_CPCB0_CTRL0_MAIN_FIFO_bypass                0x0000
    #define     B16CPCB0_CTRL0_MAIN_FIFO_bypass                0x0000
    #define   LSb32CPCB0_CTRL0_MAIN_FIFO_bypass                   1
    #define   LSb16CPCB0_CTRL0_MAIN_FIFO_bypass                   1
    #define       bCPCB0_CTRL0_MAIN_FIFO_bypass                1
    #define   MSK32CPCB0_CTRL0_MAIN_FIFO_bypass                   0x00000002

    #define     BA_CPCB0_CTRL0_GFX1_FIFO_bypass                0x0000
    #define     B16CPCB0_CTRL0_GFX1_FIFO_bypass                0x0000
    #define   LSb32CPCB0_CTRL0_GFX1_FIFO_bypass                   2
    #define   LSb16CPCB0_CTRL0_GFX1_FIFO_bypass                   2
    #define       bCPCB0_CTRL0_GFX1_FIFO_bypass                1
    #define   MSK32CPCB0_CTRL0_GFX1_FIFO_bypass                   0x00000004

    #define     BA_CPCB0_CTRL0_GFX2_FIFO_bypass                0x0000
    #define     B16CPCB0_CTRL0_GFX2_FIFO_bypass                0x0000
    #define   LSb32CPCB0_CTRL0_GFX2_FIFO_bypass                   3
    #define   LSb16CPCB0_CTRL0_GFX2_FIFO_bypass                   3
    #define       bCPCB0_CTRL0_GFX2_FIFO_bypass                1
    #define   MSK32CPCB0_CTRL0_GFX2_FIFO_bypass                   0x00000008

    #define     BA_CPCB0_CTRL0_CSC_bypass                      0x0000
    #define     B16CPCB0_CTRL0_CSC_bypass                      0x0000
    #define   LSb32CPCB0_CTRL0_CSC_bypass                         4
    #define   LSb16CPCB0_CTRL0_CSC_bypass                         4
    #define       bCPCB0_CTRL0_CSC_bypass                      1
    #define   MSK32CPCB0_CTRL0_CSC_bypass                         0x00000010

    #define     BA_CPCB0_CTRL0_osdovl_odat_sel                 0x0000
    #define     B16CPCB0_CTRL0_osdovl_odat_sel                 0x0000
    #define   LSb32CPCB0_CTRL0_osdovl_odat_sel                    5
    #define   LSb16CPCB0_CTRL0_osdovl_odat_sel                    5
    #define       bCPCB0_CTRL0_osdovl_odat_sel                 2
    #define   MSK32CPCB0_CTRL0_osdovl_odat_sel                    0x00000060

    #define     BA_CPCB0_CTRL0_MAIN_FIFO_flush                 0x0000
    #define     B16CPCB0_CTRL0_MAIN_FIFO_flush                 0x0000
    #define   LSb32CPCB0_CTRL0_MAIN_FIFO_flush                    7
    #define   LSb16CPCB0_CTRL0_MAIN_FIFO_flush                    7
    #define       bCPCB0_CTRL0_MAIN_FIFO_flush                 1
    #define   MSK32CPCB0_CTRL0_MAIN_FIFO_flush                    0x00000080

    #define     BA_CPCB0_CTRL0_PIP_FIFO_flush                  0x0001
    #define     B16CPCB0_CTRL0_PIP_FIFO_flush                  0x0000
    #define   LSb32CPCB0_CTRL0_PIP_FIFO_flush                     8
    #define   LSb16CPCB0_CTRL0_PIP_FIFO_flush                     8
    #define       bCPCB0_CTRL0_PIP_FIFO_flush                  1
    #define   MSK32CPCB0_CTRL0_PIP_FIFO_flush                     0x00000100

    #define     BA_CPCB0_CTRL0_GFX0_FIFO_flush                 0x0001
    #define     B16CPCB0_CTRL0_GFX0_FIFO_flush                 0x0000
    #define   LSb32CPCB0_CTRL0_GFX0_FIFO_flush                    9
    #define   LSb16CPCB0_CTRL0_GFX0_FIFO_flush                    9
    #define       bCPCB0_CTRL0_GFX0_FIFO_flush                 1
    #define   MSK32CPCB0_CTRL0_GFX0_FIFO_flush                    0x00000200

    #define     BA_CPCB0_CTRL0_GFX1_FIFO_flush                 0x0001
    #define     B16CPCB0_CTRL0_GFX1_FIFO_flush                 0x0000
    #define   LSb32CPCB0_CTRL0_GFX1_FIFO_flush                    10
    #define   LSb16CPCB0_CTRL0_GFX1_FIFO_flush                    10
    #define       bCPCB0_CTRL0_GFX1_FIFO_flush                 1
    #define   MSK32CPCB0_CTRL0_GFX1_FIFO_flush                    0x00000400
    ///////////////////////////////////////////////////////////
    #define     RA_CPCB0_CTRL2                                 0x0004

    #define     BA_CPCB0_CTRL2_CLKEN_CTRL                      0x0004
    #define     B16CPCB0_CTRL2_CLKEN_CTRL                      0x0004
    #define   LSb32CPCB0_CTRL2_CLKEN_CTRL                         0
    #define   LSb16CPCB0_CTRL2_CLKEN_CTRL                         0
    #define       bCPCB0_CTRL2_CLKEN_CTRL                      5
    #define   MSK32CPCB0_CTRL2_CLKEN_CTRL                         0x0000001F

    #define     BA_CPCB0_CTRL2_cpcb_clken                      0x0004
    #define     B16CPCB0_CTRL2_cpcb_clken                      0x0004
    #define   LSb32CPCB0_CTRL2_cpcb_clken                         5
    #define   LSb16CPCB0_CTRL2_cpcb_clken                         5
    #define       bCPCB0_CTRL2_cpcb_clken                      1
    #define   MSK32CPCB0_CTRL2_cpcb_clken                         0x00000020

    #define     BA_CPCB0_CTRL2_beFifosts_ctrl                  0x0004
    #define     B16CPCB0_CTRL2_beFifosts_ctrl                  0x0004
    #define   LSb32CPCB0_CTRL2_beFifosts_ctrl                     6
    #define   LSb16CPCB0_CTRL2_beFifosts_ctrl                     6
    #define       bCPCB0_CTRL2_beFifosts_ctrl                  1
    #define   MSK32CPCB0_CTRL2_beFifosts_ctrl                     0x00000040

    #define     BA_CPCB0_CTRL2_tgEn                            0x0004
    #define     B16CPCB0_CTRL2_tgEn                            0x0004
    #define   LSb32CPCB0_CTRL2_tgEn                               7
    #define   LSb16CPCB0_CTRL2_tgEn                               7
    #define       bCPCB0_CTRL2_tgEn                            1
    #define   MSK32CPCB0_CTRL2_tgEn                               0x00000080
    ///////////////////////////////////////////////////////////
    #define     RA_CPCB0_CTRL3                                 0x0008

    #define     BA_CPCB0_CTRL3_pixTot_pl1                      0x0008
    #define     B16CPCB0_CTRL3_pixTot_pl1                      0x0008
    #define   LSb32CPCB0_CTRL3_pixTot_pl1                         0
    #define   LSb16CPCB0_CTRL3_pixTot_pl1                         0
    #define       bCPCB0_CTRL3_pixTot_pl1                      32
    #define   MSK32CPCB0_CTRL3_pixTot_pl1                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CPCB0_CTRL5                                 0x000C

    #define     BA_CPCB0_CTRL5_pixTot_pl3                      0x000C
    #define     B16CPCB0_CTRL5_pixTot_pl3                      0x000C
    #define   LSb32CPCB0_CTRL5_pixTot_pl3                         0
    #define   LSb16CPCB0_CTRL5_pixTot_pl3                         0
    #define       bCPCB0_CTRL5_pixTot_pl3                      32
    #define   MSK32CPCB0_CTRL5_pixTot_pl3                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CPCB0_CTRL6                                 0x0010

    #define     BA_CPCB0_CTRL6_pixTot_pl4                      0x0010
    #define     B16CPCB0_CTRL6_pixTot_pl4                      0x0010
    #define   LSb32CPCB0_CTRL6_pixTot_pl4                         0
    #define   LSb16CPCB0_CTRL6_pixTot_pl4                         0
    #define       bCPCB0_CTRL6_pixTot_pl4                      32
    #define   MSK32CPCB0_CTRL6_pixTot_pl4                         0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_CPCB0_CTRL8                                 0x0014

    #define     BA_CPCB0_CTRL8_pixLineTot_gfx0                 0x0014
    #define     B16CPCB0_CTRL8_pixLineTot_gfx0                 0x0014
    #define   LSb32CPCB0_CTRL8_pixLineTot_gfx0                    0
    #define   LSb16CPCB0_CTRL8_pixLineTot_gfx0                    0
    #define       bCPCB0_CTRL8_pixLineTot_gfx0                 12
    #define   MSK32CPCB0_CTRL8_pixLineTot_gfx0                    0x00000FFF

    #define     BA_CPCB0_CTRL8_pixLineTot_gfx1                 0x0015
    #define     B16CPCB0_CTRL8_pixLineTot_gfx1                 0x0014
    #define   LSb32CPCB0_CTRL8_pixLineTot_gfx1                    12
    #define   LSb16CPCB0_CTRL8_pixLineTot_gfx1                    12
    #define       bCPCB0_CTRL8_pixLineTot_gfx1                 12
    #define   MSK32CPCB0_CTRL8_pixLineTot_gfx1                    0x00FFF000

    #define     BA_CPCB0_CTRL8_lineDn_Gfx0_En                  0x0017
    #define     B16CPCB0_CTRL8_lineDn_Gfx0_En                  0x0016
    #define   LSb32CPCB0_CTRL8_lineDn_Gfx0_En                     24
    #define   LSb16CPCB0_CTRL8_lineDn_Gfx0_En                     8
    #define       bCPCB0_CTRL8_lineDn_Gfx0_En                  1
    #define   MSK32CPCB0_CTRL8_lineDn_Gfx0_En                     0x01000000

    #define     BA_CPCB0_CTRL8_lineDn_Gfx1_En                  0x0017
    #define     B16CPCB0_CTRL8_lineDn_Gfx1_En                  0x0016
    #define   LSb32CPCB0_CTRL8_lineDn_Gfx1_En                     25
    #define   LSb16CPCB0_CTRL8_lineDn_Gfx1_En                     9
    #define       bCPCB0_CTRL8_lineDn_Gfx1_En                  1
    #define   MSK32CPCB0_CTRL8_lineDn_Gfx1_En                     0x02000000
    ///////////////////////////////////////////////////////////
    #define     RA_CPCB0_CTRL9                                 0x0018

    #define     BA_CPCB0_CTRL9_pixLineTot_adpscl               0x0018
    #define     B16CPCB0_CTRL9_pixLineTot_adpscl               0x0018
    #define   LSb32CPCB0_CTRL9_pixLineTot_adpscl                  0
    #define   LSb16CPCB0_CTRL9_pixLineTot_adpscl                  0
    #define       bCPCB0_CTRL9_pixLineTot_adpscl               12
    #define   MSK32CPCB0_CTRL9_pixLineTot_adpscl                  0x00000FFF

    #define     BA_CPCB0_CTRL9_lineDn_ADPSCL_En                0x0019
    #define     B16CPCB0_CTRL9_lineDn_ADPSCL_En                0x0018
    #define   LSb32CPCB0_CTRL9_lineDn_ADPSCL_En                   12
    #define   LSb16CPCB0_CTRL9_lineDn_ADPSCL_En                   12
    #define       bCPCB0_CTRL9_lineDn_ADPSCL_En                1
    #define   MSK32CPCB0_CTRL9_lineDn_ADPSCL_En                   0x00001000

    #define     BA_CPCB0_CTRL9_lineDn_RstCtrl                  0x0019
    #define     B16CPCB0_CTRL9_lineDn_RstCtrl                  0x0018
    #define   LSb32CPCB0_CTRL9_lineDn_RstCtrl                     13
    #define   LSb16CPCB0_CTRL9_lineDn_RstCtrl                     13
    #define       bCPCB0_CTRL9_lineDn_RstCtrl                  2
    #define   MSK32CPCB0_CTRL9_lineDn_RstCtrl                     0x00006000

    #define     BA_CPCB0_CTRL9_lineDn_MainPl_RstCtrl_en        0x0019
    #define     B16CPCB0_CTRL9_lineDn_MainPl_RstCtrl_en        0x0018
    #define   LSb32CPCB0_CTRL9_lineDn_MainPl_RstCtrl_en           15
    #define   LSb16CPCB0_CTRL9_lineDn_MainPl_RstCtrl_en           15
    #define       bCPCB0_CTRL9_lineDn_MainPl_RstCtrl_en        1
    #define   MSK32CPCB0_CTRL9_lineDn_MainPl_RstCtrl_en           0x00008000

    #define     BA_CPCB0_CTRL9_lineDn_GFX0_RstCtrl_en          0x001A
    #define     B16CPCB0_CTRL9_lineDn_GFX0_RstCtrl_en          0x001A
    #define   LSb32CPCB0_CTRL9_lineDn_GFX0_RstCtrl_en             16
    #define   LSb16CPCB0_CTRL9_lineDn_GFX0_RstCtrl_en             0
    #define       bCPCB0_CTRL9_lineDn_GFX0_RstCtrl_en          1
    #define   MSK32CPCB0_CTRL9_lineDn_GFX0_RstCtrl_en             0x00010000

    #define     BA_CPCB0_CTRL9_lineDn_GFX1_RstCtrl_en          0x001A
    #define     B16CPCB0_CTRL9_lineDn_GFX1_RstCtrl_en          0x001A
    #define   LSb32CPCB0_CTRL9_lineDn_GFX1_RstCtrl_en             17
    #define   LSb16CPCB0_CTRL9_lineDn_GFX1_RstCtrl_en             1
    #define       bCPCB0_CTRL9_lineDn_GFX1_RstCtrl_en          1
    #define   MSK32CPCB0_CTRL9_lineDn_GFX1_RstCtrl_en             0x00020000
    ///////////////////////////////////////////////////////////
    #define     RA_CPCB0_CTRL10                                0x001C

    #define     BA_CPCB0_CTRL10_input_swap_sel1                0x001C
    #define     B16CPCB0_CTRL10_input_swap_sel1                0x001C
    #define   LSb32CPCB0_CTRL10_input_swap_sel1                   0
    #define   LSb16CPCB0_CTRL10_input_swap_sel1                   0
    #define       bCPCB0_CTRL10_input_swap_sel1                6
    #define   MSK32CPCB0_CTRL10_input_swap_sel1                   0x0000003F

    #define     BA_CPCB0_CTRL10_input_swap_sel2                0x001C
    #define     B16CPCB0_CTRL10_input_swap_sel2                0x001C
    #define   LSb32CPCB0_CTRL10_input_swap_sel2                   6
    #define   LSb16CPCB0_CTRL10_input_swap_sel2                   6
    #define       bCPCB0_CTRL10_input_swap_sel2                6
    #define   MSK32CPCB0_CTRL10_input_swap_sel2                   0x00000FC0

    #define     BA_CPCB0_CTRL10_input_swap_sel3                0x001D
    #define     B16CPCB0_CTRL10_input_swap_sel3                0x001C
    #define   LSb32CPCB0_CTRL10_input_swap_sel3                   12
    #define   LSb16CPCB0_CTRL10_input_swap_sel3                   12
    #define       bCPCB0_CTRL10_input_swap_sel3                6
    #define   MSK32CPCB0_CTRL10_input_swap_sel3                   0x0003F000
    ///////////////////////////////////////////////////////////
    #define     RA_CPCB0_status                                0x0020

    #define     BA_CPCB0_status_main_fifo_underflow            0x0020
    #define     B16CPCB0_status_main_fifo_underflow            0x0020
    #define   LSb32CPCB0_status_main_fifo_underflow               0
    #define   LSb16CPCB0_status_main_fifo_underflow               0
    #define       bCPCB0_status_main_fifo_underflow            1
    #define   MSK32CPCB0_status_main_fifo_underflow               0x00000001

    #define     BA_CPCB0_status_pip_fifo_underflow             0x0020
    #define     B16CPCB0_status_pip_fifo_underflow             0x0020
    #define   LSb32CPCB0_status_pip_fifo_underflow                1
    #define   LSb16CPCB0_status_pip_fifo_underflow                1
    #define       bCPCB0_status_pip_fifo_underflow             1
    #define   MSK32CPCB0_status_pip_fifo_underflow                0x00000002

    #define     BA_CPCB0_status_gfx0_fifo_underflow            0x0020
    #define     B16CPCB0_status_gfx0_fifo_underflow            0x0020
    #define   LSb32CPCB0_status_gfx0_fifo_underflow               2
    #define   LSb16CPCB0_status_gfx0_fifo_underflow               2
    #define       bCPCB0_status_gfx0_fifo_underflow            1
    #define   MSK32CPCB0_status_gfx0_fifo_underflow               0x00000004

    #define     BA_CPCB0_status_gfx1_fifo_underflow            0x0020
    #define     B16CPCB0_status_gfx1_fifo_underflow            0x0020
    #define   LSb32CPCB0_status_gfx1_fifo_underflow               3
    #define   LSb16CPCB0_status_gfx1_fifo_underflow               3
    #define       bCPCB0_status_gfx1_fifo_underflow            1
    #define   MSK32CPCB0_status_gfx1_fifo_underflow               0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_CPCB0_OVL1                                  0x0024
    ///////////////////////////////////////////////////////////
    #define     RA_CPCB0_CPCB_TG                               0x0058
    ///////////////////////////////////////////////////////////
    #define     RA_CPCB0_MainPl_CSC                            0x010C
    ///////////////////////////////////////////////////////////

    typedef struct SIE_CPCB0 {
    ///////////////////////////////////////////////////////////
    #define   GET32CPCB0_CTRL0_osdovl_bypass(r32)              _BFGET_(r32, 0, 0)
    #define   SET32CPCB0_CTRL0_osdovl_bypass(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16CPCB0_CTRL0_osdovl_bypass(r16)              _BFGET_(r16, 0, 0)
    #define   SET16CPCB0_CTRL0_osdovl_bypass(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32CPCB0_CTRL0_MAIN_FIFO_bypass(r32)           _BFGET_(r32, 1, 1)
    #define   SET32CPCB0_CTRL0_MAIN_FIFO_bypass(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16CPCB0_CTRL0_MAIN_FIFO_bypass(r16)           _BFGET_(r16, 1, 1)
    #define   SET16CPCB0_CTRL0_MAIN_FIFO_bypass(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32CPCB0_CTRL0_GFX1_FIFO_bypass(r32)           _BFGET_(r32, 2, 2)
    #define   SET32CPCB0_CTRL0_GFX1_FIFO_bypass(r32,v)         _BFSET_(r32, 2, 2,v)
    #define   GET16CPCB0_CTRL0_GFX1_FIFO_bypass(r16)           _BFGET_(r16, 2, 2)
    #define   SET16CPCB0_CTRL0_GFX1_FIFO_bypass(r16,v)         _BFSET_(r16, 2, 2,v)

    #define   GET32CPCB0_CTRL0_GFX2_FIFO_bypass(r32)           _BFGET_(r32, 3, 3)
    #define   SET32CPCB0_CTRL0_GFX2_FIFO_bypass(r32,v)         _BFSET_(r32, 3, 3,v)
    #define   GET16CPCB0_CTRL0_GFX2_FIFO_bypass(r16)           _BFGET_(r16, 3, 3)
    #define   SET16CPCB0_CTRL0_GFX2_FIFO_bypass(r16,v)         _BFSET_(r16, 3, 3,v)

    #define   GET32CPCB0_CTRL0_CSC_bypass(r32)                 _BFGET_(r32, 4, 4)
    #define   SET32CPCB0_CTRL0_CSC_bypass(r32,v)               _BFSET_(r32, 4, 4,v)
    #define   GET16CPCB0_CTRL0_CSC_bypass(r16)                 _BFGET_(r16, 4, 4)
    #define   SET16CPCB0_CTRL0_CSC_bypass(r16,v)               _BFSET_(r16, 4, 4,v)

    #define   GET32CPCB0_CTRL0_osdovl_odat_sel(r32)            _BFGET_(r32, 6, 5)
    #define   SET32CPCB0_CTRL0_osdovl_odat_sel(r32,v)          _BFSET_(r32, 6, 5,v)
    #define   GET16CPCB0_CTRL0_osdovl_odat_sel(r16)            _BFGET_(r16, 6, 5)
    #define   SET16CPCB0_CTRL0_osdovl_odat_sel(r16,v)          _BFSET_(r16, 6, 5,v)

    #define   GET32CPCB0_CTRL0_MAIN_FIFO_flush(r32)            _BFGET_(r32, 7, 7)
    #define   SET32CPCB0_CTRL0_MAIN_FIFO_flush(r32,v)          _BFSET_(r32, 7, 7,v)
    #define   GET16CPCB0_CTRL0_MAIN_FIFO_flush(r16)            _BFGET_(r16, 7, 7)
    #define   SET16CPCB0_CTRL0_MAIN_FIFO_flush(r16,v)          _BFSET_(r16, 7, 7,v)

    #define   GET32CPCB0_CTRL0_PIP_FIFO_flush(r32)             _BFGET_(r32, 8, 8)
    #define   SET32CPCB0_CTRL0_PIP_FIFO_flush(r32,v)           _BFSET_(r32, 8, 8,v)
    #define   GET16CPCB0_CTRL0_PIP_FIFO_flush(r16)             _BFGET_(r16, 8, 8)
    #define   SET16CPCB0_CTRL0_PIP_FIFO_flush(r16,v)           _BFSET_(r16, 8, 8,v)

    #define   GET32CPCB0_CTRL0_GFX0_FIFO_flush(r32)            _BFGET_(r32, 9, 9)
    #define   SET32CPCB0_CTRL0_GFX0_FIFO_flush(r32,v)          _BFSET_(r32, 9, 9,v)
    #define   GET16CPCB0_CTRL0_GFX0_FIFO_flush(r16)            _BFGET_(r16, 9, 9)
    #define   SET16CPCB0_CTRL0_GFX0_FIFO_flush(r16,v)          _BFSET_(r16, 9, 9,v)

    #define   GET32CPCB0_CTRL0_GFX1_FIFO_flush(r32)            _BFGET_(r32,10,10)
    #define   SET32CPCB0_CTRL0_GFX1_FIFO_flush(r32,v)          _BFSET_(r32,10,10,v)
    #define   GET16CPCB0_CTRL0_GFX1_FIFO_flush(r16)            _BFGET_(r16,10,10)
    #define   SET16CPCB0_CTRL0_GFX1_FIFO_flush(r16,v)          _BFSET_(r16,10,10,v)

    #define     w32CPCB0_CTRL0                                 {\
            UNSG32 uCTRL0_osdovl_bypass                        :  1;\
            UNSG32 uCTRL0_MAIN_FIFO_bypass                     :  1;\
            UNSG32 uCTRL0_GFX1_FIFO_bypass                     :  1;\
            UNSG32 uCTRL0_GFX2_FIFO_bypass                     :  1;\
            UNSG32 uCTRL0_CSC_bypass                           :  1;\
            UNSG32 uCTRL0_osdovl_odat_sel                      :  2;\
            UNSG32 uCTRL0_MAIN_FIFO_flush                      :  1;\
            UNSG32 uCTRL0_PIP_FIFO_flush                       :  1;\
            UNSG32 uCTRL0_GFX0_FIFO_flush                      :  1;\
            UNSG32 uCTRL0_GFX1_FIFO_flush                      :  1;\
            UNSG32 RSVDx0_b11                                  : 21;\
          }
    union { UNSG32 u32CPCB0_CTRL0;
            struct w32CPCB0_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CPCB0_CTRL2_CLKEN_CTRL(r32)                 _BFGET_(r32, 4, 0)
    #define   SET32CPCB0_CTRL2_CLKEN_CTRL(r32,v)               _BFSET_(r32, 4, 0,v)
    #define   GET16CPCB0_CTRL2_CLKEN_CTRL(r16)                 _BFGET_(r16, 4, 0)
    #define   SET16CPCB0_CTRL2_CLKEN_CTRL(r16,v)               _BFSET_(r16, 4, 0,v)

    #define   GET32CPCB0_CTRL2_cpcb_clken(r32)                 _BFGET_(r32, 5, 5)
    #define   SET32CPCB0_CTRL2_cpcb_clken(r32,v)               _BFSET_(r32, 5, 5,v)
    #define   GET16CPCB0_CTRL2_cpcb_clken(r16)                 _BFGET_(r16, 5, 5)
    #define   SET16CPCB0_CTRL2_cpcb_clken(r16,v)               _BFSET_(r16, 5, 5,v)

    #define   GET32CPCB0_CTRL2_beFifosts_ctrl(r32)             _BFGET_(r32, 6, 6)
    #define   SET32CPCB0_CTRL2_beFifosts_ctrl(r32,v)           _BFSET_(r32, 6, 6,v)
    #define   GET16CPCB0_CTRL2_beFifosts_ctrl(r16)             _BFGET_(r16, 6, 6)
    #define   SET16CPCB0_CTRL2_beFifosts_ctrl(r16,v)           _BFSET_(r16, 6, 6,v)

    #define   GET32CPCB0_CTRL2_tgEn(r32)                       _BFGET_(r32, 7, 7)
    #define   SET32CPCB0_CTRL2_tgEn(r32,v)                     _BFSET_(r32, 7, 7,v)
    #define   GET16CPCB0_CTRL2_tgEn(r16)                       _BFGET_(r16, 7, 7)
    #define   SET16CPCB0_CTRL2_tgEn(r16,v)                     _BFSET_(r16, 7, 7,v)

    #define     w32CPCB0_CTRL2                                 {\
            UNSG32 uCTRL2_CLKEN_CTRL                           :  5;\
            UNSG32 uCTRL2_cpcb_clken                           :  1;\
            UNSG32 uCTRL2_beFifosts_ctrl                       :  1;\
            UNSG32 uCTRL2_tgEn                                 :  1;\
            UNSG32 RSVDx4_b8                                   : 24;\
          }
    union { UNSG32 u32CPCB0_CTRL2;
            struct w32CPCB0_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CPCB0_CTRL3_pixTot_pl1(r32)                 _BFGET_(r32,31, 0)
    #define   SET32CPCB0_CTRL3_pixTot_pl1(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32CPCB0_CTRL3                                 {\
            UNSG32 uCTRL3_pixTot_pl1                           : 32;\
          }
    union { UNSG32 u32CPCB0_CTRL3;
            struct w32CPCB0_CTRL3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CPCB0_CTRL5_pixTot_pl3(r32)                 _BFGET_(r32,31, 0)
    #define   SET32CPCB0_CTRL5_pixTot_pl3(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32CPCB0_CTRL5                                 {\
            UNSG32 uCTRL5_pixTot_pl3                           : 32;\
          }
    union { UNSG32 u32CPCB0_CTRL5;
            struct w32CPCB0_CTRL5;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CPCB0_CTRL6_pixTot_pl4(r32)                 _BFGET_(r32,31, 0)
    #define   SET32CPCB0_CTRL6_pixTot_pl4(r32,v)               _BFSET_(r32,31, 0,v)

    #define     w32CPCB0_CTRL6                                 {\
            UNSG32 uCTRL6_pixTot_pl4                           : 32;\
          }
    union { UNSG32 u32CPCB0_CTRL6;
            struct w32CPCB0_CTRL6;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CPCB0_CTRL8_pixLineTot_gfx0(r32)            _BFGET_(r32,11, 0)
    #define   SET32CPCB0_CTRL8_pixLineTot_gfx0(r32,v)          _BFSET_(r32,11, 0,v)
    #define   GET16CPCB0_CTRL8_pixLineTot_gfx0(r16)            _BFGET_(r16,11, 0)
    #define   SET16CPCB0_CTRL8_pixLineTot_gfx0(r16,v)          _BFSET_(r16,11, 0,v)

    #define   GET32CPCB0_CTRL8_pixLineTot_gfx1(r32)            _BFGET_(r32,23,12)
    #define   SET32CPCB0_CTRL8_pixLineTot_gfx1(r32,v)          _BFSET_(r32,23,12,v)

    #define   GET32CPCB0_CTRL8_lineDn_Gfx0_En(r32)             _BFGET_(r32,24,24)
    #define   SET32CPCB0_CTRL8_lineDn_Gfx0_En(r32,v)           _BFSET_(r32,24,24,v)
    #define   GET16CPCB0_CTRL8_lineDn_Gfx0_En(r16)             _BFGET_(r16, 8, 8)
    #define   SET16CPCB0_CTRL8_lineDn_Gfx0_En(r16,v)           _BFSET_(r16, 8, 8,v)

    #define   GET32CPCB0_CTRL8_lineDn_Gfx1_En(r32)             _BFGET_(r32,25,25)
    #define   SET32CPCB0_CTRL8_lineDn_Gfx1_En(r32,v)           _BFSET_(r32,25,25,v)
    #define   GET16CPCB0_CTRL8_lineDn_Gfx1_En(r16)             _BFGET_(r16, 9, 9)
    #define   SET16CPCB0_CTRL8_lineDn_Gfx1_En(r16,v)           _BFSET_(r16, 9, 9,v)

    #define     w32CPCB0_CTRL8                                 {\
            UNSG32 uCTRL8_pixLineTot_gfx0                      : 12;\
            UNSG32 uCTRL8_pixLineTot_gfx1                      : 12;\
            UNSG32 uCTRL8_lineDn_Gfx0_En                       :  1;\
            UNSG32 uCTRL8_lineDn_Gfx1_En                       :  1;\
            UNSG32 RSVDx14_b26                                 :  6;\
          }
    union { UNSG32 u32CPCB0_CTRL8;
            struct w32CPCB0_CTRL8;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CPCB0_CTRL9_pixLineTot_adpscl(r32)          _BFGET_(r32,11, 0)
    #define   SET32CPCB0_CTRL9_pixLineTot_adpscl(r32,v)        _BFSET_(r32,11, 0,v)
    #define   GET16CPCB0_CTRL9_pixLineTot_adpscl(r16)          _BFGET_(r16,11, 0)
    #define   SET16CPCB0_CTRL9_pixLineTot_adpscl(r16,v)        _BFSET_(r16,11, 0,v)

    #define   GET32CPCB0_CTRL9_lineDn_ADPSCL_En(r32)           _BFGET_(r32,12,12)
    #define   SET32CPCB0_CTRL9_lineDn_ADPSCL_En(r32,v)         _BFSET_(r32,12,12,v)
    #define   GET16CPCB0_CTRL9_lineDn_ADPSCL_En(r16)           _BFGET_(r16,12,12)
    #define   SET16CPCB0_CTRL9_lineDn_ADPSCL_En(r16,v)         _BFSET_(r16,12,12,v)

    #define   GET32CPCB0_CTRL9_lineDn_RstCtrl(r32)             _BFGET_(r32,14,13)
    #define   SET32CPCB0_CTRL9_lineDn_RstCtrl(r32,v)           _BFSET_(r32,14,13,v)
    #define   GET16CPCB0_CTRL9_lineDn_RstCtrl(r16)             _BFGET_(r16,14,13)
    #define   SET16CPCB0_CTRL9_lineDn_RstCtrl(r16,v)           _BFSET_(r16,14,13,v)

    #define   GET32CPCB0_CTRL9_lineDn_MainPl_RstCtrl_en(r32)   _BFGET_(r32,15,15)
    #define   SET32CPCB0_CTRL9_lineDn_MainPl_RstCtrl_en(r32,v) _BFSET_(r32,15,15,v)
    #define   GET16CPCB0_CTRL9_lineDn_MainPl_RstCtrl_en(r16)   _BFGET_(r16,15,15)
    #define   SET16CPCB0_CTRL9_lineDn_MainPl_RstCtrl_en(r16,v) _BFSET_(r16,15,15,v)

    #define   GET32CPCB0_CTRL9_lineDn_GFX0_RstCtrl_en(r32)     _BFGET_(r32,16,16)
    #define   SET32CPCB0_CTRL9_lineDn_GFX0_RstCtrl_en(r32,v)   _BFSET_(r32,16,16,v)
    #define   GET16CPCB0_CTRL9_lineDn_GFX0_RstCtrl_en(r16)     _BFGET_(r16, 0, 0)
    #define   SET16CPCB0_CTRL9_lineDn_GFX0_RstCtrl_en(r16,v)   _BFSET_(r16, 0, 0,v)

    #define   GET32CPCB0_CTRL9_lineDn_GFX1_RstCtrl_en(r32)     _BFGET_(r32,17,17)
    #define   SET32CPCB0_CTRL9_lineDn_GFX1_RstCtrl_en(r32,v)   _BFSET_(r32,17,17,v)
    #define   GET16CPCB0_CTRL9_lineDn_GFX1_RstCtrl_en(r16)     _BFGET_(r16, 1, 1)
    #define   SET16CPCB0_CTRL9_lineDn_GFX1_RstCtrl_en(r16,v)   _BFSET_(r16, 1, 1,v)

    #define     w32CPCB0_CTRL9                                 {\
            UNSG32 uCTRL9_pixLineTot_adpscl                    : 12;\
            UNSG32 uCTRL9_lineDn_ADPSCL_En                     :  1;\
            UNSG32 uCTRL9_lineDn_RstCtrl                       :  2;\
            UNSG32 uCTRL9_lineDn_MainPl_RstCtrl_en             :  1;\
            UNSG32 uCTRL9_lineDn_GFX0_RstCtrl_en               :  1;\
            UNSG32 uCTRL9_lineDn_GFX1_RstCtrl_en               :  1;\
            UNSG32 RSVDx18_b18                                 : 14;\
          }
    union { UNSG32 u32CPCB0_CTRL9;
            struct w32CPCB0_CTRL9;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CPCB0_CTRL10_input_swap_sel1(r32)           _BFGET_(r32, 5, 0)
    #define   SET32CPCB0_CTRL10_input_swap_sel1(r32,v)         _BFSET_(r32, 5, 0,v)
    #define   GET16CPCB0_CTRL10_input_swap_sel1(r16)           _BFGET_(r16, 5, 0)
    #define   SET16CPCB0_CTRL10_input_swap_sel1(r16,v)         _BFSET_(r16, 5, 0,v)

    #define   GET32CPCB0_CTRL10_input_swap_sel2(r32)           _BFGET_(r32,11, 6)
    #define   SET32CPCB0_CTRL10_input_swap_sel2(r32,v)         _BFSET_(r32,11, 6,v)
    #define   GET16CPCB0_CTRL10_input_swap_sel2(r16)           _BFGET_(r16,11, 6)
    #define   SET16CPCB0_CTRL10_input_swap_sel2(r16,v)         _BFSET_(r16,11, 6,v)

    #define   GET32CPCB0_CTRL10_input_swap_sel3(r32)           _BFGET_(r32,17,12)
    #define   SET32CPCB0_CTRL10_input_swap_sel3(r32,v)         _BFSET_(r32,17,12,v)

    #define     w32CPCB0_CTRL10                                {\
            UNSG32 uCTRL10_input_swap_sel1                     :  6;\
            UNSG32 uCTRL10_input_swap_sel2                     :  6;\
            UNSG32 uCTRL10_input_swap_sel3                     :  6;\
            UNSG32 RSVDx1C_b18                                 : 14;\
          }
    union { UNSG32 u32CPCB0_CTRL10;
            struct w32CPCB0_CTRL10;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32CPCB0_status_main_fifo_underflow(r32)       _BFGET_(r32, 0, 0)
    #define   SET32CPCB0_status_main_fifo_underflow(r32,v)     _BFSET_(r32, 0, 0,v)
    #define   GET16CPCB0_status_main_fifo_underflow(r16)       _BFGET_(r16, 0, 0)
    #define   SET16CPCB0_status_main_fifo_underflow(r16,v)     _BFSET_(r16, 0, 0,v)

    #define   GET32CPCB0_status_pip_fifo_underflow(r32)        _BFGET_(r32, 1, 1)
    #define   SET32CPCB0_status_pip_fifo_underflow(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16CPCB0_status_pip_fifo_underflow(r16)        _BFGET_(r16, 1, 1)
    #define   SET16CPCB0_status_pip_fifo_underflow(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32CPCB0_status_gfx0_fifo_underflow(r32)       _BFGET_(r32, 2, 2)
    #define   SET32CPCB0_status_gfx0_fifo_underflow(r32,v)     _BFSET_(r32, 2, 2,v)
    #define   GET16CPCB0_status_gfx0_fifo_underflow(r16)       _BFGET_(r16, 2, 2)
    #define   SET16CPCB0_status_gfx0_fifo_underflow(r16,v)     _BFSET_(r16, 2, 2,v)

    #define   GET32CPCB0_status_gfx1_fifo_underflow(r32)       _BFGET_(r32, 3, 3)
    #define   SET32CPCB0_status_gfx1_fifo_underflow(r32,v)     _BFSET_(r32, 3, 3,v)
    #define   GET16CPCB0_status_gfx1_fifo_underflow(r16)       _BFGET_(r16, 3, 3)
    #define   SET16CPCB0_status_gfx1_fifo_underflow(r16,v)     _BFSET_(r16, 3, 3,v)

    #define     w32CPCB0_status                                {\
            UNSG32 ustatus_main_fifo_underflow                 :  1;\
            UNSG32 ustatus_pip_fifo_underflow                  :  1;\
            UNSG32 ustatus_gfx0_fifo_underflow                 :  1;\
            UNSG32 ustatus_gfx1_fifo_underflow                 :  1;\
            UNSG32 RSVDx20_b4                                  : 28;\
          }
    union { UNSG32 u32CPCB0_status;
            struct w32CPCB0_status;
          };
    ///////////////////////////////////////////////////////////
              SIE_OVL                                          ie_OVL1;
    ///////////////////////////////////////////////////////////
              SIE_BETG                                         ie_CPCB_TG;
    ///////////////////////////////////////////////////////////
              SIE_CSC_C17O24                                   ie_MainPl_CSC;
    ///////////////////////////////////////////////////////////
    } SIE_CPCB0;

    typedef union  T32CPCB0_CTRL0
          { UNSG32 u32;
            struct w32CPCB0_CTRL0;
                 } T32CPCB0_CTRL0;
    typedef union  T32CPCB0_CTRL2
          { UNSG32 u32;
            struct w32CPCB0_CTRL2;
                 } T32CPCB0_CTRL2;
    typedef union  T32CPCB0_CTRL3
          { UNSG32 u32;
            struct w32CPCB0_CTRL3;
                 } T32CPCB0_CTRL3;
    typedef union  T32CPCB0_CTRL5
          { UNSG32 u32;
            struct w32CPCB0_CTRL5;
                 } T32CPCB0_CTRL5;
    typedef union  T32CPCB0_CTRL6
          { UNSG32 u32;
            struct w32CPCB0_CTRL6;
                 } T32CPCB0_CTRL6;
    typedef union  T32CPCB0_CTRL8
          { UNSG32 u32;
            struct w32CPCB0_CTRL8;
                 } T32CPCB0_CTRL8;
    typedef union  T32CPCB0_CTRL9
          { UNSG32 u32;
            struct w32CPCB0_CTRL9;
                 } T32CPCB0_CTRL9;
    typedef union  T32CPCB0_CTRL10
          { UNSG32 u32;
            struct w32CPCB0_CTRL10;
                 } T32CPCB0_CTRL10;
    typedef union  T32CPCB0_status
          { UNSG32 u32;
            struct w32CPCB0_status;
                 } T32CPCB0_status;
    ///////////////////////////////////////////////////////////

    typedef union  TCPCB0_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32CPCB0_CTRL0;
                   };
                 } TCPCB0_CTRL0;
    typedef union  TCPCB0_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32CPCB0_CTRL2;
                   };
                 } TCPCB0_CTRL2;
    typedef union  TCPCB0_CTRL3
          { UNSG32 u32[1];
            struct {
            struct w32CPCB0_CTRL3;
                   };
                 } TCPCB0_CTRL3;
    typedef union  TCPCB0_CTRL5
          { UNSG32 u32[1];
            struct {
            struct w32CPCB0_CTRL5;
                   };
                 } TCPCB0_CTRL5;
    typedef union  TCPCB0_CTRL6
          { UNSG32 u32[1];
            struct {
            struct w32CPCB0_CTRL6;
                   };
                 } TCPCB0_CTRL6;
    typedef union  TCPCB0_CTRL8
          { UNSG32 u32[1];
            struct {
            struct w32CPCB0_CTRL8;
                   };
                 } TCPCB0_CTRL8;
    typedef union  TCPCB0_CTRL9
          { UNSG32 u32[1];
            struct {
            struct w32CPCB0_CTRL9;
                   };
                 } TCPCB0_CTRL9;
    typedef union  TCPCB0_CTRL10
          { UNSG32 u32[1];
            struct {
            struct w32CPCB0_CTRL10;
                   };
                 } TCPCB0_CTRL10;
    typedef union  TCPCB0_status
          { UNSG32 u32[1];
            struct {
            struct w32CPCB0_status;
                   };
                 } TCPCB0_status;

    ///////////////////////////////////////////////////////////
     SIGN32 CPCB0_drvrd(SIE_CPCB0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 CPCB0_drvwr(SIE_CPCB0 *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void CPCB0_reset(SIE_CPCB0 *p);
     SIGN32 CPCB0_cmp  (SIE_CPCB0 *p, SIE_CPCB0 *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define CPCB0_check(p,pie,pfx,hLOG) CPCB0_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define CPCB0_print(p,    pfx,hLOG) CPCB0_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: CPCB0
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE OfflineRd                                (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (P-)
///               %unsigned 1  client_start              0x0
///                                    ###
///                                    * Start bit for the respective client0.
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  client_clear              0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear the asynchronous FIFO between the respective client0 and dHub.
///                                    ###
///               %unsigned 1  client_start1             0x0
///                                    ###
///                                    * Start bit for the respective client1.
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  client_clear1             0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear the asynchronous FIFO between the respective client1 and dHub.
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00004 CTRL1                (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for R0 read Client.
///                                    ###
///     @ 0x00008 CTRL2                (P-)
///               %unsigned 1  tg_start                  0x0
///                                    ###
///                                    * 0 : No effect on hardware.
///                                    * 1 : start
///                                    ###
///               %unsigned 1  tg_clear                  0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x0000C CTRL3                (P)
///               %unsigned 1  clken_ctrl0               0x0
///                                    ###
///                                    * Clock enable control for TG. Write 1 to make flow control independent of ready status from Read Client
///                                    ###
///               %unsigned 1  clken_ctrl1               0x0
///                                    ###
///                                    * Clock enable control for TG. Write 1 to make flow control independent of fifo_full status from VMX_VM or dvTest_iFifo (in VOP) based on selected path
///                                    * Clock enable control for TG. Write 1 to make flow control independent of ready status from Read Client1
///                                    ###
///               %unsigned 1  clken_ctrl2               0x0
///                                    ###
///                                    * Clock enable control for TG. Write 1 to make flow control independent of fifo_full status from VIP input FIFO.
///                                    ###
///               %unsigned 4  packSel                   0x0
///                                    ###
///                                    * PackSel for offline Read Client
///                                    * [0] : unpacking for 16bpp
///                                    * [1] : unpacking for 20bpp
///                                    * [2] : unpacking for 24bpp
///                                    * [3] : unpacking for 36bpp
///                                    * [4] : unpacking for 30bpp
///                                    * [5] : unpacking for 8bpp
///                                    * [6] : unpacking for 10bpp
///                                    * [remaining] : unused (invalid)
///                                    ###
///               %unsigned 1  nonStdResEn               0x0
///                                    ###
///                                    * Enable when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot                0x64
///                                    ###
///                                    * Total number of pixels in a line
///                                    ###
///               %unsigned 4  flushCnt                  0x5
///                                    ###
///                                    * Counter to determine the ready status of Read Client after end of line (only used when nonStdResEn = 1)
///                                    ###
///               %unsigned 1  ups422to444_bypass        0x0
///                                    ###
///                                    * 1: bypass, 0: IP enable
///                                    ###
///               %unsigned 3  idata_ctrl                0x0
///                                    ###
///                                    * [000] : input data read is 8bpc
///                                    * [001] : input data read is 10bpc
///                                    * [010] : input data read is 12bpc
///                                    * [011] : invalid
///                                    * [100] : input data read is 8bpc 420/422 SP
///                                    * [101] : input data read is 10bpc 420/422 SP
///                                    ###
///               %unsigned 1  fifosts_ctrl              0x0
///                                    ###
///                                    * Fifo full status control bit to generate tg_clken
///                                    * [0] : fifo full status from VMX_VM input Fifo (offline read path)
///                                    * [1] : fifo full status from VOP path AsyncFifo (for DV Test Path)
///                                    ###
///               %unsigned 1  idata_sel                 0x0
///                                    ###
///                                    * [0] : To select YUV444 input
///                                    * [1] : To select YUV422 input
///                                    ###
///               %unsigned 1  offline_mainRd_disable    0x0
///                                    ###
///                                    * Set to value 1 to disable offline_mainRd block and switch off clock. Default value 0.
///                                    ###
///     @ 0x00010 CTRL4                (P)
///               %unsigned 4  packSel                   0x0
///                                    ###
///                                    * PackSel for offline Read Client
///                                    * [0] : unpacking for 8bpp
///                                    * [1] : unpacking for 10bpp
///                                    * [remaining] : unused (invalid)
///                                    ###
///               %unsigned 1  nonStdResEn               0x0
///                                    ###
///                                    * Enable when resolution is not integer multiple of 16
///                                    ###
///               %unsigned 13 pixlineTot                0x64
///                                    ###
///                                    * Total number of pixels in a line
///                                    ###
///               %unsigned 4  flushCnt                  0x5
///                                    ###
///                                    * Counter to determine the ready status of Read Client after end of line (only used when nonStdResEn = 1)
///                                    ###
///               %unsigned 1  clken_ctrl3               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 1 to make flow control independent of ready status from Read Client1
///                                    ###
///               %unsigned 1  clken_ctrl2               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 1 to make flow control independent of fifo_full status from VIP input FIFO.
///                                    ###
///               %unsigned 1  rd_initval0               0x0
///                                    ###
///                                    * Initiallization value for read Mask for Read Client1
///                                    * in 420SP Cases.
///                                    ###
///               %unsigned 1  rd_initval1               0x1
///                                    ###
///                                    * Initiallization value for read Mask for Read Client1
///                                    * in 420SP Cases.
///                                    ###
///               %unsigned 1  rd_mask_sftrst            0x0
///                                    ###
///                                    * Soft reset to initialize read mask. Write 1 to initialize read mask with rd_initval0
///                                    ###
///               %unsigned 1  offlinerd_flush           0x0
///                                    ###
///                                    * Flush pulse for offline_mainRd. Write 1 to generate flush pulse.
///                                    ###
///               %unsigned 1  offline_flush_sel         0x0
///                                    ###
///                                    * Selection bit for flush pulse selection.
///                                    * 1: offlinerd_flush generated from “offlinerd_flush”
///                                    * 0: auto_flush coming from main pipe display TG.
///                                    ###
///               %%        3          # Stuffing bits...
///     @ 0x00014 CTRL5                (P)
///               %unsigned 32 tot                       0x64
///                                    ###
///                                    * Specifies the total number of 128-bit words that have to be fetched from DDR for R1 read Client.
///                                    ###
///     @ 0x00018                      (P)
///     # 0x00018 UPSTG                
///               $TG                  UPSTG             REG          
///                                    ###
///                                    * UPS TG registers for offilne read path
///                                    ###
///     @ 0x00058                      (P)
///     # 0x00058 UPS422to444_12B      
///               $UPS12               UPS422to444_12B   REG          
///                                    ###
///                                    * UPS422 to 444 registers
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     128B, bits:     756b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_OfflineRd
#define h_OfflineRd (){}

    #define     RA_OfflineRd_CTRL0                             0x0000

    #define     BA_OfflineRd_CTRL0_client_start                0x0000
    #define     B16OfflineRd_CTRL0_client_start                0x0000
    #define   LSb32OfflineRd_CTRL0_client_start                   0
    #define   LSb16OfflineRd_CTRL0_client_start                   0
    #define       bOfflineRd_CTRL0_client_start                1
    #define   MSK32OfflineRd_CTRL0_client_start                   0x00000001

    #define     BA_OfflineRd_CTRL0_client_clear                0x0000
    #define     B16OfflineRd_CTRL0_client_clear                0x0000
    #define   LSb32OfflineRd_CTRL0_client_clear                   1
    #define   LSb16OfflineRd_CTRL0_client_clear                   1
    #define       bOfflineRd_CTRL0_client_clear                1
    #define   MSK32OfflineRd_CTRL0_client_clear                   0x00000002

    #define     BA_OfflineRd_CTRL0_client_start1               0x0000
    #define     B16OfflineRd_CTRL0_client_start1               0x0000
    #define   LSb32OfflineRd_CTRL0_client_start1                  2
    #define   LSb16OfflineRd_CTRL0_client_start1                  2
    #define       bOfflineRd_CTRL0_client_start1               1
    #define   MSK32OfflineRd_CTRL0_client_start1                  0x00000004

    #define     BA_OfflineRd_CTRL0_client_clear1               0x0000
    #define     B16OfflineRd_CTRL0_client_clear1               0x0000
    #define   LSb32OfflineRd_CTRL0_client_clear1                  3
    #define   LSb16OfflineRd_CTRL0_client_clear1                  3
    #define       bOfflineRd_CTRL0_client_clear1               1
    #define   MSK32OfflineRd_CTRL0_client_clear1                  0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_OfflineRd_CTRL1                             0x0004

    #define     BA_OfflineRd_CTRL1_tot                         0x0004
    #define     B16OfflineRd_CTRL1_tot                         0x0004
    #define   LSb32OfflineRd_CTRL1_tot                            0
    #define   LSb16OfflineRd_CTRL1_tot                            0
    #define       bOfflineRd_CTRL1_tot                         32
    #define   MSK32OfflineRd_CTRL1_tot                            0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OfflineRd_CTRL2                             0x0008

    #define     BA_OfflineRd_CTRL2_tg_start                    0x0008
    #define     B16OfflineRd_CTRL2_tg_start                    0x0008
    #define   LSb32OfflineRd_CTRL2_tg_start                       0
    #define   LSb16OfflineRd_CTRL2_tg_start                       0
    #define       bOfflineRd_CTRL2_tg_start                    1
    #define   MSK32OfflineRd_CTRL2_tg_start                       0x00000001

    #define     BA_OfflineRd_CTRL2_tg_clear                    0x0008
    #define     B16OfflineRd_CTRL2_tg_clear                    0x0008
    #define   LSb32OfflineRd_CTRL2_tg_clear                       1
    #define   LSb16OfflineRd_CTRL2_tg_clear                       1
    #define       bOfflineRd_CTRL2_tg_clear                    1
    #define   MSK32OfflineRd_CTRL2_tg_clear                       0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_OfflineRd_CTRL3                             0x000C

    #define     BA_OfflineRd_CTRL3_clken_ctrl0                 0x000C
    #define     B16OfflineRd_CTRL3_clken_ctrl0                 0x000C
    #define   LSb32OfflineRd_CTRL3_clken_ctrl0                    0
    #define   LSb16OfflineRd_CTRL3_clken_ctrl0                    0
    #define       bOfflineRd_CTRL3_clken_ctrl0                 1
    #define   MSK32OfflineRd_CTRL3_clken_ctrl0                    0x00000001

    #define     BA_OfflineRd_CTRL3_clken_ctrl1                 0x000C
    #define     B16OfflineRd_CTRL3_clken_ctrl1                 0x000C
    #define   LSb32OfflineRd_CTRL3_clken_ctrl1                    1
    #define   LSb16OfflineRd_CTRL3_clken_ctrl1                    1
    #define       bOfflineRd_CTRL3_clken_ctrl1                 1
    #define   MSK32OfflineRd_CTRL3_clken_ctrl1                    0x00000002

    #define     BA_OfflineRd_CTRL3_clken_ctrl2                 0x000C
    #define     B16OfflineRd_CTRL3_clken_ctrl2                 0x000C
    #define   LSb32OfflineRd_CTRL3_clken_ctrl2                    2
    #define   LSb16OfflineRd_CTRL3_clken_ctrl2                    2
    #define       bOfflineRd_CTRL3_clken_ctrl2                 1
    #define   MSK32OfflineRd_CTRL3_clken_ctrl2                    0x00000004

    #define     BA_OfflineRd_CTRL3_packSel                     0x000C
    #define     B16OfflineRd_CTRL3_packSel                     0x000C
    #define   LSb32OfflineRd_CTRL3_packSel                        3
    #define   LSb16OfflineRd_CTRL3_packSel                        3
    #define       bOfflineRd_CTRL3_packSel                     4
    #define   MSK32OfflineRd_CTRL3_packSel                        0x00000078

    #define     BA_OfflineRd_CTRL3_nonStdResEn                 0x000C
    #define     B16OfflineRd_CTRL3_nonStdResEn                 0x000C
    #define   LSb32OfflineRd_CTRL3_nonStdResEn                    7
    #define   LSb16OfflineRd_CTRL3_nonStdResEn                    7
    #define       bOfflineRd_CTRL3_nonStdResEn                 1
    #define   MSK32OfflineRd_CTRL3_nonStdResEn                    0x00000080

    #define     BA_OfflineRd_CTRL3_pixlineTot                  0x000D
    #define     B16OfflineRd_CTRL3_pixlineTot                  0x000C
    #define   LSb32OfflineRd_CTRL3_pixlineTot                     8
    #define   LSb16OfflineRd_CTRL3_pixlineTot                     8
    #define       bOfflineRd_CTRL3_pixlineTot                  13
    #define   MSK32OfflineRd_CTRL3_pixlineTot                     0x001FFF00

    #define     BA_OfflineRd_CTRL3_flushCnt                    0x000E
    #define     B16OfflineRd_CTRL3_flushCnt                    0x000E
    #define   LSb32OfflineRd_CTRL3_flushCnt                       21
    #define   LSb16OfflineRd_CTRL3_flushCnt                       5
    #define       bOfflineRd_CTRL3_flushCnt                    4
    #define   MSK32OfflineRd_CTRL3_flushCnt                       0x01E00000

    #define     BA_OfflineRd_CTRL3_ups422to444_bypass          0x000F
    #define     B16OfflineRd_CTRL3_ups422to444_bypass          0x000E
    #define   LSb32OfflineRd_CTRL3_ups422to444_bypass             25
    #define   LSb16OfflineRd_CTRL3_ups422to444_bypass             9
    #define       bOfflineRd_CTRL3_ups422to444_bypass          1
    #define   MSK32OfflineRd_CTRL3_ups422to444_bypass             0x02000000

    #define     BA_OfflineRd_CTRL3_idata_ctrl                  0x000F
    #define     B16OfflineRd_CTRL3_idata_ctrl                  0x000E
    #define   LSb32OfflineRd_CTRL3_idata_ctrl                     26
    #define   LSb16OfflineRd_CTRL3_idata_ctrl                     10
    #define       bOfflineRd_CTRL3_idata_ctrl                  3
    #define   MSK32OfflineRd_CTRL3_idata_ctrl                     0x1C000000

    #define     BA_OfflineRd_CTRL3_fifosts_ctrl                0x000F
    #define     B16OfflineRd_CTRL3_fifosts_ctrl                0x000E
    #define   LSb32OfflineRd_CTRL3_fifosts_ctrl                   29
    #define   LSb16OfflineRd_CTRL3_fifosts_ctrl                   13
    #define       bOfflineRd_CTRL3_fifosts_ctrl                1
    #define   MSK32OfflineRd_CTRL3_fifosts_ctrl                   0x20000000

    #define     BA_OfflineRd_CTRL3_idata_sel                   0x000F
    #define     B16OfflineRd_CTRL3_idata_sel                   0x000E
    #define   LSb32OfflineRd_CTRL3_idata_sel                      30
    #define   LSb16OfflineRd_CTRL3_idata_sel                      14
    #define       bOfflineRd_CTRL3_idata_sel                   1
    #define   MSK32OfflineRd_CTRL3_idata_sel                      0x40000000

    #define     BA_OfflineRd_CTRL3_offline_mainRd_disable      0x000F
    #define     B16OfflineRd_CTRL3_offline_mainRd_disable      0x000E
    #define   LSb32OfflineRd_CTRL3_offline_mainRd_disable         31
    #define   LSb16OfflineRd_CTRL3_offline_mainRd_disable         15
    #define       bOfflineRd_CTRL3_offline_mainRd_disable      1
    #define   MSK32OfflineRd_CTRL3_offline_mainRd_disable         0x80000000
    ///////////////////////////////////////////////////////////
    #define     RA_OfflineRd_CTRL4                             0x0010

    #define     BA_OfflineRd_CTRL4_packSel                     0x0010
    #define     B16OfflineRd_CTRL4_packSel                     0x0010
    #define   LSb32OfflineRd_CTRL4_packSel                        0
    #define   LSb16OfflineRd_CTRL4_packSel                        0
    #define       bOfflineRd_CTRL4_packSel                     4
    #define   MSK32OfflineRd_CTRL4_packSel                        0x0000000F

    #define     BA_OfflineRd_CTRL4_nonStdResEn                 0x0010
    #define     B16OfflineRd_CTRL4_nonStdResEn                 0x0010
    #define   LSb32OfflineRd_CTRL4_nonStdResEn                    4
    #define   LSb16OfflineRd_CTRL4_nonStdResEn                    4
    #define       bOfflineRd_CTRL4_nonStdResEn                 1
    #define   MSK32OfflineRd_CTRL4_nonStdResEn                    0x00000010

    #define     BA_OfflineRd_CTRL4_pixlineTot                  0x0010
    #define     B16OfflineRd_CTRL4_pixlineTot                  0x0010
    #define   LSb32OfflineRd_CTRL4_pixlineTot                     5
    #define   LSb16OfflineRd_CTRL4_pixlineTot                     5
    #define       bOfflineRd_CTRL4_pixlineTot                  13
    #define   MSK32OfflineRd_CTRL4_pixlineTot                     0x0003FFE0

    #define     BA_OfflineRd_CTRL4_flushCnt                    0x0012
    #define     B16OfflineRd_CTRL4_flushCnt                    0x0012
    #define   LSb32OfflineRd_CTRL4_flushCnt                       18
    #define   LSb16OfflineRd_CTRL4_flushCnt                       2
    #define       bOfflineRd_CTRL4_flushCnt                    4
    #define   MSK32OfflineRd_CTRL4_flushCnt                       0x003C0000

    #define     BA_OfflineRd_CTRL4_clken_ctrl3                 0x0012
    #define     B16OfflineRd_CTRL4_clken_ctrl3                 0x0012
    #define   LSb32OfflineRd_CTRL4_clken_ctrl3                    22
    #define   LSb16OfflineRd_CTRL4_clken_ctrl3                    6
    #define       bOfflineRd_CTRL4_clken_ctrl3                 1
    #define   MSK32OfflineRd_CTRL4_clken_ctrl3                    0x00400000

    #define     BA_OfflineRd_CTRL4_clken_ctrl2                 0x0012
    #define     B16OfflineRd_CTRL4_clken_ctrl2                 0x0012
    #define   LSb32OfflineRd_CTRL4_clken_ctrl2                    23
    #define   LSb16OfflineRd_CTRL4_clken_ctrl2                    7
    #define       bOfflineRd_CTRL4_clken_ctrl2                 1
    #define   MSK32OfflineRd_CTRL4_clken_ctrl2                    0x00800000

    #define     BA_OfflineRd_CTRL4_rd_initval0                 0x0013
    #define     B16OfflineRd_CTRL4_rd_initval0                 0x0012
    #define   LSb32OfflineRd_CTRL4_rd_initval0                    24
    #define   LSb16OfflineRd_CTRL4_rd_initval0                    8
    #define       bOfflineRd_CTRL4_rd_initval0                 1
    #define   MSK32OfflineRd_CTRL4_rd_initval0                    0x01000000

    #define     BA_OfflineRd_CTRL4_rd_initval1                 0x0013
    #define     B16OfflineRd_CTRL4_rd_initval1                 0x0012
    #define   LSb32OfflineRd_CTRL4_rd_initval1                    25
    #define   LSb16OfflineRd_CTRL4_rd_initval1                    9
    #define       bOfflineRd_CTRL4_rd_initval1                 1
    #define   MSK32OfflineRd_CTRL4_rd_initval1                    0x02000000

    #define     BA_OfflineRd_CTRL4_rd_mask_sftrst              0x0013
    #define     B16OfflineRd_CTRL4_rd_mask_sftrst              0x0012
    #define   LSb32OfflineRd_CTRL4_rd_mask_sftrst                 26
    #define   LSb16OfflineRd_CTRL4_rd_mask_sftrst                 10
    #define       bOfflineRd_CTRL4_rd_mask_sftrst              1
    #define   MSK32OfflineRd_CTRL4_rd_mask_sftrst                 0x04000000

    #define     BA_OfflineRd_CTRL4_offlinerd_flush             0x0013
    #define     B16OfflineRd_CTRL4_offlinerd_flush             0x0012
    #define   LSb32OfflineRd_CTRL4_offlinerd_flush                27
    #define   LSb16OfflineRd_CTRL4_offlinerd_flush                11
    #define       bOfflineRd_CTRL4_offlinerd_flush             1
    #define   MSK32OfflineRd_CTRL4_offlinerd_flush                0x08000000

    #define     BA_OfflineRd_CTRL4_offline_flush_sel           0x0013
    #define     B16OfflineRd_CTRL4_offline_flush_sel           0x0012
    #define   LSb32OfflineRd_CTRL4_offline_flush_sel              28
    #define   LSb16OfflineRd_CTRL4_offline_flush_sel              12
    #define       bOfflineRd_CTRL4_offline_flush_sel           1
    #define   MSK32OfflineRd_CTRL4_offline_flush_sel              0x10000000
    ///////////////////////////////////////////////////////////
    #define     RA_OfflineRd_CTRL5                             0x0014

    #define     BA_OfflineRd_CTRL5_tot                         0x0014
    #define     B16OfflineRd_CTRL5_tot                         0x0014
    #define   LSb32OfflineRd_CTRL5_tot                            0
    #define   LSb16OfflineRd_CTRL5_tot                            0
    #define       bOfflineRd_CTRL5_tot                         32
    #define   MSK32OfflineRd_CTRL5_tot                            0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_OfflineRd_UPSTG                             0x0018
    ///////////////////////////////////////////////////////////
    #define     RA_OfflineRd_UPS422to444_12B                   0x0058
    ///////////////////////////////////////////////////////////

    typedef struct SIE_OfflineRd {
    ///////////////////////////////////////////////////////////
    #define   GET32OfflineRd_CTRL0_client_start(r32)           _BFGET_(r32, 0, 0)
    #define   SET32OfflineRd_CTRL0_client_start(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16OfflineRd_CTRL0_client_start(r16)           _BFGET_(r16, 0, 0)
    #define   SET16OfflineRd_CTRL0_client_start(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32OfflineRd_CTRL0_client_clear(r32)           _BFGET_(r32, 1, 1)
    #define   SET32OfflineRd_CTRL0_client_clear(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16OfflineRd_CTRL0_client_clear(r16)           _BFGET_(r16, 1, 1)
    #define   SET16OfflineRd_CTRL0_client_clear(r16,v)         _BFSET_(r16, 1, 1,v)

    #define   GET32OfflineRd_CTRL0_client_start1(r32)          _BFGET_(r32, 2, 2)
    #define   SET32OfflineRd_CTRL0_client_start1(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16OfflineRd_CTRL0_client_start1(r16)          _BFGET_(r16, 2, 2)
    #define   SET16OfflineRd_CTRL0_client_start1(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32OfflineRd_CTRL0_client_clear1(r32)          _BFGET_(r32, 3, 3)
    #define   SET32OfflineRd_CTRL0_client_clear1(r32,v)        _BFSET_(r32, 3, 3,v)
    #define   GET16OfflineRd_CTRL0_client_clear1(r16)          _BFGET_(r16, 3, 3)
    #define   SET16OfflineRd_CTRL0_client_clear1(r16,v)        _BFSET_(r16, 3, 3,v)

    #define     w32OfflineRd_CTRL0                             {\
            UNSG32 uCTRL0_client_start                         :  1;\
            UNSG32 uCTRL0_client_clear                         :  1;\
            UNSG32 uCTRL0_client_start1                        :  1;\
            UNSG32 uCTRL0_client_clear1                        :  1;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32OfflineRd_CTRL0;
            struct w32OfflineRd_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OfflineRd_CTRL1_tot(r32)                    _BFGET_(r32,31, 0)
    #define   SET32OfflineRd_CTRL1_tot(r32,v)                  _BFSET_(r32,31, 0,v)

    #define     w32OfflineRd_CTRL1                             {\
            UNSG32 uCTRL1_tot                                  : 32;\
          }
    union { UNSG32 u32OfflineRd_CTRL1;
            struct w32OfflineRd_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OfflineRd_CTRL2_tg_start(r32)               _BFGET_(r32, 0, 0)
    #define   SET32OfflineRd_CTRL2_tg_start(r32,v)             _BFSET_(r32, 0, 0,v)
    #define   GET16OfflineRd_CTRL2_tg_start(r16)               _BFGET_(r16, 0, 0)
    #define   SET16OfflineRd_CTRL2_tg_start(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32OfflineRd_CTRL2_tg_clear(r32)               _BFGET_(r32, 1, 1)
    #define   SET32OfflineRd_CTRL2_tg_clear(r32,v)             _BFSET_(r32, 1, 1,v)
    #define   GET16OfflineRd_CTRL2_tg_clear(r16)               _BFGET_(r16, 1, 1)
    #define   SET16OfflineRd_CTRL2_tg_clear(r16,v)             _BFSET_(r16, 1, 1,v)

    #define     w32OfflineRd_CTRL2                             {\
            UNSG32 uCTRL2_tg_start                             :  1;\
            UNSG32 uCTRL2_tg_clear                             :  1;\
            UNSG32 RSVDx8_b2                                   : 30;\
          }
    union { UNSG32 u32OfflineRd_CTRL2;
            struct w32OfflineRd_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OfflineRd_CTRL3_clken_ctrl0(r32)            _BFGET_(r32, 0, 0)
    #define   SET32OfflineRd_CTRL3_clken_ctrl0(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16OfflineRd_CTRL3_clken_ctrl0(r16)            _BFGET_(r16, 0, 0)
    #define   SET16OfflineRd_CTRL3_clken_ctrl0(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32OfflineRd_CTRL3_clken_ctrl1(r32)            _BFGET_(r32, 1, 1)
    #define   SET32OfflineRd_CTRL3_clken_ctrl1(r32,v)          _BFSET_(r32, 1, 1,v)
    #define   GET16OfflineRd_CTRL3_clken_ctrl1(r16)            _BFGET_(r16, 1, 1)
    #define   SET16OfflineRd_CTRL3_clken_ctrl1(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32OfflineRd_CTRL3_clken_ctrl2(r32)            _BFGET_(r32, 2, 2)
    #define   SET32OfflineRd_CTRL3_clken_ctrl2(r32,v)          _BFSET_(r32, 2, 2,v)
    #define   GET16OfflineRd_CTRL3_clken_ctrl2(r16)            _BFGET_(r16, 2, 2)
    #define   SET16OfflineRd_CTRL3_clken_ctrl2(r16,v)          _BFSET_(r16, 2, 2,v)

    #define   GET32OfflineRd_CTRL3_packSel(r32)                _BFGET_(r32, 6, 3)
    #define   SET32OfflineRd_CTRL3_packSel(r32,v)              _BFSET_(r32, 6, 3,v)
    #define   GET16OfflineRd_CTRL3_packSel(r16)                _BFGET_(r16, 6, 3)
    #define   SET16OfflineRd_CTRL3_packSel(r16,v)              _BFSET_(r16, 6, 3,v)

    #define   GET32OfflineRd_CTRL3_nonStdResEn(r32)            _BFGET_(r32, 7, 7)
    #define   SET32OfflineRd_CTRL3_nonStdResEn(r32,v)          _BFSET_(r32, 7, 7,v)
    #define   GET16OfflineRd_CTRL3_nonStdResEn(r16)            _BFGET_(r16, 7, 7)
    #define   SET16OfflineRd_CTRL3_nonStdResEn(r16,v)          _BFSET_(r16, 7, 7,v)

    #define   GET32OfflineRd_CTRL3_pixlineTot(r32)             _BFGET_(r32,20, 8)
    #define   SET32OfflineRd_CTRL3_pixlineTot(r32,v)           _BFSET_(r32,20, 8,v)

    #define   GET32OfflineRd_CTRL3_flushCnt(r32)               _BFGET_(r32,24,21)
    #define   SET32OfflineRd_CTRL3_flushCnt(r32,v)             _BFSET_(r32,24,21,v)
    #define   GET16OfflineRd_CTRL3_flushCnt(r16)               _BFGET_(r16, 8, 5)
    #define   SET16OfflineRd_CTRL3_flushCnt(r16,v)             _BFSET_(r16, 8, 5,v)

    #define   GET32OfflineRd_CTRL3_ups422to444_bypass(r32)     _BFGET_(r32,25,25)
    #define   SET32OfflineRd_CTRL3_ups422to444_bypass(r32,v)   _BFSET_(r32,25,25,v)
    #define   GET16OfflineRd_CTRL3_ups422to444_bypass(r16)     _BFGET_(r16, 9, 9)
    #define   SET16OfflineRd_CTRL3_ups422to444_bypass(r16,v)   _BFSET_(r16, 9, 9,v)

    #define   GET32OfflineRd_CTRL3_idata_ctrl(r32)             _BFGET_(r32,28,26)
    #define   SET32OfflineRd_CTRL3_idata_ctrl(r32,v)           _BFSET_(r32,28,26,v)
    #define   GET16OfflineRd_CTRL3_idata_ctrl(r16)             _BFGET_(r16,12,10)
    #define   SET16OfflineRd_CTRL3_idata_ctrl(r16,v)           _BFSET_(r16,12,10,v)

    #define   GET32OfflineRd_CTRL3_fifosts_ctrl(r32)           _BFGET_(r32,29,29)
    #define   SET32OfflineRd_CTRL3_fifosts_ctrl(r32,v)         _BFSET_(r32,29,29,v)
    #define   GET16OfflineRd_CTRL3_fifosts_ctrl(r16)           _BFGET_(r16,13,13)
    #define   SET16OfflineRd_CTRL3_fifosts_ctrl(r16,v)         _BFSET_(r16,13,13,v)

    #define   GET32OfflineRd_CTRL3_idata_sel(r32)              _BFGET_(r32,30,30)
    #define   SET32OfflineRd_CTRL3_idata_sel(r32,v)            _BFSET_(r32,30,30,v)
    #define   GET16OfflineRd_CTRL3_idata_sel(r16)              _BFGET_(r16,14,14)
    #define   SET16OfflineRd_CTRL3_idata_sel(r16,v)            _BFSET_(r16,14,14,v)

    #define   GET32OfflineRd_CTRL3_offline_mainRd_disable(r32) _BFGET_(r32,31,31)
    #define   SET32OfflineRd_CTRL3_offline_mainRd_disable(r32,v) _BFSET_(r32,31,31,v)
    #define   GET16OfflineRd_CTRL3_offline_mainRd_disable(r16) _BFGET_(r16,15,15)
    #define   SET16OfflineRd_CTRL3_offline_mainRd_disable(r16,v) _BFSET_(r16,15,15,v)

    #define     w32OfflineRd_CTRL3                             {\
            UNSG32 uCTRL3_clken_ctrl0                          :  1;\
            UNSG32 uCTRL3_clken_ctrl1                          :  1;\
            UNSG32 uCTRL3_clken_ctrl2                          :  1;\
            UNSG32 uCTRL3_packSel                              :  4;\
            UNSG32 uCTRL3_nonStdResEn                          :  1;\
            UNSG32 uCTRL3_pixlineTot                           : 13;\
            UNSG32 uCTRL3_flushCnt                             :  4;\
            UNSG32 uCTRL3_ups422to444_bypass                   :  1;\
            UNSG32 uCTRL3_idata_ctrl                           :  3;\
            UNSG32 uCTRL3_fifosts_ctrl                         :  1;\
            UNSG32 uCTRL3_idata_sel                            :  1;\
            UNSG32 uCTRL3_offline_mainRd_disable               :  1;\
          }
    union { UNSG32 u32OfflineRd_CTRL3;
            struct w32OfflineRd_CTRL3;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OfflineRd_CTRL4_packSel(r32)                _BFGET_(r32, 3, 0)
    #define   SET32OfflineRd_CTRL4_packSel(r32,v)              _BFSET_(r32, 3, 0,v)
    #define   GET16OfflineRd_CTRL4_packSel(r16)                _BFGET_(r16, 3, 0)
    #define   SET16OfflineRd_CTRL4_packSel(r16,v)              _BFSET_(r16, 3, 0,v)

    #define   GET32OfflineRd_CTRL4_nonStdResEn(r32)            _BFGET_(r32, 4, 4)
    #define   SET32OfflineRd_CTRL4_nonStdResEn(r32,v)          _BFSET_(r32, 4, 4,v)
    #define   GET16OfflineRd_CTRL4_nonStdResEn(r16)            _BFGET_(r16, 4, 4)
    #define   SET16OfflineRd_CTRL4_nonStdResEn(r16,v)          _BFSET_(r16, 4, 4,v)

    #define   GET32OfflineRd_CTRL4_pixlineTot(r32)             _BFGET_(r32,17, 5)
    #define   SET32OfflineRd_CTRL4_pixlineTot(r32,v)           _BFSET_(r32,17, 5,v)

    #define   GET32OfflineRd_CTRL4_flushCnt(r32)               _BFGET_(r32,21,18)
    #define   SET32OfflineRd_CTRL4_flushCnt(r32,v)             _BFSET_(r32,21,18,v)
    #define   GET16OfflineRd_CTRL4_flushCnt(r16)               _BFGET_(r16, 5, 2)
    #define   SET16OfflineRd_CTRL4_flushCnt(r16,v)             _BFSET_(r16, 5, 2,v)

    #define   GET32OfflineRd_CTRL4_clken_ctrl3(r32)            _BFGET_(r32,22,22)
    #define   SET32OfflineRd_CTRL4_clken_ctrl3(r32,v)          _BFSET_(r32,22,22,v)
    #define   GET16OfflineRd_CTRL4_clken_ctrl3(r16)            _BFGET_(r16, 6, 6)
    #define   SET16OfflineRd_CTRL4_clken_ctrl3(r16,v)          _BFSET_(r16, 6, 6,v)

    #define   GET32OfflineRd_CTRL4_clken_ctrl2(r32)            _BFGET_(r32,23,23)
    #define   SET32OfflineRd_CTRL4_clken_ctrl2(r32,v)          _BFSET_(r32,23,23,v)
    #define   GET16OfflineRd_CTRL4_clken_ctrl2(r16)            _BFGET_(r16, 7, 7)
    #define   SET16OfflineRd_CTRL4_clken_ctrl2(r16,v)          _BFSET_(r16, 7, 7,v)

    #define   GET32OfflineRd_CTRL4_rd_initval0(r32)            _BFGET_(r32,24,24)
    #define   SET32OfflineRd_CTRL4_rd_initval0(r32,v)          _BFSET_(r32,24,24,v)
    #define   GET16OfflineRd_CTRL4_rd_initval0(r16)            _BFGET_(r16, 8, 8)
    #define   SET16OfflineRd_CTRL4_rd_initval0(r16,v)          _BFSET_(r16, 8, 8,v)

    #define   GET32OfflineRd_CTRL4_rd_initval1(r32)            _BFGET_(r32,25,25)
    #define   SET32OfflineRd_CTRL4_rd_initval1(r32,v)          _BFSET_(r32,25,25,v)
    #define   GET16OfflineRd_CTRL4_rd_initval1(r16)            _BFGET_(r16, 9, 9)
    #define   SET16OfflineRd_CTRL4_rd_initval1(r16,v)          _BFSET_(r16, 9, 9,v)

    #define   GET32OfflineRd_CTRL4_rd_mask_sftrst(r32)         _BFGET_(r32,26,26)
    #define   SET32OfflineRd_CTRL4_rd_mask_sftrst(r32,v)       _BFSET_(r32,26,26,v)
    #define   GET16OfflineRd_CTRL4_rd_mask_sftrst(r16)         _BFGET_(r16,10,10)
    #define   SET16OfflineRd_CTRL4_rd_mask_sftrst(r16,v)       _BFSET_(r16,10,10,v)

    #define   GET32OfflineRd_CTRL4_offlinerd_flush(r32)        _BFGET_(r32,27,27)
    #define   SET32OfflineRd_CTRL4_offlinerd_flush(r32,v)      _BFSET_(r32,27,27,v)
    #define   GET16OfflineRd_CTRL4_offlinerd_flush(r16)        _BFGET_(r16,11,11)
    #define   SET16OfflineRd_CTRL4_offlinerd_flush(r16,v)      _BFSET_(r16,11,11,v)

    #define   GET32OfflineRd_CTRL4_offline_flush_sel(r32)      _BFGET_(r32,28,28)
    #define   SET32OfflineRd_CTRL4_offline_flush_sel(r32,v)    _BFSET_(r32,28,28,v)
    #define   GET16OfflineRd_CTRL4_offline_flush_sel(r16)      _BFGET_(r16,12,12)
    #define   SET16OfflineRd_CTRL4_offline_flush_sel(r16,v)    _BFSET_(r16,12,12,v)

    #define     w32OfflineRd_CTRL4                             {\
            UNSG32 uCTRL4_packSel                              :  4;\
            UNSG32 uCTRL4_nonStdResEn                          :  1;\
            UNSG32 uCTRL4_pixlineTot                           : 13;\
            UNSG32 uCTRL4_flushCnt                             :  4;\
            UNSG32 uCTRL4_clken_ctrl3                          :  1;\
            UNSG32 uCTRL4_clken_ctrl2                          :  1;\
            UNSG32 uCTRL4_rd_initval0                          :  1;\
            UNSG32 uCTRL4_rd_initval1                          :  1;\
            UNSG32 uCTRL4_rd_mask_sftrst                       :  1;\
            UNSG32 uCTRL4_offlinerd_flush                      :  1;\
            UNSG32 uCTRL4_offline_flush_sel                    :  1;\
            UNSG32 RSVDx10_b29                                 :  3;\
          }
    union { UNSG32 u32OfflineRd_CTRL4;
            struct w32OfflineRd_CTRL4;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32OfflineRd_CTRL5_tot(r32)                    _BFGET_(r32,31, 0)
    #define   SET32OfflineRd_CTRL5_tot(r32,v)                  _BFSET_(r32,31, 0,v)

    #define     w32OfflineRd_CTRL5                             {\
            UNSG32 uCTRL5_tot                                  : 32;\
          }
    union { UNSG32 u32OfflineRd_CTRL5;
            struct w32OfflineRd_CTRL5;
          };
    ///////////////////////////////////////////////////////////
              SIE_TG                                           ie_UPSTG;
    ///////////////////////////////////////////////////////////
              SIE_UPS12                                        ie_UPS422to444_12B;
    ///////////////////////////////////////////////////////////
    } SIE_OfflineRd;

    typedef union  T32OfflineRd_CTRL0
          { UNSG32 u32;
            struct w32OfflineRd_CTRL0;
                 } T32OfflineRd_CTRL0;
    typedef union  T32OfflineRd_CTRL1
          { UNSG32 u32;
            struct w32OfflineRd_CTRL1;
                 } T32OfflineRd_CTRL1;
    typedef union  T32OfflineRd_CTRL2
          { UNSG32 u32;
            struct w32OfflineRd_CTRL2;
                 } T32OfflineRd_CTRL2;
    typedef union  T32OfflineRd_CTRL3
          { UNSG32 u32;
            struct w32OfflineRd_CTRL3;
                 } T32OfflineRd_CTRL3;
    typedef union  T32OfflineRd_CTRL4
          { UNSG32 u32;
            struct w32OfflineRd_CTRL4;
                 } T32OfflineRd_CTRL4;
    typedef union  T32OfflineRd_CTRL5
          { UNSG32 u32;
            struct w32OfflineRd_CTRL5;
                 } T32OfflineRd_CTRL5;
    ///////////////////////////////////////////////////////////

    typedef union  TOfflineRd_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32OfflineRd_CTRL0;
                   };
                 } TOfflineRd_CTRL0;
    typedef union  TOfflineRd_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32OfflineRd_CTRL1;
                   };
                 } TOfflineRd_CTRL1;
    typedef union  TOfflineRd_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32OfflineRd_CTRL2;
                   };
                 } TOfflineRd_CTRL2;
    typedef union  TOfflineRd_CTRL3
          { UNSG32 u32[1];
            struct {
            struct w32OfflineRd_CTRL3;
                   };
                 } TOfflineRd_CTRL3;
    typedef union  TOfflineRd_CTRL4
          { UNSG32 u32[1];
            struct {
            struct w32OfflineRd_CTRL4;
                   };
                 } TOfflineRd_CTRL4;
    typedef union  TOfflineRd_CTRL5
          { UNSG32 u32[1];
            struct {
            struct w32OfflineRd_CTRL5;
                   };
                 } TOfflineRd_CTRL5;

    ///////////////////////////////////////////////////////////
     SIGN32 OfflineRd_drvrd(SIE_OfflineRd *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 OfflineRd_drvwr(SIE_OfflineRd *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void OfflineRd_reset(SIE_OfflineRd *p);
     SIGN32 OfflineRd_cmp  (SIE_OfflineRd *p, SIE_OfflineRd *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define OfflineRd_check(p,pie,pfx,hLOG) OfflineRd_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define OfflineRd_print(p,    pfx,hLOG) OfflineRd_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: OfflineRd
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE EL_PIPE                                  (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (P-)
///               %unsigned 1  tg_start                  0x0
///                                    ###
///                                    * Start bit for tg
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  tg_clear                  0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear tg
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 CTRL1                (P)
///               %unsigned 1  clken_ctrl0               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of ready status from Read Client0
///                                    ###
///               %unsigned 1  clken_ctrl1               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of ready status from Read Client1
///                                    ###
///               %unsigned 1  clken_ctrl2               0x1
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of fifo_full status from dvComp EL iFiFo
///                                    ###
///               %unsigned 1  clken_ctrl3               0x0
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of fifo_full status from ovpScl iFiFo luma
///                                    ###
///               %unsigned 1  clken_ctrl4               0x0
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of fifo_full status from ovpScl iFiFo chroma
///                                    ###
///               %unsigned 3  idatctrl                  0x0
///                                    ###
///                                    * Input data control for 8bit and 10bit from respective clients :
///                                    * [000] : 8bpc data from DeintRd Clients
///                                    * [001] : 10bpc data from DeintRd Clients
///                                    * [010] : 8bpc data from GFX0/PIP Rd Clients
///                                    * [011] : 10bpc data from GFX0/PIP Rd Clients
///                                    * [100] : 8bpc data from OVP Rd Clients
///                                    * [101] : 10bpc data from OVP Rd Clients
///                                    ###
///               %unsigned 1  dif2k_blk_en              0x0
///                                    ###
///                                    * Write 1 to enable DIF block for Tiled input formats V4H8 and V4H6
///                                    ###
///               %unsigned 1  read_en                   0x0
///                                    ###
///                                    * Read Enable select between GFX0/PIP Channel and DEINT Channel
///                                    * [0] : Read data is from GFX0/PIP channels (ReadClients)
///                                    * [1] : Read data is from DEINT channels (ReadClients)
///                                    ###
///               %unsigned 1  ups420_2k_mode            0x0
///                                    ###
///                                    * 0 : FHD UPS
///                                    * 1 : 4K UPS
///                                    ###
///               %unsigned 1  el_rd_initval0            0x0
///                                    ###
///                                    * Initiallization value for read Mask for Enhancement Layer Read Client's (420SP Cases)
///                                    ###
///               %unsigned 1  el_rd_initval1            0x1
///                                    ###
///                                    * Initiallization value for read Mask for Enhancement Layer Read Client's (420SP Cases)
///                                    ###
///               %unsigned 1  rd_mask_sftrst            0x0
///                                    ###
///                                    * Soft reset to initialize read mask. Write 1 to initialize read mask with el_rd_initval0
///                                    ###
///               %unsigned 1  el_rdsel_420SP            0x0
///                                    ###
///                                    * Read select from read client (R1) for 420 SP format case [Enhancement Layer]
///                                    ###
///               %unsigned 1  bitMap_en                 0x0
///                                    ###
///                                    * Control bit to enable BITMAP in Enhancement layer. Default disabled. Write 1 to enable BITMAP20
///                                    ###
///               %unsigned 1  pip_rd_sel                0x0
///                                    ###
///                                    * Read Select bit for selecting read enable to PIP/GFX0 Read Clients from either Enhancement layer (EL) or PIP/GFX0 Path
///                                    * [0] : Read Enable is from PIP/GFX0 paths
///                                    * [1] : Read Enable is from Enhancement layer pipe for DETILE 2K input data
///                                    ###
///               %unsigned 1  dint_rd_sel               0x0
///                                    ###
///                                    * Read Select bit for selecting read enable to DEINT Read Clients from either Enhancement layer (EL) or DEINTERLACER (vp_top)
///                                    * [0] : Read Enable is from DEINTERLACE
///                                    * [1] : Read Enable is from Enhancement layer pipe for DETILE 2K input data
///                                    ###
///               %unsigned 1  crop_de_en                0x0
///                                    ###
///                                    * Enable for cropped de's to be used for cropped input read from Read Client's which is fed to DETILE-UPS420
///                                    * Write 1 to enable it. Default disabled.
///                                    ###
///               %unsigned 1  crop_de2_en               0x0
///                                    ###
///                                    * Enable for cropped de's to be used for cropped input support for 420-SemiPlanar Input for Enhancement Layer.
///                                    * Note : crop_de_en bit should be high for this mode and EL TG to be programmed accordingly for Luma, Croma and DE (required to fetch data from Read Client)
///                                    * Write 1 to enable it. Default disabled.
///                                    ###
///               %unsigned 1  detile2k_idata_sel        0x0
///                                    ###
///                                    * [0] : Input data from EL PIPE Rd Client
///                                    * [1] : Input data from OVP PIPE
///                                    ###
///               %unsigned 1  clken_ctrl5               0x0
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of ready status from OVP Read Client0
///                                    ###
///               %unsigned 1  clken_ctrl6               0x0
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of ready status from OVP Read Client1
///                                    ###
///               %unsigned 1  ovp_rd_sel                0x0
///                                    ###
///                                    * Read Select bit for selecting read enable to OVP Read Clients from Enhancement layer (EL)
///                                    * [0] : Read Enable is from OVP PIPE
///                                    * [1] : Read Enable is from Enhancement layer pipe for DETILE 2K input data
///                                    ###
///               %unsigned 1  clken_ctrl7               0x0
///                                    ###
///                                    * Clock enable control for TG. Write 0 to make flow control independent of fifo full status from PIP input fifo.
///                                    ###
///               %%        7          # Stuffing bits...
///     @ 0x00008 CTRL2                (P)
///               %unsigned 1  uv_mask_val0              0x0
///                                    ###
///                                    * Mask value for UV data read control for OVPSCLWRAP (EL Path)
///                                    * Default 0. For Front-end, alternate line control to be independent of UV
///                                    ###
///               %unsigned 1  uv_mask_val1              0x0
///                                    ###
///                                    * Mask value for UV data read control for OVPSCLWRAP (EL Path)
///                                    * Default 0. For Front-end, alternate line control to be independent of UV
///                                    ###
///               %unsigned 1  uv_mask_disable           0x0
///                                    ###
///                                    * Control bit to diable uv_mask generation for OVP SCL Pipe (Croma control) (EL Path)
///                                    * Write 1 to disable UV mask generation. Default enabled.
///                                    ###
///               %unsigned 1  luma_rpt_rd_mask_sftrst   0x0
///                                    ###
///                                    * Soft reset to initialize read mask. Write 1 to initialize read mask with el_luma_rd_initval0
///                                    ###
///               %unsigned 1  el_luma_rd_initval0       0x0
///                                    ###
///                                    * Initiallization value for Luma read Mask for Enhancement Layer Read Client's (420SP Luma Repeat Cases)
///                                    ###
///               %unsigned 1  el_luma_rd_initval1       0x1
///                                    ###
///                                    * Initiallization value for Luma read Mask for Enhancement Layer Read Client's (420SP Luma Repeat Cases)
///                                    ###
///               %unsigned 3  luma_line_cnt             0x3
///                                    ###
///                                    * Luma Line Count Number. Should be programmed
///                                    * for Luma Repeat cases for DETILE UPS420
///                                    * (a) For Detile UPS420 cases when tile_height= 4,
///                                    * it should be programmed as 0x3 (default value)
///                                    * (b) For Tile Format tile height=3,
///                                    * program luma_line_cnt = 0x2
///                                    * (c) For Tile Format tile height=8,
///                                    * program luma_line_cnt = 0x7
///                                    * (d) For Tile Format tile height=6,
///                                    * program luma_line_cnt = 0x5
///                                    ###
///               %unsigned 2  luma_lineCnt_rstval0      0x0
///                                    ###
///                                    * Programmable lineCnt reset value at soft reset or End of Frame. Defaule 0
///                                    ###
///               %unsigned 2  luma_lineCnt_rstval1      0x0
///                                    ###
///                                    * Programmable lineCnt reset value at soft reset or End of Frame. Defaule 0
///                                    ###
///               %unsigned 4  lineCnt_rstval0           0x0
///                                    ###
///                                    * Programmable lineCnt reset value at soft reset or End of Frame. Defaule 0
///                                    ###
///               %unsigned 4  lineCnt_rstval1           0x0
///                                    ###
///                                    * Programmable lineCnt reset value at soft reset or End of Frame. Defaule 0
///                                    ###
///               %unsigned 5  cr_line_cnt               0x3
///                                    ###
///                                    * Croma Line Count Number.
///                                    * (a) For Detile UPS420 Tile Format cases when tile_height = 4 & no luma repeat), it should be programmed as 0x3 (default value)
///                                    * (b) For Tile Format (tile width=4 && tile height=3) and no luma repeat,
///                                    * program cr_line_cnt = 0x2
///                                    * (c) Tile SP i/p and Luma Repeat case when tile height = 4 ,
///                                    * program cr_line_cnt = 0xF
///                                    * (d) Tile SP i/p and Luma Repeat case when tile height = 3 ,
///                                    * program cr_line_cnt = 0xB
///                                    * (e) For SP(Non Tile) i/p and Luma Repeat case,
///                                    * program cr_line_cnt = 0x3(f) Tile SP i/p and Luma Repeat case when tileheight = 8
///                                    * program cr_line_cnt = 0x1F(g) Tile SP i/p and Luma Repeat case when tileheight = 6
///                                    * program cr_line_cnt = 0x17
///                                    * (h) For Detile UPS420 Tile Format cases when tile_height = 8 & no luma repeat), it should be programmed as 0x7 (default value)
///                                    * (i)For Detile UPS420 Tile Format cases when tile_height = 6 & no luma repeat), it should be programmed as 0x5 (default value)
///                                    ###
///               %unsigned 1  tgEn_rstEn                0x1
///                                    ###
///                                    * ELTG tgEN reset enable bit. Default Enabled.
///                                    * Write 0 to disable tgEn being cleared on display TG frst.
///                                    ###
///               %unsigned 1  combo_pwr_opt_en          0x1
///                                    ###
///                                    * Enable bit to switch off the transition in the combo modules when it is not in functional path.
///                                    * [1]: Enable power optimization logic.
///                                    * [0]: Disable power optimization logic.
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x0000C RASTERSCAN           (P)
///               %unsigned 1  ovp_rd_sel_420sp          0x0
///                                    ###
///                                    * Select bit to enable read from ReadClients in EL PIPE.
///                                    * [0]:Read Enable for ReadClients in EL PIPE is
///                                    * dependent on feTg control signals in EL PIPE.
///                                    * (420SP input for OVP).[1]:Read Enable is dependent on rsFetg controlsignals(420SP input for OVP).
///                                    ###
///               %unsigned 1  el_rd_sel_420sp           0x0
///                                    ###
///                                    * Select bit to enable read from ReadClients in EL PIPE.
///                                    * [0]:Read Enable for ReadClients in EL PIPE is
///                                    * dependent on feTg control signals in EL PIPE.
///                                    * (420SP input for DV Composer EL Plane).[1]:Read Enable is dependent on rsFetg controlsignals(420SP input).
///                                    ###
///               %unsigned 1  el_composer_420sp         0x0
///                                    ###
///                                    * Select bit to control input for DV Composer EL
///                                    * Plane.
///                                    * [0]: Input data is controlled by feTg control signals in EL PIPE.(420SP input for DV Composer EL Plane).[1]: Input data is controlled by rsFetg controlsignals(420SP input for DV Composer EL Plane).
///                                    ###
///               %unsigned 1  ovp_420sp_datasel         0x0
///                                    ###
///                                    * [0] : Input data(420SP) is from EL(deint) readclient and controlled by feTg in EL PIPE.(420SP input for OVP).[1] : Input data(420SP) is from any readclient andcontrolled by rsFetg.(420SP input for OVP through EL path).
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00010 INVSCAN              (P)
///               %unsigned 1  bitmap128_Rd0_en          0x0
///               %unsigned 1  bitmap128_Rd1_en          0x0
///                                    ###
///                                    * [1] : enable for H Inverse Scan.
///                                    * [0] : Default Value.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00014                      (P)
///     # 0x00014 EL_BITMAP20          
///               $BITMAP20            EL_BITMAP20       REG          
///                                    ###
///                                    * BITMAP registers for mapping 20bits of pixel data before giving to Enhancement Layer Pipe
///                                    * Default [1:1] mapping.
///                                    ###
///     @ 0x00024                      (W-)
///     #         # Stuffing bytes...
///               %% 7904
///     @ 0x00400                      (P)
///     # 0x00400 DIF2K_Y              
///               $DIF                 DIF2K_Y           REG          
///                                    ###
///                                    * DeTile Input Formatter related registers for Luma
///                                    ###
///     @ 0x00C00                      (P)
///     # 0x00C00 DIF2K_C              
///               $DIF                 DIF2K_C           REG          
///                                    ###
///                                    * DeTile Input Formatter related registers for Croma
///                                    ###
///     @ 0x01400                      (P)
///     # 0x01400 DTILE_UPS420_2KY     
///               $UPS_420_422         DTILE_UPS420_2KY  REG          
///                                    ###
///                                    * DTILE UPS 2K registers for 420-> 422 UPS & coefficients for Main EL Plane (Luma Component)
///                                    ###
///     @ 0x0142C                      (P)
///     # 0x0142C DTILE_UPS420_2KC     
///               $UPS_420_422         DTILE_UPS420_2KC  REG          
///                                    ###
///                                    * DTILE UPS 2K registers for 420-> 422 UPS & coefficients for Main EL Plane (Croma Component)
///                                    ###
///     @ 0x01458                      (P)
///     # 0x01458 feTG_EL              
///               $TG_MAIN             feTG_EL           REG          
///                                    ###
///                                    * dummy TG for Enhancement Layer
///                                    ###
///     @ 0x014A0                      (W-)
///     #         # Stuffing bytes...
///               %% 6912
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    6144B, bits:    1237b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_EL_PIPE
#define h_EL_PIPE (){}

    #define     RA_EL_PIPE_CTRL0                               0x0000

    #define     BA_EL_PIPE_CTRL0_tg_start                      0x0000
    #define     B16EL_PIPE_CTRL0_tg_start                      0x0000
    #define   LSb32EL_PIPE_CTRL0_tg_start                         0
    #define   LSb16EL_PIPE_CTRL0_tg_start                         0
    #define       bEL_PIPE_CTRL0_tg_start                      1
    #define   MSK32EL_PIPE_CTRL0_tg_start                         0x00000001

    #define     BA_EL_PIPE_CTRL0_tg_clear                      0x0000
    #define     B16EL_PIPE_CTRL0_tg_clear                      0x0000
    #define   LSb32EL_PIPE_CTRL0_tg_clear                         1
    #define   LSb16EL_PIPE_CTRL0_tg_clear                         1
    #define       bEL_PIPE_CTRL0_tg_clear                      1
    #define   MSK32EL_PIPE_CTRL0_tg_clear                         0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_EL_PIPE_CTRL1                               0x0004

    #define     BA_EL_PIPE_CTRL1_clken_ctrl0                   0x0004
    #define     B16EL_PIPE_CTRL1_clken_ctrl0                   0x0004
    #define   LSb32EL_PIPE_CTRL1_clken_ctrl0                      0
    #define   LSb16EL_PIPE_CTRL1_clken_ctrl0                      0
    #define       bEL_PIPE_CTRL1_clken_ctrl0                   1
    #define   MSK32EL_PIPE_CTRL1_clken_ctrl0                      0x00000001

    #define     BA_EL_PIPE_CTRL1_clken_ctrl1                   0x0004
    #define     B16EL_PIPE_CTRL1_clken_ctrl1                   0x0004
    #define   LSb32EL_PIPE_CTRL1_clken_ctrl1                      1
    #define   LSb16EL_PIPE_CTRL1_clken_ctrl1                      1
    #define       bEL_PIPE_CTRL1_clken_ctrl1                   1
    #define   MSK32EL_PIPE_CTRL1_clken_ctrl1                      0x00000002

    #define     BA_EL_PIPE_CTRL1_clken_ctrl2                   0x0004
    #define     B16EL_PIPE_CTRL1_clken_ctrl2                   0x0004
    #define   LSb32EL_PIPE_CTRL1_clken_ctrl2                      2
    #define   LSb16EL_PIPE_CTRL1_clken_ctrl2                      2
    #define       bEL_PIPE_CTRL1_clken_ctrl2                   1
    #define   MSK32EL_PIPE_CTRL1_clken_ctrl2                      0x00000004

    #define     BA_EL_PIPE_CTRL1_clken_ctrl3                   0x0004
    #define     B16EL_PIPE_CTRL1_clken_ctrl3                   0x0004
    #define   LSb32EL_PIPE_CTRL1_clken_ctrl3                      3
    #define   LSb16EL_PIPE_CTRL1_clken_ctrl3                      3
    #define       bEL_PIPE_CTRL1_clken_ctrl3                   1
    #define   MSK32EL_PIPE_CTRL1_clken_ctrl3                      0x00000008

    #define     BA_EL_PIPE_CTRL1_clken_ctrl4                   0x0004
    #define     B16EL_PIPE_CTRL1_clken_ctrl4                   0x0004
    #define   LSb32EL_PIPE_CTRL1_clken_ctrl4                      4
    #define   LSb16EL_PIPE_CTRL1_clken_ctrl4                      4
    #define       bEL_PIPE_CTRL1_clken_ctrl4                   1
    #define   MSK32EL_PIPE_CTRL1_clken_ctrl4                      0x00000010

    #define     BA_EL_PIPE_CTRL1_idatctrl                      0x0004
    #define     B16EL_PIPE_CTRL1_idatctrl                      0x0004
    #define   LSb32EL_PIPE_CTRL1_idatctrl                         5
    #define   LSb16EL_PIPE_CTRL1_idatctrl                         5
    #define       bEL_PIPE_CTRL1_idatctrl                      3
    #define   MSK32EL_PIPE_CTRL1_idatctrl                         0x000000E0

    #define     BA_EL_PIPE_CTRL1_dif2k_blk_en                  0x0005
    #define     B16EL_PIPE_CTRL1_dif2k_blk_en                  0x0004
    #define   LSb32EL_PIPE_CTRL1_dif2k_blk_en                     8
    #define   LSb16EL_PIPE_CTRL1_dif2k_blk_en                     8
    #define       bEL_PIPE_CTRL1_dif2k_blk_en                  1
    #define   MSK32EL_PIPE_CTRL1_dif2k_blk_en                     0x00000100

    #define     BA_EL_PIPE_CTRL1_read_en                       0x0005
    #define     B16EL_PIPE_CTRL1_read_en                       0x0004
    #define   LSb32EL_PIPE_CTRL1_read_en                          9
    #define   LSb16EL_PIPE_CTRL1_read_en                          9
    #define       bEL_PIPE_CTRL1_read_en                       1
    #define   MSK32EL_PIPE_CTRL1_read_en                          0x00000200

    #define     BA_EL_PIPE_CTRL1_ups420_2k_mode                0x0005
    #define     B16EL_PIPE_CTRL1_ups420_2k_mode                0x0004
    #define   LSb32EL_PIPE_CTRL1_ups420_2k_mode                   10
    #define   LSb16EL_PIPE_CTRL1_ups420_2k_mode                   10
    #define       bEL_PIPE_CTRL1_ups420_2k_mode                1
    #define   MSK32EL_PIPE_CTRL1_ups420_2k_mode                   0x00000400

    #define     BA_EL_PIPE_CTRL1_el_rd_initval0                0x0005
    #define     B16EL_PIPE_CTRL1_el_rd_initval0                0x0004
    #define   LSb32EL_PIPE_CTRL1_el_rd_initval0                   11
    #define   LSb16EL_PIPE_CTRL1_el_rd_initval0                   11
    #define       bEL_PIPE_CTRL1_el_rd_initval0                1
    #define   MSK32EL_PIPE_CTRL1_el_rd_initval0                   0x00000800

    #define     BA_EL_PIPE_CTRL1_el_rd_initval1                0x0005
    #define     B16EL_PIPE_CTRL1_el_rd_initval1                0x0004
    #define   LSb32EL_PIPE_CTRL1_el_rd_initval1                   12
    #define   LSb16EL_PIPE_CTRL1_el_rd_initval1                   12
    #define       bEL_PIPE_CTRL1_el_rd_initval1                1
    #define   MSK32EL_PIPE_CTRL1_el_rd_initval1                   0x00001000

    #define     BA_EL_PIPE_CTRL1_rd_mask_sftrst                0x0005
    #define     B16EL_PIPE_CTRL1_rd_mask_sftrst                0x0004
    #define   LSb32EL_PIPE_CTRL1_rd_mask_sftrst                   13
    #define   LSb16EL_PIPE_CTRL1_rd_mask_sftrst                   13
    #define       bEL_PIPE_CTRL1_rd_mask_sftrst                1
    #define   MSK32EL_PIPE_CTRL1_rd_mask_sftrst                   0x00002000

    #define     BA_EL_PIPE_CTRL1_el_rdsel_420SP                0x0005
    #define     B16EL_PIPE_CTRL1_el_rdsel_420SP                0x0004
    #define   LSb32EL_PIPE_CTRL1_el_rdsel_420SP                   14
    #define   LSb16EL_PIPE_CTRL1_el_rdsel_420SP                   14
    #define       bEL_PIPE_CTRL1_el_rdsel_420SP                1
    #define   MSK32EL_PIPE_CTRL1_el_rdsel_420SP                   0x00004000

    #define     BA_EL_PIPE_CTRL1_bitMap_en                     0x0005
    #define     B16EL_PIPE_CTRL1_bitMap_en                     0x0004
    #define   LSb32EL_PIPE_CTRL1_bitMap_en                        15
    #define   LSb16EL_PIPE_CTRL1_bitMap_en                        15
    #define       bEL_PIPE_CTRL1_bitMap_en                     1
    #define   MSK32EL_PIPE_CTRL1_bitMap_en                        0x00008000

    #define     BA_EL_PIPE_CTRL1_pip_rd_sel                    0x0006
    #define     B16EL_PIPE_CTRL1_pip_rd_sel                    0x0006
    #define   LSb32EL_PIPE_CTRL1_pip_rd_sel                       16
    #define   LSb16EL_PIPE_CTRL1_pip_rd_sel                       0
    #define       bEL_PIPE_CTRL1_pip_rd_sel                    1
    #define   MSK32EL_PIPE_CTRL1_pip_rd_sel                       0x00010000

    #define     BA_EL_PIPE_CTRL1_dint_rd_sel                   0x0006
    #define     B16EL_PIPE_CTRL1_dint_rd_sel                   0x0006
    #define   LSb32EL_PIPE_CTRL1_dint_rd_sel                      17
    #define   LSb16EL_PIPE_CTRL1_dint_rd_sel                      1
    #define       bEL_PIPE_CTRL1_dint_rd_sel                   1
    #define   MSK32EL_PIPE_CTRL1_dint_rd_sel                      0x00020000

    #define     BA_EL_PIPE_CTRL1_crop_de_en                    0x0006
    #define     B16EL_PIPE_CTRL1_crop_de_en                    0x0006
    #define   LSb32EL_PIPE_CTRL1_crop_de_en                       18
    #define   LSb16EL_PIPE_CTRL1_crop_de_en                       2
    #define       bEL_PIPE_CTRL1_crop_de_en                    1
    #define   MSK32EL_PIPE_CTRL1_crop_de_en                       0x00040000

    #define     BA_EL_PIPE_CTRL1_crop_de2_en                   0x0006
    #define     B16EL_PIPE_CTRL1_crop_de2_en                   0x0006
    #define   LSb32EL_PIPE_CTRL1_crop_de2_en                      19
    #define   LSb16EL_PIPE_CTRL1_crop_de2_en                      3
    #define       bEL_PIPE_CTRL1_crop_de2_en                   1
    #define   MSK32EL_PIPE_CTRL1_crop_de2_en                      0x00080000

    #define     BA_EL_PIPE_CTRL1_detile2k_idata_sel            0x0006
    #define     B16EL_PIPE_CTRL1_detile2k_idata_sel            0x0006
    #define   LSb32EL_PIPE_CTRL1_detile2k_idata_sel               20
    #define   LSb16EL_PIPE_CTRL1_detile2k_idata_sel               4
    #define       bEL_PIPE_CTRL1_detile2k_idata_sel            1
    #define   MSK32EL_PIPE_CTRL1_detile2k_idata_sel               0x00100000

    #define     BA_EL_PIPE_CTRL1_clken_ctrl5                   0x0006
    #define     B16EL_PIPE_CTRL1_clken_ctrl5                   0x0006
    #define   LSb32EL_PIPE_CTRL1_clken_ctrl5                      21
    #define   LSb16EL_PIPE_CTRL1_clken_ctrl5                      5
    #define       bEL_PIPE_CTRL1_clken_ctrl5                   1
    #define   MSK32EL_PIPE_CTRL1_clken_ctrl5                      0x00200000

    #define     BA_EL_PIPE_CTRL1_clken_ctrl6                   0x0006
    #define     B16EL_PIPE_CTRL1_clken_ctrl6                   0x0006
    #define   LSb32EL_PIPE_CTRL1_clken_ctrl6                      22
    #define   LSb16EL_PIPE_CTRL1_clken_ctrl6                      6
    #define       bEL_PIPE_CTRL1_clken_ctrl6                   1
    #define   MSK32EL_PIPE_CTRL1_clken_ctrl6                      0x00400000

    #define     BA_EL_PIPE_CTRL1_ovp_rd_sel                    0x0006
    #define     B16EL_PIPE_CTRL1_ovp_rd_sel                    0x0006
    #define   LSb32EL_PIPE_CTRL1_ovp_rd_sel                       23
    #define   LSb16EL_PIPE_CTRL1_ovp_rd_sel                       7
    #define       bEL_PIPE_CTRL1_ovp_rd_sel                    1
    #define   MSK32EL_PIPE_CTRL1_ovp_rd_sel                       0x00800000

    #define     BA_EL_PIPE_CTRL1_clken_ctrl7                   0x0007
    #define     B16EL_PIPE_CTRL1_clken_ctrl7                   0x0006
    #define   LSb32EL_PIPE_CTRL1_clken_ctrl7                      24
    #define   LSb16EL_PIPE_CTRL1_clken_ctrl7                      8
    #define       bEL_PIPE_CTRL1_clken_ctrl7                   1
    #define   MSK32EL_PIPE_CTRL1_clken_ctrl7                      0x01000000
    ///////////////////////////////////////////////////////////
    #define     RA_EL_PIPE_CTRL2                               0x0008

    #define     BA_EL_PIPE_CTRL2_uv_mask_val0                  0x0008
    #define     B16EL_PIPE_CTRL2_uv_mask_val0                  0x0008
    #define   LSb32EL_PIPE_CTRL2_uv_mask_val0                     0
    #define   LSb16EL_PIPE_CTRL2_uv_mask_val0                     0
    #define       bEL_PIPE_CTRL2_uv_mask_val0                  1
    #define   MSK32EL_PIPE_CTRL2_uv_mask_val0                     0x00000001

    #define     BA_EL_PIPE_CTRL2_uv_mask_val1                  0x0008
    #define     B16EL_PIPE_CTRL2_uv_mask_val1                  0x0008
    #define   LSb32EL_PIPE_CTRL2_uv_mask_val1                     1
    #define   LSb16EL_PIPE_CTRL2_uv_mask_val1                     1
    #define       bEL_PIPE_CTRL2_uv_mask_val1                  1
    #define   MSK32EL_PIPE_CTRL2_uv_mask_val1                     0x00000002

    #define     BA_EL_PIPE_CTRL2_uv_mask_disable               0x0008
    #define     B16EL_PIPE_CTRL2_uv_mask_disable               0x0008
    #define   LSb32EL_PIPE_CTRL2_uv_mask_disable                  2
    #define   LSb16EL_PIPE_CTRL2_uv_mask_disable                  2
    #define       bEL_PIPE_CTRL2_uv_mask_disable               1
    #define   MSK32EL_PIPE_CTRL2_uv_mask_disable                  0x00000004

    #define     BA_EL_PIPE_CTRL2_luma_rpt_rd_mask_sftrst       0x0008
    #define     B16EL_PIPE_CTRL2_luma_rpt_rd_mask_sftrst       0x0008
    #define   LSb32EL_PIPE_CTRL2_luma_rpt_rd_mask_sftrst          3
    #define   LSb16EL_PIPE_CTRL2_luma_rpt_rd_mask_sftrst          3
    #define       bEL_PIPE_CTRL2_luma_rpt_rd_mask_sftrst       1
    #define   MSK32EL_PIPE_CTRL2_luma_rpt_rd_mask_sftrst          0x00000008

    #define     BA_EL_PIPE_CTRL2_el_luma_rd_initval0           0x0008
    #define     B16EL_PIPE_CTRL2_el_luma_rd_initval0           0x0008
    #define   LSb32EL_PIPE_CTRL2_el_luma_rd_initval0              4
    #define   LSb16EL_PIPE_CTRL2_el_luma_rd_initval0              4
    #define       bEL_PIPE_CTRL2_el_luma_rd_initval0           1
    #define   MSK32EL_PIPE_CTRL2_el_luma_rd_initval0              0x00000010

    #define     BA_EL_PIPE_CTRL2_el_luma_rd_initval1           0x0008
    #define     B16EL_PIPE_CTRL2_el_luma_rd_initval1           0x0008
    #define   LSb32EL_PIPE_CTRL2_el_luma_rd_initval1              5
    #define   LSb16EL_PIPE_CTRL2_el_luma_rd_initval1              5
    #define       bEL_PIPE_CTRL2_el_luma_rd_initval1           1
    #define   MSK32EL_PIPE_CTRL2_el_luma_rd_initval1              0x00000020

    #define     BA_EL_PIPE_CTRL2_luma_line_cnt                 0x0008
    #define     B16EL_PIPE_CTRL2_luma_line_cnt                 0x0008
    #define   LSb32EL_PIPE_CTRL2_luma_line_cnt                    6
    #define   LSb16EL_PIPE_CTRL2_luma_line_cnt                    6
    #define       bEL_PIPE_CTRL2_luma_line_cnt                 3
    #define   MSK32EL_PIPE_CTRL2_luma_line_cnt                    0x000001C0

    #define     BA_EL_PIPE_CTRL2_luma_lineCnt_rstval0          0x0009
    #define     B16EL_PIPE_CTRL2_luma_lineCnt_rstval0          0x0008
    #define   LSb32EL_PIPE_CTRL2_luma_lineCnt_rstval0             9
    #define   LSb16EL_PIPE_CTRL2_luma_lineCnt_rstval0             9
    #define       bEL_PIPE_CTRL2_luma_lineCnt_rstval0          2
    #define   MSK32EL_PIPE_CTRL2_luma_lineCnt_rstval0             0x00000600

    #define     BA_EL_PIPE_CTRL2_luma_lineCnt_rstval1          0x0009
    #define     B16EL_PIPE_CTRL2_luma_lineCnt_rstval1          0x0008
    #define   LSb32EL_PIPE_CTRL2_luma_lineCnt_rstval1             11
    #define   LSb16EL_PIPE_CTRL2_luma_lineCnt_rstval1             11
    #define       bEL_PIPE_CTRL2_luma_lineCnt_rstval1          2
    #define   MSK32EL_PIPE_CTRL2_luma_lineCnt_rstval1             0x00001800

    #define     BA_EL_PIPE_CTRL2_lineCnt_rstval0               0x0009
    #define     B16EL_PIPE_CTRL2_lineCnt_rstval0               0x0008
    #define   LSb32EL_PIPE_CTRL2_lineCnt_rstval0                  13
    #define   LSb16EL_PIPE_CTRL2_lineCnt_rstval0                  13
    #define       bEL_PIPE_CTRL2_lineCnt_rstval0               4
    #define   MSK32EL_PIPE_CTRL2_lineCnt_rstval0                  0x0001E000

    #define     BA_EL_PIPE_CTRL2_lineCnt_rstval1               0x000A
    #define     B16EL_PIPE_CTRL2_lineCnt_rstval1               0x000A
    #define   LSb32EL_PIPE_CTRL2_lineCnt_rstval1                  17
    #define   LSb16EL_PIPE_CTRL2_lineCnt_rstval1                  1
    #define       bEL_PIPE_CTRL2_lineCnt_rstval1               4
    #define   MSK32EL_PIPE_CTRL2_lineCnt_rstval1                  0x001E0000

    #define     BA_EL_PIPE_CTRL2_cr_line_cnt                   0x000A
    #define     B16EL_PIPE_CTRL2_cr_line_cnt                   0x000A
    #define   LSb32EL_PIPE_CTRL2_cr_line_cnt                      21
    #define   LSb16EL_PIPE_CTRL2_cr_line_cnt                      5
    #define       bEL_PIPE_CTRL2_cr_line_cnt                   5
    #define   MSK32EL_PIPE_CTRL2_cr_line_cnt                      0x03E00000

    #define     BA_EL_PIPE_CTRL2_tgEn_rstEn                    0x000B
    #define     B16EL_PIPE_CTRL2_tgEn_rstEn                    0x000A
    #define   LSb32EL_PIPE_CTRL2_tgEn_rstEn                       26
    #define   LSb16EL_PIPE_CTRL2_tgEn_rstEn                       10
    #define       bEL_PIPE_CTRL2_tgEn_rstEn                    1
    #define   MSK32EL_PIPE_CTRL2_tgEn_rstEn                       0x04000000

    #define     BA_EL_PIPE_CTRL2_combo_pwr_opt_en              0x000B
    #define     B16EL_PIPE_CTRL2_combo_pwr_opt_en              0x000A
    #define   LSb32EL_PIPE_CTRL2_combo_pwr_opt_en                 27
    #define   LSb16EL_PIPE_CTRL2_combo_pwr_opt_en                 11
    #define       bEL_PIPE_CTRL2_combo_pwr_opt_en              1
    #define   MSK32EL_PIPE_CTRL2_combo_pwr_opt_en                 0x08000000
    ///////////////////////////////////////////////////////////
    #define     RA_EL_PIPE_RASTERSCAN                          0x000C

    #define     BA_EL_PIPE_RASTERSCAN_ovp_rd_sel_420sp         0x000C
    #define     B16EL_PIPE_RASTERSCAN_ovp_rd_sel_420sp         0x000C
    #define   LSb32EL_PIPE_RASTERSCAN_ovp_rd_sel_420sp            0
    #define   LSb16EL_PIPE_RASTERSCAN_ovp_rd_sel_420sp            0
    #define       bEL_PIPE_RASTERSCAN_ovp_rd_sel_420sp         1
    #define   MSK32EL_PIPE_RASTERSCAN_ovp_rd_sel_420sp            0x00000001

    #define     BA_EL_PIPE_RASTERSCAN_el_rd_sel_420sp          0x000C
    #define     B16EL_PIPE_RASTERSCAN_el_rd_sel_420sp          0x000C
    #define   LSb32EL_PIPE_RASTERSCAN_el_rd_sel_420sp             1
    #define   LSb16EL_PIPE_RASTERSCAN_el_rd_sel_420sp             1
    #define       bEL_PIPE_RASTERSCAN_el_rd_sel_420sp          1
    #define   MSK32EL_PIPE_RASTERSCAN_el_rd_sel_420sp             0x00000002

    #define     BA_EL_PIPE_RASTERSCAN_el_composer_420sp        0x000C
    #define     B16EL_PIPE_RASTERSCAN_el_composer_420sp        0x000C
    #define   LSb32EL_PIPE_RASTERSCAN_el_composer_420sp           2
    #define   LSb16EL_PIPE_RASTERSCAN_el_composer_420sp           2
    #define       bEL_PIPE_RASTERSCAN_el_composer_420sp        1
    #define   MSK32EL_PIPE_RASTERSCAN_el_composer_420sp           0x00000004

    #define     BA_EL_PIPE_RASTERSCAN_ovp_420sp_datasel        0x000C
    #define     B16EL_PIPE_RASTERSCAN_ovp_420sp_datasel        0x000C
    #define   LSb32EL_PIPE_RASTERSCAN_ovp_420sp_datasel           3
    #define   LSb16EL_PIPE_RASTERSCAN_ovp_420sp_datasel           3
    #define       bEL_PIPE_RASTERSCAN_ovp_420sp_datasel        1
    #define   MSK32EL_PIPE_RASTERSCAN_ovp_420sp_datasel           0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_EL_PIPE_INVSCAN                             0x0010

    #define     BA_EL_PIPE_INVSCAN_bitmap128_Rd0_en            0x0010
    #define     B16EL_PIPE_INVSCAN_bitmap128_Rd0_en            0x0010
    #define   LSb32EL_PIPE_INVSCAN_bitmap128_Rd0_en               0
    #define   LSb16EL_PIPE_INVSCAN_bitmap128_Rd0_en               0
    #define       bEL_PIPE_INVSCAN_bitmap128_Rd0_en            1
    #define   MSK32EL_PIPE_INVSCAN_bitmap128_Rd0_en               0x00000001

    #define     BA_EL_PIPE_INVSCAN_bitmap128_Rd1_en            0x0010
    #define     B16EL_PIPE_INVSCAN_bitmap128_Rd1_en            0x0010
    #define   LSb32EL_PIPE_INVSCAN_bitmap128_Rd1_en               1
    #define   LSb16EL_PIPE_INVSCAN_bitmap128_Rd1_en               1
    #define       bEL_PIPE_INVSCAN_bitmap128_Rd1_en            1
    #define   MSK32EL_PIPE_INVSCAN_bitmap128_Rd1_en               0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_EL_PIPE_EL_BITMAP20                         0x0014
    ///////////////////////////////////////////////////////////
    #define     RA_EL_PIPE_DIF2K_Y                             0x0400
    ///////////////////////////////////////////////////////////
    #define     RA_EL_PIPE_DIF2K_C                             0x0C00
    ///////////////////////////////////////////////////////////
    #define     RA_EL_PIPE_DTILE_UPS420_2KY                    0x1400
    ///////////////////////////////////////////////////////////
    #define     RA_EL_PIPE_DTILE_UPS420_2KC                    0x142C
    ///////////////////////////////////////////////////////////
    #define     RA_EL_PIPE_feTG_EL                             0x1458
    ///////////////////////////////////////////////////////////

    typedef struct SIE_EL_PIPE {
    ///////////////////////////////////////////////////////////
    #define   GET32EL_PIPE_CTRL0_tg_start(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32EL_PIPE_CTRL0_tg_start(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16EL_PIPE_CTRL0_tg_start(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16EL_PIPE_CTRL0_tg_start(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32EL_PIPE_CTRL0_tg_clear(r32)                 _BFGET_(r32, 1, 1)
    #define   SET32EL_PIPE_CTRL0_tg_clear(r32,v)               _BFSET_(r32, 1, 1,v)
    #define   GET16EL_PIPE_CTRL0_tg_clear(r16)                 _BFGET_(r16, 1, 1)
    #define   SET16EL_PIPE_CTRL0_tg_clear(r16,v)               _BFSET_(r16, 1, 1,v)

    #define     w32EL_PIPE_CTRL0                               {\
            UNSG32 uCTRL0_tg_start                             :  1;\
            UNSG32 uCTRL0_tg_clear                             :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32EL_PIPE_CTRL0;
            struct w32EL_PIPE_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EL_PIPE_CTRL1_clken_ctrl0(r32)              _BFGET_(r32, 0, 0)
    #define   SET32EL_PIPE_CTRL1_clken_ctrl0(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16EL_PIPE_CTRL1_clken_ctrl0(r16)              _BFGET_(r16, 0, 0)
    #define   SET16EL_PIPE_CTRL1_clken_ctrl0(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32EL_PIPE_CTRL1_clken_ctrl1(r32)              _BFGET_(r32, 1, 1)
    #define   SET32EL_PIPE_CTRL1_clken_ctrl1(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16EL_PIPE_CTRL1_clken_ctrl1(r16)              _BFGET_(r16, 1, 1)
    #define   SET16EL_PIPE_CTRL1_clken_ctrl1(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32EL_PIPE_CTRL1_clken_ctrl2(r32)              _BFGET_(r32, 2, 2)
    #define   SET32EL_PIPE_CTRL1_clken_ctrl2(r32,v)            _BFSET_(r32, 2, 2,v)
    #define   GET16EL_PIPE_CTRL1_clken_ctrl2(r16)              _BFGET_(r16, 2, 2)
    #define   SET16EL_PIPE_CTRL1_clken_ctrl2(r16,v)            _BFSET_(r16, 2, 2,v)

    #define   GET32EL_PIPE_CTRL1_clken_ctrl3(r32)              _BFGET_(r32, 3, 3)
    #define   SET32EL_PIPE_CTRL1_clken_ctrl3(r32,v)            _BFSET_(r32, 3, 3,v)
    #define   GET16EL_PIPE_CTRL1_clken_ctrl3(r16)              _BFGET_(r16, 3, 3)
    #define   SET16EL_PIPE_CTRL1_clken_ctrl3(r16,v)            _BFSET_(r16, 3, 3,v)

    #define   GET32EL_PIPE_CTRL1_clken_ctrl4(r32)              _BFGET_(r32, 4, 4)
    #define   SET32EL_PIPE_CTRL1_clken_ctrl4(r32,v)            _BFSET_(r32, 4, 4,v)
    #define   GET16EL_PIPE_CTRL1_clken_ctrl4(r16)              _BFGET_(r16, 4, 4)
    #define   SET16EL_PIPE_CTRL1_clken_ctrl4(r16,v)            _BFSET_(r16, 4, 4,v)

    #define   GET32EL_PIPE_CTRL1_idatctrl(r32)                 _BFGET_(r32, 7, 5)
    #define   SET32EL_PIPE_CTRL1_idatctrl(r32,v)               _BFSET_(r32, 7, 5,v)
    #define   GET16EL_PIPE_CTRL1_idatctrl(r16)                 _BFGET_(r16, 7, 5)
    #define   SET16EL_PIPE_CTRL1_idatctrl(r16,v)               _BFSET_(r16, 7, 5,v)

    #define   GET32EL_PIPE_CTRL1_dif2k_blk_en(r32)             _BFGET_(r32, 8, 8)
    #define   SET32EL_PIPE_CTRL1_dif2k_blk_en(r32,v)           _BFSET_(r32, 8, 8,v)
    #define   GET16EL_PIPE_CTRL1_dif2k_blk_en(r16)             _BFGET_(r16, 8, 8)
    #define   SET16EL_PIPE_CTRL1_dif2k_blk_en(r16,v)           _BFSET_(r16, 8, 8,v)

    #define   GET32EL_PIPE_CTRL1_read_en(r32)                  _BFGET_(r32, 9, 9)
    #define   SET32EL_PIPE_CTRL1_read_en(r32,v)                _BFSET_(r32, 9, 9,v)
    #define   GET16EL_PIPE_CTRL1_read_en(r16)                  _BFGET_(r16, 9, 9)
    #define   SET16EL_PIPE_CTRL1_read_en(r16,v)                _BFSET_(r16, 9, 9,v)

    #define   GET32EL_PIPE_CTRL1_ups420_2k_mode(r32)           _BFGET_(r32,10,10)
    #define   SET32EL_PIPE_CTRL1_ups420_2k_mode(r32,v)         _BFSET_(r32,10,10,v)
    #define   GET16EL_PIPE_CTRL1_ups420_2k_mode(r16)           _BFGET_(r16,10,10)
    #define   SET16EL_PIPE_CTRL1_ups420_2k_mode(r16,v)         _BFSET_(r16,10,10,v)

    #define   GET32EL_PIPE_CTRL1_el_rd_initval0(r32)           _BFGET_(r32,11,11)
    #define   SET32EL_PIPE_CTRL1_el_rd_initval0(r32,v)         _BFSET_(r32,11,11,v)
    #define   GET16EL_PIPE_CTRL1_el_rd_initval0(r16)           _BFGET_(r16,11,11)
    #define   SET16EL_PIPE_CTRL1_el_rd_initval0(r16,v)         _BFSET_(r16,11,11,v)

    #define   GET32EL_PIPE_CTRL1_el_rd_initval1(r32)           _BFGET_(r32,12,12)
    #define   SET32EL_PIPE_CTRL1_el_rd_initval1(r32,v)         _BFSET_(r32,12,12,v)
    #define   GET16EL_PIPE_CTRL1_el_rd_initval1(r16)           _BFGET_(r16,12,12)
    #define   SET16EL_PIPE_CTRL1_el_rd_initval1(r16,v)         _BFSET_(r16,12,12,v)

    #define   GET32EL_PIPE_CTRL1_rd_mask_sftrst(r32)           _BFGET_(r32,13,13)
    #define   SET32EL_PIPE_CTRL1_rd_mask_sftrst(r32,v)         _BFSET_(r32,13,13,v)
    #define   GET16EL_PIPE_CTRL1_rd_mask_sftrst(r16)           _BFGET_(r16,13,13)
    #define   SET16EL_PIPE_CTRL1_rd_mask_sftrst(r16,v)         _BFSET_(r16,13,13,v)

    #define   GET32EL_PIPE_CTRL1_el_rdsel_420SP(r32)           _BFGET_(r32,14,14)
    #define   SET32EL_PIPE_CTRL1_el_rdsel_420SP(r32,v)         _BFSET_(r32,14,14,v)
    #define   GET16EL_PIPE_CTRL1_el_rdsel_420SP(r16)           _BFGET_(r16,14,14)
    #define   SET16EL_PIPE_CTRL1_el_rdsel_420SP(r16,v)         _BFSET_(r16,14,14,v)

    #define   GET32EL_PIPE_CTRL1_bitMap_en(r32)                _BFGET_(r32,15,15)
    #define   SET32EL_PIPE_CTRL1_bitMap_en(r32,v)              _BFSET_(r32,15,15,v)
    #define   GET16EL_PIPE_CTRL1_bitMap_en(r16)                _BFGET_(r16,15,15)
    #define   SET16EL_PIPE_CTRL1_bitMap_en(r16,v)              _BFSET_(r16,15,15,v)

    #define   GET32EL_PIPE_CTRL1_pip_rd_sel(r32)               _BFGET_(r32,16,16)
    #define   SET32EL_PIPE_CTRL1_pip_rd_sel(r32,v)             _BFSET_(r32,16,16,v)
    #define   GET16EL_PIPE_CTRL1_pip_rd_sel(r16)               _BFGET_(r16, 0, 0)
    #define   SET16EL_PIPE_CTRL1_pip_rd_sel(r16,v)             _BFSET_(r16, 0, 0,v)

    #define   GET32EL_PIPE_CTRL1_dint_rd_sel(r32)              _BFGET_(r32,17,17)
    #define   SET32EL_PIPE_CTRL1_dint_rd_sel(r32,v)            _BFSET_(r32,17,17,v)
    #define   GET16EL_PIPE_CTRL1_dint_rd_sel(r16)              _BFGET_(r16, 1, 1)
    #define   SET16EL_PIPE_CTRL1_dint_rd_sel(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32EL_PIPE_CTRL1_crop_de_en(r32)               _BFGET_(r32,18,18)
    #define   SET32EL_PIPE_CTRL1_crop_de_en(r32,v)             _BFSET_(r32,18,18,v)
    #define   GET16EL_PIPE_CTRL1_crop_de_en(r16)               _BFGET_(r16, 2, 2)
    #define   SET16EL_PIPE_CTRL1_crop_de_en(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32EL_PIPE_CTRL1_crop_de2_en(r32)              _BFGET_(r32,19,19)
    #define   SET32EL_PIPE_CTRL1_crop_de2_en(r32,v)            _BFSET_(r32,19,19,v)
    #define   GET16EL_PIPE_CTRL1_crop_de2_en(r16)              _BFGET_(r16, 3, 3)
    #define   SET16EL_PIPE_CTRL1_crop_de2_en(r16,v)            _BFSET_(r16, 3, 3,v)

    #define   GET32EL_PIPE_CTRL1_detile2k_idata_sel(r32)       _BFGET_(r32,20,20)
    #define   SET32EL_PIPE_CTRL1_detile2k_idata_sel(r32,v)     _BFSET_(r32,20,20,v)
    #define   GET16EL_PIPE_CTRL1_detile2k_idata_sel(r16)       _BFGET_(r16, 4, 4)
    #define   SET16EL_PIPE_CTRL1_detile2k_idata_sel(r16,v)     _BFSET_(r16, 4, 4,v)

    #define   GET32EL_PIPE_CTRL1_clken_ctrl5(r32)              _BFGET_(r32,21,21)
    #define   SET32EL_PIPE_CTRL1_clken_ctrl5(r32,v)            _BFSET_(r32,21,21,v)
    #define   GET16EL_PIPE_CTRL1_clken_ctrl5(r16)              _BFGET_(r16, 5, 5)
    #define   SET16EL_PIPE_CTRL1_clken_ctrl5(r16,v)            _BFSET_(r16, 5, 5,v)

    #define   GET32EL_PIPE_CTRL1_clken_ctrl6(r32)              _BFGET_(r32,22,22)
    #define   SET32EL_PIPE_CTRL1_clken_ctrl6(r32,v)            _BFSET_(r32,22,22,v)
    #define   GET16EL_PIPE_CTRL1_clken_ctrl6(r16)              _BFGET_(r16, 6, 6)
    #define   SET16EL_PIPE_CTRL1_clken_ctrl6(r16,v)            _BFSET_(r16, 6, 6,v)

    #define   GET32EL_PIPE_CTRL1_ovp_rd_sel(r32)               _BFGET_(r32,23,23)
    #define   SET32EL_PIPE_CTRL1_ovp_rd_sel(r32,v)             _BFSET_(r32,23,23,v)
    #define   GET16EL_PIPE_CTRL1_ovp_rd_sel(r16)               _BFGET_(r16, 7, 7)
    #define   SET16EL_PIPE_CTRL1_ovp_rd_sel(r16,v)             _BFSET_(r16, 7, 7,v)

    #define   GET32EL_PIPE_CTRL1_clken_ctrl7(r32)              _BFGET_(r32,24,24)
    #define   SET32EL_PIPE_CTRL1_clken_ctrl7(r32,v)            _BFSET_(r32,24,24,v)
    #define   GET16EL_PIPE_CTRL1_clken_ctrl7(r16)              _BFGET_(r16, 8, 8)
    #define   SET16EL_PIPE_CTRL1_clken_ctrl7(r16,v)            _BFSET_(r16, 8, 8,v)

    #define     w32EL_PIPE_CTRL1                               {\
            UNSG32 uCTRL1_clken_ctrl0                          :  1;\
            UNSG32 uCTRL1_clken_ctrl1                          :  1;\
            UNSG32 uCTRL1_clken_ctrl2                          :  1;\
            UNSG32 uCTRL1_clken_ctrl3                          :  1;\
            UNSG32 uCTRL1_clken_ctrl4                          :  1;\
            UNSG32 uCTRL1_idatctrl                             :  3;\
            UNSG32 uCTRL1_dif2k_blk_en                         :  1;\
            UNSG32 uCTRL1_read_en                              :  1;\
            UNSG32 uCTRL1_ups420_2k_mode                       :  1;\
            UNSG32 uCTRL1_el_rd_initval0                       :  1;\
            UNSG32 uCTRL1_el_rd_initval1                       :  1;\
            UNSG32 uCTRL1_rd_mask_sftrst                       :  1;\
            UNSG32 uCTRL1_el_rdsel_420SP                       :  1;\
            UNSG32 uCTRL1_bitMap_en                            :  1;\
            UNSG32 uCTRL1_pip_rd_sel                           :  1;\
            UNSG32 uCTRL1_dint_rd_sel                          :  1;\
            UNSG32 uCTRL1_crop_de_en                           :  1;\
            UNSG32 uCTRL1_crop_de2_en                          :  1;\
            UNSG32 uCTRL1_detile2k_idata_sel                   :  1;\
            UNSG32 uCTRL1_clken_ctrl5                          :  1;\
            UNSG32 uCTRL1_clken_ctrl6                          :  1;\
            UNSG32 uCTRL1_ovp_rd_sel                           :  1;\
            UNSG32 uCTRL1_clken_ctrl7                          :  1;\
            UNSG32 RSVDx4_b25                                  :  7;\
          }
    union { UNSG32 u32EL_PIPE_CTRL1;
            struct w32EL_PIPE_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EL_PIPE_CTRL2_uv_mask_val0(r32)             _BFGET_(r32, 0, 0)
    #define   SET32EL_PIPE_CTRL2_uv_mask_val0(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16EL_PIPE_CTRL2_uv_mask_val0(r16)             _BFGET_(r16, 0, 0)
    #define   SET16EL_PIPE_CTRL2_uv_mask_val0(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32EL_PIPE_CTRL2_uv_mask_val1(r32)             _BFGET_(r32, 1, 1)
    #define   SET32EL_PIPE_CTRL2_uv_mask_val1(r32,v)           _BFSET_(r32, 1, 1,v)
    #define   GET16EL_PIPE_CTRL2_uv_mask_val1(r16)             _BFGET_(r16, 1, 1)
    #define   SET16EL_PIPE_CTRL2_uv_mask_val1(r16,v)           _BFSET_(r16, 1, 1,v)

    #define   GET32EL_PIPE_CTRL2_uv_mask_disable(r32)          _BFGET_(r32, 2, 2)
    #define   SET32EL_PIPE_CTRL2_uv_mask_disable(r32,v)        _BFSET_(r32, 2, 2,v)
    #define   GET16EL_PIPE_CTRL2_uv_mask_disable(r16)          _BFGET_(r16, 2, 2)
    #define   SET16EL_PIPE_CTRL2_uv_mask_disable(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32EL_PIPE_CTRL2_luma_rpt_rd_mask_sftrst(r32)  _BFGET_(r32, 3, 3)
    #define   SET32EL_PIPE_CTRL2_luma_rpt_rd_mask_sftrst(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16EL_PIPE_CTRL2_luma_rpt_rd_mask_sftrst(r16)  _BFGET_(r16, 3, 3)
    #define   SET16EL_PIPE_CTRL2_luma_rpt_rd_mask_sftrst(r16,v) _BFSET_(r16, 3, 3,v)

    #define   GET32EL_PIPE_CTRL2_el_luma_rd_initval0(r32)      _BFGET_(r32, 4, 4)
    #define   SET32EL_PIPE_CTRL2_el_luma_rd_initval0(r32,v)    _BFSET_(r32, 4, 4,v)
    #define   GET16EL_PIPE_CTRL2_el_luma_rd_initval0(r16)      _BFGET_(r16, 4, 4)
    #define   SET16EL_PIPE_CTRL2_el_luma_rd_initval0(r16,v)    _BFSET_(r16, 4, 4,v)

    #define   GET32EL_PIPE_CTRL2_el_luma_rd_initval1(r32)      _BFGET_(r32, 5, 5)
    #define   SET32EL_PIPE_CTRL2_el_luma_rd_initval1(r32,v)    _BFSET_(r32, 5, 5,v)
    #define   GET16EL_PIPE_CTRL2_el_luma_rd_initval1(r16)      _BFGET_(r16, 5, 5)
    #define   SET16EL_PIPE_CTRL2_el_luma_rd_initval1(r16,v)    _BFSET_(r16, 5, 5,v)

    #define   GET32EL_PIPE_CTRL2_luma_line_cnt(r32)            _BFGET_(r32, 8, 6)
    #define   SET32EL_PIPE_CTRL2_luma_line_cnt(r32,v)          _BFSET_(r32, 8, 6,v)
    #define   GET16EL_PIPE_CTRL2_luma_line_cnt(r16)            _BFGET_(r16, 8, 6)
    #define   SET16EL_PIPE_CTRL2_luma_line_cnt(r16,v)          _BFSET_(r16, 8, 6,v)

    #define   GET32EL_PIPE_CTRL2_luma_lineCnt_rstval0(r32)     _BFGET_(r32,10, 9)
    #define   SET32EL_PIPE_CTRL2_luma_lineCnt_rstval0(r32,v)   _BFSET_(r32,10, 9,v)
    #define   GET16EL_PIPE_CTRL2_luma_lineCnt_rstval0(r16)     _BFGET_(r16,10, 9)
    #define   SET16EL_PIPE_CTRL2_luma_lineCnt_rstval0(r16,v)   _BFSET_(r16,10, 9,v)

    #define   GET32EL_PIPE_CTRL2_luma_lineCnt_rstval1(r32)     _BFGET_(r32,12,11)
    #define   SET32EL_PIPE_CTRL2_luma_lineCnt_rstval1(r32,v)   _BFSET_(r32,12,11,v)
    #define   GET16EL_PIPE_CTRL2_luma_lineCnt_rstval1(r16)     _BFGET_(r16,12,11)
    #define   SET16EL_PIPE_CTRL2_luma_lineCnt_rstval1(r16,v)   _BFSET_(r16,12,11,v)

    #define   GET32EL_PIPE_CTRL2_lineCnt_rstval0(r32)          _BFGET_(r32,16,13)
    #define   SET32EL_PIPE_CTRL2_lineCnt_rstval0(r32,v)        _BFSET_(r32,16,13,v)

    #define   GET32EL_PIPE_CTRL2_lineCnt_rstval1(r32)          _BFGET_(r32,20,17)
    #define   SET32EL_PIPE_CTRL2_lineCnt_rstval1(r32,v)        _BFSET_(r32,20,17,v)
    #define   GET16EL_PIPE_CTRL2_lineCnt_rstval1(r16)          _BFGET_(r16, 4, 1)
    #define   SET16EL_PIPE_CTRL2_lineCnt_rstval1(r16,v)        _BFSET_(r16, 4, 1,v)

    #define   GET32EL_PIPE_CTRL2_cr_line_cnt(r32)              _BFGET_(r32,25,21)
    #define   SET32EL_PIPE_CTRL2_cr_line_cnt(r32,v)            _BFSET_(r32,25,21,v)
    #define   GET16EL_PIPE_CTRL2_cr_line_cnt(r16)              _BFGET_(r16, 9, 5)
    #define   SET16EL_PIPE_CTRL2_cr_line_cnt(r16,v)            _BFSET_(r16, 9, 5,v)

    #define   GET32EL_PIPE_CTRL2_tgEn_rstEn(r32)               _BFGET_(r32,26,26)
    #define   SET32EL_PIPE_CTRL2_tgEn_rstEn(r32,v)             _BFSET_(r32,26,26,v)
    #define   GET16EL_PIPE_CTRL2_tgEn_rstEn(r16)               _BFGET_(r16,10,10)
    #define   SET16EL_PIPE_CTRL2_tgEn_rstEn(r16,v)             _BFSET_(r16,10,10,v)

    #define   GET32EL_PIPE_CTRL2_combo_pwr_opt_en(r32)         _BFGET_(r32,27,27)
    #define   SET32EL_PIPE_CTRL2_combo_pwr_opt_en(r32,v)       _BFSET_(r32,27,27,v)
    #define   GET16EL_PIPE_CTRL2_combo_pwr_opt_en(r16)         _BFGET_(r16,11,11)
    #define   SET16EL_PIPE_CTRL2_combo_pwr_opt_en(r16,v)       _BFSET_(r16,11,11,v)

    #define     w32EL_PIPE_CTRL2                               {\
            UNSG32 uCTRL2_uv_mask_val0                         :  1;\
            UNSG32 uCTRL2_uv_mask_val1                         :  1;\
            UNSG32 uCTRL2_uv_mask_disable                      :  1;\
            UNSG32 uCTRL2_luma_rpt_rd_mask_sftrst              :  1;\
            UNSG32 uCTRL2_el_luma_rd_initval0                  :  1;\
            UNSG32 uCTRL2_el_luma_rd_initval1                  :  1;\
            UNSG32 uCTRL2_luma_line_cnt                        :  3;\
            UNSG32 uCTRL2_luma_lineCnt_rstval0                 :  2;\
            UNSG32 uCTRL2_luma_lineCnt_rstval1                 :  2;\
            UNSG32 uCTRL2_lineCnt_rstval0                      :  4;\
            UNSG32 uCTRL2_lineCnt_rstval1                      :  4;\
            UNSG32 uCTRL2_cr_line_cnt                          :  5;\
            UNSG32 uCTRL2_tgEn_rstEn                           :  1;\
            UNSG32 uCTRL2_combo_pwr_opt_en                     :  1;\
            UNSG32 RSVDx8_b28                                  :  4;\
          }
    union { UNSG32 u32EL_PIPE_CTRL2;
            struct w32EL_PIPE_CTRL2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EL_PIPE_RASTERSCAN_ovp_rd_sel_420sp(r32)    _BFGET_(r32, 0, 0)
    #define   SET32EL_PIPE_RASTERSCAN_ovp_rd_sel_420sp(r32,v)  _BFSET_(r32, 0, 0,v)
    #define   GET16EL_PIPE_RASTERSCAN_ovp_rd_sel_420sp(r16)    _BFGET_(r16, 0, 0)
    #define   SET16EL_PIPE_RASTERSCAN_ovp_rd_sel_420sp(r16,v)  _BFSET_(r16, 0, 0,v)

    #define   GET32EL_PIPE_RASTERSCAN_el_rd_sel_420sp(r32)     _BFGET_(r32, 1, 1)
    #define   SET32EL_PIPE_RASTERSCAN_el_rd_sel_420sp(r32,v)   _BFSET_(r32, 1, 1,v)
    #define   GET16EL_PIPE_RASTERSCAN_el_rd_sel_420sp(r16)     _BFGET_(r16, 1, 1)
    #define   SET16EL_PIPE_RASTERSCAN_el_rd_sel_420sp(r16,v)   _BFSET_(r16, 1, 1,v)

    #define   GET32EL_PIPE_RASTERSCAN_el_composer_420sp(r32)   _BFGET_(r32, 2, 2)
    #define   SET32EL_PIPE_RASTERSCAN_el_composer_420sp(r32,v) _BFSET_(r32, 2, 2,v)
    #define   GET16EL_PIPE_RASTERSCAN_el_composer_420sp(r16)   _BFGET_(r16, 2, 2)
    #define   SET16EL_PIPE_RASTERSCAN_el_composer_420sp(r16,v) _BFSET_(r16, 2, 2,v)

    #define   GET32EL_PIPE_RASTERSCAN_ovp_420sp_datasel(r32)   _BFGET_(r32, 3, 3)
    #define   SET32EL_PIPE_RASTERSCAN_ovp_420sp_datasel(r32,v) _BFSET_(r32, 3, 3,v)
    #define   GET16EL_PIPE_RASTERSCAN_ovp_420sp_datasel(r16)   _BFGET_(r16, 3, 3)
    #define   SET16EL_PIPE_RASTERSCAN_ovp_420sp_datasel(r16,v) _BFSET_(r16, 3, 3,v)

    #define     w32EL_PIPE_RASTERSCAN                          {\
            UNSG32 uRASTERSCAN_ovp_rd_sel_420sp                :  1;\
            UNSG32 uRASTERSCAN_el_rd_sel_420sp                 :  1;\
            UNSG32 uRASTERSCAN_el_composer_420sp               :  1;\
            UNSG32 uRASTERSCAN_ovp_420sp_datasel               :  1;\
            UNSG32 RSVDxC_b4                                   : 28;\
          }
    union { UNSG32 u32EL_PIPE_RASTERSCAN;
            struct w32EL_PIPE_RASTERSCAN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32EL_PIPE_INVSCAN_bitmap128_Rd0_en(r32)       _BFGET_(r32, 0, 0)
    #define   SET32EL_PIPE_INVSCAN_bitmap128_Rd0_en(r32,v)     _BFSET_(r32, 0, 0,v)
    #define   GET16EL_PIPE_INVSCAN_bitmap128_Rd0_en(r16)       _BFGET_(r16, 0, 0)
    #define   SET16EL_PIPE_INVSCAN_bitmap128_Rd0_en(r16,v)     _BFSET_(r16, 0, 0,v)

    #define   GET32EL_PIPE_INVSCAN_bitmap128_Rd1_en(r32)       _BFGET_(r32, 1, 1)
    #define   SET32EL_PIPE_INVSCAN_bitmap128_Rd1_en(r32,v)     _BFSET_(r32, 1, 1,v)
    #define   GET16EL_PIPE_INVSCAN_bitmap128_Rd1_en(r16)       _BFGET_(r16, 1, 1)
    #define   SET16EL_PIPE_INVSCAN_bitmap128_Rd1_en(r16,v)     _BFSET_(r16, 1, 1,v)

    #define     w32EL_PIPE_INVSCAN                             {\
            UNSG32 uINVSCAN_bitmap128_Rd0_en                   :  1;\
            UNSG32 uINVSCAN_bitmap128_Rd1_en                   :  1;\
            UNSG32 RSVDx10_b2                                  : 30;\
          }
    union { UNSG32 u32EL_PIPE_INVSCAN;
            struct w32EL_PIPE_INVSCAN;
          };
    ///////////////////////////////////////////////////////////
              SIE_BITMAP20                                     ie_EL_BITMAP20;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx24                                     [988];
    ///////////////////////////////////////////////////////////
              SIE_DIF                                          ie_DIF2K_Y;
    ///////////////////////////////////////////////////////////
              SIE_DIF                                          ie_DIF2K_C;
    ///////////////////////////////////////////////////////////
              SIE_UPS_420_422                                  ie_DTILE_UPS420_2KY;
    ///////////////////////////////////////////////////////////
              SIE_UPS_420_422                                  ie_DTILE_UPS420_2KC;
    ///////////////////////////////////////////////////////////
              SIE_TG_MAIN                                      ie_feTG_EL;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx14A0                                   [864];
    ///////////////////////////////////////////////////////////
    } SIE_EL_PIPE;

    typedef union  T32EL_PIPE_CTRL0
          { UNSG32 u32;
            struct w32EL_PIPE_CTRL0;
                 } T32EL_PIPE_CTRL0;
    typedef union  T32EL_PIPE_CTRL1
          { UNSG32 u32;
            struct w32EL_PIPE_CTRL1;
                 } T32EL_PIPE_CTRL1;
    typedef union  T32EL_PIPE_CTRL2
          { UNSG32 u32;
            struct w32EL_PIPE_CTRL2;
                 } T32EL_PIPE_CTRL2;
    typedef union  T32EL_PIPE_RASTERSCAN
          { UNSG32 u32;
            struct w32EL_PIPE_RASTERSCAN;
                 } T32EL_PIPE_RASTERSCAN;
    typedef union  T32EL_PIPE_INVSCAN
          { UNSG32 u32;
            struct w32EL_PIPE_INVSCAN;
                 } T32EL_PIPE_INVSCAN;
    ///////////////////////////////////////////////////////////

    typedef union  TEL_PIPE_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32EL_PIPE_CTRL0;
                   };
                 } TEL_PIPE_CTRL0;
    typedef union  TEL_PIPE_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32EL_PIPE_CTRL1;
                   };
                 } TEL_PIPE_CTRL1;
    typedef union  TEL_PIPE_CTRL2
          { UNSG32 u32[1];
            struct {
            struct w32EL_PIPE_CTRL2;
                   };
                 } TEL_PIPE_CTRL2;
    typedef union  TEL_PIPE_RASTERSCAN
          { UNSG32 u32[1];
            struct {
            struct w32EL_PIPE_RASTERSCAN;
                   };
                 } TEL_PIPE_RASTERSCAN;
    typedef union  TEL_PIPE_INVSCAN
          { UNSG32 u32[1];
            struct {
            struct w32EL_PIPE_INVSCAN;
                   };
                 } TEL_PIPE_INVSCAN;

    ///////////////////////////////////////////////////////////
     SIGN32 EL_PIPE_drvrd(SIE_EL_PIPE *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 EL_PIPE_drvwr(SIE_EL_PIPE *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void EL_PIPE_reset(SIE_EL_PIPE *p);
     SIGN32 EL_PIPE_cmp  (SIE_EL_PIPE *p, SIE_EL_PIPE *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define EL_PIPE_check(p,pie,pfx,hLOG) EL_PIPE_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define EL_PIPE_print(p,    pfx,hLOG) EL_PIPE_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: EL_PIPE
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE VPTOP_CTRL                               (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CLKEN_CTRL           (P)
///               %unsigned 1  toggle                    0x0
///                                    ###
///                                    * 1: Toggle the clken to vp_top.
///                                    * 0: clken to vp_top is not toggled.
///                                    * Make this bit 1 for interlaced inputs. Make it zero for progressive inputs.
///                                    ###
///               %unsigned 1  diW                       0x0
///                                    ###
///                                    * 1: Take care of rdy from diW while generating clken to vp_top
///                                    * 0 : don't consider rdy from diW
///                                    * Make this bit 1 whenever write client of DI is turned-on. Otherwise, make it zero. In general, this bit has to be made 1 when 3D DI is on for interlaced inputs
///                                    ###
///               %unsigned 1  diR0                      0x0
///                                    ###
///                                    * 1: Take care of rdy from diR0 while generating clken to vp_top
///                                    * 0 : don't consider rdy from diR0
///                                    * Make this bit 1 whenever read client0 of DI is turned-on. Otherwise, make it zero. In general, this bit has to be made 1 when 3D DI is on for interlaced inputs
///                                    ###
///               %unsigned 1  diR1                      0x0
///                                    ###
///                                    * 1: Take care of rdy from diR1 while generating clken to vp_top
///                                    * 0 : don't consider rdy from diR1
///                                    * Make this bit 1 whenever read client1 of DI is turned-on. Otherwise, make it zero. In general, this bit has to be made 1 when 3D DI is on for interlaced inputs.
///                                    ###
///               %unsigned 1  pwr_sv_mode               0x0
///                                    ###
///                                    * VP TOP Clock Enable control : fall back option for previous logic. Write 1 for clock enable generation with previous logic.
///                                    * Default : power saving mode
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00004 CFG0                 (P)
///               %unsigned 1  rff                       0x0
///                                    ###
///                                    * Controls the 'rff' (Repeat Field Flag) input of DI in VP_TOP
///                                    ###
///               %unsigned 1  fld                       0x0
///                                    ###
///                                    * Controls the field signal at the input of VP_TOP.
///                                    ###
///               %unsigned 1  fld_mode                  0x0
///                                    ###
///                                    * 0: s/w mode , s/w to proram value at every start (VBI)
///                                    * 1: h/w mode , h/w to toggle at every start(VBI)
///                                    ###
///               %unsigned 1  fld_init                  0x0
///                                    ###
///                                    * Init value which will be talen for fld signal corresponding to first start programming
///                                    ###
///               %unsigned 1  vp_top_bypass             0x0
///                                    ###
///                                    * Hard-bypass for VP_TOP. Write 1 to bypass VP_TOP from main plane datapath
///                                    ###
///               %unsigned 1  idata_ctrl                0x0
///                                    ###
///                                    * [0] : idata with respect to ivde and ivde_ld being the 1 line early (Present default option)
///                                    * [1] : idata with respect to ivde_ld and ivde being 1 line next
///                                    ###
///               %unsigned 1  vptop_csc_bypass          0x1
///                                    ###
///                                    * [1] : Hard bypass
///                                    * [0] : In Path
///                                    ###
///               %unsigned 1  vptop_dns444_422_bypass   0x1
///                                    ###
///                                    * [1] : Hard bypass
///                                    * [0] : In Path
///                                    ###
///               %%        24         # Stuffing bits...
///     @ 0x00008 CFG1                 (P)
///               %unsigned 32 inPixTot                  0x64
///                                    ###
///                                    * Specifies the total number of pixels expected at the input of VPTOP IFifo. should be programmed with (ivres*ihres).
///                                    ###
///     @ 0x0000C CFG2                 (R-)
///               %unsigned 1  IFld_status               0x0
///                                    ###
///                                    * VP TOP input field status
///                                    ###
///               %unsigned 16 vptg_vcnt_sts             0x0
///                                    ###
///                                    * VP TG Vcount Status
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x00010 vptg_ctrl            (P-)
///               %unsigned 1  start                     0x0
///                                    ###
///                                    * vp tg start bit -
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the VP TG.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  clear                     0x0
///                                    ###
///                                    * Clear bit to reset VP_TOP Fifo's, and TG. Level signal.
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00014                      (P)
///     # 0x00014 RdClientdiR0         
///               $ReadClient          RdClientdiR0      REG          
///                                    ###
///                                    * Read Client diR0 for DEINT Frame Buffer I/F registers
///                                    ###
///     @ 0x00024                      (P)
///     # 0x00024 RdClientdiR1         
///               $ReadClient          RdClientdiR1      REG          
///                                    ###
///                                    * Read Client diR1 for DEINT Frame Buffer I/F registers
///                                    ###
///     @ 0x00034                      (P)
///     # 0x00034 WrClientdiW0         
///               $WriteClient         WrClientdiW0      REG          
///                                    ###
///                                    * Write Client diW0 for DEINT Frame Buffer I/F registers
///                                    ###
///     @ 0x00044                      (P)
///     # 0x00044 vptg                 
///               $TG                  vptg              REG          
///                                    ###
///                                    * dummy TG for VP_TOP (CAR+DEINT)
///                                    ###
///     @ 0x00084                      (P)
///     # 0x00084 VPTOP                
///               $VPTOP               VPTOP             REG          
///                                    ###
///                                    * Register Interface for VP TOP (CAR+DEINT)
///                                    ###
///     @ 0x00088                      (P)
///     # 0x00088 VPTOP_CSC            
///               $CSC_C17O24          VPTOP_CSC         REG          
///                                    ###
///                                    * Register Interface for VP TOP CSC
///                                    ###
///     @ 0x000B8                      (P)
///     # 0x000B8 VPTOP_dns444_422     
///               $DNS444_422          VPTOP_dns444_422  REG          
///                                    ###
///                                    * Register Interface for VP TOP DNS 444_422
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     212B, bits:    1055b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_VPTOP_CTRL
#define h_VPTOP_CTRL (){}

    #define     RA_VPTOP_CTRL_CLKEN_CTRL                       0x0000

    #define     BA_VPTOP_CTRL_CLKEN_CTRL_toggle                0x0000
    #define     B16VPTOP_CTRL_CLKEN_CTRL_toggle                0x0000
    #define   LSb32VPTOP_CTRL_CLKEN_CTRL_toggle                   0
    #define   LSb16VPTOP_CTRL_CLKEN_CTRL_toggle                   0
    #define       bVPTOP_CTRL_CLKEN_CTRL_toggle                1
    #define   MSK32VPTOP_CTRL_CLKEN_CTRL_toggle                   0x00000001

    #define     BA_VPTOP_CTRL_CLKEN_CTRL_diW                   0x0000
    #define     B16VPTOP_CTRL_CLKEN_CTRL_diW                   0x0000
    #define   LSb32VPTOP_CTRL_CLKEN_CTRL_diW                      1
    #define   LSb16VPTOP_CTRL_CLKEN_CTRL_diW                      1
    #define       bVPTOP_CTRL_CLKEN_CTRL_diW                   1
    #define   MSK32VPTOP_CTRL_CLKEN_CTRL_diW                      0x00000002

    #define     BA_VPTOP_CTRL_CLKEN_CTRL_diR0                  0x0000
    #define     B16VPTOP_CTRL_CLKEN_CTRL_diR0                  0x0000
    #define   LSb32VPTOP_CTRL_CLKEN_CTRL_diR0                     2
    #define   LSb16VPTOP_CTRL_CLKEN_CTRL_diR0                     2
    #define       bVPTOP_CTRL_CLKEN_CTRL_diR0                  1
    #define   MSK32VPTOP_CTRL_CLKEN_CTRL_diR0                     0x00000004

    #define     BA_VPTOP_CTRL_CLKEN_CTRL_diR1                  0x0000
    #define     B16VPTOP_CTRL_CLKEN_CTRL_diR1                  0x0000
    #define   LSb32VPTOP_CTRL_CLKEN_CTRL_diR1                     3
    #define   LSb16VPTOP_CTRL_CLKEN_CTRL_diR1                     3
    #define       bVPTOP_CTRL_CLKEN_CTRL_diR1                  1
    #define   MSK32VPTOP_CTRL_CLKEN_CTRL_diR1                     0x00000008

    #define     BA_VPTOP_CTRL_CLKEN_CTRL_pwr_sv_mode           0x0000
    #define     B16VPTOP_CTRL_CLKEN_CTRL_pwr_sv_mode           0x0000
    #define   LSb32VPTOP_CTRL_CLKEN_CTRL_pwr_sv_mode              4
    #define   LSb16VPTOP_CTRL_CLKEN_CTRL_pwr_sv_mode              4
    #define       bVPTOP_CTRL_CLKEN_CTRL_pwr_sv_mode           1
    #define   MSK32VPTOP_CTRL_CLKEN_CTRL_pwr_sv_mode              0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_VPTOP_CTRL_CFG0                             0x0004

    #define     BA_VPTOP_CTRL_CFG0_rff                         0x0004
    #define     B16VPTOP_CTRL_CFG0_rff                         0x0004
    #define   LSb32VPTOP_CTRL_CFG0_rff                            0
    #define   LSb16VPTOP_CTRL_CFG0_rff                            0
    #define       bVPTOP_CTRL_CFG0_rff                         1
    #define   MSK32VPTOP_CTRL_CFG0_rff                            0x00000001

    #define     BA_VPTOP_CTRL_CFG0_fld                         0x0004
    #define     B16VPTOP_CTRL_CFG0_fld                         0x0004
    #define   LSb32VPTOP_CTRL_CFG0_fld                            1
    #define   LSb16VPTOP_CTRL_CFG0_fld                            1
    #define       bVPTOP_CTRL_CFG0_fld                         1
    #define   MSK32VPTOP_CTRL_CFG0_fld                            0x00000002

    #define     BA_VPTOP_CTRL_CFG0_fld_mode                    0x0004
    #define     B16VPTOP_CTRL_CFG0_fld_mode                    0x0004
    #define   LSb32VPTOP_CTRL_CFG0_fld_mode                       2
    #define   LSb16VPTOP_CTRL_CFG0_fld_mode                       2
    #define       bVPTOP_CTRL_CFG0_fld_mode                    1
    #define   MSK32VPTOP_CTRL_CFG0_fld_mode                       0x00000004

    #define     BA_VPTOP_CTRL_CFG0_fld_init                    0x0004
    #define     B16VPTOP_CTRL_CFG0_fld_init                    0x0004
    #define   LSb32VPTOP_CTRL_CFG0_fld_init                       3
    #define   LSb16VPTOP_CTRL_CFG0_fld_init                       3
    #define       bVPTOP_CTRL_CFG0_fld_init                    1
    #define   MSK32VPTOP_CTRL_CFG0_fld_init                       0x00000008

    #define     BA_VPTOP_CTRL_CFG0_vp_top_bypass               0x0004
    #define     B16VPTOP_CTRL_CFG0_vp_top_bypass               0x0004
    #define   LSb32VPTOP_CTRL_CFG0_vp_top_bypass                  4
    #define   LSb16VPTOP_CTRL_CFG0_vp_top_bypass                  4
    #define       bVPTOP_CTRL_CFG0_vp_top_bypass               1
    #define   MSK32VPTOP_CTRL_CFG0_vp_top_bypass                  0x00000010

    #define     BA_VPTOP_CTRL_CFG0_idata_ctrl                  0x0004
    #define     B16VPTOP_CTRL_CFG0_idata_ctrl                  0x0004
    #define   LSb32VPTOP_CTRL_CFG0_idata_ctrl                     5
    #define   LSb16VPTOP_CTRL_CFG0_idata_ctrl                     5
    #define       bVPTOP_CTRL_CFG0_idata_ctrl                  1
    #define   MSK32VPTOP_CTRL_CFG0_idata_ctrl                     0x00000020

    #define     BA_VPTOP_CTRL_CFG0_vptop_csc_bypass            0x0004
    #define     B16VPTOP_CTRL_CFG0_vptop_csc_bypass            0x0004
    #define   LSb32VPTOP_CTRL_CFG0_vptop_csc_bypass               6
    #define   LSb16VPTOP_CTRL_CFG0_vptop_csc_bypass               6
    #define       bVPTOP_CTRL_CFG0_vptop_csc_bypass            1
    #define   MSK32VPTOP_CTRL_CFG0_vptop_csc_bypass               0x00000040

    #define     BA_VPTOP_CTRL_CFG0_vptop_dns444_422_bypass     0x0004
    #define     B16VPTOP_CTRL_CFG0_vptop_dns444_422_bypass     0x0004
    #define   LSb32VPTOP_CTRL_CFG0_vptop_dns444_422_bypass        7
    #define   LSb16VPTOP_CTRL_CFG0_vptop_dns444_422_bypass        7
    #define       bVPTOP_CTRL_CFG0_vptop_dns444_422_bypass     1
    #define   MSK32VPTOP_CTRL_CFG0_vptop_dns444_422_bypass        0x00000080
    ///////////////////////////////////////////////////////////
    #define     RA_VPTOP_CTRL_CFG1                             0x0008

    #define     BA_VPTOP_CTRL_CFG1_inPixTot                    0x0008
    #define     B16VPTOP_CTRL_CFG1_inPixTot                    0x0008
    #define   LSb32VPTOP_CTRL_CFG1_inPixTot                       0
    #define   LSb16VPTOP_CTRL_CFG1_inPixTot                       0
    #define       bVPTOP_CTRL_CFG1_inPixTot                    32
    #define   MSK32VPTOP_CTRL_CFG1_inPixTot                       0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_VPTOP_CTRL_CFG2                             0x000C

    #define     BA_VPTOP_CTRL_CFG2_IFld_status                 0x000C
    #define     B16VPTOP_CTRL_CFG2_IFld_status                 0x000C
    #define   LSb32VPTOP_CTRL_CFG2_IFld_status                    0
    #define   LSb16VPTOP_CTRL_CFG2_IFld_status                    0
    #define       bVPTOP_CTRL_CFG2_IFld_status                 1
    #define   MSK32VPTOP_CTRL_CFG2_IFld_status                    0x00000001

    #define     BA_VPTOP_CTRL_CFG2_vptg_vcnt_sts               0x000C
    #define     B16VPTOP_CTRL_CFG2_vptg_vcnt_sts               0x000C
    #define   LSb32VPTOP_CTRL_CFG2_vptg_vcnt_sts                  1
    #define   LSb16VPTOP_CTRL_CFG2_vptg_vcnt_sts                  1
    #define       bVPTOP_CTRL_CFG2_vptg_vcnt_sts               16
    #define   MSK32VPTOP_CTRL_CFG2_vptg_vcnt_sts                  0x0001FFFE
    ///////////////////////////////////////////////////////////
    #define     RA_VPTOP_CTRL_vptg_ctrl                        0x0010

    #define     BA_VPTOP_CTRL_vptg_ctrl_start                  0x0010
    #define     B16VPTOP_CTRL_vptg_ctrl_start                  0x0010
    #define   LSb32VPTOP_CTRL_vptg_ctrl_start                     0
    #define   LSb16VPTOP_CTRL_vptg_ctrl_start                     0
    #define       bVPTOP_CTRL_vptg_ctrl_start                  1
    #define   MSK32VPTOP_CTRL_vptg_ctrl_start                     0x00000001

    #define     BA_VPTOP_CTRL_vptg_ctrl_clear                  0x0010
    #define     B16VPTOP_CTRL_vptg_ctrl_clear                  0x0010
    #define   LSb32VPTOP_CTRL_vptg_ctrl_clear                     1
    #define   LSb16VPTOP_CTRL_vptg_ctrl_clear                     1
    #define       bVPTOP_CTRL_vptg_ctrl_clear                  1
    #define   MSK32VPTOP_CTRL_vptg_ctrl_clear                     0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_VPTOP_CTRL_RdClientdiR0                     0x0014
    ///////////////////////////////////////////////////////////
    #define     RA_VPTOP_CTRL_RdClientdiR1                     0x0024
    ///////////////////////////////////////////////////////////
    #define     RA_VPTOP_CTRL_WrClientdiW0                     0x0034
    ///////////////////////////////////////////////////////////
    #define     RA_VPTOP_CTRL_vptg                             0x0044
    ///////////////////////////////////////////////////////////
    #define     RA_VPTOP_CTRL_VPTOP                            0x0084
    ///////////////////////////////////////////////////////////
    #define     RA_VPTOP_CTRL_VPTOP_CSC                        0x0088
    ///////////////////////////////////////////////////////////
    #define     RA_VPTOP_CTRL_VPTOP_dns444_422                 0x00B8
    ///////////////////////////////////////////////////////////

    typedef struct SIE_VPTOP_CTRL {
    ///////////////////////////////////////////////////////////
    #define   GET32VPTOP_CTRL_CLKEN_CTRL_toggle(r32)           _BFGET_(r32, 0, 0)
    #define   SET32VPTOP_CTRL_CLKEN_CTRL_toggle(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16VPTOP_CTRL_CLKEN_CTRL_toggle(r16)           _BFGET_(r16, 0, 0)
    #define   SET16VPTOP_CTRL_CLKEN_CTRL_toggle(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32VPTOP_CTRL_CLKEN_CTRL_diW(r32)              _BFGET_(r32, 1, 1)
    #define   SET32VPTOP_CTRL_CLKEN_CTRL_diW(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16VPTOP_CTRL_CLKEN_CTRL_diW(r16)              _BFGET_(r16, 1, 1)
    #define   SET16VPTOP_CTRL_CLKEN_CTRL_diW(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32VPTOP_CTRL_CLKEN_CTRL_diR0(r32)             _BFGET_(r32, 2, 2)
    #define   SET32VPTOP_CTRL_CLKEN_CTRL_diR0(r32,v)           _BFSET_(r32, 2, 2,v)
    #define   GET16VPTOP_CTRL_CLKEN_CTRL_diR0(r16)             _BFGET_(r16, 2, 2)
    #define   SET16VPTOP_CTRL_CLKEN_CTRL_diR0(r16,v)           _BFSET_(r16, 2, 2,v)

    #define   GET32VPTOP_CTRL_CLKEN_CTRL_diR1(r32)             _BFGET_(r32, 3, 3)
    #define   SET32VPTOP_CTRL_CLKEN_CTRL_diR1(r32,v)           _BFSET_(r32, 3, 3,v)
    #define   GET16VPTOP_CTRL_CLKEN_CTRL_diR1(r16)             _BFGET_(r16, 3, 3)
    #define   SET16VPTOP_CTRL_CLKEN_CTRL_diR1(r16,v)           _BFSET_(r16, 3, 3,v)

    #define   GET32VPTOP_CTRL_CLKEN_CTRL_pwr_sv_mode(r32)      _BFGET_(r32, 4, 4)
    #define   SET32VPTOP_CTRL_CLKEN_CTRL_pwr_sv_mode(r32,v)    _BFSET_(r32, 4, 4,v)
    #define   GET16VPTOP_CTRL_CLKEN_CTRL_pwr_sv_mode(r16)      _BFGET_(r16, 4, 4)
    #define   SET16VPTOP_CTRL_CLKEN_CTRL_pwr_sv_mode(r16,v)    _BFSET_(r16, 4, 4,v)

    #define     w32VPTOP_CTRL_CLKEN_CTRL                       {\
            UNSG32 uCLKEN_CTRL_toggle                          :  1;\
            UNSG32 uCLKEN_CTRL_diW                             :  1;\
            UNSG32 uCLKEN_CTRL_diR0                            :  1;\
            UNSG32 uCLKEN_CTRL_diR1                            :  1;\
            UNSG32 uCLKEN_CTRL_pwr_sv_mode                     :  1;\
            UNSG32 RSVDx0_b5                                   : 27;\
          }
    union { UNSG32 u32VPTOP_CTRL_CLKEN_CTRL;
            struct w32VPTOP_CTRL_CLKEN_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VPTOP_CTRL_CFG0_rff(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32VPTOP_CTRL_CFG0_rff(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16VPTOP_CTRL_CFG0_rff(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16VPTOP_CTRL_CFG0_rff(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define   GET32VPTOP_CTRL_CFG0_fld(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32VPTOP_CTRL_CFG0_fld(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16VPTOP_CTRL_CFG0_fld(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16VPTOP_CTRL_CFG0_fld(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define   GET32VPTOP_CTRL_CFG0_fld_mode(r32)               _BFGET_(r32, 2, 2)
    #define   SET32VPTOP_CTRL_CFG0_fld_mode(r32,v)             _BFSET_(r32, 2, 2,v)
    #define   GET16VPTOP_CTRL_CFG0_fld_mode(r16)               _BFGET_(r16, 2, 2)
    #define   SET16VPTOP_CTRL_CFG0_fld_mode(r16,v)             _BFSET_(r16, 2, 2,v)

    #define   GET32VPTOP_CTRL_CFG0_fld_init(r32)               _BFGET_(r32, 3, 3)
    #define   SET32VPTOP_CTRL_CFG0_fld_init(r32,v)             _BFSET_(r32, 3, 3,v)
    #define   GET16VPTOP_CTRL_CFG0_fld_init(r16)               _BFGET_(r16, 3, 3)
    #define   SET16VPTOP_CTRL_CFG0_fld_init(r16,v)             _BFSET_(r16, 3, 3,v)

    #define   GET32VPTOP_CTRL_CFG0_vp_top_bypass(r32)          _BFGET_(r32, 4, 4)
    #define   SET32VPTOP_CTRL_CFG0_vp_top_bypass(r32,v)        _BFSET_(r32, 4, 4,v)
    #define   GET16VPTOP_CTRL_CFG0_vp_top_bypass(r16)          _BFGET_(r16, 4, 4)
    #define   SET16VPTOP_CTRL_CFG0_vp_top_bypass(r16,v)        _BFSET_(r16, 4, 4,v)

    #define   GET32VPTOP_CTRL_CFG0_idata_ctrl(r32)             _BFGET_(r32, 5, 5)
    #define   SET32VPTOP_CTRL_CFG0_idata_ctrl(r32,v)           _BFSET_(r32, 5, 5,v)
    #define   GET16VPTOP_CTRL_CFG0_idata_ctrl(r16)             _BFGET_(r16, 5, 5)
    #define   SET16VPTOP_CTRL_CFG0_idata_ctrl(r16,v)           _BFSET_(r16, 5, 5,v)

    #define   GET32VPTOP_CTRL_CFG0_vptop_csc_bypass(r32)       _BFGET_(r32, 6, 6)
    #define   SET32VPTOP_CTRL_CFG0_vptop_csc_bypass(r32,v)     _BFSET_(r32, 6, 6,v)
    #define   GET16VPTOP_CTRL_CFG0_vptop_csc_bypass(r16)       _BFGET_(r16, 6, 6)
    #define   SET16VPTOP_CTRL_CFG0_vptop_csc_bypass(r16,v)     _BFSET_(r16, 6, 6,v)

    #define   GET32VPTOP_CTRL_CFG0_vptop_dns444_422_bypass(r32) _BFGET_(r32, 7, 7)
    #define   SET32VPTOP_CTRL_CFG0_vptop_dns444_422_bypass(r32,v) _BFSET_(r32, 7, 7,v)
    #define   GET16VPTOP_CTRL_CFG0_vptop_dns444_422_bypass(r16) _BFGET_(r16, 7, 7)
    #define   SET16VPTOP_CTRL_CFG0_vptop_dns444_422_bypass(r16,v) _BFSET_(r16, 7, 7,v)

    #define     w32VPTOP_CTRL_CFG0                             {\
            UNSG32 uCFG0_rff                                   :  1;\
            UNSG32 uCFG0_fld                                   :  1;\
            UNSG32 uCFG0_fld_mode                              :  1;\
            UNSG32 uCFG0_fld_init                              :  1;\
            UNSG32 uCFG0_vp_top_bypass                         :  1;\
            UNSG32 uCFG0_idata_ctrl                            :  1;\
            UNSG32 uCFG0_vptop_csc_bypass                      :  1;\
            UNSG32 uCFG0_vptop_dns444_422_bypass               :  1;\
            UNSG32 RSVDx4_b8                                   : 24;\
          }
    union { UNSG32 u32VPTOP_CTRL_CFG0;
            struct w32VPTOP_CTRL_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VPTOP_CTRL_CFG1_inPixTot(r32)               _BFGET_(r32,31, 0)
    #define   SET32VPTOP_CTRL_CFG1_inPixTot(r32,v)             _BFSET_(r32,31, 0,v)

    #define     w32VPTOP_CTRL_CFG1                             {\
            UNSG32 uCFG1_inPixTot                              : 32;\
          }
    union { UNSG32 u32VPTOP_CTRL_CFG1;
            struct w32VPTOP_CTRL_CFG1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VPTOP_CTRL_CFG2_IFld_status(r32)            _BFGET_(r32, 0, 0)
    #define   SET32VPTOP_CTRL_CFG2_IFld_status(r32,v)          _BFSET_(r32, 0, 0,v)
    #define   GET16VPTOP_CTRL_CFG2_IFld_status(r16)            _BFGET_(r16, 0, 0)
    #define   SET16VPTOP_CTRL_CFG2_IFld_status(r16,v)          _BFSET_(r16, 0, 0,v)

    #define   GET32VPTOP_CTRL_CFG2_vptg_vcnt_sts(r32)          _BFGET_(r32,16, 1)
    #define   SET32VPTOP_CTRL_CFG2_vptg_vcnt_sts(r32,v)        _BFSET_(r32,16, 1,v)

    #define     w32VPTOP_CTRL_CFG2                             {\
            UNSG32 uCFG2_IFld_status                           :  1;\
            UNSG32 uCFG2_vptg_vcnt_sts                         : 16;\
            UNSG32 RSVDxC_b17                                  : 15;\
          }
    union { UNSG32 u32VPTOP_CTRL_CFG2;
            struct w32VPTOP_CTRL_CFG2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32VPTOP_CTRL_vptg_ctrl_start(r32)             _BFGET_(r32, 0, 0)
    #define   SET32VPTOP_CTRL_vptg_ctrl_start(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16VPTOP_CTRL_vptg_ctrl_start(r16)             _BFGET_(r16, 0, 0)
    #define   SET16VPTOP_CTRL_vptg_ctrl_start(r16,v)           _BFSET_(r16, 0, 0,v)

    #define   GET32VPTOP_CTRL_vptg_ctrl_clear(r32)             _BFGET_(r32, 1, 1)
    #define   SET32VPTOP_CTRL_vptg_ctrl_clear(r32,v)           _BFSET_(r32, 1, 1,v)
    #define   GET16VPTOP_CTRL_vptg_ctrl_clear(r16)             _BFGET_(r16, 1, 1)
    #define   SET16VPTOP_CTRL_vptg_ctrl_clear(r16,v)           _BFSET_(r16, 1, 1,v)

    #define     w32VPTOP_CTRL_vptg_ctrl                        {\
            UNSG32 uvptg_ctrl_start                            :  1;\
            UNSG32 uvptg_ctrl_clear                            :  1;\
            UNSG32 RSVDx10_b2                                  : 30;\
          }
    union { UNSG32 u32VPTOP_CTRL_vptg_ctrl;
            struct w32VPTOP_CTRL_vptg_ctrl;
          };
    ///////////////////////////////////////////////////////////
              SIE_ReadClient                                   ie_RdClientdiR0;
    ///////////////////////////////////////////////////////////
              SIE_ReadClient                                   ie_RdClientdiR1;
    ///////////////////////////////////////////////////////////
              SIE_WriteClient                                  ie_WrClientdiW0;
    ///////////////////////////////////////////////////////////
              SIE_TG                                           ie_vptg;
    ///////////////////////////////////////////////////////////
              SIE_VPTOP                                        ie_VPTOP;
    ///////////////////////////////////////////////////////////
              SIE_CSC_C17O24                                   ie_VPTOP_CSC;
    ///////////////////////////////////////////////////////////
              SIE_DNS444_422                                   ie_VPTOP_dns444_422;
    ///////////////////////////////////////////////////////////
    } SIE_VPTOP_CTRL;

    typedef union  T32VPTOP_CTRL_CLKEN_CTRL
          { UNSG32 u32;
            struct w32VPTOP_CTRL_CLKEN_CTRL;
                 } T32VPTOP_CTRL_CLKEN_CTRL;
    typedef union  T32VPTOP_CTRL_CFG0
          { UNSG32 u32;
            struct w32VPTOP_CTRL_CFG0;
                 } T32VPTOP_CTRL_CFG0;
    typedef union  T32VPTOP_CTRL_CFG1
          { UNSG32 u32;
            struct w32VPTOP_CTRL_CFG1;
                 } T32VPTOP_CTRL_CFG1;
    typedef union  T32VPTOP_CTRL_CFG2
          { UNSG32 u32;
            struct w32VPTOP_CTRL_CFG2;
                 } T32VPTOP_CTRL_CFG2;
    typedef union  T32VPTOP_CTRL_vptg_ctrl
          { UNSG32 u32;
            struct w32VPTOP_CTRL_vptg_ctrl;
                 } T32VPTOP_CTRL_vptg_ctrl;
    ///////////////////////////////////////////////////////////

    typedef union  TVPTOP_CTRL_CLKEN_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32VPTOP_CTRL_CLKEN_CTRL;
                   };
                 } TVPTOP_CTRL_CLKEN_CTRL;
    typedef union  TVPTOP_CTRL_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32VPTOP_CTRL_CFG0;
                   };
                 } TVPTOP_CTRL_CFG0;
    typedef union  TVPTOP_CTRL_CFG1
          { UNSG32 u32[1];
            struct {
            struct w32VPTOP_CTRL_CFG1;
                   };
                 } TVPTOP_CTRL_CFG1;
    typedef union  TVPTOP_CTRL_CFG2
          { UNSG32 u32[1];
            struct {
            struct w32VPTOP_CTRL_CFG2;
                   };
                 } TVPTOP_CTRL_CFG2;
    typedef union  TVPTOP_CTRL_vptg_ctrl
          { UNSG32 u32[1];
            struct {
            struct w32VPTOP_CTRL_vptg_ctrl;
                   };
                 } TVPTOP_CTRL_vptg_ctrl;

    ///////////////////////////////////////////////////////////
     SIGN32 VPTOP_CTRL_drvrd(SIE_VPTOP_CTRL *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 VPTOP_CTRL_drvwr(SIE_VPTOP_CTRL *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void VPTOP_CTRL_reset(SIE_VPTOP_CTRL *p);
     SIGN32 VPTOP_CTRL_cmp  (SIE_VPTOP_CTRL *p, SIE_VPTOP_CTRL *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define VPTOP_CTRL_check(p,pie,pfx,hLOG) VPTOP_CTRL_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define VPTOP_CTRL_print(p,    pfx,hLOG) VPTOP_CTRL_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: VPTOP_CTRL
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE RASTERSCAN_RD           biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (P-)
///               %unsigned 1  tg_start                  0x0
///                                    ###
///                                    * Start bit for tg
///                                    * 0 : No effect on hardware.
///                                    * 1 : start the client.
///                                    * The write 1 to this register is used to kick the hardware.
///                                    ###
///               %unsigned 1  tg_clear                  0x0
///                                    ###
///                                    * 0 : Don't clear, normal state.
///                                    * 1 : Clear tg
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x00004 CTRL1                (P)
///               %unsigned 2  read_sel                  0x0
///                                    ###
///                                    * Select bit used to select the Readclients for 420 SP read
///                                    * [00] : BL Read client select
///                                    * [01] : EL Read client select
///                                    * [10] : GFX0 Read client select
///                                    * [11] : OVP Read client select
///                                    ###
///               %unsigned 1  clken_ctrl0               0x0
///                                    ###
///                                    * Clock enable control for rsFeTG. Write 1 to make flow control independent of ready status from Read Client0
///                                    ###
///               %unsigned 1  clken_ctrl1               0x0
///                                    ###
///                                    * Clock enable control for rsFeTG. Write 1 to make flow control independent of ready status from Read Client1
///                                    ###
///               %unsigned 2  fifo_sts_ctrl             0x0
///                                    ###
///                                    * Fifo Full status control bit to select the FIFO status from different fifos.
///                                    * [00] : BL FIFO Status
///                                    * [01] : EL FIFO Status
///                                    * [10] : GFX0 SCL FIFO Status
///                                    * [11] : OVP Input FIFO status
///                                    ###
///               %unsigned 1  fifo_full_ctrlEn          0x0
///                                    ###
///                                    * Fifo Full status control bit used for clock enable generation either from BL fifo, EL fifo or GFX SCL fifo. Default enable. Write 1 to disable this control. The fifo selection is based on fifo_sts_ctrl register value.
///                                    ###
///               %unsigned 1  rd_initval0               0x0
///                                    ###
///                                    * Initiallization value for read Mask for Read Client1
///                                    * for different planes(BL,EL,GFX0) in 420SP Cases.
///                                    ###
///               %unsigned 1  rd_initval1               0x1
///                                    ###
///                                    * Initiallization value for read Mask for Read Client1
///                                    * for different planes(BL,EL,GFX0) in 420SP Cases.
///                                    ###
///               %unsigned 1  rd_mask_sftrst            0x0
///                                    ###
///                                    * Soft reset to initialize read mask. Write 1 to initialize read mask with rd_initval0
///                                    ###
///               %unsigned 1  crop_de_en                0x0
///                                    ###
///                                    * Enable for cropped de to be used for cropping UPS420-SP input read from Read Client's.
///                                    * Write 1 to enable it. Default disabled.
///                                    ###
///               %unsigned 1  ups420_idat_sel           0x0
///                                    ###
///                                    * YUV420 SP Input data select
///                                    * [0] : 8b 420SP
///                                    * [1] : 10b 420SP
///                                    ###
///               %unsigned 1  fifo_full_ctrl1           0x0
///                                    ###
///                                    * tg_clken control bit to enable use of fifo full status in generating clock enable from ovpScl iFifo luma. Default enable. Write 1 to disable this control
///                                    ###
///               %unsigned 1  fifo_full_ctrl2           0x0
///                                    ###
///                                    * tg_clken control bit to enable use of fifo full status in generating clock enable from ovpScl iFifo croma. Default enable. Write 1 to disable this control
///                                    ###
///               %unsigned 1  uv_mask_val0              0x0
///                                    ###
///                                    * Mask value for UV data read control for OVPSCLWRAP
///                                    * Default 0. For Front-end, alternate line control to be independent of UV
///                                    ###
///               %unsigned 1  uv_mask_val1              0x0
///                                    ###
///                                    * Mask value for UV data read control for OVPSCLWRAP
///                                    * Default 0. For Front-end, alternate line control to be independent of UV
///                                    ###
///               %unsigned 1  uv_mask_disable           0x0
///                                    ###
///                                    * Control bit to diable uv_mask generation for OVP SCL Pipe (Croma control)
///                                    * Write 1 to disable UV mask generation. Default enabled.
///                                    ###
///               %unsigned 1  bitmap20_en               0x0
///                                    ###
///                                    * Enable bit for bitmap20. Default disable. Write 1 to enable bitmap.
///                                    ###
///               %unsigned 1  tgEn_rstEn                0x1
///                                    ###
///                                    * RSFETG tgEn reset enable bit. Default Enabled.
///                                    * Write 0 to disable tgEn being cleared on display TG frst.
///                                    ###
///               %%        13         # Stuffing bits...
///     @ 0x00008 VCNTSTS              (R-)
///               %unsigned 16 rsfetg_vcnt               0x0
///                                    ###
///                                    * Vcounter status for rsFETG
///                                    ###
///               %%        16         # Stuffing bits...
///     @ 0x0000C                      (P)
///     # 0x0000C rsFeTG               
///               $TG_MAIN             rsFeTG            REG          
///                                    ###
///                                    * TG for reading 420SP from Cliens
///                                    ###
///     @ 0x00054                      (P)
///     # 0x00054 rsFeTG_BITMAP20      
///               $BITMAP20            rsFeTG_BITMAP20   REG          
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     100B, bits:     621b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_RASTERSCAN_RD
#define h_RASTERSCAN_RD (){}

    #define     RA_RASTERSCAN_RD_CTRL0                         0x0000

    #define     BA_RASTERSCAN_RD_CTRL0_tg_start                0x0000
    #define     B16RASTERSCAN_RD_CTRL0_tg_start                0x0000
    #define   LSb32RASTERSCAN_RD_CTRL0_tg_start                   0
    #define   LSb16RASTERSCAN_RD_CTRL0_tg_start                   0
    #define       bRASTERSCAN_RD_CTRL0_tg_start                1
    #define   MSK32RASTERSCAN_RD_CTRL0_tg_start                   0x00000001

    #define     BA_RASTERSCAN_RD_CTRL0_tg_clear                0x0000
    #define     B16RASTERSCAN_RD_CTRL0_tg_clear                0x0000
    #define   LSb32RASTERSCAN_RD_CTRL0_tg_clear                   1
    #define   LSb16RASTERSCAN_RD_CTRL0_tg_clear                   1
    #define       bRASTERSCAN_RD_CTRL0_tg_clear                1
    #define   MSK32RASTERSCAN_RD_CTRL0_tg_clear                   0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_RASTERSCAN_RD_CTRL1                         0x0004

    #define     BA_RASTERSCAN_RD_CTRL1_read_sel                0x0004
    #define     B16RASTERSCAN_RD_CTRL1_read_sel                0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_read_sel                   0
    #define   LSb16RASTERSCAN_RD_CTRL1_read_sel                   0
    #define       bRASTERSCAN_RD_CTRL1_read_sel                2
    #define   MSK32RASTERSCAN_RD_CTRL1_read_sel                   0x00000003

    #define     BA_RASTERSCAN_RD_CTRL1_clken_ctrl0             0x0004
    #define     B16RASTERSCAN_RD_CTRL1_clken_ctrl0             0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_clken_ctrl0                2
    #define   LSb16RASTERSCAN_RD_CTRL1_clken_ctrl0                2
    #define       bRASTERSCAN_RD_CTRL1_clken_ctrl0             1
    #define   MSK32RASTERSCAN_RD_CTRL1_clken_ctrl0                0x00000004

    #define     BA_RASTERSCAN_RD_CTRL1_clken_ctrl1             0x0004
    #define     B16RASTERSCAN_RD_CTRL1_clken_ctrl1             0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_clken_ctrl1                3
    #define   LSb16RASTERSCAN_RD_CTRL1_clken_ctrl1                3
    #define       bRASTERSCAN_RD_CTRL1_clken_ctrl1             1
    #define   MSK32RASTERSCAN_RD_CTRL1_clken_ctrl1                0x00000008

    #define     BA_RASTERSCAN_RD_CTRL1_fifo_sts_ctrl           0x0004
    #define     B16RASTERSCAN_RD_CTRL1_fifo_sts_ctrl           0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_fifo_sts_ctrl              4
    #define   LSb16RASTERSCAN_RD_CTRL1_fifo_sts_ctrl              4
    #define       bRASTERSCAN_RD_CTRL1_fifo_sts_ctrl           2
    #define   MSK32RASTERSCAN_RD_CTRL1_fifo_sts_ctrl              0x00000030

    #define     BA_RASTERSCAN_RD_CTRL1_fifo_full_ctrlEn        0x0004
    #define     B16RASTERSCAN_RD_CTRL1_fifo_full_ctrlEn        0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_fifo_full_ctrlEn           6
    #define   LSb16RASTERSCAN_RD_CTRL1_fifo_full_ctrlEn           6
    #define       bRASTERSCAN_RD_CTRL1_fifo_full_ctrlEn        1
    #define   MSK32RASTERSCAN_RD_CTRL1_fifo_full_ctrlEn           0x00000040

    #define     BA_RASTERSCAN_RD_CTRL1_rd_initval0             0x0004
    #define     B16RASTERSCAN_RD_CTRL1_rd_initval0             0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_rd_initval0                7
    #define   LSb16RASTERSCAN_RD_CTRL1_rd_initval0                7
    #define       bRASTERSCAN_RD_CTRL1_rd_initval0             1
    #define   MSK32RASTERSCAN_RD_CTRL1_rd_initval0                0x00000080

    #define     BA_RASTERSCAN_RD_CTRL1_rd_initval1             0x0005
    #define     B16RASTERSCAN_RD_CTRL1_rd_initval1             0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_rd_initval1                8
    #define   LSb16RASTERSCAN_RD_CTRL1_rd_initval1                8
    #define       bRASTERSCAN_RD_CTRL1_rd_initval1             1
    #define   MSK32RASTERSCAN_RD_CTRL1_rd_initval1                0x00000100

    #define     BA_RASTERSCAN_RD_CTRL1_rd_mask_sftrst          0x0005
    #define     B16RASTERSCAN_RD_CTRL1_rd_mask_sftrst          0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_rd_mask_sftrst             9
    #define   LSb16RASTERSCAN_RD_CTRL1_rd_mask_sftrst             9
    #define       bRASTERSCAN_RD_CTRL1_rd_mask_sftrst          1
    #define   MSK32RASTERSCAN_RD_CTRL1_rd_mask_sftrst             0x00000200

    #define     BA_RASTERSCAN_RD_CTRL1_crop_de_en              0x0005
    #define     B16RASTERSCAN_RD_CTRL1_crop_de_en              0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_crop_de_en                 10
    #define   LSb16RASTERSCAN_RD_CTRL1_crop_de_en                 10
    #define       bRASTERSCAN_RD_CTRL1_crop_de_en              1
    #define   MSK32RASTERSCAN_RD_CTRL1_crop_de_en                 0x00000400

    #define     BA_RASTERSCAN_RD_CTRL1_ups420_idat_sel         0x0005
    #define     B16RASTERSCAN_RD_CTRL1_ups420_idat_sel         0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_ups420_idat_sel            11
    #define   LSb16RASTERSCAN_RD_CTRL1_ups420_idat_sel            11
    #define       bRASTERSCAN_RD_CTRL1_ups420_idat_sel         1
    #define   MSK32RASTERSCAN_RD_CTRL1_ups420_idat_sel            0x00000800

    #define     BA_RASTERSCAN_RD_CTRL1_fifo_full_ctrl1         0x0005
    #define     B16RASTERSCAN_RD_CTRL1_fifo_full_ctrl1         0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_fifo_full_ctrl1            12
    #define   LSb16RASTERSCAN_RD_CTRL1_fifo_full_ctrl1            12
    #define       bRASTERSCAN_RD_CTRL1_fifo_full_ctrl1         1
    #define   MSK32RASTERSCAN_RD_CTRL1_fifo_full_ctrl1            0x00001000

    #define     BA_RASTERSCAN_RD_CTRL1_fifo_full_ctrl2         0x0005
    #define     B16RASTERSCAN_RD_CTRL1_fifo_full_ctrl2         0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_fifo_full_ctrl2            13
    #define   LSb16RASTERSCAN_RD_CTRL1_fifo_full_ctrl2            13
    #define       bRASTERSCAN_RD_CTRL1_fifo_full_ctrl2         1
    #define   MSK32RASTERSCAN_RD_CTRL1_fifo_full_ctrl2            0x00002000

    #define     BA_RASTERSCAN_RD_CTRL1_uv_mask_val0            0x0005
    #define     B16RASTERSCAN_RD_CTRL1_uv_mask_val0            0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_uv_mask_val0               14
    #define   LSb16RASTERSCAN_RD_CTRL1_uv_mask_val0               14
    #define       bRASTERSCAN_RD_CTRL1_uv_mask_val0            1
    #define   MSK32RASTERSCAN_RD_CTRL1_uv_mask_val0               0x00004000

    #define     BA_RASTERSCAN_RD_CTRL1_uv_mask_val1            0x0005
    #define     B16RASTERSCAN_RD_CTRL1_uv_mask_val1            0x0004
    #define   LSb32RASTERSCAN_RD_CTRL1_uv_mask_val1               15
    #define   LSb16RASTERSCAN_RD_CTRL1_uv_mask_val1               15
    #define       bRASTERSCAN_RD_CTRL1_uv_mask_val1            1
    #define   MSK32RASTERSCAN_RD_CTRL1_uv_mask_val1               0x00008000

    #define     BA_RASTERSCAN_RD_CTRL1_uv_mask_disable         0x0006
    #define     B16RASTERSCAN_RD_CTRL1_uv_mask_disable         0x0006
    #define   LSb32RASTERSCAN_RD_CTRL1_uv_mask_disable            16
    #define   LSb16RASTERSCAN_RD_CTRL1_uv_mask_disable            0
    #define       bRASTERSCAN_RD_CTRL1_uv_mask_disable         1
    #define   MSK32RASTERSCAN_RD_CTRL1_uv_mask_disable            0x00010000

    #define     BA_RASTERSCAN_RD_CTRL1_bitmap20_en             0x0006
    #define     B16RASTERSCAN_RD_CTRL1_bitmap20_en             0x0006
    #define   LSb32RASTERSCAN_RD_CTRL1_bitmap20_en                17
    #define   LSb16RASTERSCAN_RD_CTRL1_bitmap20_en                1
    #define       bRASTERSCAN_RD_CTRL1_bitmap20_en             1
    #define   MSK32RASTERSCAN_RD_CTRL1_bitmap20_en                0x00020000

    #define     BA_RASTERSCAN_RD_CTRL1_tgEn_rstEn              0x0006
    #define     B16RASTERSCAN_RD_CTRL1_tgEn_rstEn              0x0006
    #define   LSb32RASTERSCAN_RD_CTRL1_tgEn_rstEn                 18
    #define   LSb16RASTERSCAN_RD_CTRL1_tgEn_rstEn                 2
    #define       bRASTERSCAN_RD_CTRL1_tgEn_rstEn              1
    #define   MSK32RASTERSCAN_RD_CTRL1_tgEn_rstEn                 0x00040000
    ///////////////////////////////////////////////////////////
    #define     RA_RASTERSCAN_RD_VCNTSTS                       0x0008

    #define     BA_RASTERSCAN_RD_VCNTSTS_rsfetg_vcnt           0x0008
    #define     B16RASTERSCAN_RD_VCNTSTS_rsfetg_vcnt           0x0008
    #define   LSb32RASTERSCAN_RD_VCNTSTS_rsfetg_vcnt              0
    #define   LSb16RASTERSCAN_RD_VCNTSTS_rsfetg_vcnt              0
    #define       bRASTERSCAN_RD_VCNTSTS_rsfetg_vcnt           16
    #define   MSK32RASTERSCAN_RD_VCNTSTS_rsfetg_vcnt              0x0000FFFF
    ///////////////////////////////////////////////////////////
    #define     RA_RASTERSCAN_RD_rsFeTG                        0x000C
    ///////////////////////////////////////////////////////////
    #define     RA_RASTERSCAN_RD_rsFeTG_BITMAP20               0x0054
    ///////////////////////////////////////////////////////////

    typedef struct SIE_RASTERSCAN_RD {
    ///////////////////////////////////////////////////////////
    #define   GET32RASTERSCAN_RD_CTRL0_tg_start(r32)           _BFGET_(r32, 0, 0)
    #define   SET32RASTERSCAN_RD_CTRL0_tg_start(r32,v)         _BFSET_(r32, 0, 0,v)
    #define   GET16RASTERSCAN_RD_CTRL0_tg_start(r16)           _BFGET_(r16, 0, 0)
    #define   SET16RASTERSCAN_RD_CTRL0_tg_start(r16,v)         _BFSET_(r16, 0, 0,v)

    #define   GET32RASTERSCAN_RD_CTRL0_tg_clear(r32)           _BFGET_(r32, 1, 1)
    #define   SET32RASTERSCAN_RD_CTRL0_tg_clear(r32,v)         _BFSET_(r32, 1, 1,v)
    #define   GET16RASTERSCAN_RD_CTRL0_tg_clear(r16)           _BFGET_(r16, 1, 1)
    #define   SET16RASTERSCAN_RD_CTRL0_tg_clear(r16,v)         _BFSET_(r16, 1, 1,v)

    #define     w32RASTERSCAN_RD_CTRL0                         {\
            UNSG32 uCTRL0_tg_start                             :  1;\
            UNSG32 uCTRL0_tg_clear                             :  1;\
            UNSG32 RSVDx0_b2                                   : 30;\
          }
    union { UNSG32 u32RASTERSCAN_RD_CTRL0;
            struct w32RASTERSCAN_RD_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32RASTERSCAN_RD_CTRL1_read_sel(r32)           _BFGET_(r32, 1, 0)
    #define   SET32RASTERSCAN_RD_CTRL1_read_sel(r32,v)         _BFSET_(r32, 1, 0,v)
    #define   GET16RASTERSCAN_RD_CTRL1_read_sel(r16)           _BFGET_(r16, 1, 0)
    #define   SET16RASTERSCAN_RD_CTRL1_read_sel(r16,v)         _BFSET_(r16, 1, 0,v)

    #define   GET32RASTERSCAN_RD_CTRL1_clken_ctrl0(r32)        _BFGET_(r32, 2, 2)
    #define   SET32RASTERSCAN_RD_CTRL1_clken_ctrl0(r32,v)      _BFSET_(r32, 2, 2,v)
    #define   GET16RASTERSCAN_RD_CTRL1_clken_ctrl0(r16)        _BFGET_(r16, 2, 2)
    #define   SET16RASTERSCAN_RD_CTRL1_clken_ctrl0(r16,v)      _BFSET_(r16, 2, 2,v)

    #define   GET32RASTERSCAN_RD_CTRL1_clken_ctrl1(r32)        _BFGET_(r32, 3, 3)
    #define   SET32RASTERSCAN_RD_CTRL1_clken_ctrl1(r32,v)      _BFSET_(r32, 3, 3,v)
    #define   GET16RASTERSCAN_RD_CTRL1_clken_ctrl1(r16)        _BFGET_(r16, 3, 3)
    #define   SET16RASTERSCAN_RD_CTRL1_clken_ctrl1(r16,v)      _BFSET_(r16, 3, 3,v)

    #define   GET32RASTERSCAN_RD_CTRL1_fifo_sts_ctrl(r32)      _BFGET_(r32, 5, 4)
    #define   SET32RASTERSCAN_RD_CTRL1_fifo_sts_ctrl(r32,v)    _BFSET_(r32, 5, 4,v)
    #define   GET16RASTERSCAN_RD_CTRL1_fifo_sts_ctrl(r16)      _BFGET_(r16, 5, 4)
    #define   SET16RASTERSCAN_RD_CTRL1_fifo_sts_ctrl(r16,v)    _BFSET_(r16, 5, 4,v)

    #define   GET32RASTERSCAN_RD_CTRL1_fifo_full_ctrlEn(r32)   _BFGET_(r32, 6, 6)
    #define   SET32RASTERSCAN_RD_CTRL1_fifo_full_ctrlEn(r32,v) _BFSET_(r32, 6, 6,v)
    #define   GET16RASTERSCAN_RD_CTRL1_fifo_full_ctrlEn(r16)   _BFGET_(r16, 6, 6)
    #define   SET16RASTERSCAN_RD_CTRL1_fifo_full_ctrlEn(r16,v) _BFSET_(r16, 6, 6,v)

    #define   GET32RASTERSCAN_RD_CTRL1_rd_initval0(r32)        _BFGET_(r32, 7, 7)
    #define   SET32RASTERSCAN_RD_CTRL1_rd_initval0(r32,v)      _BFSET_(r32, 7, 7,v)
    #define   GET16RASTERSCAN_RD_CTRL1_rd_initval0(r16)        _BFGET_(r16, 7, 7)
    #define   SET16RASTERSCAN_RD_CTRL1_rd_initval0(r16,v)      _BFSET_(r16, 7, 7,v)

    #define   GET32RASTERSCAN_RD_CTRL1_rd_initval1(r32)        _BFGET_(r32, 8, 8)
    #define   SET32RASTERSCAN_RD_CTRL1_rd_initval1(r32,v)      _BFSET_(r32, 8, 8,v)
    #define   GET16RASTERSCAN_RD_CTRL1_rd_initval1(r16)        _BFGET_(r16, 8, 8)
    #define   SET16RASTERSCAN_RD_CTRL1_rd_initval1(r16,v)      _BFSET_(r16, 8, 8,v)

    #define   GET32RASTERSCAN_RD_CTRL1_rd_mask_sftrst(r32)     _BFGET_(r32, 9, 9)
    #define   SET32RASTERSCAN_RD_CTRL1_rd_mask_sftrst(r32,v)   _BFSET_(r32, 9, 9,v)
    #define   GET16RASTERSCAN_RD_CTRL1_rd_mask_sftrst(r16)     _BFGET_(r16, 9, 9)
    #define   SET16RASTERSCAN_RD_CTRL1_rd_mask_sftrst(r16,v)   _BFSET_(r16, 9, 9,v)

    #define   GET32RASTERSCAN_RD_CTRL1_crop_de_en(r32)         _BFGET_(r32,10,10)
    #define   SET32RASTERSCAN_RD_CTRL1_crop_de_en(r32,v)       _BFSET_(r32,10,10,v)
    #define   GET16RASTERSCAN_RD_CTRL1_crop_de_en(r16)         _BFGET_(r16,10,10)
    #define   SET16RASTERSCAN_RD_CTRL1_crop_de_en(r16,v)       _BFSET_(r16,10,10,v)

    #define   GET32RASTERSCAN_RD_CTRL1_ups420_idat_sel(r32)    _BFGET_(r32,11,11)
    #define   SET32RASTERSCAN_RD_CTRL1_ups420_idat_sel(r32,v)  _BFSET_(r32,11,11,v)
    #define   GET16RASTERSCAN_RD_CTRL1_ups420_idat_sel(r16)    _BFGET_(r16,11,11)
    #define   SET16RASTERSCAN_RD_CTRL1_ups420_idat_sel(r16,v)  _BFSET_(r16,11,11,v)

    #define   GET32RASTERSCAN_RD_CTRL1_fifo_full_ctrl1(r32)    _BFGET_(r32,12,12)
    #define   SET32RASTERSCAN_RD_CTRL1_fifo_full_ctrl1(r32,v)  _BFSET_(r32,12,12,v)
    #define   GET16RASTERSCAN_RD_CTRL1_fifo_full_ctrl1(r16)    _BFGET_(r16,12,12)
    #define   SET16RASTERSCAN_RD_CTRL1_fifo_full_ctrl1(r16,v)  _BFSET_(r16,12,12,v)

    #define   GET32RASTERSCAN_RD_CTRL1_fifo_full_ctrl2(r32)    _BFGET_(r32,13,13)
    #define   SET32RASTERSCAN_RD_CTRL1_fifo_full_ctrl2(r32,v)  _BFSET_(r32,13,13,v)
    #define   GET16RASTERSCAN_RD_CTRL1_fifo_full_ctrl2(r16)    _BFGET_(r16,13,13)
    #define   SET16RASTERSCAN_RD_CTRL1_fifo_full_ctrl2(r16,v)  _BFSET_(r16,13,13,v)

    #define   GET32RASTERSCAN_RD_CTRL1_uv_mask_val0(r32)       _BFGET_(r32,14,14)
    #define   SET32RASTERSCAN_RD_CTRL1_uv_mask_val0(r32,v)     _BFSET_(r32,14,14,v)
    #define   GET16RASTERSCAN_RD_CTRL1_uv_mask_val0(r16)       _BFGET_(r16,14,14)
    #define   SET16RASTERSCAN_RD_CTRL1_uv_mask_val0(r16,v)     _BFSET_(r16,14,14,v)

    #define   GET32RASTERSCAN_RD_CTRL1_uv_mask_val1(r32)       _BFGET_(r32,15,15)
    #define   SET32RASTERSCAN_RD_CTRL1_uv_mask_val1(r32,v)     _BFSET_(r32,15,15,v)
    #define   GET16RASTERSCAN_RD_CTRL1_uv_mask_val1(r16)       _BFGET_(r16,15,15)
    #define   SET16RASTERSCAN_RD_CTRL1_uv_mask_val1(r16,v)     _BFSET_(r16,15,15,v)

    #define   GET32RASTERSCAN_RD_CTRL1_uv_mask_disable(r32)    _BFGET_(r32,16,16)
    #define   SET32RASTERSCAN_RD_CTRL1_uv_mask_disable(r32,v)  _BFSET_(r32,16,16,v)
    #define   GET16RASTERSCAN_RD_CTRL1_uv_mask_disable(r16)    _BFGET_(r16, 0, 0)
    #define   SET16RASTERSCAN_RD_CTRL1_uv_mask_disable(r16,v)  _BFSET_(r16, 0, 0,v)

    #define   GET32RASTERSCAN_RD_CTRL1_bitmap20_en(r32)        _BFGET_(r32,17,17)
    #define   SET32RASTERSCAN_RD_CTRL1_bitmap20_en(r32,v)      _BFSET_(r32,17,17,v)
    #define   GET16RASTERSCAN_RD_CTRL1_bitmap20_en(r16)        _BFGET_(r16, 1, 1)
    #define   SET16RASTERSCAN_RD_CTRL1_bitmap20_en(r16,v)      _BFSET_(r16, 1, 1,v)

    #define   GET32RASTERSCAN_RD_CTRL1_tgEn_rstEn(r32)         _BFGET_(r32,18,18)
    #define   SET32RASTERSCAN_RD_CTRL1_tgEn_rstEn(r32,v)       _BFSET_(r32,18,18,v)
    #define   GET16RASTERSCAN_RD_CTRL1_tgEn_rstEn(r16)         _BFGET_(r16, 2, 2)
    #define   SET16RASTERSCAN_RD_CTRL1_tgEn_rstEn(r16,v)       _BFSET_(r16, 2, 2,v)

    #define     w32RASTERSCAN_RD_CTRL1                         {\
            UNSG32 uCTRL1_read_sel                             :  2;\
            UNSG32 uCTRL1_clken_ctrl0                          :  1;\
            UNSG32 uCTRL1_clken_ctrl1                          :  1;\
            UNSG32 uCTRL1_fifo_sts_ctrl                        :  2;\
            UNSG32 uCTRL1_fifo_full_ctrlEn                     :  1;\
            UNSG32 uCTRL1_rd_initval0                          :  1;\
            UNSG32 uCTRL1_rd_initval1                          :  1;\
            UNSG32 uCTRL1_rd_mask_sftrst                       :  1;\
            UNSG32 uCTRL1_crop_de_en                           :  1;\
            UNSG32 uCTRL1_ups420_idat_sel                      :  1;\
            UNSG32 uCTRL1_fifo_full_ctrl1                      :  1;\
            UNSG32 uCTRL1_fifo_full_ctrl2                      :  1;\
            UNSG32 uCTRL1_uv_mask_val0                         :  1;\
            UNSG32 uCTRL1_uv_mask_val1                         :  1;\
            UNSG32 uCTRL1_uv_mask_disable                      :  1;\
            UNSG32 uCTRL1_bitmap20_en                          :  1;\
            UNSG32 uCTRL1_tgEn_rstEn                           :  1;\
            UNSG32 RSVDx4_b19                                  : 13;\
          }
    union { UNSG32 u32RASTERSCAN_RD_CTRL1;
            struct w32RASTERSCAN_RD_CTRL1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32RASTERSCAN_RD_VCNTSTS_rsfetg_vcnt(r32)      _BFGET_(r32,15, 0)
    #define   SET32RASTERSCAN_RD_VCNTSTS_rsfetg_vcnt(r32,v)    _BFSET_(r32,15, 0,v)
    #define   GET16RASTERSCAN_RD_VCNTSTS_rsfetg_vcnt(r16)      _BFGET_(r16,15, 0)
    #define   SET16RASTERSCAN_RD_VCNTSTS_rsfetg_vcnt(r16,v)    _BFSET_(r16,15, 0,v)

    #define     w32RASTERSCAN_RD_VCNTSTS                       {\
            UNSG32 uVCNTSTS_rsfetg_vcnt                        : 16;\
            UNSG32 RSVDx8_b16                                  : 16;\
          }
    union { UNSG32 u32RASTERSCAN_RD_VCNTSTS;
            struct w32RASTERSCAN_RD_VCNTSTS;
          };
    ///////////////////////////////////////////////////////////
              SIE_TG_MAIN                                      ie_rsFeTG;
    ///////////////////////////////////////////////////////////
              SIE_BITMAP20                                     ie_rsFeTG_BITMAP20;
    ///////////////////////////////////////////////////////////
    } SIE_RASTERSCAN_RD;

    typedef union  T32RASTERSCAN_RD_CTRL0
          { UNSG32 u32;
            struct w32RASTERSCAN_RD_CTRL0;
                 } T32RASTERSCAN_RD_CTRL0;
    typedef union  T32RASTERSCAN_RD_CTRL1
          { UNSG32 u32;
            struct w32RASTERSCAN_RD_CTRL1;
                 } T32RASTERSCAN_RD_CTRL1;
    typedef union  T32RASTERSCAN_RD_VCNTSTS
          { UNSG32 u32;
            struct w32RASTERSCAN_RD_VCNTSTS;
                 } T32RASTERSCAN_RD_VCNTSTS;
    ///////////////////////////////////////////////////////////

    typedef union  TRASTERSCAN_RD_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32RASTERSCAN_RD_CTRL0;
                   };
                 } TRASTERSCAN_RD_CTRL0;
    typedef union  TRASTERSCAN_RD_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32RASTERSCAN_RD_CTRL1;
                   };
                 } TRASTERSCAN_RD_CTRL1;
    typedef union  TRASTERSCAN_RD_VCNTSTS
          { UNSG32 u32[1];
            struct {
            struct w32RASTERSCAN_RD_VCNTSTS;
                   };
                 } TRASTERSCAN_RD_VCNTSTS;

    ///////////////////////////////////////////////////////////
     SIGN32 RASTERSCAN_RD_drvrd(SIE_RASTERSCAN_RD *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 RASTERSCAN_RD_drvwr(SIE_RASTERSCAN_RD *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void RASTERSCAN_RD_reset(SIE_RASTERSCAN_RD *p);
     SIGN32 RASTERSCAN_RD_cmp  (SIE_RASTERSCAN_RD *p, SIE_RASTERSCAN_RD *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define RASTERSCAN_RD_check(p,pie,pfx,hLOG) RASTERSCAN_RD_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define RASTERSCAN_RD_print(p,    pfx,hLOG) RASTERSCAN_RD_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: RASTERSCAN_RD
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE vidpl                   biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 VP_CLKEN_CTRL        (P)
///               %unsigned 1  toggle                    0x0
///                                    ###
///                                    * 1: Toggle the clken to vp_top.
///                                    * 0: clken to vp_top is not toggled.
///                                    * Make this bit 1 for interlaced inputs. Make it zero for progressive inputs.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00004 ADPSCLctrl1          (P)
///               %unsigned 1  cfg_rst                   0x0
///                                    ###
///                                    * Configurable soft reset Main Scalar
///                                    ###
///               %unsigned 1  adpscl_clken              0x0
///                                    ###
///                                    * Clock enable control for adaptive main scalar
///                                    ###
///               %unsigned 1  scl_sw_rst                0x0
///                                    ###
///                                    * Adaptive Scalar software controlled reset. Write 1 to reset adaptive scalar.
///                                    ###
///               %unsigned 1  scl_rst_en0               0x1
///                                    ###
///                                    * Adaptive Scalar will get resetted on Main Read Client0 start (scalar start)
///                                    * Disable this bit for not-resetting Adaptive Scalar on start.
///                                    ###
///               %unsigned 1  scl_rst_en1               0x1
///                                    ###
///                                    * Adaptive Scalar will get resetted on displayTG frst
///                                    * Enable this bit to reset Adaptive Scalar on frst
///                                    ###
///               %unsigned 1  scl_rst_en2               0x0
///                                    ###
///                                    * Enable this bit to soft-reset adaptive scalar. Software will have control to soft-reset scalar during VBI
///                                    ###
///               %unsigned 1  sb_clkg_en                0x1
///                                    ###
///                                    * Clock gating enable for separate clock to Adaptive 1D SCL (except LUT logic). Default enabled. Write 0 to clock gate logic except LUT logic.
///                                    ###
///               %%        25         # Stuffing bits...
///     @ 0x00008 SCL_CLKEN_CTRL       (P)
///               %unsigned 1  Main                      0x0
///                                    ###
///                                    * 0: Clock enable to scaler depends on the input FIFO status; scaler clken is deasserted when FE can't supply data to scaler.
///                                    * 1: Clock enable to scaler is always high.
///                                    ###
///               %unsigned 1  fall_bk_en                0x0
///                                    ###
///                                    * Adaptive Scalar Clock Enable control : fall back option for previous logic. Write 1 for clock enable generation with pervious logic.
///                                    * Default : power saving mode
///                                    ###
///               %%        30         # Stuffing bits...
///     @ 0x0000C DUMMY0               (P)
///               %unsigned 32 ctrl                      0x0
///                                    ###
///                                    * Do nothing, dummy! May be used for ECOs.
///                                    ###
///     @ 0x00010 DUMMY_TG             (R-)
///               %unsigned 16 VCNTSTS_fetg              0x0
///                                    ###
///                                    * Vcounter status for FETG in Main pipe
///                                    ###
///               %unsigned 12 VCNTSTS_betg              0x0
///                                    ###
///                                    * Vcounter status for BETG in CPCB pipe
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00014 VCNTSTS0             (R-)
///               %unsigned 16 VCNTSTS_eltg              0x0
///                                    ###
///                                    * Vcounter status for ELTG in Main EL pipe
///                                    ###
///               %unsigned 16 VCNTSTS_dvicsctg          0x0
///                                    ###
///                                    * Vcounter status for DVICSC_TG in Main pipe (Dolby IPRO)
///                                    ###
///     @ 0x00018 VCNTSTS1             (R-)
///               %unsigned 16 OFLRD_TG                  0x0
///               %unsigned 12 VOP_TG                    0x0
///                                    ###
///                                    * Vcounter status for Offline Read Path TG in Main pipe
///                                    * Vcounter status for VOP TG
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x0001C VCNTSTS2             (R-)
///               %unsigned 16 VCNTSTS_dvicsctg_gfx0     0x0
///                                    ###
///                                    * Vcounter status for DVICSC_TG in GFX0 pipe (Dolby IPRO for ARGB input)
///                                    ###
///               %unsigned 16 VCNTSTS_dvicsctg_gfx1     0x0
///                                    ###
///                                    * Vcounter status for DVICSC_TG in GFX1 pipe (Dolby IPRO for ARGB input)
///                                    ###
///     @ 0x00020                      (P)
///     # 0x00020 VPTOP_CTRL           
///               $VPTOP_CTRL          VPTOP_CTRL        REG          
///                                    ###
///                                    * Control registers for VP TOP instance in main video plane
///                                    ###
///     @ 0x000F4                      (P)
///     # 0x000F4 ClientIFm            
///               $ClientIF            ClientIFm         REG          
///                                    ###
///                                    * Read Client Interface control registers for 420 SP case
///                                    ###
///     @ 0x00124                      (P)
///     # 0x00124 UPS420_422Main_Y     
///               $UPS_420_422         UPS420_422Main_Y  REG          
///                                    ###
///                                    * UPS registers for 420-> 422 UPS & coefficients for Luma Component
///                                    ###
///     @ 0x00150                      (P)
///     # 0x00150 UPS420_422Main_C     
///               $UPS_420_422         UPS420_422Main_C  REG          
///                                    ###
///                                    * UPS registers for 420-> 422 UPS & coefficients for Croma Component
///                                    ###
///     @ 0x0017C                      (P)
///     # 0x0017C MAINSCL              
///               $ADPSCL              MAINSCL           REG          
///                                    ###
///                                    * Adaptive-cum-1D (Main) Scalar
///                                    ###
///     @ 0x001C8                      (P)
///     # 0x001C8 MAINSCL_COEFF        
///               $ADPSCL_COEFF        MAINSCL_COEFF     REG          
///                                    ###
///                                    * Main Scalar coefficient
///                                    ###
///     @ 0x001DC                      (P)
///     # 0x001DC MAINSCL_FRC          
///               $ADPSCL_FRC          MAINSCL_FRC       REG          
///                                    ###
///                                    * Main Scalar FRC registers
///                                    ###
///     @ 0x001F8                      (P)
///     # 0x001F8 MAINPL               
///               $MAINPL              MAINPL            REG          
///                                    ###
///                                    * Main Plane registers
///                                    ###
///     @ 0x00240                      (P)
///     # 0x00240 CPCB0                
///               $CPCB0               CPCB0             REG          
///                                    ###
///                                    * CPCB related registers
///                                    ###
///     @ 0x0037C                      (P)
///     # 0x0037C feTG                 
///               $TG_MAIN             feTG              REG          
///                                    ###
///                                    * dummy TG for (front end Main Video path).
///                                    ###
///     @ 0x003C4                      (P)
///     # 0x003C4 bitmap40             
///               $BITMAP40            bitmap40          REG          
///                                    ###
///                                    * BITMAP registers for mapping 40bits of pixel data before giving to main video pipe
///                                    * Default [1:1] mapping.
///                                    ###
///     @ 0x003E4                      (W-)
///     #         # Stuffing bytes...
///               %% 224
///     @ 0x00400                      (P)
///     # 0x00400 DIF_Y                
///               $DIF                 DIF_Y             REG          
///                                    ###
///                                    * DeTile Input Formatter related registers for Luma
///                                    ###
///     @ 0x00C00                      (P)
///     # 0x00C00 DIF_C                
///               $DIF                 DIF_C             REG          
///                                    ###
///                                    * DeTile Input Formatter related registers for Croma
///                                    ###
///     @ 0x01400                      (P)
///     # 0x01400 UPS422to444_10B      
///               $UPS10               UPS422to444_10B   REG          
///                                    ###
///                                    * UPS422_444 for Main Plane
///                                    ###
///     @ 0x01428                      (P)
///     # 0x01428 OFFLINERD_MAIN       
///               $OfflineRd           OFFLINERD_MAIN    REG          
///                                    ###
///                                    * Offline Read registers
///                                    ###
///     @ 0x014A8                      (P)
///     # 0x014A8 SRAMPWR_BL_DIF       
///               $SRAMPWR             SRAMPWR_BL_DIF    REG          
///                                    ###
///                                    * Power control registers for SRAMs used in MP.BL path DIF block
///                                    ###
///     @ 0x014AC                      (P)
///     # 0x014AC SRAMPWR_BL_DTILE     
///               $SRAMPWR             SRAMPWR_BL_DTILE  REG          
///                                    ###
///                                    * Power control registers for SRAMs used in MP.BL path DETILE 4K block
///                                    ###
///     @ 0x014B0                      (P)
///     # 0x014B0 SRAMPWR_MP_1DSCL_LB  
///               $SRAMPWR             SRAMPWR_MP_1DSCL_LB REG          
///                                    ###
///                                    * Power control registers for SRAMs used in MP 1D scalar line buffer
///                                    ###
///     @ 0x014B4                      (P)
///     # 0x014B4 SRAMPWR_MP_1DSCL_LUT 
///               $SRAMPWR             SRAMPWR_MP_1DSCL_LUT REG          
///                                    ###
///                                    * Power control registers for SRAMs used in MP 1D scalar LUT buffer
///                                    ###
///     @ 0x014B8                      (W-)
///     #         # Stuffing bytes...
///               %% 6720
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:    6144B, bits:    6540b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_vidpl
#define h_vidpl (){}

    #define     RA_vidpl_VP_CLKEN_CTRL                         0x0000

    #define     BA_vidpl_VP_CLKEN_CTRL_toggle                  0x0000
    #define     B16vidpl_VP_CLKEN_CTRL_toggle                  0x0000
    #define   LSb32vidpl_VP_CLKEN_CTRL_toggle                     0
    #define   LSb16vidpl_VP_CLKEN_CTRL_toggle                     0
    #define       bvidpl_VP_CLKEN_CTRL_toggle                  1
    #define   MSK32vidpl_VP_CLKEN_CTRL_toggle                     0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_ADPSCLctrl1                           0x0004

    #define     BA_vidpl_ADPSCLctrl1_cfg_rst                   0x0004
    #define     B16vidpl_ADPSCLctrl1_cfg_rst                   0x0004
    #define   LSb32vidpl_ADPSCLctrl1_cfg_rst                      0
    #define   LSb16vidpl_ADPSCLctrl1_cfg_rst                      0
    #define       bvidpl_ADPSCLctrl1_cfg_rst                   1
    #define   MSK32vidpl_ADPSCLctrl1_cfg_rst                      0x00000001

    #define     BA_vidpl_ADPSCLctrl1_adpscl_clken              0x0004
    #define     B16vidpl_ADPSCLctrl1_adpscl_clken              0x0004
    #define   LSb32vidpl_ADPSCLctrl1_adpscl_clken                 1
    #define   LSb16vidpl_ADPSCLctrl1_adpscl_clken                 1
    #define       bvidpl_ADPSCLctrl1_adpscl_clken              1
    #define   MSK32vidpl_ADPSCLctrl1_adpscl_clken                 0x00000002

    #define     BA_vidpl_ADPSCLctrl1_scl_sw_rst                0x0004
    #define     B16vidpl_ADPSCLctrl1_scl_sw_rst                0x0004
    #define   LSb32vidpl_ADPSCLctrl1_scl_sw_rst                   2
    #define   LSb16vidpl_ADPSCLctrl1_scl_sw_rst                   2
    #define       bvidpl_ADPSCLctrl1_scl_sw_rst                1
    #define   MSK32vidpl_ADPSCLctrl1_scl_sw_rst                   0x00000004

    #define     BA_vidpl_ADPSCLctrl1_scl_rst_en0               0x0004
    #define     B16vidpl_ADPSCLctrl1_scl_rst_en0               0x0004
    #define   LSb32vidpl_ADPSCLctrl1_scl_rst_en0                  3
    #define   LSb16vidpl_ADPSCLctrl1_scl_rst_en0                  3
    #define       bvidpl_ADPSCLctrl1_scl_rst_en0               1
    #define   MSK32vidpl_ADPSCLctrl1_scl_rst_en0                  0x00000008

    #define     BA_vidpl_ADPSCLctrl1_scl_rst_en1               0x0004
    #define     B16vidpl_ADPSCLctrl1_scl_rst_en1               0x0004
    #define   LSb32vidpl_ADPSCLctrl1_scl_rst_en1                  4
    #define   LSb16vidpl_ADPSCLctrl1_scl_rst_en1                  4
    #define       bvidpl_ADPSCLctrl1_scl_rst_en1               1
    #define   MSK32vidpl_ADPSCLctrl1_scl_rst_en1                  0x00000010

    #define     BA_vidpl_ADPSCLctrl1_scl_rst_en2               0x0004
    #define     B16vidpl_ADPSCLctrl1_scl_rst_en2               0x0004
    #define   LSb32vidpl_ADPSCLctrl1_scl_rst_en2                  5
    #define   LSb16vidpl_ADPSCLctrl1_scl_rst_en2                  5
    #define       bvidpl_ADPSCLctrl1_scl_rst_en2               1
    #define   MSK32vidpl_ADPSCLctrl1_scl_rst_en2                  0x00000020

    #define     BA_vidpl_ADPSCLctrl1_sb_clkg_en                0x0004
    #define     B16vidpl_ADPSCLctrl1_sb_clkg_en                0x0004
    #define   LSb32vidpl_ADPSCLctrl1_sb_clkg_en                   6
    #define   LSb16vidpl_ADPSCLctrl1_sb_clkg_en                   6
    #define       bvidpl_ADPSCLctrl1_sb_clkg_en                1
    #define   MSK32vidpl_ADPSCLctrl1_sb_clkg_en                   0x00000040
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_SCL_CLKEN_CTRL                        0x0008

    #define     BA_vidpl_SCL_CLKEN_CTRL_Main                   0x0008
    #define     B16vidpl_SCL_CLKEN_CTRL_Main                   0x0008
    #define   LSb32vidpl_SCL_CLKEN_CTRL_Main                      0
    #define   LSb16vidpl_SCL_CLKEN_CTRL_Main                      0
    #define       bvidpl_SCL_CLKEN_CTRL_Main                   1
    #define   MSK32vidpl_SCL_CLKEN_CTRL_Main                      0x00000001

    #define     BA_vidpl_SCL_CLKEN_CTRL_fall_bk_en             0x0008
    #define     B16vidpl_SCL_CLKEN_CTRL_fall_bk_en             0x0008
    #define   LSb32vidpl_SCL_CLKEN_CTRL_fall_bk_en                1
    #define   LSb16vidpl_SCL_CLKEN_CTRL_fall_bk_en                1
    #define       bvidpl_SCL_CLKEN_CTRL_fall_bk_en             1
    #define   MSK32vidpl_SCL_CLKEN_CTRL_fall_bk_en                0x00000002
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_DUMMY0                                0x000C

    #define     BA_vidpl_DUMMY0_ctrl                           0x000C
    #define     B16vidpl_DUMMY0_ctrl                           0x000C
    #define   LSb32vidpl_DUMMY0_ctrl                              0
    #define   LSb16vidpl_DUMMY0_ctrl                              0
    #define       bvidpl_DUMMY0_ctrl                           32
    #define   MSK32vidpl_DUMMY0_ctrl                              0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_DUMMY_TG                              0x0010

    #define     BA_vidpl_DUMMY_TG_VCNTSTS_fetg                 0x0010
    #define     B16vidpl_DUMMY_TG_VCNTSTS_fetg                 0x0010
    #define   LSb32vidpl_DUMMY_TG_VCNTSTS_fetg                    0
    #define   LSb16vidpl_DUMMY_TG_VCNTSTS_fetg                    0
    #define       bvidpl_DUMMY_TG_VCNTSTS_fetg                 16
    #define   MSK32vidpl_DUMMY_TG_VCNTSTS_fetg                    0x0000FFFF

    #define     BA_vidpl_DUMMY_TG_VCNTSTS_betg                 0x0012
    #define     B16vidpl_DUMMY_TG_VCNTSTS_betg                 0x0012
    #define   LSb32vidpl_DUMMY_TG_VCNTSTS_betg                    16
    #define   LSb16vidpl_DUMMY_TG_VCNTSTS_betg                    0
    #define       bvidpl_DUMMY_TG_VCNTSTS_betg                 12
    #define   MSK32vidpl_DUMMY_TG_VCNTSTS_betg                    0x0FFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_VCNTSTS0                              0x0014

    #define     BA_vidpl_VCNTSTS0_VCNTSTS_eltg                 0x0014
    #define     B16vidpl_VCNTSTS0_VCNTSTS_eltg                 0x0014
    #define   LSb32vidpl_VCNTSTS0_VCNTSTS_eltg                    0
    #define   LSb16vidpl_VCNTSTS0_VCNTSTS_eltg                    0
    #define       bvidpl_VCNTSTS0_VCNTSTS_eltg                 16
    #define   MSK32vidpl_VCNTSTS0_VCNTSTS_eltg                    0x0000FFFF

    #define     BA_vidpl_VCNTSTS0_VCNTSTS_dvicsctg             0x0016
    #define     B16vidpl_VCNTSTS0_VCNTSTS_dvicsctg             0x0016
    #define   LSb32vidpl_VCNTSTS0_VCNTSTS_dvicsctg                16
    #define   LSb16vidpl_VCNTSTS0_VCNTSTS_dvicsctg                0
    #define       bvidpl_VCNTSTS0_VCNTSTS_dvicsctg             16
    #define   MSK32vidpl_VCNTSTS0_VCNTSTS_dvicsctg                0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_VCNTSTS1                              0x0018

    #define     BA_vidpl_VCNTSTS1_OFLRD_TG                     0x0018
    #define     B16vidpl_VCNTSTS1_OFLRD_TG                     0x0018
    #define   LSb32vidpl_VCNTSTS1_OFLRD_TG                        0
    #define   LSb16vidpl_VCNTSTS1_OFLRD_TG                        0
    #define       bvidpl_VCNTSTS1_OFLRD_TG                     16
    #define   MSK32vidpl_VCNTSTS1_OFLRD_TG                        0x0000FFFF

    #define     BA_vidpl_VCNTSTS1_VOP_TG                       0x001A
    #define     B16vidpl_VCNTSTS1_VOP_TG                       0x001A
    #define   LSb32vidpl_VCNTSTS1_VOP_TG                          16
    #define   LSb16vidpl_VCNTSTS1_VOP_TG                          0
    #define       bvidpl_VCNTSTS1_VOP_TG                       12
    #define   MSK32vidpl_VCNTSTS1_VOP_TG                          0x0FFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_VCNTSTS2                              0x001C

    #define     BA_vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx0        0x001C
    #define     B16vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx0        0x001C
    #define   LSb32vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx0           0
    #define   LSb16vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx0           0
    #define       bvidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx0        16
    #define   MSK32vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx0           0x0000FFFF

    #define     BA_vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx1        0x001E
    #define     B16vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx1        0x001E
    #define   LSb32vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx1           16
    #define   LSb16vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx1           0
    #define       bvidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx1        16
    #define   MSK32vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx1           0xFFFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_VPTOP_CTRL                            0x0020
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_ClientIFm                             0x00F4
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_UPS420_422Main_Y                      0x0124
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_UPS420_422Main_C                      0x0150
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_MAINSCL                               0x017C
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_MAINSCL_COEFF                         0x01C8
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_MAINSCL_FRC                           0x01DC
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_MAINPL                                0x01F8
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_CPCB0                                 0x0240
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_feTG                                  0x037C
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_bitmap40                              0x03C4
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_DIF_Y                                 0x0400
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_DIF_C                                 0x0C00
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_UPS422to444_10B                       0x1400
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_OFFLINERD_MAIN                        0x1428
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_SRAMPWR_BL_DIF                        0x14A8
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_SRAMPWR_BL_DTILE                      0x14AC
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_SRAMPWR_MP_1DSCL_LB                   0x14B0
    ///////////////////////////////////////////////////////////
    #define     RA_vidpl_SRAMPWR_MP_1DSCL_LUT                  0x14B4
    ///////////////////////////////////////////////////////////

    typedef struct SIE_vidpl {
    ///////////////////////////////////////////////////////////
    #define   GET32vidpl_VP_CLKEN_CTRL_toggle(r32)             _BFGET_(r32, 0, 0)
    #define   SET32vidpl_VP_CLKEN_CTRL_toggle(r32,v)           _BFSET_(r32, 0, 0,v)
    #define   GET16vidpl_VP_CLKEN_CTRL_toggle(r16)             _BFGET_(r16, 0, 0)
    #define   SET16vidpl_VP_CLKEN_CTRL_toggle(r16,v)           _BFSET_(r16, 0, 0,v)

    #define     w32vidpl_VP_CLKEN_CTRL                         {\
            UNSG32 uVP_CLKEN_CTRL_toggle                       :  1;\
            UNSG32 RSVDx0_b1                                   : 31;\
          }
    union { UNSG32 u32vidpl_VP_CLKEN_CTRL;
            struct w32vidpl_VP_CLKEN_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32vidpl_ADPSCLctrl1_cfg_rst(r32)              _BFGET_(r32, 0, 0)
    #define   SET32vidpl_ADPSCLctrl1_cfg_rst(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16vidpl_ADPSCLctrl1_cfg_rst(r16)              _BFGET_(r16, 0, 0)
    #define   SET16vidpl_ADPSCLctrl1_cfg_rst(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32vidpl_ADPSCLctrl1_adpscl_clken(r32)         _BFGET_(r32, 1, 1)
    #define   SET32vidpl_ADPSCLctrl1_adpscl_clken(r32,v)       _BFSET_(r32, 1, 1,v)
    #define   GET16vidpl_ADPSCLctrl1_adpscl_clken(r16)         _BFGET_(r16, 1, 1)
    #define   SET16vidpl_ADPSCLctrl1_adpscl_clken(r16,v)       _BFSET_(r16, 1, 1,v)

    #define   GET32vidpl_ADPSCLctrl1_scl_sw_rst(r32)           _BFGET_(r32, 2, 2)
    #define   SET32vidpl_ADPSCLctrl1_scl_sw_rst(r32,v)         _BFSET_(r32, 2, 2,v)
    #define   GET16vidpl_ADPSCLctrl1_scl_sw_rst(r16)           _BFGET_(r16, 2, 2)
    #define   SET16vidpl_ADPSCLctrl1_scl_sw_rst(r16,v)         _BFSET_(r16, 2, 2,v)

    #define   GET32vidpl_ADPSCLctrl1_scl_rst_en0(r32)          _BFGET_(r32, 3, 3)
    #define   SET32vidpl_ADPSCLctrl1_scl_rst_en0(r32,v)        _BFSET_(r32, 3, 3,v)
    #define   GET16vidpl_ADPSCLctrl1_scl_rst_en0(r16)          _BFGET_(r16, 3, 3)
    #define   SET16vidpl_ADPSCLctrl1_scl_rst_en0(r16,v)        _BFSET_(r16, 3, 3,v)

    #define   GET32vidpl_ADPSCLctrl1_scl_rst_en1(r32)          _BFGET_(r32, 4, 4)
    #define   SET32vidpl_ADPSCLctrl1_scl_rst_en1(r32,v)        _BFSET_(r32, 4, 4,v)
    #define   GET16vidpl_ADPSCLctrl1_scl_rst_en1(r16)          _BFGET_(r16, 4, 4)
    #define   SET16vidpl_ADPSCLctrl1_scl_rst_en1(r16,v)        _BFSET_(r16, 4, 4,v)

    #define   GET32vidpl_ADPSCLctrl1_scl_rst_en2(r32)          _BFGET_(r32, 5, 5)
    #define   SET32vidpl_ADPSCLctrl1_scl_rst_en2(r32,v)        _BFSET_(r32, 5, 5,v)
    #define   GET16vidpl_ADPSCLctrl1_scl_rst_en2(r16)          _BFGET_(r16, 5, 5)
    #define   SET16vidpl_ADPSCLctrl1_scl_rst_en2(r16,v)        _BFSET_(r16, 5, 5,v)

    #define   GET32vidpl_ADPSCLctrl1_sb_clkg_en(r32)           _BFGET_(r32, 6, 6)
    #define   SET32vidpl_ADPSCLctrl1_sb_clkg_en(r32,v)         _BFSET_(r32, 6, 6,v)
    #define   GET16vidpl_ADPSCLctrl1_sb_clkg_en(r16)           _BFGET_(r16, 6, 6)
    #define   SET16vidpl_ADPSCLctrl1_sb_clkg_en(r16,v)         _BFSET_(r16, 6, 6,v)

    #define     w32vidpl_ADPSCLctrl1                           {\
            UNSG32 uADPSCLctrl1_cfg_rst                        :  1;\
            UNSG32 uADPSCLctrl1_adpscl_clken                   :  1;\
            UNSG32 uADPSCLctrl1_scl_sw_rst                     :  1;\
            UNSG32 uADPSCLctrl1_scl_rst_en0                    :  1;\
            UNSG32 uADPSCLctrl1_scl_rst_en1                    :  1;\
            UNSG32 uADPSCLctrl1_scl_rst_en2                    :  1;\
            UNSG32 uADPSCLctrl1_sb_clkg_en                     :  1;\
            UNSG32 RSVDx4_b7                                   : 25;\
          }
    union { UNSG32 u32vidpl_ADPSCLctrl1;
            struct w32vidpl_ADPSCLctrl1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32vidpl_SCL_CLKEN_CTRL_Main(r32)              _BFGET_(r32, 0, 0)
    #define   SET32vidpl_SCL_CLKEN_CTRL_Main(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16vidpl_SCL_CLKEN_CTRL_Main(r16)              _BFGET_(r16, 0, 0)
    #define   SET16vidpl_SCL_CLKEN_CTRL_Main(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32vidpl_SCL_CLKEN_CTRL_fall_bk_en(r32)        _BFGET_(r32, 1, 1)
    #define   SET32vidpl_SCL_CLKEN_CTRL_fall_bk_en(r32,v)      _BFSET_(r32, 1, 1,v)
    #define   GET16vidpl_SCL_CLKEN_CTRL_fall_bk_en(r16)        _BFGET_(r16, 1, 1)
    #define   SET16vidpl_SCL_CLKEN_CTRL_fall_bk_en(r16,v)      _BFSET_(r16, 1, 1,v)

    #define     w32vidpl_SCL_CLKEN_CTRL                        {\
            UNSG32 uSCL_CLKEN_CTRL_Main                        :  1;\
            UNSG32 uSCL_CLKEN_CTRL_fall_bk_en                  :  1;\
            UNSG32 RSVDx8_b2                                   : 30;\
          }
    union { UNSG32 u32vidpl_SCL_CLKEN_CTRL;
            struct w32vidpl_SCL_CLKEN_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32vidpl_DUMMY0_ctrl(r32)                      _BFGET_(r32,31, 0)
    #define   SET32vidpl_DUMMY0_ctrl(r32,v)                    _BFSET_(r32,31, 0,v)

    #define     w32vidpl_DUMMY0                                {\
            UNSG32 uDUMMY0_ctrl                                : 32;\
          }
    union { UNSG32 u32vidpl_DUMMY0;
            struct w32vidpl_DUMMY0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32vidpl_DUMMY_TG_VCNTSTS_fetg(r32)            _BFGET_(r32,15, 0)
    #define   SET32vidpl_DUMMY_TG_VCNTSTS_fetg(r32,v)          _BFSET_(r32,15, 0,v)
    #define   GET16vidpl_DUMMY_TG_VCNTSTS_fetg(r16)            _BFGET_(r16,15, 0)
    #define   SET16vidpl_DUMMY_TG_VCNTSTS_fetg(r16,v)          _BFSET_(r16,15, 0,v)

    #define   GET32vidpl_DUMMY_TG_VCNTSTS_betg(r32)            _BFGET_(r32,27,16)
    #define   SET32vidpl_DUMMY_TG_VCNTSTS_betg(r32,v)          _BFSET_(r32,27,16,v)
    #define   GET16vidpl_DUMMY_TG_VCNTSTS_betg(r16)            _BFGET_(r16,11, 0)
    #define   SET16vidpl_DUMMY_TG_VCNTSTS_betg(r16,v)          _BFSET_(r16,11, 0,v)

    #define     w32vidpl_DUMMY_TG                              {\
            UNSG32 uDUMMY_TG_VCNTSTS_fetg                      : 16;\
            UNSG32 uDUMMY_TG_VCNTSTS_betg                      : 12;\
            UNSG32 RSVDx10_b28                                 :  4;\
          }
    union { UNSG32 u32vidpl_DUMMY_TG;
            struct w32vidpl_DUMMY_TG;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32vidpl_VCNTSTS0_VCNTSTS_eltg(r32)            _BFGET_(r32,15, 0)
    #define   SET32vidpl_VCNTSTS0_VCNTSTS_eltg(r32,v)          _BFSET_(r32,15, 0,v)
    #define   GET16vidpl_VCNTSTS0_VCNTSTS_eltg(r16)            _BFGET_(r16,15, 0)
    #define   SET16vidpl_VCNTSTS0_VCNTSTS_eltg(r16,v)          _BFSET_(r16,15, 0,v)

    #define   GET32vidpl_VCNTSTS0_VCNTSTS_dvicsctg(r32)        _BFGET_(r32,31,16)
    #define   SET32vidpl_VCNTSTS0_VCNTSTS_dvicsctg(r32,v)      _BFSET_(r32,31,16,v)
    #define   GET16vidpl_VCNTSTS0_VCNTSTS_dvicsctg(r16)        _BFGET_(r16,15, 0)
    #define   SET16vidpl_VCNTSTS0_VCNTSTS_dvicsctg(r16,v)      _BFSET_(r16,15, 0,v)

    #define     w32vidpl_VCNTSTS0                              {\
            UNSG32 uVCNTSTS0_VCNTSTS_eltg                      : 16;\
            UNSG32 uVCNTSTS0_VCNTSTS_dvicsctg                  : 16;\
          }
    union { UNSG32 u32vidpl_VCNTSTS0;
            struct w32vidpl_VCNTSTS0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32vidpl_VCNTSTS1_OFLRD_TG(r32)                _BFGET_(r32,15, 0)
    #define   SET32vidpl_VCNTSTS1_OFLRD_TG(r32,v)              _BFSET_(r32,15, 0,v)
    #define   GET16vidpl_VCNTSTS1_OFLRD_TG(r16)                _BFGET_(r16,15, 0)
    #define   SET16vidpl_VCNTSTS1_OFLRD_TG(r16,v)              _BFSET_(r16,15, 0,v)

    #define   GET32vidpl_VCNTSTS1_VOP_TG(r32)                  _BFGET_(r32,27,16)
    #define   SET32vidpl_VCNTSTS1_VOP_TG(r32,v)                _BFSET_(r32,27,16,v)
    #define   GET16vidpl_VCNTSTS1_VOP_TG(r16)                  _BFGET_(r16,11, 0)
    #define   SET16vidpl_VCNTSTS1_VOP_TG(r16,v)                _BFSET_(r16,11, 0,v)

    #define     w32vidpl_VCNTSTS1                              {\
            UNSG32 uVCNTSTS1_OFLRD_TG                          : 16;\
            UNSG32 uVCNTSTS1_VOP_TG                            : 12;\
            UNSG32 RSVDx18_b28                                 :  4;\
          }
    union { UNSG32 u32vidpl_VCNTSTS1;
            struct w32vidpl_VCNTSTS1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx0(r32)   _BFGET_(r32,15, 0)
    #define   SET32vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx0(r32,v) _BFSET_(r32,15, 0,v)
    #define   GET16vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx0(r16)   _BFGET_(r16,15, 0)
    #define   SET16vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx0(r16,v) _BFSET_(r16,15, 0,v)

    #define   GET32vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx1(r32)   _BFGET_(r32,31,16)
    #define   SET32vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx1(r32,v) _BFSET_(r32,31,16,v)
    #define   GET16vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx1(r16)   _BFGET_(r16,15, 0)
    #define   SET16vidpl_VCNTSTS2_VCNTSTS_dvicsctg_gfx1(r16,v) _BFSET_(r16,15, 0,v)

    #define     w32vidpl_VCNTSTS2                              {\
            UNSG32 uVCNTSTS2_VCNTSTS_dvicsctg_gfx0             : 16;\
            UNSG32 uVCNTSTS2_VCNTSTS_dvicsctg_gfx1             : 16;\
          }
    union { UNSG32 u32vidpl_VCNTSTS2;
            struct w32vidpl_VCNTSTS2;
          };
    ///////////////////////////////////////////////////////////
              SIE_VPTOP_CTRL                                   ie_VPTOP_CTRL;
    ///////////////////////////////////////////////////////////
              SIE_ClientIF                                     ie_ClientIFm;
    ///////////////////////////////////////////////////////////
              SIE_UPS_420_422                                  ie_UPS420_422Main_Y;
    ///////////////////////////////////////////////////////////
              SIE_UPS_420_422                                  ie_UPS420_422Main_C;
    ///////////////////////////////////////////////////////////
              SIE_ADPSCL                                       ie_MAINSCL;
    ///////////////////////////////////////////////////////////
              SIE_ADPSCL_COEFF                                 ie_MAINSCL_COEFF;
    ///////////////////////////////////////////////////////////
              SIE_ADPSCL_FRC                                   ie_MAINSCL_FRC;
    ///////////////////////////////////////////////////////////
              SIE_MAINPL                                       ie_MAINPL;
    ///////////////////////////////////////////////////////////
              SIE_CPCB0                                        ie_CPCB0;
    ///////////////////////////////////////////////////////////
              SIE_TG_MAIN                                      ie_feTG;
    ///////////////////////////////////////////////////////////
              SIE_BITMAP40                                     ie_bitmap40;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx3E4                                    [28];
    ///////////////////////////////////////////////////////////
              SIE_DIF                                          ie_DIF_Y;
    ///////////////////////////////////////////////////////////
              SIE_DIF                                          ie_DIF_C;
    ///////////////////////////////////////////////////////////
              SIE_UPS10                                        ie_UPS422to444_10B;
    ///////////////////////////////////////////////////////////
              SIE_OfflineRd                                    ie_OFFLINERD_MAIN;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_BL_DIF;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_BL_DTILE;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_MP_1DSCL_LB;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_MP_1DSCL_LUT;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx14B8                                   [840];
    ///////////////////////////////////////////////////////////
    } SIE_vidpl;

    typedef union  T32vidpl_VP_CLKEN_CTRL
          { UNSG32 u32;
            struct w32vidpl_VP_CLKEN_CTRL;
                 } T32vidpl_VP_CLKEN_CTRL;
    typedef union  T32vidpl_ADPSCLctrl1
          { UNSG32 u32;
            struct w32vidpl_ADPSCLctrl1;
                 } T32vidpl_ADPSCLctrl1;
    typedef union  T32vidpl_SCL_CLKEN_CTRL
          { UNSG32 u32;
            struct w32vidpl_SCL_CLKEN_CTRL;
                 } T32vidpl_SCL_CLKEN_CTRL;
    typedef union  T32vidpl_DUMMY0
          { UNSG32 u32;
            struct w32vidpl_DUMMY0;
                 } T32vidpl_DUMMY0;
    typedef union  T32vidpl_DUMMY_TG
          { UNSG32 u32;
            struct w32vidpl_DUMMY_TG;
                 } T32vidpl_DUMMY_TG;
    typedef union  T32vidpl_VCNTSTS0
          { UNSG32 u32;
            struct w32vidpl_VCNTSTS0;
                 } T32vidpl_VCNTSTS0;
    typedef union  T32vidpl_VCNTSTS1
          { UNSG32 u32;
            struct w32vidpl_VCNTSTS1;
                 } T32vidpl_VCNTSTS1;
    typedef union  T32vidpl_VCNTSTS2
          { UNSG32 u32;
            struct w32vidpl_VCNTSTS2;
                 } T32vidpl_VCNTSTS2;
    ///////////////////////////////////////////////////////////

    typedef union  Tvidpl_VP_CLKEN_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32vidpl_VP_CLKEN_CTRL;
                   };
                 } Tvidpl_VP_CLKEN_CTRL;
    typedef union  Tvidpl_ADPSCLctrl1
          { UNSG32 u32[1];
            struct {
            struct w32vidpl_ADPSCLctrl1;
                   };
                 } Tvidpl_ADPSCLctrl1;
    typedef union  Tvidpl_SCL_CLKEN_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32vidpl_SCL_CLKEN_CTRL;
                   };
                 } Tvidpl_SCL_CLKEN_CTRL;
    typedef union  Tvidpl_DUMMY0
          { UNSG32 u32[1];
            struct {
            struct w32vidpl_DUMMY0;
                   };
                 } Tvidpl_DUMMY0;
    typedef union  Tvidpl_DUMMY_TG
          { UNSG32 u32[1];
            struct {
            struct w32vidpl_DUMMY_TG;
                   };
                 } Tvidpl_DUMMY_TG;
    typedef union  Tvidpl_VCNTSTS0
          { UNSG32 u32[1];
            struct {
            struct w32vidpl_VCNTSTS0;
                   };
                 } Tvidpl_VCNTSTS0;
    typedef union  Tvidpl_VCNTSTS1
          { UNSG32 u32[1];
            struct {
            struct w32vidpl_VCNTSTS1;
                   };
                 } Tvidpl_VCNTSTS1;
    typedef union  Tvidpl_VCNTSTS2
          { UNSG32 u32[1];
            struct {
            struct w32vidpl_VCNTSTS2;
                   };
                 } Tvidpl_VCNTSTS2;

    ///////////////////////////////////////////////////////////
     SIGN32 vidpl_drvrd(SIE_vidpl *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 vidpl_drvwr(SIE_vidpl *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void vidpl_reset(SIE_vidpl *p);
     SIGN32 vidpl_cmp  (SIE_vidpl *p, SIE_vidpl *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define vidpl_check(p,pie,pfx,hLOG) vidpl_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define vidpl_print(p,    pfx,hLOG) vidpl_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: vidpl
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE GAMMA                   biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CFG0                 (P)
///               ###
///               * Register for Gamma Convertor
///               ###
///               %unsigned 8  GAMMA_CTRL_INT            0x42
///                                    ###
///                                    * MAIN_CTRL[0]
///                                    * 0: Main channel inactive
///                                    * 1: Main channel active
///                                    * PIP_CTRL[1]
///                                    * Reserved
///                                    * BCB_GAMMA[2]
///                                    * 0: B/Cb gamma correction disabled
///                                    * 1: B/Cb gamma correction enabled
///                                    * GY_GAMMA[3]
///                                    * 0: G/Y gamma correction disabled
///                                    * 1: G/Y gamma correction enabled
///                                    * RCR_GAMMA[4]
///                                    * 0: R/Cr gamma correction disabled
///                                    * 1: R/Cr gamma correction enabled
///                                    * Bit[7:5]
///                                    * Reserved
///                                    ###
///               %unsigned 1  GAMMA_HCTRL_INT           0x1
///                                    ###
///                                    * Enable host write for table programming
///                                    ###
///               %unsigned 10 GAMMA_HADDR               0x0
///                                    ###
///                                    * Host address for table programming
///                                    ###
///               %unsigned 1  SRAM_CEN_DISABLE          0x0
///               %%        12         # Stuffing bits...
///     @ 0x00004 GAMMA_HDATA_B        (P)
///               ###
///               * Gamma LUT data B register
///               ###
///               %unsigned 12 HDATA_B0                  0x0
///               %unsigned 4  Reserved                  0x0
///               %unsigned 12 HDATA_B1                  0x0
///                                    ###
///                                    * SRAM1 LUT data B. Please fill data_b1 in it when you program LUT table.
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00008 GAMMA_HDATA_G        (P)
///               ###
///               * Gamma LUT data G register
///               ###
///               %unsigned 12 HDATA_G0                  0x0
///               %unsigned 4  Reserved                  0x0
///               %unsigned 12 HDATA_G1                  0x0
///                                    ###
///                                    * SRAM1 LUT data G, Please fill data_g1 in it when you program LUT table.
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x0000C GAMMA_HDATA_R        (P)
///               ###
///               * Gamma LUT data R register
///               ###
///               %unsigned 12 HDATA_R0                  0x0
///               %unsigned 4  Reserved                  0x0
///               %unsigned 12 HDATA_R1                  0x0
///                                    ###
///                                    * SRAM1 LUT data R, Please fill data_r1 in it when you program LUT table.
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00010 GAMMA_CDATA_B        (R-)
///               ###
///               * Gamma LUT data B output in current moment
///               ###
///               %unsigned 12 CDATA_B0                  0x0
///               %unsigned 4  Reserved                  0x0
///               %unsigned 12 CDATA_B1                  0x0
///                                    ###
///                                    * LUT data B outputs from SRAM1 in current
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00014 GAMMA_CDATA_G        (R-)
///               ###
///               * Gamma LUT data G output in current moment
///               ###
///               %unsigned 12 CDATA_G0                  0x0
///               %unsigned 4  Reserved                  0x0
///               %unsigned 12 CDATA_G1                  0x0
///                                    ###
///                                    * LUT data G outputs from SRAM1 in current
///                                    ###
///               %%        4          # Stuffing bits...
///     @ 0x00018 GAMMA_CDATA_R        (R-)
///               ###
///               * Gamma LUT data R output in current moment
///               ###
///               %unsigned 12 CDATA_R0                  0x0
///               %unsigned 4  Reserved                  0x0
///               %unsigned 12 CDATA_R1                  0x0
///                                    ###
///                                    * LUT data R outputs from SRAM1 in current
///                                    ###
///               %%        4          # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:      28B, bits:     188b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_GAMMA
#define h_GAMMA (){}

    #define     RA_GAMMA_CFG0                                  0x0000

    #define     BA_GAMMA_CFG0_GAMMA_CTRL_INT                   0x0000
    #define     B16GAMMA_CFG0_GAMMA_CTRL_INT                   0x0000
    #define   LSb32GAMMA_CFG0_GAMMA_CTRL_INT                      0
    #define   LSb16GAMMA_CFG0_GAMMA_CTRL_INT                      0
    #define       bGAMMA_CFG0_GAMMA_CTRL_INT                   8
    #define   MSK32GAMMA_CFG0_GAMMA_CTRL_INT                      0x000000FF

    #define     BA_GAMMA_CFG0_GAMMA_HCTRL_INT                  0x0001
    #define     B16GAMMA_CFG0_GAMMA_HCTRL_INT                  0x0000
    #define   LSb32GAMMA_CFG0_GAMMA_HCTRL_INT                     8
    #define   LSb16GAMMA_CFG0_GAMMA_HCTRL_INT                     8
    #define       bGAMMA_CFG0_GAMMA_HCTRL_INT                  1
    #define   MSK32GAMMA_CFG0_GAMMA_HCTRL_INT                     0x00000100

    #define     BA_GAMMA_CFG0_GAMMA_HADDR                      0x0001
    #define     B16GAMMA_CFG0_GAMMA_HADDR                      0x0000
    #define   LSb32GAMMA_CFG0_GAMMA_HADDR                         9
    #define   LSb16GAMMA_CFG0_GAMMA_HADDR                         9
    #define       bGAMMA_CFG0_GAMMA_HADDR                      10
    #define   MSK32GAMMA_CFG0_GAMMA_HADDR                         0x0007FE00

    #define     BA_GAMMA_CFG0_SRAM_CEN_DISABLE                 0x0002
    #define     B16GAMMA_CFG0_SRAM_CEN_DISABLE                 0x0002
    #define   LSb32GAMMA_CFG0_SRAM_CEN_DISABLE                    19
    #define   LSb16GAMMA_CFG0_SRAM_CEN_DISABLE                    3
    #define       bGAMMA_CFG0_SRAM_CEN_DISABLE                 1
    #define   MSK32GAMMA_CFG0_SRAM_CEN_DISABLE                    0x00080000
    ///////////////////////////////////////////////////////////
    #define     RA_GAMMA_GAMMA_HDATA_B                         0x0004

    #define     BA_GAMMA_GAMMA_HDATA_B_HDATA_B0                0x0004
    #define     B16GAMMA_GAMMA_HDATA_B_HDATA_B0                0x0004
    #define   LSb32GAMMA_GAMMA_HDATA_B_HDATA_B0                   0
    #define   LSb16GAMMA_GAMMA_HDATA_B_HDATA_B0                   0
    #define       bGAMMA_GAMMA_HDATA_B_HDATA_B0                12
    #define   MSK32GAMMA_GAMMA_HDATA_B_HDATA_B0                   0x00000FFF

    #define     BA_GAMMA_GAMMA_HDATA_B_Reserved                0x0005
    #define     B16GAMMA_GAMMA_HDATA_B_Reserved                0x0004
    #define   LSb32GAMMA_GAMMA_HDATA_B_Reserved                   12
    #define   LSb16GAMMA_GAMMA_HDATA_B_Reserved                   12
    #define       bGAMMA_GAMMA_HDATA_B_Reserved                4
    #define   MSK32GAMMA_GAMMA_HDATA_B_Reserved                   0x0000F000

    #define     BA_GAMMA_GAMMA_HDATA_B_HDATA_B1                0x0006
    #define     B16GAMMA_GAMMA_HDATA_B_HDATA_B1                0x0006
    #define   LSb32GAMMA_GAMMA_HDATA_B_HDATA_B1                   16
    #define   LSb16GAMMA_GAMMA_HDATA_B_HDATA_B1                   0
    #define       bGAMMA_GAMMA_HDATA_B_HDATA_B1                12
    #define   MSK32GAMMA_GAMMA_HDATA_B_HDATA_B1                   0x0FFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_GAMMA_GAMMA_HDATA_G                         0x0008

    #define     BA_GAMMA_GAMMA_HDATA_G_HDATA_G0                0x0008
    #define     B16GAMMA_GAMMA_HDATA_G_HDATA_G0                0x0008
    #define   LSb32GAMMA_GAMMA_HDATA_G_HDATA_G0                   0
    #define   LSb16GAMMA_GAMMA_HDATA_G_HDATA_G0                   0
    #define       bGAMMA_GAMMA_HDATA_G_HDATA_G0                12
    #define   MSK32GAMMA_GAMMA_HDATA_G_HDATA_G0                   0x00000FFF

    #define     BA_GAMMA_GAMMA_HDATA_G_Reserved                0x0009
    #define     B16GAMMA_GAMMA_HDATA_G_Reserved                0x0008
    #define   LSb32GAMMA_GAMMA_HDATA_G_Reserved                   12
    #define   LSb16GAMMA_GAMMA_HDATA_G_Reserved                   12
    #define       bGAMMA_GAMMA_HDATA_G_Reserved                4
    #define   MSK32GAMMA_GAMMA_HDATA_G_Reserved                   0x0000F000

    #define     BA_GAMMA_GAMMA_HDATA_G_HDATA_G1                0x000A
    #define     B16GAMMA_GAMMA_HDATA_G_HDATA_G1                0x000A
    #define   LSb32GAMMA_GAMMA_HDATA_G_HDATA_G1                   16
    #define   LSb16GAMMA_GAMMA_HDATA_G_HDATA_G1                   0
    #define       bGAMMA_GAMMA_HDATA_G_HDATA_G1                12
    #define   MSK32GAMMA_GAMMA_HDATA_G_HDATA_G1                   0x0FFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_GAMMA_GAMMA_HDATA_R                         0x000C

    #define     BA_GAMMA_GAMMA_HDATA_R_HDATA_R0                0x000C
    #define     B16GAMMA_GAMMA_HDATA_R_HDATA_R0                0x000C
    #define   LSb32GAMMA_GAMMA_HDATA_R_HDATA_R0                   0
    #define   LSb16GAMMA_GAMMA_HDATA_R_HDATA_R0                   0
    #define       bGAMMA_GAMMA_HDATA_R_HDATA_R0                12
    #define   MSK32GAMMA_GAMMA_HDATA_R_HDATA_R0                   0x00000FFF

    #define     BA_GAMMA_GAMMA_HDATA_R_Reserved                0x000D
    #define     B16GAMMA_GAMMA_HDATA_R_Reserved                0x000C
    #define   LSb32GAMMA_GAMMA_HDATA_R_Reserved                   12
    #define   LSb16GAMMA_GAMMA_HDATA_R_Reserved                   12
    #define       bGAMMA_GAMMA_HDATA_R_Reserved                4
    #define   MSK32GAMMA_GAMMA_HDATA_R_Reserved                   0x0000F000

    #define     BA_GAMMA_GAMMA_HDATA_R_HDATA_R1                0x000E
    #define     B16GAMMA_GAMMA_HDATA_R_HDATA_R1                0x000E
    #define   LSb32GAMMA_GAMMA_HDATA_R_HDATA_R1                   16
    #define   LSb16GAMMA_GAMMA_HDATA_R_HDATA_R1                   0
    #define       bGAMMA_GAMMA_HDATA_R_HDATA_R1                12
    #define   MSK32GAMMA_GAMMA_HDATA_R_HDATA_R1                   0x0FFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_GAMMA_GAMMA_CDATA_B                         0x0010

    #define     BA_GAMMA_GAMMA_CDATA_B_CDATA_B0                0x0010
    #define     B16GAMMA_GAMMA_CDATA_B_CDATA_B0                0x0010
    #define   LSb32GAMMA_GAMMA_CDATA_B_CDATA_B0                   0
    #define   LSb16GAMMA_GAMMA_CDATA_B_CDATA_B0                   0
    #define       bGAMMA_GAMMA_CDATA_B_CDATA_B0                12
    #define   MSK32GAMMA_GAMMA_CDATA_B_CDATA_B0                   0x00000FFF

    #define     BA_GAMMA_GAMMA_CDATA_B_Reserved                0x0011
    #define     B16GAMMA_GAMMA_CDATA_B_Reserved                0x0010
    #define   LSb32GAMMA_GAMMA_CDATA_B_Reserved                   12
    #define   LSb16GAMMA_GAMMA_CDATA_B_Reserved                   12
    #define       bGAMMA_GAMMA_CDATA_B_Reserved                4
    #define   MSK32GAMMA_GAMMA_CDATA_B_Reserved                   0x0000F000

    #define     BA_GAMMA_GAMMA_CDATA_B_CDATA_B1                0x0012
    #define     B16GAMMA_GAMMA_CDATA_B_CDATA_B1                0x0012
    #define   LSb32GAMMA_GAMMA_CDATA_B_CDATA_B1                   16
    #define   LSb16GAMMA_GAMMA_CDATA_B_CDATA_B1                   0
    #define       bGAMMA_GAMMA_CDATA_B_CDATA_B1                12
    #define   MSK32GAMMA_GAMMA_CDATA_B_CDATA_B1                   0x0FFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_GAMMA_GAMMA_CDATA_G                         0x0014

    #define     BA_GAMMA_GAMMA_CDATA_G_CDATA_G0                0x0014
    #define     B16GAMMA_GAMMA_CDATA_G_CDATA_G0                0x0014
    #define   LSb32GAMMA_GAMMA_CDATA_G_CDATA_G0                   0
    #define   LSb16GAMMA_GAMMA_CDATA_G_CDATA_G0                   0
    #define       bGAMMA_GAMMA_CDATA_G_CDATA_G0                12
    #define   MSK32GAMMA_GAMMA_CDATA_G_CDATA_G0                   0x00000FFF

    #define     BA_GAMMA_GAMMA_CDATA_G_Reserved                0x0015
    #define     B16GAMMA_GAMMA_CDATA_G_Reserved                0x0014
    #define   LSb32GAMMA_GAMMA_CDATA_G_Reserved                   12
    #define   LSb16GAMMA_GAMMA_CDATA_G_Reserved                   12
    #define       bGAMMA_GAMMA_CDATA_G_Reserved                4
    #define   MSK32GAMMA_GAMMA_CDATA_G_Reserved                   0x0000F000

    #define     BA_GAMMA_GAMMA_CDATA_G_CDATA_G1                0x0016
    #define     B16GAMMA_GAMMA_CDATA_G_CDATA_G1                0x0016
    #define   LSb32GAMMA_GAMMA_CDATA_G_CDATA_G1                   16
    #define   LSb16GAMMA_GAMMA_CDATA_G_CDATA_G1                   0
    #define       bGAMMA_GAMMA_CDATA_G_CDATA_G1                12
    #define   MSK32GAMMA_GAMMA_CDATA_G_CDATA_G1                   0x0FFF0000
    ///////////////////////////////////////////////////////////
    #define     RA_GAMMA_GAMMA_CDATA_R                         0x0018

    #define     BA_GAMMA_GAMMA_CDATA_R_CDATA_R0                0x0018
    #define     B16GAMMA_GAMMA_CDATA_R_CDATA_R0                0x0018
    #define   LSb32GAMMA_GAMMA_CDATA_R_CDATA_R0                   0
    #define   LSb16GAMMA_GAMMA_CDATA_R_CDATA_R0                   0
    #define       bGAMMA_GAMMA_CDATA_R_CDATA_R0                12
    #define   MSK32GAMMA_GAMMA_CDATA_R_CDATA_R0                   0x00000FFF

    #define     BA_GAMMA_GAMMA_CDATA_R_Reserved                0x0019
    #define     B16GAMMA_GAMMA_CDATA_R_Reserved                0x0018
    #define   LSb32GAMMA_GAMMA_CDATA_R_Reserved                   12
    #define   LSb16GAMMA_GAMMA_CDATA_R_Reserved                   12
    #define       bGAMMA_GAMMA_CDATA_R_Reserved                4
    #define   MSK32GAMMA_GAMMA_CDATA_R_Reserved                   0x0000F000

    #define     BA_GAMMA_GAMMA_CDATA_R_CDATA_R1                0x001A
    #define     B16GAMMA_GAMMA_CDATA_R_CDATA_R1                0x001A
    #define   LSb32GAMMA_GAMMA_CDATA_R_CDATA_R1                   16
    #define   LSb16GAMMA_GAMMA_CDATA_R_CDATA_R1                   0
    #define       bGAMMA_GAMMA_CDATA_R_CDATA_R1                12
    #define   MSK32GAMMA_GAMMA_CDATA_R_CDATA_R1                   0x0FFF0000
    ///////////////////////////////////////////////////////////

    typedef struct SIE_GAMMA {
    ///////////////////////////////////////////////////////////
    #define   GET32GAMMA_CFG0_GAMMA_CTRL_INT(r32)              _BFGET_(r32, 7, 0)
    #define   SET32GAMMA_CFG0_GAMMA_CTRL_INT(r32,v)            _BFSET_(r32, 7, 0,v)
    #define   GET16GAMMA_CFG0_GAMMA_CTRL_INT(r16)              _BFGET_(r16, 7, 0)
    #define   SET16GAMMA_CFG0_GAMMA_CTRL_INT(r16,v)            _BFSET_(r16, 7, 0,v)

    #define   GET32GAMMA_CFG0_GAMMA_HCTRL_INT(r32)             _BFGET_(r32, 8, 8)
    #define   SET32GAMMA_CFG0_GAMMA_HCTRL_INT(r32,v)           _BFSET_(r32, 8, 8,v)
    #define   GET16GAMMA_CFG0_GAMMA_HCTRL_INT(r16)             _BFGET_(r16, 8, 8)
    #define   SET16GAMMA_CFG0_GAMMA_HCTRL_INT(r16,v)           _BFSET_(r16, 8, 8,v)

    #define   GET32GAMMA_CFG0_GAMMA_HADDR(r32)                 _BFGET_(r32,18, 9)
    #define   SET32GAMMA_CFG0_GAMMA_HADDR(r32,v)               _BFSET_(r32,18, 9,v)

    #define   GET32GAMMA_CFG0_SRAM_CEN_DISABLE(r32)            _BFGET_(r32,19,19)
    #define   SET32GAMMA_CFG0_SRAM_CEN_DISABLE(r32,v)          _BFSET_(r32,19,19,v)
    #define   GET16GAMMA_CFG0_SRAM_CEN_DISABLE(r16)            _BFGET_(r16, 3, 3)
    #define   SET16GAMMA_CFG0_SRAM_CEN_DISABLE(r16,v)          _BFSET_(r16, 3, 3,v)

    #define     w32GAMMA_CFG0                                  {\
            UNSG32 uCFG0_GAMMA_CTRL_INT                        :  8;\
            UNSG32 uCFG0_GAMMA_HCTRL_INT                       :  1;\
            UNSG32 uCFG0_GAMMA_HADDR                           : 10;\
            UNSG32 uCFG0_SRAM_CEN_DISABLE                      :  1;\
            UNSG32 RSVDx0_b20                                  : 12;\
          }
    union { UNSG32 u32GAMMA_CFG0;
            struct w32GAMMA_CFG0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GAMMA_GAMMA_HDATA_B_HDATA_B0(r32)           _BFGET_(r32,11, 0)
    #define   SET32GAMMA_GAMMA_HDATA_B_HDATA_B0(r32,v)         _BFSET_(r32,11, 0,v)
    #define   GET16GAMMA_GAMMA_HDATA_B_HDATA_B0(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_HDATA_B_HDATA_B0(r16,v)         _BFSET_(r16,11, 0,v)

    #define   GET32GAMMA_GAMMA_HDATA_B_Reserved(r32)           _BFGET_(r32,15,12)
    #define   SET32GAMMA_GAMMA_HDATA_B_Reserved(r32,v)         _BFSET_(r32,15,12,v)
    #define   GET16GAMMA_GAMMA_HDATA_B_Reserved(r16)           _BFGET_(r16,15,12)
    #define   SET16GAMMA_GAMMA_HDATA_B_Reserved(r16,v)         _BFSET_(r16,15,12,v)

    #define   GET32GAMMA_GAMMA_HDATA_B_HDATA_B1(r32)           _BFGET_(r32,27,16)
    #define   SET32GAMMA_GAMMA_HDATA_B_HDATA_B1(r32,v)         _BFSET_(r32,27,16,v)
    #define   GET16GAMMA_GAMMA_HDATA_B_HDATA_B1(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_HDATA_B_HDATA_B1(r16,v)         _BFSET_(r16,11, 0,v)

    #define     w32GAMMA_GAMMA_HDATA_B                         {\
            UNSG32 uGAMMA_HDATA_B_HDATA_B0                     : 12;\
            UNSG32 uGAMMA_HDATA_B_Reserved                     :  4;\
            UNSG32 uGAMMA_HDATA_B_HDATA_B1                     : 12;\
            UNSG32 RSVDx4_b28                                  :  4;\
          }
    union { UNSG32 u32GAMMA_GAMMA_HDATA_B;
            struct w32GAMMA_GAMMA_HDATA_B;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GAMMA_GAMMA_HDATA_G_HDATA_G0(r32)           _BFGET_(r32,11, 0)
    #define   SET32GAMMA_GAMMA_HDATA_G_HDATA_G0(r32,v)         _BFSET_(r32,11, 0,v)
    #define   GET16GAMMA_GAMMA_HDATA_G_HDATA_G0(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_HDATA_G_HDATA_G0(r16,v)         _BFSET_(r16,11, 0,v)

    #define   GET32GAMMA_GAMMA_HDATA_G_Reserved(r32)           _BFGET_(r32,15,12)
    #define   SET32GAMMA_GAMMA_HDATA_G_Reserved(r32,v)         _BFSET_(r32,15,12,v)
    #define   GET16GAMMA_GAMMA_HDATA_G_Reserved(r16)           _BFGET_(r16,15,12)
    #define   SET16GAMMA_GAMMA_HDATA_G_Reserved(r16,v)         _BFSET_(r16,15,12,v)

    #define   GET32GAMMA_GAMMA_HDATA_G_HDATA_G1(r32)           _BFGET_(r32,27,16)
    #define   SET32GAMMA_GAMMA_HDATA_G_HDATA_G1(r32,v)         _BFSET_(r32,27,16,v)
    #define   GET16GAMMA_GAMMA_HDATA_G_HDATA_G1(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_HDATA_G_HDATA_G1(r16,v)         _BFSET_(r16,11, 0,v)

    #define     w32GAMMA_GAMMA_HDATA_G                         {\
            UNSG32 uGAMMA_HDATA_G_HDATA_G0                     : 12;\
            UNSG32 uGAMMA_HDATA_G_Reserved                     :  4;\
            UNSG32 uGAMMA_HDATA_G_HDATA_G1                     : 12;\
            UNSG32 RSVDx8_b28                                  :  4;\
          }
    union { UNSG32 u32GAMMA_GAMMA_HDATA_G;
            struct w32GAMMA_GAMMA_HDATA_G;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GAMMA_GAMMA_HDATA_R_HDATA_R0(r32)           _BFGET_(r32,11, 0)
    #define   SET32GAMMA_GAMMA_HDATA_R_HDATA_R0(r32,v)         _BFSET_(r32,11, 0,v)
    #define   GET16GAMMA_GAMMA_HDATA_R_HDATA_R0(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_HDATA_R_HDATA_R0(r16,v)         _BFSET_(r16,11, 0,v)

    #define   GET32GAMMA_GAMMA_HDATA_R_Reserved(r32)           _BFGET_(r32,15,12)
    #define   SET32GAMMA_GAMMA_HDATA_R_Reserved(r32,v)         _BFSET_(r32,15,12,v)
    #define   GET16GAMMA_GAMMA_HDATA_R_Reserved(r16)           _BFGET_(r16,15,12)
    #define   SET16GAMMA_GAMMA_HDATA_R_Reserved(r16,v)         _BFSET_(r16,15,12,v)

    #define   GET32GAMMA_GAMMA_HDATA_R_HDATA_R1(r32)           _BFGET_(r32,27,16)
    #define   SET32GAMMA_GAMMA_HDATA_R_HDATA_R1(r32,v)         _BFSET_(r32,27,16,v)
    #define   GET16GAMMA_GAMMA_HDATA_R_HDATA_R1(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_HDATA_R_HDATA_R1(r16,v)         _BFSET_(r16,11, 0,v)

    #define     w32GAMMA_GAMMA_HDATA_R                         {\
            UNSG32 uGAMMA_HDATA_R_HDATA_R0                     : 12;\
            UNSG32 uGAMMA_HDATA_R_Reserved                     :  4;\
            UNSG32 uGAMMA_HDATA_R_HDATA_R1                     : 12;\
            UNSG32 RSVDxC_b28                                  :  4;\
          }
    union { UNSG32 u32GAMMA_GAMMA_HDATA_R;
            struct w32GAMMA_GAMMA_HDATA_R;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GAMMA_GAMMA_CDATA_B_CDATA_B0(r32)           _BFGET_(r32,11, 0)
    #define   SET32GAMMA_GAMMA_CDATA_B_CDATA_B0(r32,v)         _BFSET_(r32,11, 0,v)
    #define   GET16GAMMA_GAMMA_CDATA_B_CDATA_B0(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_CDATA_B_CDATA_B0(r16,v)         _BFSET_(r16,11, 0,v)

    #define   GET32GAMMA_GAMMA_CDATA_B_Reserved(r32)           _BFGET_(r32,15,12)
    #define   SET32GAMMA_GAMMA_CDATA_B_Reserved(r32,v)         _BFSET_(r32,15,12,v)
    #define   GET16GAMMA_GAMMA_CDATA_B_Reserved(r16)           _BFGET_(r16,15,12)
    #define   SET16GAMMA_GAMMA_CDATA_B_Reserved(r16,v)         _BFSET_(r16,15,12,v)

    #define   GET32GAMMA_GAMMA_CDATA_B_CDATA_B1(r32)           _BFGET_(r32,27,16)
    #define   SET32GAMMA_GAMMA_CDATA_B_CDATA_B1(r32,v)         _BFSET_(r32,27,16,v)
    #define   GET16GAMMA_GAMMA_CDATA_B_CDATA_B1(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_CDATA_B_CDATA_B1(r16,v)         _BFSET_(r16,11, 0,v)

    #define     w32GAMMA_GAMMA_CDATA_B                         {\
            UNSG32 uGAMMA_CDATA_B_CDATA_B0                     : 12;\
            UNSG32 uGAMMA_CDATA_B_Reserved                     :  4;\
            UNSG32 uGAMMA_CDATA_B_CDATA_B1                     : 12;\
            UNSG32 RSVDx10_b28                                 :  4;\
          }
    union { UNSG32 u32GAMMA_GAMMA_CDATA_B;
            struct w32GAMMA_GAMMA_CDATA_B;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GAMMA_GAMMA_CDATA_G_CDATA_G0(r32)           _BFGET_(r32,11, 0)
    #define   SET32GAMMA_GAMMA_CDATA_G_CDATA_G0(r32,v)         _BFSET_(r32,11, 0,v)
    #define   GET16GAMMA_GAMMA_CDATA_G_CDATA_G0(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_CDATA_G_CDATA_G0(r16,v)         _BFSET_(r16,11, 0,v)

    #define   GET32GAMMA_GAMMA_CDATA_G_Reserved(r32)           _BFGET_(r32,15,12)
    #define   SET32GAMMA_GAMMA_CDATA_G_Reserved(r32,v)         _BFSET_(r32,15,12,v)
    #define   GET16GAMMA_GAMMA_CDATA_G_Reserved(r16)           _BFGET_(r16,15,12)
    #define   SET16GAMMA_GAMMA_CDATA_G_Reserved(r16,v)         _BFSET_(r16,15,12,v)

    #define   GET32GAMMA_GAMMA_CDATA_G_CDATA_G1(r32)           _BFGET_(r32,27,16)
    #define   SET32GAMMA_GAMMA_CDATA_G_CDATA_G1(r32,v)         _BFSET_(r32,27,16,v)
    #define   GET16GAMMA_GAMMA_CDATA_G_CDATA_G1(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_CDATA_G_CDATA_G1(r16,v)         _BFSET_(r16,11, 0,v)

    #define     w32GAMMA_GAMMA_CDATA_G                         {\
            UNSG32 uGAMMA_CDATA_G_CDATA_G0                     : 12;\
            UNSG32 uGAMMA_CDATA_G_Reserved                     :  4;\
            UNSG32 uGAMMA_CDATA_G_CDATA_G1                     : 12;\
            UNSG32 RSVDx14_b28                                 :  4;\
          }
    union { UNSG32 u32GAMMA_GAMMA_CDATA_G;
            struct w32GAMMA_GAMMA_CDATA_G;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32GAMMA_GAMMA_CDATA_R_CDATA_R0(r32)           _BFGET_(r32,11, 0)
    #define   SET32GAMMA_GAMMA_CDATA_R_CDATA_R0(r32,v)         _BFSET_(r32,11, 0,v)
    #define   GET16GAMMA_GAMMA_CDATA_R_CDATA_R0(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_CDATA_R_CDATA_R0(r16,v)         _BFSET_(r16,11, 0,v)

    #define   GET32GAMMA_GAMMA_CDATA_R_Reserved(r32)           _BFGET_(r32,15,12)
    #define   SET32GAMMA_GAMMA_CDATA_R_Reserved(r32,v)         _BFSET_(r32,15,12,v)
    #define   GET16GAMMA_GAMMA_CDATA_R_Reserved(r16)           _BFGET_(r16,15,12)
    #define   SET16GAMMA_GAMMA_CDATA_R_Reserved(r16,v)         _BFSET_(r16,15,12,v)

    #define   GET32GAMMA_GAMMA_CDATA_R_CDATA_R1(r32)           _BFGET_(r32,27,16)
    #define   SET32GAMMA_GAMMA_CDATA_R_CDATA_R1(r32,v)         _BFSET_(r32,27,16,v)
    #define   GET16GAMMA_GAMMA_CDATA_R_CDATA_R1(r16)           _BFGET_(r16,11, 0)
    #define   SET16GAMMA_GAMMA_CDATA_R_CDATA_R1(r16,v)         _BFSET_(r16,11, 0,v)

    #define     w32GAMMA_GAMMA_CDATA_R                         {\
            UNSG32 uGAMMA_CDATA_R_CDATA_R0                     : 12;\
            UNSG32 uGAMMA_CDATA_R_Reserved                     :  4;\
            UNSG32 uGAMMA_CDATA_R_CDATA_R1                     : 12;\
            UNSG32 RSVDx18_b28                                 :  4;\
          }
    union { UNSG32 u32GAMMA_GAMMA_CDATA_R;
            struct w32GAMMA_GAMMA_CDATA_R;
          };
    ///////////////////////////////////////////////////////////
    } SIE_GAMMA;

    typedef union  T32GAMMA_CFG0
          { UNSG32 u32;
            struct w32GAMMA_CFG0;
                 } T32GAMMA_CFG0;
    typedef union  T32GAMMA_GAMMA_HDATA_B
          { UNSG32 u32;
            struct w32GAMMA_GAMMA_HDATA_B;
                 } T32GAMMA_GAMMA_HDATA_B;
    typedef union  T32GAMMA_GAMMA_HDATA_G
          { UNSG32 u32;
            struct w32GAMMA_GAMMA_HDATA_G;
                 } T32GAMMA_GAMMA_HDATA_G;
    typedef union  T32GAMMA_GAMMA_HDATA_R
          { UNSG32 u32;
            struct w32GAMMA_GAMMA_HDATA_R;
                 } T32GAMMA_GAMMA_HDATA_R;
    typedef union  T32GAMMA_GAMMA_CDATA_B
          { UNSG32 u32;
            struct w32GAMMA_GAMMA_CDATA_B;
                 } T32GAMMA_GAMMA_CDATA_B;
    typedef union  T32GAMMA_GAMMA_CDATA_G
          { UNSG32 u32;
            struct w32GAMMA_GAMMA_CDATA_G;
                 } T32GAMMA_GAMMA_CDATA_G;
    typedef union  T32GAMMA_GAMMA_CDATA_R
          { UNSG32 u32;
            struct w32GAMMA_GAMMA_CDATA_R;
                 } T32GAMMA_GAMMA_CDATA_R;
    ///////////////////////////////////////////////////////////

    typedef union  TGAMMA_CFG0
          { UNSG32 u32[1];
            struct {
            struct w32GAMMA_CFG0;
                   };
                 } TGAMMA_CFG0;
    typedef union  TGAMMA_GAMMA_HDATA_B
          { UNSG32 u32[1];
            struct {
            struct w32GAMMA_GAMMA_HDATA_B;
                   };
                 } TGAMMA_GAMMA_HDATA_B;
    typedef union  TGAMMA_GAMMA_HDATA_G
          { UNSG32 u32[1];
            struct {
            struct w32GAMMA_GAMMA_HDATA_G;
                   };
                 } TGAMMA_GAMMA_HDATA_G;
    typedef union  TGAMMA_GAMMA_HDATA_R
          { UNSG32 u32[1];
            struct {
            struct w32GAMMA_GAMMA_HDATA_R;
                   };
                 } TGAMMA_GAMMA_HDATA_R;
    typedef union  TGAMMA_GAMMA_CDATA_B
          { UNSG32 u32[1];
            struct {
            struct w32GAMMA_GAMMA_CDATA_B;
                   };
                 } TGAMMA_GAMMA_CDATA_B;
    typedef union  TGAMMA_GAMMA_CDATA_G
          { UNSG32 u32[1];
            struct {
            struct w32GAMMA_GAMMA_CDATA_G;
                   };
                 } TGAMMA_GAMMA_CDATA_G;
    typedef union  TGAMMA_GAMMA_CDATA_R
          { UNSG32 u32[1];
            struct {
            struct w32GAMMA_GAMMA_CDATA_R;
                   };
                 } TGAMMA_GAMMA_CDATA_R;

    ///////////////////////////////////////////////////////////
     SIGN32 GAMMA_drvrd(SIE_GAMMA *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 GAMMA_drvwr(SIE_GAMMA *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void GAMMA_reset(SIE_GAMMA *p);
     SIGN32 GAMMA_cmp  (SIE_GAMMA *p, SIE_GAMMA *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define GAMMA_check(p,pie,pfx,hLOG) GAMMA_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define GAMMA_print(p,    pfx,hLOG) GAMMA_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: GAMMA
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE CLK                                      (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 ctrl                 (P)
///               %unsigned 1  clkSwitch                 0x1
///                                    : SrcClk                    0x0
///                                    : DivClk                    0x1
///                                                 ###
///                                                 * Selects between source clock & divider clock
///                                                 ###
///               %unsigned 1  clkD3Switch               0x0
///                                    : NonDiv3Clk                0x0
///                                    : Div3Clk                   0x1
///                                                 ###
///                                                 * Selects between non-divide by-3 vs divide by-3 clocks.
///                                                 ###
///               %unsigned 1  clkEn                     0x1
///                                    : disable                   0x0
///                                    : enable                    0x1
///                                                 ###
///                                                 * disable/enable control.
///                                                 ###
///               %unsigned 3  clkSel                    0x1
///                                    : d2                        0x1
///                                    : d4                        0x2
///                                    : d6                        0x3
///                                    : d8                        0x4
///                                    : d12                       0x5
///                                                 ###
///                                                 * clock selection.
///                                                 ###
///               %%        26         # Stuffing bits...
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:       4B, bits:       6b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_CLK
#define h_CLK (){}

    #define     RA_CLK_ctrl                                    0x0000

    #define     BA_CLK_ctrl_clkSwitch                          0x0000
    #define     B16CLK_ctrl_clkSwitch                          0x0000
    #define   LSb32CLK_ctrl_clkSwitch                             0
    #define   LSb16CLK_ctrl_clkSwitch                             0
    #define       bCLK_ctrl_clkSwitch                          1
    #define   MSK32CLK_ctrl_clkSwitch                             0x00000001
    #define        CLK_ctrl_clkSwitch_SrcClk                                0x0
    #define        CLK_ctrl_clkSwitch_DivClk                                0x1

    #define     BA_CLK_ctrl_clkD3Switch                        0x0000
    #define     B16CLK_ctrl_clkD3Switch                        0x0000
    #define   LSb32CLK_ctrl_clkD3Switch                           1
    #define   LSb16CLK_ctrl_clkD3Switch                           1
    #define       bCLK_ctrl_clkD3Switch                        1
    #define   MSK32CLK_ctrl_clkD3Switch                           0x00000002
    #define        CLK_ctrl_clkD3Switch_NonDiv3Clk                          0x0
    #define        CLK_ctrl_clkD3Switch_Div3Clk                             0x1

    #define     BA_CLK_ctrl_clkEn                              0x0000
    #define     B16CLK_ctrl_clkEn                              0x0000
    #define   LSb32CLK_ctrl_clkEn                                 2
    #define   LSb16CLK_ctrl_clkEn                                 2
    #define       bCLK_ctrl_clkEn                              1
    #define   MSK32CLK_ctrl_clkEn                                 0x00000004
    #define        CLK_ctrl_clkEn_disable                                   0x0
    #define        CLK_ctrl_clkEn_enable                                    0x1

    #define     BA_CLK_ctrl_clkSel                             0x0000
    #define     B16CLK_ctrl_clkSel                             0x0000
    #define   LSb32CLK_ctrl_clkSel                                3
    #define   LSb16CLK_ctrl_clkSel                                3
    #define       bCLK_ctrl_clkSel                             3
    #define   MSK32CLK_ctrl_clkSel                                0x00000038
    #define        CLK_ctrl_clkSel_d2                                       0x1
    #define        CLK_ctrl_clkSel_d4                                       0x2
    #define        CLK_ctrl_clkSel_d6                                       0x3
    #define        CLK_ctrl_clkSel_d8                                       0x4
    #define        CLK_ctrl_clkSel_d12                                      0x5
    ///////////////////////////////////////////////////////////

    typedef struct SIE_CLK {
    ///////////////////////////////////////////////////////////
    #define   GET32CLK_ctrl_clkSwitch(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32CLK_ctrl_clkSwitch(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16CLK_ctrl_clkSwitch(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16CLK_ctrl_clkSwitch(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32CLK_ctrl_clkD3Switch(r32)                   _BFGET_(r32, 1, 1)
    #define   SET32CLK_ctrl_clkD3Switch(r32,v)                 _BFSET_(r32, 1, 1,v)
    #define   GET16CLK_ctrl_clkD3Switch(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16CLK_ctrl_clkD3Switch(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define   GET32CLK_ctrl_clkEn(r32)                         _BFGET_(r32, 2, 2)
    #define   SET32CLK_ctrl_clkEn(r32,v)                       _BFSET_(r32, 2, 2,v)
    #define   GET16CLK_ctrl_clkEn(r16)                         _BFGET_(r16, 2, 2)
    #define   SET16CLK_ctrl_clkEn(r16,v)                       _BFSET_(r16, 2, 2,v)

    #define   GET32CLK_ctrl_clkSel(r32)                        _BFGET_(r32, 5, 3)
    #define   SET32CLK_ctrl_clkSel(r32,v)                      _BFSET_(r32, 5, 3,v)
    #define   GET16CLK_ctrl_clkSel(r16)                        _BFGET_(r16, 5, 3)
    #define   SET16CLK_ctrl_clkSel(r16,v)                      _BFSET_(r16, 5, 3,v)

    #define     w32CLK_ctrl                                    {\
            UNSG32 uctrl_clkSwitch                             :  1;\
            UNSG32 uctrl_clkD3Switch                           :  1;\
            UNSG32 uctrl_clkEn                                 :  1;\
            UNSG32 uctrl_clkSel                                :  3;\
            UNSG32 RSVDx0_b6                                   : 26;\
          }
    union { UNSG32 u32CLK_ctrl;
            struct w32CLK_ctrl;
          };
    ///////////////////////////////////////////////////////////
    } SIE_CLK;

    typedef union  T32CLK_ctrl
          { UNSG32 u32;
            struct w32CLK_ctrl;
                 } T32CLK_ctrl;
    ///////////////////////////////////////////////////////////

    typedef union  TCLK_ctrl
          { UNSG32 u32[1];
            struct {
            struct w32CLK_ctrl;
                   };
                 } TCLK_ctrl;

    ///////////////////////////////////////////////////////////
     SIGN32 CLK_drvrd(SIE_CLK *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 CLK_drvwr(SIE_CLK *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void CLK_reset(SIE_CLK *p);
     SIGN32 CLK_cmp  (SIE_CLK *p, SIE_CLK *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define CLK_check(p,pie,pfx,hLOG) CLK_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define CLK_print(p,    pfx,hLOG) CLK_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: CLK
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE tgWrap                  biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL0                (P)
///               %unsigned 1  flush                     0x0
///               %unsigned 1  flush0                    0x0
///                                    ###
///                                    * Flush for FIFO pointers. Write 1 to clear the FIFO.
///                                    ###
///               %unsigned 1  cfg_rst                   0x0
///                                    ###
///                                    * Configurable reset to TG
///                                    ###
///               %unsigned 13 hcnt_rstval               0x0
///                                    ###
///                                    * H-Counter reset value
///                                    ###
///               %unsigned 12 vcnt_rstval               0x0
///                                    ###
///                                    * V-Counter reset value
///                                    ###
///               %unsigned 2  prog_line_dly             0x1
///                                    ###
///                                    * Programmable line delay
///                                    ###
///               %unsigned 1  uf_protec_en              0x0
///                                    ###
///                                    * Enable bit for preserving rd & wr pointers of ASYNC FIFO. Default - 0
///                                    * [1] – when FIFO underflows, read and write pointer values are preserved
///                                    ###
///               %%        1          # Stuffing bits...
///     @ 0x00004 3D_Ctrl              (P)
///               %unsigned 1  prog_3di                  0x0
///                                    ###
///                                    * Operation Mode
///                                    * 0: Progressive
///                                    * 1: 3D Interlace mode
///                                    ###
///               %unsigned 1  mode_3di                  0x0
///                                    ###
///                                    * 3D Interlace View Programming Mode
///                                    * 0: One Time L/R(3D-P), Lodd/Rodd/Leven/Reven
///                                    * (3D-I) configuration (Default)
///                                    * 1: Continuous L/R(3D-P),
///                                    * Lodd/Rodd/Leven/Reven(3D-I) configuration
///                                    ###
///               %unsigned 1  load_3di                  0x0
///                                    ###
///                                    * 3D Interlace Load Bit
///                                    * Loads L/R(3D-P), Lodd/Rodd/Leven/Reven(3D-I) information on writing 1 to this bit. 0 (Default)
///                                    ###
///               %unsigned 2  nxt_view                  0x0
///                                    ###
///                                    * Next frame view indication (To be programmed after VBI Interrupt)
///                                    * 00: Left view(3D-P), Lodd view (3D-P)
///                                    * 01: Right view(3D-P), Rodd view (3D-P)
///                                    * 10: Leven view (3D-P)
///                                    * 11: Reven view (3D-P)
///                                    ###
///               %unsigned 1  fldalt_frmpack_3di        0x0
///                                    ###
///                                    * Alternate fld frame pack register for 3D mode
///                                    ###
///               %unsigned 13 vs_e_3d_leven             0x0
///                                    ###
///                                    * Horizontal positions at which vertical active data for 3D mode
///                                    ###
///               %%        13         # Stuffing bits...
///     @ 0x00008 3D_ld                (P-)
///               %unsigned 1  td_ld_wr                  0x0
///                                    ###
///                                    * kickoff bit.
///                                    * write '1' to this register will enable the 3D load
///                                    * write '0' to this register has no effect.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x0000C status               (R-)
///               %unsigned 2  lroe_view                 0x0
///               %unsigned 12 vcnt                      0x0
///               %unsigned 1  underflow                 0x0
///               %unsigned 1  overflow                  0x0
///               %unsigned 1  ofld                      0x0
///                                    ###
///                                    * - l_r_o_e view status
///                                    * - display TG vcnt status
///                                    * - UF protec FIFO underflow status
///                                    * - UF protec FIFO overflow status
///                                    * - output field status
///                                    ###
///               %%        15         # Stuffing bits...
///     @ 0x00010 CTRL1                (P)
///               %unsigned 1  fld_ctrl                  0x0
///                                    ###
///                                    * Field control register – used for polarity of output field. Write 1 to invert the polarity of output field.
///                                    ###
///               %unsigned 1  fld_en                    0x0
///                                    ###
///                                    * Field Enable control – Write 1 to enable field for interlaced output to HDMI-TX. Default progressive mode output from displayTG
///                                    ###
///               %unsigned 1  PDWN                      0x0
///                                    ###
///                                    * 1: Reduce the leakage(low power) mode , allows VDD to be switched off with data retention
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDLVMC                    0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  PDFVSSM                   0x0
///                                    ###
///                                    * 1: To select leakage reduction mode options when PDWN is asserted
///                                    * 0: Normal operation
///                                    ###
///               %unsigned 1  gamma_bypass              0x1
///                                    ###
///                                    * 1: To bypass
///                                    * 0: To enable
///                                    ###
///               %%        26         # Stuffing bits...
///     @ 0x00014                      (P)
///     # 0x00014 VOPTG                
///               $BETG                VOPTG             REG          
///                                    ###
///                                    * Clock enable based Timing Generator related registers in HDMI_VOP path
///                                    ###
///     @ 0x000C8                      (P)
///     # 0x000C8 GAMMA                
///               $GAMMA               GAMMA             REG          
///                                    ###
///                                    * Register Description for 1DLUT Gamma IP
///                                    ###
///     @ 0x000E4                      (P)
///     # 0x000E4 SRAMPWR_GAMMA        
///               $SRAMPWR             SRAMPWR_GAMMA     REG          
///                                    ###
///                                    * Power control register for GAMMA(1D-LUT) in VOP (DP1) path.
///                                    ###
///     @ 0x000E8                      (P)
///     # 0x000E8 SRAMPWR_UFPFIFO_0    
///               $SRAMPWR             SRAMPWR_UFPFIFO_0 REG          
///                                    ###
///                                    * Power control register for UFP FIFO_0 in VOP (DP1) path.
///                                    ###
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:     236B, bits:    1358b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_tgWrap
#define h_tgWrap (){}

    #define     RA_tgWrap_CTRL0                                0x0000

    #define     BA_tgWrap_CTRL0_flush                          0x0000
    #define     B16tgWrap_CTRL0_flush                          0x0000
    #define   LSb32tgWrap_CTRL0_flush                             0
    #define   LSb16tgWrap_CTRL0_flush                             0
    #define       btgWrap_CTRL0_flush                          1
    #define   MSK32tgWrap_CTRL0_flush                             0x00000001

    #define     BA_tgWrap_CTRL0_flush0                         0x0000
    #define     B16tgWrap_CTRL0_flush0                         0x0000
    #define   LSb32tgWrap_CTRL0_flush0                            1
    #define   LSb16tgWrap_CTRL0_flush0                            1
    #define       btgWrap_CTRL0_flush0                         1
    #define   MSK32tgWrap_CTRL0_flush0                            0x00000002

    #define     BA_tgWrap_CTRL0_cfg_rst                        0x0000
    #define     B16tgWrap_CTRL0_cfg_rst                        0x0000
    #define   LSb32tgWrap_CTRL0_cfg_rst                           2
    #define   LSb16tgWrap_CTRL0_cfg_rst                           2
    #define       btgWrap_CTRL0_cfg_rst                        1
    #define   MSK32tgWrap_CTRL0_cfg_rst                           0x00000004

    #define     BA_tgWrap_CTRL0_hcnt_rstval                    0x0000
    #define     B16tgWrap_CTRL0_hcnt_rstval                    0x0000
    #define   LSb32tgWrap_CTRL0_hcnt_rstval                       3
    #define   LSb16tgWrap_CTRL0_hcnt_rstval                       3
    #define       btgWrap_CTRL0_hcnt_rstval                    13
    #define   MSK32tgWrap_CTRL0_hcnt_rstval                       0x0000FFF8

    #define     BA_tgWrap_CTRL0_vcnt_rstval                    0x0002
    #define     B16tgWrap_CTRL0_vcnt_rstval                    0x0002
    #define   LSb32tgWrap_CTRL0_vcnt_rstval                       16
    #define   LSb16tgWrap_CTRL0_vcnt_rstval                       0
    #define       btgWrap_CTRL0_vcnt_rstval                    12
    #define   MSK32tgWrap_CTRL0_vcnt_rstval                       0x0FFF0000

    #define     BA_tgWrap_CTRL0_prog_line_dly                  0x0003
    #define     B16tgWrap_CTRL0_prog_line_dly                  0x0002
    #define   LSb32tgWrap_CTRL0_prog_line_dly                     28
    #define   LSb16tgWrap_CTRL0_prog_line_dly                     12
    #define       btgWrap_CTRL0_prog_line_dly                  2
    #define   MSK32tgWrap_CTRL0_prog_line_dly                     0x30000000

    #define     BA_tgWrap_CTRL0_uf_protec_en                   0x0003
    #define     B16tgWrap_CTRL0_uf_protec_en                   0x0002
    #define   LSb32tgWrap_CTRL0_uf_protec_en                      30
    #define   LSb16tgWrap_CTRL0_uf_protec_en                      14
    #define       btgWrap_CTRL0_uf_protec_en                   1
    #define   MSK32tgWrap_CTRL0_uf_protec_en                      0x40000000
    ///////////////////////////////////////////////////////////
    #define     RA_tgWrap_3D_Ctrl                              0x0004

    #define     BA_tgWrap_3D_Ctrl_prog_3di                     0x0004
    #define     B16tgWrap_3D_Ctrl_prog_3di                     0x0004
    #define   LSb32tgWrap_3D_Ctrl_prog_3di                        0
    #define   LSb16tgWrap_3D_Ctrl_prog_3di                        0
    #define       btgWrap_3D_Ctrl_prog_3di                     1
    #define   MSK32tgWrap_3D_Ctrl_prog_3di                        0x00000001

    #define     BA_tgWrap_3D_Ctrl_mode_3di                     0x0004
    #define     B16tgWrap_3D_Ctrl_mode_3di                     0x0004
    #define   LSb32tgWrap_3D_Ctrl_mode_3di                        1
    #define   LSb16tgWrap_3D_Ctrl_mode_3di                        1
    #define       btgWrap_3D_Ctrl_mode_3di                     1
    #define   MSK32tgWrap_3D_Ctrl_mode_3di                        0x00000002

    #define     BA_tgWrap_3D_Ctrl_load_3di                     0x0004
    #define     B16tgWrap_3D_Ctrl_load_3di                     0x0004
    #define   LSb32tgWrap_3D_Ctrl_load_3di                        2
    #define   LSb16tgWrap_3D_Ctrl_load_3di                        2
    #define       btgWrap_3D_Ctrl_load_3di                     1
    #define   MSK32tgWrap_3D_Ctrl_load_3di                        0x00000004

    #define     BA_tgWrap_3D_Ctrl_nxt_view                     0x0004
    #define     B16tgWrap_3D_Ctrl_nxt_view                     0x0004
    #define   LSb32tgWrap_3D_Ctrl_nxt_view                        3
    #define   LSb16tgWrap_3D_Ctrl_nxt_view                        3
    #define       btgWrap_3D_Ctrl_nxt_view                     2
    #define   MSK32tgWrap_3D_Ctrl_nxt_view                        0x00000018

    #define     BA_tgWrap_3D_Ctrl_fldalt_frmpack_3di           0x0004
    #define     B16tgWrap_3D_Ctrl_fldalt_frmpack_3di           0x0004
    #define   LSb32tgWrap_3D_Ctrl_fldalt_frmpack_3di              5
    #define   LSb16tgWrap_3D_Ctrl_fldalt_frmpack_3di              5
    #define       btgWrap_3D_Ctrl_fldalt_frmpack_3di           1
    #define   MSK32tgWrap_3D_Ctrl_fldalt_frmpack_3di              0x00000020

    #define     BA_tgWrap_3D_Ctrl_vs_e_3d_leven                0x0004
    #define     B16tgWrap_3D_Ctrl_vs_e_3d_leven                0x0004
    #define   LSb32tgWrap_3D_Ctrl_vs_e_3d_leven                   6
    #define   LSb16tgWrap_3D_Ctrl_vs_e_3d_leven                   6
    #define       btgWrap_3D_Ctrl_vs_e_3d_leven                13
    #define   MSK32tgWrap_3D_Ctrl_vs_e_3d_leven                   0x0007FFC0
    ///////////////////////////////////////////////////////////
    #define     RA_tgWrap_3D_ld                                0x0008

    #define     BA_tgWrap_3D_ld_td_ld_wr                       0x0008
    #define     B16tgWrap_3D_ld_td_ld_wr                       0x0008
    #define   LSb32tgWrap_3D_ld_td_ld_wr                          0
    #define   LSb16tgWrap_3D_ld_td_ld_wr                          0
    #define       btgWrap_3D_ld_td_ld_wr                       1
    #define   MSK32tgWrap_3D_ld_td_ld_wr                          0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_tgWrap_status                               0x000C

    #define     BA_tgWrap_status_lroe_view                     0x000C
    #define     B16tgWrap_status_lroe_view                     0x000C
    #define   LSb32tgWrap_status_lroe_view                        0
    #define   LSb16tgWrap_status_lroe_view                        0
    #define       btgWrap_status_lroe_view                     2
    #define   MSK32tgWrap_status_lroe_view                        0x00000003

    #define     BA_tgWrap_status_vcnt                          0x000C
    #define     B16tgWrap_status_vcnt                          0x000C
    #define   LSb32tgWrap_status_vcnt                             2
    #define   LSb16tgWrap_status_vcnt                             2
    #define       btgWrap_status_vcnt                          12
    #define   MSK32tgWrap_status_vcnt                             0x00003FFC

    #define     BA_tgWrap_status_underflow                     0x000D
    #define     B16tgWrap_status_underflow                     0x000C
    #define   LSb32tgWrap_status_underflow                        14
    #define   LSb16tgWrap_status_underflow                        14
    #define       btgWrap_status_underflow                     1
    #define   MSK32tgWrap_status_underflow                        0x00004000

    #define     BA_tgWrap_status_overflow                      0x000D
    #define     B16tgWrap_status_overflow                      0x000C
    #define   LSb32tgWrap_status_overflow                         15
    #define   LSb16tgWrap_status_overflow                         15
    #define       btgWrap_status_overflow                      1
    #define   MSK32tgWrap_status_overflow                         0x00008000

    #define     BA_tgWrap_status_ofld                          0x000E
    #define     B16tgWrap_status_ofld                          0x000E
    #define   LSb32tgWrap_status_ofld                             16
    #define   LSb16tgWrap_status_ofld                             0
    #define       btgWrap_status_ofld                          1
    #define   MSK32tgWrap_status_ofld                             0x00010000
    ///////////////////////////////////////////////////////////
    #define     RA_tgWrap_CTRL1                                0x0010

    #define     BA_tgWrap_CTRL1_fld_ctrl                       0x0010
    #define     B16tgWrap_CTRL1_fld_ctrl                       0x0010
    #define   LSb32tgWrap_CTRL1_fld_ctrl                          0
    #define   LSb16tgWrap_CTRL1_fld_ctrl                          0
    #define       btgWrap_CTRL1_fld_ctrl                       1
    #define   MSK32tgWrap_CTRL1_fld_ctrl                          0x00000001

    #define     BA_tgWrap_CTRL1_fld_en                         0x0010
    #define     B16tgWrap_CTRL1_fld_en                         0x0010
    #define   LSb32tgWrap_CTRL1_fld_en                            1
    #define   LSb16tgWrap_CTRL1_fld_en                            1
    #define       btgWrap_CTRL1_fld_en                         1
    #define   MSK32tgWrap_CTRL1_fld_en                            0x00000002

    #define     BA_tgWrap_CTRL1_PDWN                           0x0010
    #define     B16tgWrap_CTRL1_PDWN                           0x0010
    #define   LSb32tgWrap_CTRL1_PDWN                              2
    #define   LSb16tgWrap_CTRL1_PDWN                              2
    #define       btgWrap_CTRL1_PDWN                           1
    #define   MSK32tgWrap_CTRL1_PDWN                              0x00000004

    #define     BA_tgWrap_CTRL1_PDLVMC                         0x0010
    #define     B16tgWrap_CTRL1_PDLVMC                         0x0010
    #define   LSb32tgWrap_CTRL1_PDLVMC                            3
    #define   LSb16tgWrap_CTRL1_PDLVMC                            3
    #define       btgWrap_CTRL1_PDLVMC                         1
    #define   MSK32tgWrap_CTRL1_PDLVMC                            0x00000008

    #define     BA_tgWrap_CTRL1_PDFVSSM                        0x0010
    #define     B16tgWrap_CTRL1_PDFVSSM                        0x0010
    #define   LSb32tgWrap_CTRL1_PDFVSSM                           4
    #define   LSb16tgWrap_CTRL1_PDFVSSM                           4
    #define       btgWrap_CTRL1_PDFVSSM                        1
    #define   MSK32tgWrap_CTRL1_PDFVSSM                           0x00000010

    #define     BA_tgWrap_CTRL1_gamma_bypass                   0x0010
    #define     B16tgWrap_CTRL1_gamma_bypass                   0x0010
    #define   LSb32tgWrap_CTRL1_gamma_bypass                      5
    #define   LSb16tgWrap_CTRL1_gamma_bypass                      5
    #define       btgWrap_CTRL1_gamma_bypass                   1
    #define   MSK32tgWrap_CTRL1_gamma_bypass                      0x00000020
    ///////////////////////////////////////////////////////////
    #define     RA_tgWrap_VOPTG                                0x0014
    ///////////////////////////////////////////////////////////
    #define     RA_tgWrap_GAMMA                                0x00C8
    ///////////////////////////////////////////////////////////
    #define     RA_tgWrap_SRAMPWR_GAMMA                        0x00E4
    ///////////////////////////////////////////////////////////
    #define     RA_tgWrap_SRAMPWR_UFPFIFO_0                    0x00E8
    ///////////////////////////////////////////////////////////

    typedef struct SIE_tgWrap {
    ///////////////////////////////////////////////////////////
    #define   GET32tgWrap_CTRL0_flush(r32)                     _BFGET_(r32, 0, 0)
    #define   SET32tgWrap_CTRL0_flush(r32,v)                   _BFSET_(r32, 0, 0,v)
    #define   GET16tgWrap_CTRL0_flush(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16tgWrap_CTRL0_flush(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define   GET32tgWrap_CTRL0_flush0(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32tgWrap_CTRL0_flush0(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16tgWrap_CTRL0_flush0(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16tgWrap_CTRL0_flush0(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define   GET32tgWrap_CTRL0_cfg_rst(r32)                   _BFGET_(r32, 2, 2)
    #define   SET32tgWrap_CTRL0_cfg_rst(r32,v)                 _BFSET_(r32, 2, 2,v)
    #define   GET16tgWrap_CTRL0_cfg_rst(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16tgWrap_CTRL0_cfg_rst(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define   GET32tgWrap_CTRL0_hcnt_rstval(r32)               _BFGET_(r32,15, 3)
    #define   SET32tgWrap_CTRL0_hcnt_rstval(r32,v)             _BFSET_(r32,15, 3,v)
    #define   GET16tgWrap_CTRL0_hcnt_rstval(r16)               _BFGET_(r16,15, 3)
    #define   SET16tgWrap_CTRL0_hcnt_rstval(r16,v)             _BFSET_(r16,15, 3,v)

    #define   GET32tgWrap_CTRL0_vcnt_rstval(r32)               _BFGET_(r32,27,16)
    #define   SET32tgWrap_CTRL0_vcnt_rstval(r32,v)             _BFSET_(r32,27,16,v)
    #define   GET16tgWrap_CTRL0_vcnt_rstval(r16)               _BFGET_(r16,11, 0)
    #define   SET16tgWrap_CTRL0_vcnt_rstval(r16,v)             _BFSET_(r16,11, 0,v)

    #define   GET32tgWrap_CTRL0_prog_line_dly(r32)             _BFGET_(r32,29,28)
    #define   SET32tgWrap_CTRL0_prog_line_dly(r32,v)           _BFSET_(r32,29,28,v)
    #define   GET16tgWrap_CTRL0_prog_line_dly(r16)             _BFGET_(r16,13,12)
    #define   SET16tgWrap_CTRL0_prog_line_dly(r16,v)           _BFSET_(r16,13,12,v)

    #define   GET32tgWrap_CTRL0_uf_protec_en(r32)              _BFGET_(r32,30,30)
    #define   SET32tgWrap_CTRL0_uf_protec_en(r32,v)            _BFSET_(r32,30,30,v)
    #define   GET16tgWrap_CTRL0_uf_protec_en(r16)              _BFGET_(r16,14,14)
    #define   SET16tgWrap_CTRL0_uf_protec_en(r16,v)            _BFSET_(r16,14,14,v)

    #define     w32tgWrap_CTRL0                                {\
            UNSG32 uCTRL0_flush                                :  1;\
            UNSG32 uCTRL0_flush0                               :  1;\
            UNSG32 uCTRL0_cfg_rst                              :  1;\
            UNSG32 uCTRL0_hcnt_rstval                          : 13;\
            UNSG32 uCTRL0_vcnt_rstval                          : 12;\
            UNSG32 uCTRL0_prog_line_dly                        :  2;\
            UNSG32 uCTRL0_uf_protec_en                         :  1;\
            UNSG32 RSVDx0_b31                                  :  1;\
          }
    union { UNSG32 u32tgWrap_CTRL0;
            struct w32tgWrap_CTRL0;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32tgWrap_3D_Ctrl_prog_3di(r32)                _BFGET_(r32, 0, 0)
    #define   SET32tgWrap_3D_Ctrl_prog_3di(r32,v)              _BFSET_(r32, 0, 0,v)
    #define   GET16tgWrap_3D_Ctrl_prog_3di(r16)                _BFGET_(r16, 0, 0)
    #define   SET16tgWrap_3D_Ctrl_prog_3di(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32tgWrap_3D_Ctrl_mode_3di(r32)                _BFGET_(r32, 1, 1)
    #define   SET32tgWrap_3D_Ctrl_mode_3di(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16tgWrap_3D_Ctrl_mode_3di(r16)                _BFGET_(r16, 1, 1)
    #define   SET16tgWrap_3D_Ctrl_mode_3di(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32tgWrap_3D_Ctrl_load_3di(r32)                _BFGET_(r32, 2, 2)
    #define   SET32tgWrap_3D_Ctrl_load_3di(r32,v)              _BFSET_(r32, 2, 2,v)
    #define   GET16tgWrap_3D_Ctrl_load_3di(r16)                _BFGET_(r16, 2, 2)
    #define   SET16tgWrap_3D_Ctrl_load_3di(r16,v)              _BFSET_(r16, 2, 2,v)

    #define   GET32tgWrap_3D_Ctrl_nxt_view(r32)                _BFGET_(r32, 4, 3)
    #define   SET32tgWrap_3D_Ctrl_nxt_view(r32,v)              _BFSET_(r32, 4, 3,v)
    #define   GET16tgWrap_3D_Ctrl_nxt_view(r16)                _BFGET_(r16, 4, 3)
    #define   SET16tgWrap_3D_Ctrl_nxt_view(r16,v)              _BFSET_(r16, 4, 3,v)

    #define   GET32tgWrap_3D_Ctrl_fldalt_frmpack_3di(r32)      _BFGET_(r32, 5, 5)
    #define   SET32tgWrap_3D_Ctrl_fldalt_frmpack_3di(r32,v)    _BFSET_(r32, 5, 5,v)
    #define   GET16tgWrap_3D_Ctrl_fldalt_frmpack_3di(r16)      _BFGET_(r16, 5, 5)
    #define   SET16tgWrap_3D_Ctrl_fldalt_frmpack_3di(r16,v)    _BFSET_(r16, 5, 5,v)

    #define   GET32tgWrap_3D_Ctrl_vs_e_3d_leven(r32)           _BFGET_(r32,18, 6)
    #define   SET32tgWrap_3D_Ctrl_vs_e_3d_leven(r32,v)         _BFSET_(r32,18, 6,v)

    #define     w32tgWrap_3D_Ctrl                              {\
            UNSG32 u3D_Ctrl_prog_3di                           :  1;\
            UNSG32 u3D_Ctrl_mode_3di                           :  1;\
            UNSG32 u3D_Ctrl_load_3di                           :  1;\
            UNSG32 u3D_Ctrl_nxt_view                           :  2;\
            UNSG32 u3D_Ctrl_fldalt_frmpack_3di                 :  1;\
            UNSG32 u3D_Ctrl_vs_e_3d_leven                      : 13;\
            UNSG32 RSVDx4_b19                                  : 13;\
          }
    union { UNSG32 u32tgWrap_3D_Ctrl;
            struct w32tgWrap_3D_Ctrl;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32tgWrap_3D_ld_td_ld_wr(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32tgWrap_3D_ld_td_ld_wr(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16tgWrap_3D_ld_td_ld_wr(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16tgWrap_3D_ld_td_ld_wr(r16,v)                _BFSET_(r16, 0, 0,v)

    #define     w32tgWrap_3D_ld                                {\
            UNSG32 u3D_ld_td_ld_wr                             :  1;\
            UNSG32 RSVDx8_b1                                   : 31;\
          }
    union { UNSG32 u32tgWrap_3D_ld;
            struct w32tgWrap_3D_ld;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32tgWrap_status_lroe_view(r32)                _BFGET_(r32, 1, 0)
    #define   SET32tgWrap_status_lroe_view(r32,v)              _BFSET_(r32, 1, 0,v)
    #define   GET16tgWrap_status_lroe_view(r16)                _BFGET_(r16, 1, 0)
    #define   SET16tgWrap_status_lroe_view(r16,v)              _BFSET_(r16, 1, 0,v)

    #define   GET32tgWrap_status_vcnt(r32)                     _BFGET_(r32,13, 2)
    #define   SET32tgWrap_status_vcnt(r32,v)                   _BFSET_(r32,13, 2,v)
    #define   GET16tgWrap_status_vcnt(r16)                     _BFGET_(r16,13, 2)
    #define   SET16tgWrap_status_vcnt(r16,v)                   _BFSET_(r16,13, 2,v)

    #define   GET32tgWrap_status_underflow(r32)                _BFGET_(r32,14,14)
    #define   SET32tgWrap_status_underflow(r32,v)              _BFSET_(r32,14,14,v)
    #define   GET16tgWrap_status_underflow(r16)                _BFGET_(r16,14,14)
    #define   SET16tgWrap_status_underflow(r16,v)              _BFSET_(r16,14,14,v)

    #define   GET32tgWrap_status_overflow(r32)                 _BFGET_(r32,15,15)
    #define   SET32tgWrap_status_overflow(r32,v)               _BFSET_(r32,15,15,v)
    #define   GET16tgWrap_status_overflow(r16)                 _BFGET_(r16,15,15)
    #define   SET16tgWrap_status_overflow(r16,v)               _BFSET_(r16,15,15,v)

    #define   GET32tgWrap_status_ofld(r32)                     _BFGET_(r32,16,16)
    #define   SET32tgWrap_status_ofld(r32,v)                   _BFSET_(r32,16,16,v)
    #define   GET16tgWrap_status_ofld(r16)                     _BFGET_(r16, 0, 0)
    #define   SET16tgWrap_status_ofld(r16,v)                   _BFSET_(r16, 0, 0,v)

    #define     w32tgWrap_status                               {\
            UNSG32 ustatus_lroe_view                           :  2;\
            UNSG32 ustatus_vcnt                                : 12;\
            UNSG32 ustatus_underflow                           :  1;\
            UNSG32 ustatus_overflow                            :  1;\
            UNSG32 ustatus_ofld                                :  1;\
            UNSG32 RSVDxC_b17                                  : 15;\
          }
    union { UNSG32 u32tgWrap_status;
            struct w32tgWrap_status;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32tgWrap_CTRL1_fld_ctrl(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32tgWrap_CTRL1_fld_ctrl(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16tgWrap_CTRL1_fld_ctrl(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16tgWrap_CTRL1_fld_ctrl(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32tgWrap_CTRL1_fld_en(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32tgWrap_CTRL1_fld_en(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16tgWrap_CTRL1_fld_en(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16tgWrap_CTRL1_fld_en(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define   GET32tgWrap_CTRL1_PDWN(r32)                      _BFGET_(r32, 2, 2)
    #define   SET32tgWrap_CTRL1_PDWN(r32,v)                    _BFSET_(r32, 2, 2,v)
    #define   GET16tgWrap_CTRL1_PDWN(r16)                      _BFGET_(r16, 2, 2)
    #define   SET16tgWrap_CTRL1_PDWN(r16,v)                    _BFSET_(r16, 2, 2,v)

    #define   GET32tgWrap_CTRL1_PDLVMC(r32)                    _BFGET_(r32, 3, 3)
    #define   SET32tgWrap_CTRL1_PDLVMC(r32,v)                  _BFSET_(r32, 3, 3,v)
    #define   GET16tgWrap_CTRL1_PDLVMC(r16)                    _BFGET_(r16, 3, 3)
    #define   SET16tgWrap_CTRL1_PDLVMC(r16,v)                  _BFSET_(r16, 3, 3,v)

    #define   GET32tgWrap_CTRL1_PDFVSSM(r32)                   _BFGET_(r32, 4, 4)
    #define   SET32tgWrap_CTRL1_PDFVSSM(r32,v)                 _BFSET_(r32, 4, 4,v)
    #define   GET16tgWrap_CTRL1_PDFVSSM(r16)                   _BFGET_(r16, 4, 4)
    #define   SET16tgWrap_CTRL1_PDFVSSM(r16,v)                 _BFSET_(r16, 4, 4,v)

    #define   GET32tgWrap_CTRL1_gamma_bypass(r32)              _BFGET_(r32, 5, 5)
    #define   SET32tgWrap_CTRL1_gamma_bypass(r32,v)            _BFSET_(r32, 5, 5,v)
    #define   GET16tgWrap_CTRL1_gamma_bypass(r16)              _BFGET_(r16, 5, 5)
    #define   SET16tgWrap_CTRL1_gamma_bypass(r16,v)            _BFSET_(r16, 5, 5,v)

    #define     w32tgWrap_CTRL1                                {\
            UNSG32 uCTRL1_fld_ctrl                             :  1;\
            UNSG32 uCTRL1_fld_en                               :  1;\
            UNSG32 uCTRL1_PDWN                                 :  1;\
            UNSG32 uCTRL1_PDLVMC                               :  1;\
            UNSG32 uCTRL1_PDFVSSM                              :  1;\
            UNSG32 uCTRL1_gamma_bypass                         :  1;\
            UNSG32 RSVDx10_b6                                  : 26;\
          }
    union { UNSG32 u32tgWrap_CTRL1;
            struct w32tgWrap_CTRL1;
          };
    ///////////////////////////////////////////////////////////
              SIE_BETG                                         ie_VOPTG;
    ///////////////////////////////////////////////////////////
              SIE_GAMMA                                        ie_GAMMA;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_GAMMA;
    ///////////////////////////////////////////////////////////
              SIE_SRAMPWR                                      ie_SRAMPWR_UFPFIFO_0;
    ///////////////////////////////////////////////////////////
    } SIE_tgWrap;

    typedef union  T32tgWrap_CTRL0
          { UNSG32 u32;
            struct w32tgWrap_CTRL0;
                 } T32tgWrap_CTRL0;
    typedef union  T32tgWrap_3D_Ctrl
          { UNSG32 u32;
            struct w32tgWrap_3D_Ctrl;
                 } T32tgWrap_3D_Ctrl;
    typedef union  T32tgWrap_3D_ld
          { UNSG32 u32;
            struct w32tgWrap_3D_ld;
                 } T32tgWrap_3D_ld;
    typedef union  T32tgWrap_status
          { UNSG32 u32;
            struct w32tgWrap_status;
                 } T32tgWrap_status;
    typedef union  T32tgWrap_CTRL1
          { UNSG32 u32;
            struct w32tgWrap_CTRL1;
                 } T32tgWrap_CTRL1;
    ///////////////////////////////////////////////////////////

    typedef union  TtgWrap_CTRL0
          { UNSG32 u32[1];
            struct {
            struct w32tgWrap_CTRL0;
                   };
                 } TtgWrap_CTRL0;
    typedef union  TtgWrap_3D_Ctrl
          { UNSG32 u32[1];
            struct {
            struct w32tgWrap_3D_Ctrl;
                   };
                 } TtgWrap_3D_Ctrl;
    typedef union  TtgWrap_3D_ld
          { UNSG32 u32[1];
            struct {
            struct w32tgWrap_3D_ld;
                   };
                 } TtgWrap_3D_ld;
    typedef union  TtgWrap_status
          { UNSG32 u32[1];
            struct {
            struct w32tgWrap_status;
                   };
                 } TtgWrap_status;
    typedef union  TtgWrap_CTRL1
          { UNSG32 u32[1];
            struct {
            struct w32tgWrap_CTRL1;
                   };
                 } TtgWrap_CTRL1;

    ///////////////////////////////////////////////////////////
     SIGN32 tgWrap_drvrd(SIE_tgWrap *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 tgWrap_drvwr(SIE_tgWrap *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void tgWrap_reset(SIE_tgWrap *p);
     SIGN32 tgWrap_cmp  (SIE_tgWrap *p, SIE_tgWrap *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define tgWrap_check(p,pie,pfx,hLOG) tgWrap_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define tgWrap_print(p,    pfx,hLOG) tgWrap_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: tgWrap
////////////////////////////////////////////////////////////

//////
/// 
/// $INTERFACE Vpp                     biu              (4,4)
///     # # ----------------------------------------------------------
///     @ 0x00000 CTRL                 (P)
///               %unsigned 1  GFX1_PLANE_CG_EN          0x1
///                                    ###
///                                    * Enable for GFX1. Write 0 to disable GFX1 plane.
///                                    ###
///               %unsigned 1  GFX2_PLANE_CG_EN          0x1
///                                    ###
///                                    * Enable for GFX2. Write 0 to disable GFX2 plane.
///                                    ###
///               %unsigned 1  auto_flush_en             0x1
///                                    ###
///                                    * Auto Flush Enable for buffers in vpp pipe. Default Enabled. Write 0x0 to disable auto flush.
///                                    * Flushing the FIFO's on display tg frame reset.
///                                    ###
///               %unsigned 1  MainPl_CG_En              0x1
///                                    ###
///                                    * Enable for mainPl. Write 0 to disable mainPl plane.
///                                    ###
///               %%        28         # Stuffing bits...
///     @ 0x00004 CPCB0_PL_EN          (P)
///               %unsigned 1  Main                      0x0
///               %unsigned 1  PIP                       0x0
///               %unsigned 1  GFX1                      0x0
///               %unsigned 1  GFX2                      0x0
///               %unsigned 1  Cursor                    0x0
///                                    ###
///                                    * 1: The particular channel is connected to CPCB0's respective plane input.
///                                    * Main -> pl-1, PIP -> pl-2, GFX1 -> pl-3, GFX2 -> pl-4, Cursor->pl-5
///                                    * 0: The particular channel is not connected to CPCB0.
///                                    ###
///               %%        27         # Stuffing bits...
///     @ 0x00008 VPP_INTR_EN          (P)
///               %unsigned 1  vppVBI                    0x0
///                                    ###
///                                    * Enable for HDMI PATH (DP1 path) VBI start interrupt
///                                    ###
///               %unsigned 1  vppOUT0                   0x0
///                                    ###
///                                    * Enable for HDMITX Interrupt
///                                    ###
///               %unsigned 1  vppOUT1                   0x0
///                                    ###
///                                    * Enable for HDCP interrupt
///                                    ###
///               %unsigned 1  vppOUT2                   0x0
///                                    ###
///                                    * Enable for TRNG interrupt
///                                    ###
///               %unsigned 1  vppOUT3                   0x0
///                                    ###
///                                    * Enable for HDMI TX PHY OSNK interrupt
///                                    ###
///               %unsigned 1  vppVDE0                   0x0
///                                    ###
///                                    * Enable for HDMI PATH VDE start interrupt
///                                    ###
///               %unsigned 1  bcmInvalidReq             0x0
///                                    ###
///                                    * Enable for bcmInvalidReq interrupt
///                                    ###
///               %unsigned 1  vppOUT4                   0x0
///                                    ###
///                                    * Enable for VOP (DP1) TG interrupt
///                                    ###
///               %unsigned 1  vppOUT5                   0x0
///                                    ###
///                                    * Enable for VOP2 TG (DP2 path) interrupt
///                                    ###
///               %unsigned 1  vppOUT6                   0x0
///                                    ###
///                                    * Not used
///                                    ###
///               %unsigned 1  vppOUT7                   0x0
///                                    ###
///                                    * Enable for the interrupt which can be generated on any line of frame based on the register programming. For VOP (DP1 path) TG.
///                                    ###
///               %unsigned 1  vppOUT8                   0x0
///                                    ###
///                                    * Not used
///                                    ###
///               %unsigned 1  vppOUT9                   0x0
///                                    ###
///                                    * Enable for VDCM histogram interrupt
///                                    ###
///               %unsigned 1  vppOUT10                  0x0
///                                    ###
///                                    * Enable for GDCM histogram interrupt
///                                    ###
///               %%        18         # Stuffing bits...
///     @ 0x0000C rst                  (P-)
///               %unsigned 1  be_ss                     0x1
///                                    ###
///                                    * 0 : Reset the VPP BE pipe-line (CPCB, HDMI-Tx, Video encoder, etc.)
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  video_enc                 0x1
///                                    ###
///                                    * Not used
///                                    * 0 : Reset the Video Encoder module alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  asd                       0x1
///                                    ###
///                                    * 0 : Reset the ASD Clock Domain flops
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  hdmi_tx                   0x1
///                                    ###
///                                    * 0 : Reset the HDMI-TX module alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  dns422_420                0x1
///                                    ###
///                                    * 0 : Reset the DNS422_420 module alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  sbclk_adpscl              0x1
///                                    ###
///                                    * 0 : Reset for sbclk domain in adpscl block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  sbclk_gfx0                0x1
///                                    ###
///                                    * 0 : Reset for sbclk domain in GFX0-SCL block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  sbclk_gfx1                0x1
///                                    ###
///                                    * 0 : Reset for sbclk domain in GFX1-SCL block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  adp1dscl                  0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of Adaptive 1D-SCL block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  gfx0Scl                   0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of GFX0-SCL block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  gfx1Scl                   0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of GFX1-SCL block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  detileups420              0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of DETILE-UPS420 block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  memlb_ups420              0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of memory line buffer for detileups420 block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  ups420_sp                 0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of UPS420_SP (PIP path) block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  vmx_vm                    0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of VMX_VM block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  vopClk                    0x1
///                                    ###
///                                    * 0 : Reset for all flops in vopClk domain in HDMI_VOP
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  gtclk                     0x1
///                                    ###
///                                    * 0 : Reset for all flops in gtclk domain in DV ComposerWrapper
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  detileups420_elpipe       0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of DETILE-UPS420 block alone in EL PIPE
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  memlb_1dscl               0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of 1D Scalar memory line buffer
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  memlb_ups420_el           0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of memory line buffer for detileups420 block alone in EL PIPE
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  dvcomp_wrap               0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain DV ComposerWrapper in Main Plane
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  dv_rgb2ipt_mainpl         0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain DV RGB to IPT in Main Plane
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  dv_cvm_mainpl             0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain DV CVM in Main Plane
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  dv_rgb2ipt_gfx0           0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain DV RGB to IPT in GFX0 Plane
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  dv_cvm_gfx0               0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain DV CVM in GFX0 Plane
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  dv_rgb2ipt_gfx1           0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain DV RGB to IPT in GFX1 Plane
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  dv_cvm_gfx1               0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain DV CVM in GFX1 Plane
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  dv_ocsc                   0x1
///                                    ###
///                                    * 0 : Reset for all flops in vopClk domain DV OCSC in VOP Plane
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  dv_dither                 0x1
///                                    ###
///                                    * 0 : Reset for all flops in vopClk domain DV Dither in VOP Plane
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  dv_mdata_over_HDMI        0x1
///                                    ###
///                                    * 0 : Reset for all flops in vopClk domain DV Metadata over HDMI in VOP Plane
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  ldc                       0x1
///               %unsigned 1  gamma                     0x1
///                                    ###
///                                    * 0 – Reset asserted.
///                                    * 1 – reset de-asserted, normal state.
///                                    ###
///     @ 0x00010 rst1                 (P-)
///               %unsigned 1  vitmo_mainpl              0x1
///                                    ###
///                                    * Not used
///                                    * 0 : Reset for all flops in vppSysClk domain for VITMO in Main Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  gitm_gfx0                 0x1
///               %unsigned 1  gitm_gfx1                 0x1
///                                    ###
///                                    * Not used
///                                    * 0 : Reset for all flops in vppSysClk domain for GITM in GFX1 Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  ovpscl_sbrst_Y            0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain for OVPSCL luma.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  ovpscl_sbrst_UV           0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain for OVPSCL Chroma.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  ngptv                     0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain for NGPTV IP.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  ovpScl_ngptv              0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain for OVP SCL NGPTV IP.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainpl_vdcm               0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain for VDCM IP in Main Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainpl_vitm_vdcm_linebuff 0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain for VITM VDCM LINE Buffer in Main Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  detileups420_pipPl        0x1
///                                    ###
///                                    * Not used
///                                    * 0 : Reset for all flops in vppSysClk domain for DETILE UPS420 in PIP Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  memlb_ups420_pipPl        0x1
///                                    ###
///                                    * Not used
///                                    * 0 : Reset for all flops in vppSysClk domain for DETILE MEMLB LINE Buffer in PIP Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  gfx0pl_gdcm               0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain for GDCM in GFX0 Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  gfx1pl_gdcm               0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain for GDCM in GFX1 Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  memdlb_ups420             0x1
///                                    ###
///                                    * Not used
///                                    * 0 : Reset for all flops in vppSysClk domain of memory delay line buffer for detileups420 block alone
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  memdlb_ups420_pipPl       0x1
///                                    ###
///                                    * Not used
///                                    * 0 : Reset for all flops in vppSysClk domain for DETILE MEMLB DELAY LINE Buffer in PIP Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainpl_ovpSclwrap         0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppsysClk domain for OVP Scalar Wrapper in Main Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainpl_ovpSclY            0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppsysClk domain for OVP Scalar Y in Main Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainpl_ovpSclUV           0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppsysClk domain for OVP Scalar UV in Main Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainpl_ovpSclY_memlb      0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppsysClk domain for OVP Scalar Y memory line buffer in Main Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainpl_ovpSclUV_memlb     0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppsysClk domain for OVP Scalar UV memory line buffer in Main Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainpl_hdrlut             0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain for HDRLUT in Main Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  gfx0_hdrlut               0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain for HDRLUT in PIP/GFX0 Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  gfx1_hdrlut               0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain for HDRLUT in GFX1 Plane.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainPl_car                0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of CAR IP in MainPl
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainPl_detEE              0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of Detail EE IP in MainPl
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainPl_EETop              0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of EE Top IP in MainPl
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %unsigned 1  mainPl_cmu                0x1
///                                    ###
///                                    * 0 : Reset for all flops in vppSysClk domain of CMU IP in MainPl
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %%        5          # Stuffing bits...
///     @ 0x00014 rst2                 (P-)
///               %unsigned 1  oclkx_hdmi                0x1
///                                    ###
///                                    * 0 : Reset for all flops in oclkx_hdmi domain of VOP-DP1 path.
///                                    * 1 : reset de-asserted, normal state.
///                                    ###
///               %%        31         # Stuffing bits...
///     @ 0x00018 OVERLAY_MUX          (P)
///               %unsigned 1  MAIN                      0x0
///               %unsigned 1  GFX1                      0x0
///               %unsigned 1  GFX2                      0x0
///                                    ###
///                                    * This mux is used to select between register programmed values and the output from scaler(or FE) to be fed into the CPCB overlay module. Setting a 1 to any of the bits will cause the register programmed values to be sent to the overlay module.
///                                    ###
///               %%        29         # Stuffing bits...
///     @ 0x0001C MAIN_OV_FXD_IMG      (P)
///               %unsigned 32 REG                       0x0
///                                    ###
///                                    * This register is used to provide a fixed color to the overlay module in CPCB. This is programmed in conjunction with the OVERLAY_MUX to select a fixed color for the Main channel.
///                                    ###
///     @ 0x00020 GFX1_OV_FXD_IMG      (P)
///               %unsigned 32 REG                       0x0
///                                    ###
///                                    * This register is used to provide a fixed color to the overlay module in CPCB. This is programmed in conjunction with the OVERLAY_MUX to select a fixed color for the Graphics-1 channel.
///                                    ###
///     @ 0x00024 GFX2_OV_FXD_IMG      (P)
///               %unsigned 32 REG                       0x0
///                                    ###
///                                    * This register is used to provide a fixed color to the overlay module in CPCB. This is programmed in conjunction with the OVERLAY_MUX to select a fixed color for the Graphics-2 channel.
///                                    ###
///     @ 0x00028                      (W-)
///     #         # Stuffing bytes...
///               %% 7872
///     @ 0x00400                      (P)
///     # 0x00400 GFX0                 
///               $GFX0                GFX0              REG          
///                                    ###
///                                    * Graphics-0 Plane register descriptions
///                                    ###
///     @ 0x01000                      (P)
///     # 0x01000 GFX1                 
///               $GFX1                GFX1              REG          
///                                    ###
///                                    * Graphics-1 Plane register descriptions
///                                    ###
///     @ 0x01C00                      (P)
///     # 0x01C00 vidpl                
///               $vidpl               vidpl             REG          
///                                    ###
///                                    * Main Video Plane register descriptions
///                                    ###
///     @ 0x03400                      (P)
///     # 0x03400 tgWrap0              
///               $tgWrap              tgWrap0           REG          
///                                    ###
///                                    * TG Wrapper releated registers
///                                    ###
///     @ 0x034EC                      (P)
///     # 0x034EC cpcb0Clk             
///               $CLK                 cpcb0Clk          REG          
///                                    ###
///                                    * vClk0 is driven as cpcb0Clkx and with vClk0 as input, a divider-cum-mux is implemented to generate cpcb0Clk. These set of controls control the cpcb0Clk.
///                                    ###
///     @ 0x034F0                      (P)
///     # 0x034F0 asdClk               
///               $CLK                 asdClk            REG          
///                                    ###
///                                    * With vClk0 as input, a divider-cum-mux is implemented to generate asdClk. These set of controls control the asdClk.
///                                    * End of Vpp definition.
///                                    ###
///     @ 0x034F4                      (W-)
///     #         # Stuffing bytes...
///               %% 6240
///     # # ----------------------------------------------------------
/// $ENDOFINTERFACE  # size:   14336B, bits:   10641b, padding:     0B
////////////////////////////////////////////////////////////
#ifndef h_Vpp
#define h_Vpp (){}

    #define     RA_Vpp_CTRL                                    0x0000

    #define     BA_Vpp_CTRL_GFX1_PLANE_CG_EN                   0x0000
    #define     B16Vpp_CTRL_GFX1_PLANE_CG_EN                   0x0000
    #define   LSb32Vpp_CTRL_GFX1_PLANE_CG_EN                      0
    #define   LSb16Vpp_CTRL_GFX1_PLANE_CG_EN                      0
    #define       bVpp_CTRL_GFX1_PLANE_CG_EN                   1
    #define   MSK32Vpp_CTRL_GFX1_PLANE_CG_EN                      0x00000001

    #define     BA_Vpp_CTRL_GFX2_PLANE_CG_EN                   0x0000
    #define     B16Vpp_CTRL_GFX2_PLANE_CG_EN                   0x0000
    #define   LSb32Vpp_CTRL_GFX2_PLANE_CG_EN                      1
    #define   LSb16Vpp_CTRL_GFX2_PLANE_CG_EN                      1
    #define       bVpp_CTRL_GFX2_PLANE_CG_EN                   1
    #define   MSK32Vpp_CTRL_GFX2_PLANE_CG_EN                      0x00000002

    #define     BA_Vpp_CTRL_auto_flush_en                      0x0000
    #define     B16Vpp_CTRL_auto_flush_en                      0x0000
    #define   LSb32Vpp_CTRL_auto_flush_en                         2
    #define   LSb16Vpp_CTRL_auto_flush_en                         2
    #define       bVpp_CTRL_auto_flush_en                      1
    #define   MSK32Vpp_CTRL_auto_flush_en                         0x00000004

    #define     BA_Vpp_CTRL_MainPl_CG_En                       0x0000
    #define     B16Vpp_CTRL_MainPl_CG_En                       0x0000
    #define   LSb32Vpp_CTRL_MainPl_CG_En                          3
    #define   LSb16Vpp_CTRL_MainPl_CG_En                          3
    #define       bVpp_CTRL_MainPl_CG_En                       1
    #define   MSK32Vpp_CTRL_MainPl_CG_En                          0x00000008
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_CPCB0_PL_EN                             0x0004

    #define     BA_Vpp_CPCB0_PL_EN_Main                        0x0004
    #define     B16Vpp_CPCB0_PL_EN_Main                        0x0004
    #define   LSb32Vpp_CPCB0_PL_EN_Main                           0
    #define   LSb16Vpp_CPCB0_PL_EN_Main                           0
    #define       bVpp_CPCB0_PL_EN_Main                        1
    #define   MSK32Vpp_CPCB0_PL_EN_Main                           0x00000001

    #define     BA_Vpp_CPCB0_PL_EN_PIP                         0x0004
    #define     B16Vpp_CPCB0_PL_EN_PIP                         0x0004
    #define   LSb32Vpp_CPCB0_PL_EN_PIP                            1
    #define   LSb16Vpp_CPCB0_PL_EN_PIP                            1
    #define       bVpp_CPCB0_PL_EN_PIP                         1
    #define   MSK32Vpp_CPCB0_PL_EN_PIP                            0x00000002

    #define     BA_Vpp_CPCB0_PL_EN_GFX1                        0x0004
    #define     B16Vpp_CPCB0_PL_EN_GFX1                        0x0004
    #define   LSb32Vpp_CPCB0_PL_EN_GFX1                           2
    #define   LSb16Vpp_CPCB0_PL_EN_GFX1                           2
    #define       bVpp_CPCB0_PL_EN_GFX1                        1
    #define   MSK32Vpp_CPCB0_PL_EN_GFX1                           0x00000004

    #define     BA_Vpp_CPCB0_PL_EN_GFX2                        0x0004
    #define     B16Vpp_CPCB0_PL_EN_GFX2                        0x0004
    #define   LSb32Vpp_CPCB0_PL_EN_GFX2                           3
    #define   LSb16Vpp_CPCB0_PL_EN_GFX2                           3
    #define       bVpp_CPCB0_PL_EN_GFX2                        1
    #define   MSK32Vpp_CPCB0_PL_EN_GFX2                           0x00000008

    #define     BA_Vpp_CPCB0_PL_EN_Cursor                      0x0004
    #define     B16Vpp_CPCB0_PL_EN_Cursor                      0x0004
    #define   LSb32Vpp_CPCB0_PL_EN_Cursor                         4
    #define   LSb16Vpp_CPCB0_PL_EN_Cursor                         4
    #define       bVpp_CPCB0_PL_EN_Cursor                      1
    #define   MSK32Vpp_CPCB0_PL_EN_Cursor                         0x00000010
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_VPP_INTR_EN                             0x0008

    #define     BA_Vpp_VPP_INTR_EN_vppVBI                      0x0008
    #define     B16Vpp_VPP_INTR_EN_vppVBI                      0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppVBI                         0
    #define   LSb16Vpp_VPP_INTR_EN_vppVBI                         0
    #define       bVpp_VPP_INTR_EN_vppVBI                      1
    #define   MSK32Vpp_VPP_INTR_EN_vppVBI                         0x00000001

    #define     BA_Vpp_VPP_INTR_EN_vppOUT0                     0x0008
    #define     B16Vpp_VPP_INTR_EN_vppOUT0                     0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppOUT0                        1
    #define   LSb16Vpp_VPP_INTR_EN_vppOUT0                        1
    #define       bVpp_VPP_INTR_EN_vppOUT0                     1
    #define   MSK32Vpp_VPP_INTR_EN_vppOUT0                        0x00000002

    #define     BA_Vpp_VPP_INTR_EN_vppOUT1                     0x0008
    #define     B16Vpp_VPP_INTR_EN_vppOUT1                     0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppOUT1                        2
    #define   LSb16Vpp_VPP_INTR_EN_vppOUT1                        2
    #define       bVpp_VPP_INTR_EN_vppOUT1                     1
    #define   MSK32Vpp_VPP_INTR_EN_vppOUT1                        0x00000004

    #define     BA_Vpp_VPP_INTR_EN_vppOUT2                     0x0008
    #define     B16Vpp_VPP_INTR_EN_vppOUT2                     0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppOUT2                        3
    #define   LSb16Vpp_VPP_INTR_EN_vppOUT2                        3
    #define       bVpp_VPP_INTR_EN_vppOUT2                     1
    #define   MSK32Vpp_VPP_INTR_EN_vppOUT2                        0x00000008

    #define     BA_Vpp_VPP_INTR_EN_vppOUT3                     0x0008
    #define     B16Vpp_VPP_INTR_EN_vppOUT3                     0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppOUT3                        4
    #define   LSb16Vpp_VPP_INTR_EN_vppOUT3                        4
    #define       bVpp_VPP_INTR_EN_vppOUT3                     1
    #define   MSK32Vpp_VPP_INTR_EN_vppOUT3                        0x00000010

    #define     BA_Vpp_VPP_INTR_EN_vppVDE0                     0x0008
    #define     B16Vpp_VPP_INTR_EN_vppVDE0                     0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppVDE0                        5
    #define   LSb16Vpp_VPP_INTR_EN_vppVDE0                        5
    #define       bVpp_VPP_INTR_EN_vppVDE0                     1
    #define   MSK32Vpp_VPP_INTR_EN_vppVDE0                        0x00000020

    #define     BA_Vpp_VPP_INTR_EN_bcmInvalidReq               0x0008
    #define     B16Vpp_VPP_INTR_EN_bcmInvalidReq               0x0008
    #define   LSb32Vpp_VPP_INTR_EN_bcmInvalidReq                  6
    #define   LSb16Vpp_VPP_INTR_EN_bcmInvalidReq                  6
    #define       bVpp_VPP_INTR_EN_bcmInvalidReq               1
    #define   MSK32Vpp_VPP_INTR_EN_bcmInvalidReq                  0x00000040

    #define     BA_Vpp_VPP_INTR_EN_vppOUT4                     0x0008
    #define     B16Vpp_VPP_INTR_EN_vppOUT4                     0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppOUT4                        7
    #define   LSb16Vpp_VPP_INTR_EN_vppOUT4                        7
    #define       bVpp_VPP_INTR_EN_vppOUT4                     1
    #define   MSK32Vpp_VPP_INTR_EN_vppOUT4                        0x00000080

    #define     BA_Vpp_VPP_INTR_EN_vppOUT5                     0x0009
    #define     B16Vpp_VPP_INTR_EN_vppOUT5                     0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppOUT5                        8
    #define   LSb16Vpp_VPP_INTR_EN_vppOUT5                        8
    #define       bVpp_VPP_INTR_EN_vppOUT5                     1
    #define   MSK32Vpp_VPP_INTR_EN_vppOUT5                        0x00000100

    #define     BA_Vpp_VPP_INTR_EN_vppOUT6                     0x0009
    #define     B16Vpp_VPP_INTR_EN_vppOUT6                     0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppOUT6                        9
    #define   LSb16Vpp_VPP_INTR_EN_vppOUT6                        9
    #define       bVpp_VPP_INTR_EN_vppOUT6                     1
    #define   MSK32Vpp_VPP_INTR_EN_vppOUT6                        0x00000200

    #define     BA_Vpp_VPP_INTR_EN_vppOUT7                     0x0009
    #define     B16Vpp_VPP_INTR_EN_vppOUT7                     0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppOUT7                        10
    #define   LSb16Vpp_VPP_INTR_EN_vppOUT7                        10
    #define       bVpp_VPP_INTR_EN_vppOUT7                     1
    #define   MSK32Vpp_VPP_INTR_EN_vppOUT7                        0x00000400

    #define     BA_Vpp_VPP_INTR_EN_vppOUT8                     0x0009
    #define     B16Vpp_VPP_INTR_EN_vppOUT8                     0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppOUT8                        11
    #define   LSb16Vpp_VPP_INTR_EN_vppOUT8                        11
    #define       bVpp_VPP_INTR_EN_vppOUT8                     1
    #define   MSK32Vpp_VPP_INTR_EN_vppOUT8                        0x00000800

    #define     BA_Vpp_VPP_INTR_EN_vppOUT9                     0x0009
    #define     B16Vpp_VPP_INTR_EN_vppOUT9                     0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppOUT9                        12
    #define   LSb16Vpp_VPP_INTR_EN_vppOUT9                        12
    #define       bVpp_VPP_INTR_EN_vppOUT9                     1
    #define   MSK32Vpp_VPP_INTR_EN_vppOUT9                        0x00001000

    #define     BA_Vpp_VPP_INTR_EN_vppOUT10                    0x0009
    #define     B16Vpp_VPP_INTR_EN_vppOUT10                    0x0008
    #define   LSb32Vpp_VPP_INTR_EN_vppOUT10                       13
    #define   LSb16Vpp_VPP_INTR_EN_vppOUT10                       13
    #define       bVpp_VPP_INTR_EN_vppOUT10                    1
    #define   MSK32Vpp_VPP_INTR_EN_vppOUT10                       0x00002000
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_rst                                     0x000C

    #define     BA_Vpp_rst_be_ss                               0x000C
    #define     B16Vpp_rst_be_ss                               0x000C
    #define   LSb32Vpp_rst_be_ss                                  0
    #define   LSb16Vpp_rst_be_ss                                  0
    #define       bVpp_rst_be_ss                               1
    #define   MSK32Vpp_rst_be_ss                                  0x00000001

    #define     BA_Vpp_rst_video_enc                           0x000C
    #define     B16Vpp_rst_video_enc                           0x000C
    #define   LSb32Vpp_rst_video_enc                              1
    #define   LSb16Vpp_rst_video_enc                              1
    #define       bVpp_rst_video_enc                           1
    #define   MSK32Vpp_rst_video_enc                              0x00000002

    #define     BA_Vpp_rst_asd                                 0x000C
    #define     B16Vpp_rst_asd                                 0x000C
    #define   LSb32Vpp_rst_asd                                    2
    #define   LSb16Vpp_rst_asd                                    2
    #define       bVpp_rst_asd                                 1
    #define   MSK32Vpp_rst_asd                                    0x00000004

    #define     BA_Vpp_rst_hdmi_tx                             0x000C
    #define     B16Vpp_rst_hdmi_tx                             0x000C
    #define   LSb32Vpp_rst_hdmi_tx                                3
    #define   LSb16Vpp_rst_hdmi_tx                                3
    #define       bVpp_rst_hdmi_tx                             1
    #define   MSK32Vpp_rst_hdmi_tx                                0x00000008

    #define     BA_Vpp_rst_dns422_420                          0x000C
    #define     B16Vpp_rst_dns422_420                          0x000C
    #define   LSb32Vpp_rst_dns422_420                             4
    #define   LSb16Vpp_rst_dns422_420                             4
    #define       bVpp_rst_dns422_420                          1
    #define   MSK32Vpp_rst_dns422_420                             0x00000010

    #define     BA_Vpp_rst_sbclk_adpscl                        0x000C
    #define     B16Vpp_rst_sbclk_adpscl                        0x000C
    #define   LSb32Vpp_rst_sbclk_adpscl                           5
    #define   LSb16Vpp_rst_sbclk_adpscl                           5
    #define       bVpp_rst_sbclk_adpscl                        1
    #define   MSK32Vpp_rst_sbclk_adpscl                           0x00000020

    #define     BA_Vpp_rst_sbclk_gfx0                          0x000C
    #define     B16Vpp_rst_sbclk_gfx0                          0x000C
    #define   LSb32Vpp_rst_sbclk_gfx0                             6
    #define   LSb16Vpp_rst_sbclk_gfx0                             6
    #define       bVpp_rst_sbclk_gfx0                          1
    #define   MSK32Vpp_rst_sbclk_gfx0                             0x00000040

    #define     BA_Vpp_rst_sbclk_gfx1                          0x000C
    #define     B16Vpp_rst_sbclk_gfx1                          0x000C
    #define   LSb32Vpp_rst_sbclk_gfx1                             7
    #define   LSb16Vpp_rst_sbclk_gfx1                             7
    #define       bVpp_rst_sbclk_gfx1                          1
    #define   MSK32Vpp_rst_sbclk_gfx1                             0x00000080

    #define     BA_Vpp_rst_adp1dscl                            0x000D
    #define     B16Vpp_rst_adp1dscl                            0x000C
    #define   LSb32Vpp_rst_adp1dscl                               8
    #define   LSb16Vpp_rst_adp1dscl                               8
    #define       bVpp_rst_adp1dscl                            1
    #define   MSK32Vpp_rst_adp1dscl                               0x00000100

    #define     BA_Vpp_rst_gfx0Scl                             0x000D
    #define     B16Vpp_rst_gfx0Scl                             0x000C
    #define   LSb32Vpp_rst_gfx0Scl                                9
    #define   LSb16Vpp_rst_gfx0Scl                                9
    #define       bVpp_rst_gfx0Scl                             1
    #define   MSK32Vpp_rst_gfx0Scl                                0x00000200

    #define     BA_Vpp_rst_gfx1Scl                             0x000D
    #define     B16Vpp_rst_gfx1Scl                             0x000C
    #define   LSb32Vpp_rst_gfx1Scl                                10
    #define   LSb16Vpp_rst_gfx1Scl                                10
    #define       bVpp_rst_gfx1Scl                             1
    #define   MSK32Vpp_rst_gfx1Scl                                0x00000400

    #define     BA_Vpp_rst_detileups420                        0x000D
    #define     B16Vpp_rst_detileups420                        0x000C
    #define   LSb32Vpp_rst_detileups420                           11
    #define   LSb16Vpp_rst_detileups420                           11
    #define       bVpp_rst_detileups420                        1
    #define   MSK32Vpp_rst_detileups420                           0x00000800

    #define     BA_Vpp_rst_memlb_ups420                        0x000D
    #define     B16Vpp_rst_memlb_ups420                        0x000C
    #define   LSb32Vpp_rst_memlb_ups420                           12
    #define   LSb16Vpp_rst_memlb_ups420                           12
    #define       bVpp_rst_memlb_ups420                        1
    #define   MSK32Vpp_rst_memlb_ups420                           0x00001000

    #define     BA_Vpp_rst_ups420_sp                           0x000D
    #define     B16Vpp_rst_ups420_sp                           0x000C
    #define   LSb32Vpp_rst_ups420_sp                              13
    #define   LSb16Vpp_rst_ups420_sp                              13
    #define       bVpp_rst_ups420_sp                           1
    #define   MSK32Vpp_rst_ups420_sp                              0x00002000

    #define     BA_Vpp_rst_vmx_vm                              0x000D
    #define     B16Vpp_rst_vmx_vm                              0x000C
    #define   LSb32Vpp_rst_vmx_vm                                 14
    #define   LSb16Vpp_rst_vmx_vm                                 14
    #define       bVpp_rst_vmx_vm                              1
    #define   MSK32Vpp_rst_vmx_vm                                 0x00004000

    #define     BA_Vpp_rst_vopClk                              0x000D
    #define     B16Vpp_rst_vopClk                              0x000C
    #define   LSb32Vpp_rst_vopClk                                 15
    #define   LSb16Vpp_rst_vopClk                                 15
    #define       bVpp_rst_vopClk                              1
    #define   MSK32Vpp_rst_vopClk                                 0x00008000

    #define     BA_Vpp_rst_gtclk                               0x000E
    #define     B16Vpp_rst_gtclk                               0x000E
    #define   LSb32Vpp_rst_gtclk                                  16
    #define   LSb16Vpp_rst_gtclk                                  0
    #define       bVpp_rst_gtclk                               1
    #define   MSK32Vpp_rst_gtclk                                  0x00010000

    #define     BA_Vpp_rst_detileups420_elpipe                 0x000E
    #define     B16Vpp_rst_detileups420_elpipe                 0x000E
    #define   LSb32Vpp_rst_detileups420_elpipe                    17
    #define   LSb16Vpp_rst_detileups420_elpipe                    1
    #define       bVpp_rst_detileups420_elpipe                 1
    #define   MSK32Vpp_rst_detileups420_elpipe                    0x00020000

    #define     BA_Vpp_rst_memlb_1dscl                         0x000E
    #define     B16Vpp_rst_memlb_1dscl                         0x000E
    #define   LSb32Vpp_rst_memlb_1dscl                            18
    #define   LSb16Vpp_rst_memlb_1dscl                            2
    #define       bVpp_rst_memlb_1dscl                         1
    #define   MSK32Vpp_rst_memlb_1dscl                            0x00040000

    #define     BA_Vpp_rst_memlb_ups420_el                     0x000E
    #define     B16Vpp_rst_memlb_ups420_el                     0x000E
    #define   LSb32Vpp_rst_memlb_ups420_el                        19
    #define   LSb16Vpp_rst_memlb_ups420_el                        3
    #define       bVpp_rst_memlb_ups420_el                     1
    #define   MSK32Vpp_rst_memlb_ups420_el                        0x00080000

    #define     BA_Vpp_rst_dvcomp_wrap                         0x000E
    #define     B16Vpp_rst_dvcomp_wrap                         0x000E
    #define   LSb32Vpp_rst_dvcomp_wrap                            20
    #define   LSb16Vpp_rst_dvcomp_wrap                            4
    #define       bVpp_rst_dvcomp_wrap                         1
    #define   MSK32Vpp_rst_dvcomp_wrap                            0x00100000

    #define     BA_Vpp_rst_dv_rgb2ipt_mainpl                   0x000E
    #define     B16Vpp_rst_dv_rgb2ipt_mainpl                   0x000E
    #define   LSb32Vpp_rst_dv_rgb2ipt_mainpl                      21
    #define   LSb16Vpp_rst_dv_rgb2ipt_mainpl                      5
    #define       bVpp_rst_dv_rgb2ipt_mainpl                   1
    #define   MSK32Vpp_rst_dv_rgb2ipt_mainpl                      0x00200000

    #define     BA_Vpp_rst_dv_cvm_mainpl                       0x000E
    #define     B16Vpp_rst_dv_cvm_mainpl                       0x000E
    #define   LSb32Vpp_rst_dv_cvm_mainpl                          22
    #define   LSb16Vpp_rst_dv_cvm_mainpl                          6
    #define       bVpp_rst_dv_cvm_mainpl                       1
    #define   MSK32Vpp_rst_dv_cvm_mainpl                          0x00400000

    #define     BA_Vpp_rst_dv_rgb2ipt_gfx0                     0x000E
    #define     B16Vpp_rst_dv_rgb2ipt_gfx0                     0x000E
    #define   LSb32Vpp_rst_dv_rgb2ipt_gfx0                        23
    #define   LSb16Vpp_rst_dv_rgb2ipt_gfx0                        7
    #define       bVpp_rst_dv_rgb2ipt_gfx0                     1
    #define   MSK32Vpp_rst_dv_rgb2ipt_gfx0                        0x00800000

    #define     BA_Vpp_rst_dv_cvm_gfx0                         0x000F
    #define     B16Vpp_rst_dv_cvm_gfx0                         0x000E
    #define   LSb32Vpp_rst_dv_cvm_gfx0                            24
    #define   LSb16Vpp_rst_dv_cvm_gfx0                            8
    #define       bVpp_rst_dv_cvm_gfx0                         1
    #define   MSK32Vpp_rst_dv_cvm_gfx0                            0x01000000

    #define     BA_Vpp_rst_dv_rgb2ipt_gfx1                     0x000F
    #define     B16Vpp_rst_dv_rgb2ipt_gfx1                     0x000E
    #define   LSb32Vpp_rst_dv_rgb2ipt_gfx1                        25
    #define   LSb16Vpp_rst_dv_rgb2ipt_gfx1                        9
    #define       bVpp_rst_dv_rgb2ipt_gfx1                     1
    #define   MSK32Vpp_rst_dv_rgb2ipt_gfx1                        0x02000000

    #define     BA_Vpp_rst_dv_cvm_gfx1                         0x000F
    #define     B16Vpp_rst_dv_cvm_gfx1                         0x000E
    #define   LSb32Vpp_rst_dv_cvm_gfx1                            26
    #define   LSb16Vpp_rst_dv_cvm_gfx1                            10
    #define       bVpp_rst_dv_cvm_gfx1                         1
    #define   MSK32Vpp_rst_dv_cvm_gfx1                            0x04000000

    #define     BA_Vpp_rst_dv_ocsc                             0x000F
    #define     B16Vpp_rst_dv_ocsc                             0x000E
    #define   LSb32Vpp_rst_dv_ocsc                                27
    #define   LSb16Vpp_rst_dv_ocsc                                11
    #define       bVpp_rst_dv_ocsc                             1
    #define   MSK32Vpp_rst_dv_ocsc                                0x08000000

    #define     BA_Vpp_rst_dv_dither                           0x000F
    #define     B16Vpp_rst_dv_dither                           0x000E
    #define   LSb32Vpp_rst_dv_dither                              28
    #define   LSb16Vpp_rst_dv_dither                              12
    #define       bVpp_rst_dv_dither                           1
    #define   MSK32Vpp_rst_dv_dither                              0x10000000

    #define     BA_Vpp_rst_dv_mdata_over_HDMI                  0x000F
    #define     B16Vpp_rst_dv_mdata_over_HDMI                  0x000E
    #define   LSb32Vpp_rst_dv_mdata_over_HDMI                     29
    #define   LSb16Vpp_rst_dv_mdata_over_HDMI                     13
    #define       bVpp_rst_dv_mdata_over_HDMI                  1
    #define   MSK32Vpp_rst_dv_mdata_over_HDMI                     0x20000000

    #define     BA_Vpp_rst_ldc                                 0x000F
    #define     B16Vpp_rst_ldc                                 0x000E
    #define   LSb32Vpp_rst_ldc                                    30
    #define   LSb16Vpp_rst_ldc                                    14
    #define       bVpp_rst_ldc                                 1
    #define   MSK32Vpp_rst_ldc                                    0x40000000

    #define     BA_Vpp_rst_gamma                               0x000F
    #define     B16Vpp_rst_gamma                               0x000E
    #define   LSb32Vpp_rst_gamma                                  31
    #define   LSb16Vpp_rst_gamma                                  15
    #define       bVpp_rst_gamma                               1
    #define   MSK32Vpp_rst_gamma                                  0x80000000
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_rst1                                    0x0010

    #define     BA_Vpp_rst1_vitmo_mainpl                       0x0010
    #define     B16Vpp_rst1_vitmo_mainpl                       0x0010
    #define   LSb32Vpp_rst1_vitmo_mainpl                          0
    #define   LSb16Vpp_rst1_vitmo_mainpl                          0
    #define       bVpp_rst1_vitmo_mainpl                       1
    #define   MSK32Vpp_rst1_vitmo_mainpl                          0x00000001

    #define     BA_Vpp_rst1_gitm_gfx0                          0x0010
    #define     B16Vpp_rst1_gitm_gfx0                          0x0010
    #define   LSb32Vpp_rst1_gitm_gfx0                             1
    #define   LSb16Vpp_rst1_gitm_gfx0                             1
    #define       bVpp_rst1_gitm_gfx0                          1
    #define   MSK32Vpp_rst1_gitm_gfx0                             0x00000002

    #define     BA_Vpp_rst1_gitm_gfx1                          0x0010
    #define     B16Vpp_rst1_gitm_gfx1                          0x0010
    #define   LSb32Vpp_rst1_gitm_gfx1                             2
    #define   LSb16Vpp_rst1_gitm_gfx1                             2
    #define       bVpp_rst1_gitm_gfx1                          1
    #define   MSK32Vpp_rst1_gitm_gfx1                             0x00000004

    #define     BA_Vpp_rst1_ovpscl_sbrst_Y                     0x0010
    #define     B16Vpp_rst1_ovpscl_sbrst_Y                     0x0010
    #define   LSb32Vpp_rst1_ovpscl_sbrst_Y                        3
    #define   LSb16Vpp_rst1_ovpscl_sbrst_Y                        3
    #define       bVpp_rst1_ovpscl_sbrst_Y                     1
    #define   MSK32Vpp_rst1_ovpscl_sbrst_Y                        0x00000008

    #define     BA_Vpp_rst1_ovpscl_sbrst_UV                    0x0010
    #define     B16Vpp_rst1_ovpscl_sbrst_UV                    0x0010
    #define   LSb32Vpp_rst1_ovpscl_sbrst_UV                       4
    #define   LSb16Vpp_rst1_ovpscl_sbrst_UV                       4
    #define       bVpp_rst1_ovpscl_sbrst_UV                    1
    #define   MSK32Vpp_rst1_ovpscl_sbrst_UV                       0x00000010

    #define     BA_Vpp_rst1_ngptv                              0x0010
    #define     B16Vpp_rst1_ngptv                              0x0010
    #define   LSb32Vpp_rst1_ngptv                                 5
    #define   LSb16Vpp_rst1_ngptv                                 5
    #define       bVpp_rst1_ngptv                              1
    #define   MSK32Vpp_rst1_ngptv                                 0x00000020

    #define     BA_Vpp_rst1_ovpScl_ngptv                       0x0010
    #define     B16Vpp_rst1_ovpScl_ngptv                       0x0010
    #define   LSb32Vpp_rst1_ovpScl_ngptv                          6
    #define   LSb16Vpp_rst1_ovpScl_ngptv                          6
    #define       bVpp_rst1_ovpScl_ngptv                       1
    #define   MSK32Vpp_rst1_ovpScl_ngptv                          0x00000040

    #define     BA_Vpp_rst1_mainpl_vdcm                        0x0010
    #define     B16Vpp_rst1_mainpl_vdcm                        0x0010
    #define   LSb32Vpp_rst1_mainpl_vdcm                           7
    #define   LSb16Vpp_rst1_mainpl_vdcm                           7
    #define       bVpp_rst1_mainpl_vdcm                        1
    #define   MSK32Vpp_rst1_mainpl_vdcm                           0x00000080

    #define     BA_Vpp_rst1_mainpl_vitm_vdcm_linebuff          0x0011
    #define     B16Vpp_rst1_mainpl_vitm_vdcm_linebuff          0x0010
    #define   LSb32Vpp_rst1_mainpl_vitm_vdcm_linebuff             8
    #define   LSb16Vpp_rst1_mainpl_vitm_vdcm_linebuff             8
    #define       bVpp_rst1_mainpl_vitm_vdcm_linebuff          1
    #define   MSK32Vpp_rst1_mainpl_vitm_vdcm_linebuff             0x00000100

    #define     BA_Vpp_rst1_detileups420_pipPl                 0x0011
    #define     B16Vpp_rst1_detileups420_pipPl                 0x0010
    #define   LSb32Vpp_rst1_detileups420_pipPl                    9
    #define   LSb16Vpp_rst1_detileups420_pipPl                    9
    #define       bVpp_rst1_detileups420_pipPl                 1
    #define   MSK32Vpp_rst1_detileups420_pipPl                    0x00000200

    #define     BA_Vpp_rst1_memlb_ups420_pipPl                 0x0011
    #define     B16Vpp_rst1_memlb_ups420_pipPl                 0x0010
    #define   LSb32Vpp_rst1_memlb_ups420_pipPl                    10
    #define   LSb16Vpp_rst1_memlb_ups420_pipPl                    10
    #define       bVpp_rst1_memlb_ups420_pipPl                 1
    #define   MSK32Vpp_rst1_memlb_ups420_pipPl                    0x00000400

    #define     BA_Vpp_rst1_gfx0pl_gdcm                        0x0011
    #define     B16Vpp_rst1_gfx0pl_gdcm                        0x0010
    #define   LSb32Vpp_rst1_gfx0pl_gdcm                           11
    #define   LSb16Vpp_rst1_gfx0pl_gdcm                           11
    #define       bVpp_rst1_gfx0pl_gdcm                        1
    #define   MSK32Vpp_rst1_gfx0pl_gdcm                           0x00000800

    #define     BA_Vpp_rst1_gfx1pl_gdcm                        0x0011
    #define     B16Vpp_rst1_gfx1pl_gdcm                        0x0010
    #define   LSb32Vpp_rst1_gfx1pl_gdcm                           12
    #define   LSb16Vpp_rst1_gfx1pl_gdcm                           12
    #define       bVpp_rst1_gfx1pl_gdcm                        1
    #define   MSK32Vpp_rst1_gfx1pl_gdcm                           0x00001000

    #define     BA_Vpp_rst1_memdlb_ups420                      0x0011
    #define     B16Vpp_rst1_memdlb_ups420                      0x0010
    #define   LSb32Vpp_rst1_memdlb_ups420                         13
    #define   LSb16Vpp_rst1_memdlb_ups420                         13
    #define       bVpp_rst1_memdlb_ups420                      1
    #define   MSK32Vpp_rst1_memdlb_ups420                         0x00002000

    #define     BA_Vpp_rst1_memdlb_ups420_pipPl                0x0011
    #define     B16Vpp_rst1_memdlb_ups420_pipPl                0x0010
    #define   LSb32Vpp_rst1_memdlb_ups420_pipPl                   14
    #define   LSb16Vpp_rst1_memdlb_ups420_pipPl                   14
    #define       bVpp_rst1_memdlb_ups420_pipPl                1
    #define   MSK32Vpp_rst1_memdlb_ups420_pipPl                   0x00004000

    #define     BA_Vpp_rst1_mainpl_ovpSclwrap                  0x0011
    #define     B16Vpp_rst1_mainpl_ovpSclwrap                  0x0010
    #define   LSb32Vpp_rst1_mainpl_ovpSclwrap                     15
    #define   LSb16Vpp_rst1_mainpl_ovpSclwrap                     15
    #define       bVpp_rst1_mainpl_ovpSclwrap                  1
    #define   MSK32Vpp_rst1_mainpl_ovpSclwrap                     0x00008000

    #define     BA_Vpp_rst1_mainpl_ovpSclY                     0x0012
    #define     B16Vpp_rst1_mainpl_ovpSclY                     0x0012
    #define   LSb32Vpp_rst1_mainpl_ovpSclY                        16
    #define   LSb16Vpp_rst1_mainpl_ovpSclY                        0
    #define       bVpp_rst1_mainpl_ovpSclY                     1
    #define   MSK32Vpp_rst1_mainpl_ovpSclY                        0x00010000

    #define     BA_Vpp_rst1_mainpl_ovpSclUV                    0x0012
    #define     B16Vpp_rst1_mainpl_ovpSclUV                    0x0012
    #define   LSb32Vpp_rst1_mainpl_ovpSclUV                       17
    #define   LSb16Vpp_rst1_mainpl_ovpSclUV                       1
    #define       bVpp_rst1_mainpl_ovpSclUV                    1
    #define   MSK32Vpp_rst1_mainpl_ovpSclUV                       0x00020000

    #define     BA_Vpp_rst1_mainpl_ovpSclY_memlb               0x0012
    #define     B16Vpp_rst1_mainpl_ovpSclY_memlb               0x0012
    #define   LSb32Vpp_rst1_mainpl_ovpSclY_memlb                  18
    #define   LSb16Vpp_rst1_mainpl_ovpSclY_memlb                  2
    #define       bVpp_rst1_mainpl_ovpSclY_memlb               1
    #define   MSK32Vpp_rst1_mainpl_ovpSclY_memlb                  0x00040000

    #define     BA_Vpp_rst1_mainpl_ovpSclUV_memlb              0x0012
    #define     B16Vpp_rst1_mainpl_ovpSclUV_memlb              0x0012
    #define   LSb32Vpp_rst1_mainpl_ovpSclUV_memlb                 19
    #define   LSb16Vpp_rst1_mainpl_ovpSclUV_memlb                 3
    #define       bVpp_rst1_mainpl_ovpSclUV_memlb              1
    #define   MSK32Vpp_rst1_mainpl_ovpSclUV_memlb                 0x00080000

    #define     BA_Vpp_rst1_mainpl_hdrlut                      0x0012
    #define     B16Vpp_rst1_mainpl_hdrlut                      0x0012
    #define   LSb32Vpp_rst1_mainpl_hdrlut                         20
    #define   LSb16Vpp_rst1_mainpl_hdrlut                         4
    #define       bVpp_rst1_mainpl_hdrlut                      1
    #define   MSK32Vpp_rst1_mainpl_hdrlut                         0x00100000

    #define     BA_Vpp_rst1_gfx0_hdrlut                        0x0012
    #define     B16Vpp_rst1_gfx0_hdrlut                        0x0012
    #define   LSb32Vpp_rst1_gfx0_hdrlut                           21
    #define   LSb16Vpp_rst1_gfx0_hdrlut                           5
    #define       bVpp_rst1_gfx0_hdrlut                        1
    #define   MSK32Vpp_rst1_gfx0_hdrlut                           0x00200000

    #define     BA_Vpp_rst1_gfx1_hdrlut                        0x0012
    #define     B16Vpp_rst1_gfx1_hdrlut                        0x0012
    #define   LSb32Vpp_rst1_gfx1_hdrlut                           22
    #define   LSb16Vpp_rst1_gfx1_hdrlut                           6
    #define       bVpp_rst1_gfx1_hdrlut                        1
    #define   MSK32Vpp_rst1_gfx1_hdrlut                           0x00400000

    #define     BA_Vpp_rst1_mainPl_car                         0x0012
    #define     B16Vpp_rst1_mainPl_car                         0x0012
    #define   LSb32Vpp_rst1_mainPl_car                            23
    #define   LSb16Vpp_rst1_mainPl_car                            7
    #define       bVpp_rst1_mainPl_car                         1
    #define   MSK32Vpp_rst1_mainPl_car                            0x00800000

    #define     BA_Vpp_rst1_mainPl_detEE                       0x0013
    #define     B16Vpp_rst1_mainPl_detEE                       0x0012
    #define   LSb32Vpp_rst1_mainPl_detEE                          24
    #define   LSb16Vpp_rst1_mainPl_detEE                          8
    #define       bVpp_rst1_mainPl_detEE                       1
    #define   MSK32Vpp_rst1_mainPl_detEE                          0x01000000

    #define     BA_Vpp_rst1_mainPl_EETop                       0x0013
    #define     B16Vpp_rst1_mainPl_EETop                       0x0012
    #define   LSb32Vpp_rst1_mainPl_EETop                          25
    #define   LSb16Vpp_rst1_mainPl_EETop                          9
    #define       bVpp_rst1_mainPl_EETop                       1
    #define   MSK32Vpp_rst1_mainPl_EETop                          0x02000000

    #define     BA_Vpp_rst1_mainPl_cmu                         0x0013
    #define     B16Vpp_rst1_mainPl_cmu                         0x0012
    #define   LSb32Vpp_rst1_mainPl_cmu                            26
    #define   LSb16Vpp_rst1_mainPl_cmu                            10
    #define       bVpp_rst1_mainPl_cmu                         1
    #define   MSK32Vpp_rst1_mainPl_cmu                            0x04000000
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_rst2                                    0x0014

    #define     BA_Vpp_rst2_oclkx_hdmi                         0x0014
    #define     B16Vpp_rst2_oclkx_hdmi                         0x0014
    #define   LSb32Vpp_rst2_oclkx_hdmi                            0
    #define   LSb16Vpp_rst2_oclkx_hdmi                            0
    #define       bVpp_rst2_oclkx_hdmi                         1
    #define   MSK32Vpp_rst2_oclkx_hdmi                            0x00000001
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_OVERLAY_MUX                             0x0018

    #define     BA_Vpp_OVERLAY_MUX_MAIN                        0x0018
    #define     B16Vpp_OVERLAY_MUX_MAIN                        0x0018
    #define   LSb32Vpp_OVERLAY_MUX_MAIN                           0
    #define   LSb16Vpp_OVERLAY_MUX_MAIN                           0
    #define       bVpp_OVERLAY_MUX_MAIN                        1
    #define   MSK32Vpp_OVERLAY_MUX_MAIN                           0x00000001

    #define     BA_Vpp_OVERLAY_MUX_GFX1                        0x0018
    #define     B16Vpp_OVERLAY_MUX_GFX1                        0x0018
    #define   LSb32Vpp_OVERLAY_MUX_GFX1                           1
    #define   LSb16Vpp_OVERLAY_MUX_GFX1                           1
    #define       bVpp_OVERLAY_MUX_GFX1                        1
    #define   MSK32Vpp_OVERLAY_MUX_GFX1                           0x00000002

    #define     BA_Vpp_OVERLAY_MUX_GFX2                        0x0018
    #define     B16Vpp_OVERLAY_MUX_GFX2                        0x0018
    #define   LSb32Vpp_OVERLAY_MUX_GFX2                           2
    #define   LSb16Vpp_OVERLAY_MUX_GFX2                           2
    #define       bVpp_OVERLAY_MUX_GFX2                        1
    #define   MSK32Vpp_OVERLAY_MUX_GFX2                           0x00000004
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_MAIN_OV_FXD_IMG                         0x001C

    #define     BA_Vpp_MAIN_OV_FXD_IMG_REG                     0x001C
    #define     B16Vpp_MAIN_OV_FXD_IMG_REG                     0x001C
    #define   LSb32Vpp_MAIN_OV_FXD_IMG_REG                        0
    #define   LSb16Vpp_MAIN_OV_FXD_IMG_REG                        0
    #define       bVpp_MAIN_OV_FXD_IMG_REG                     32
    #define   MSK32Vpp_MAIN_OV_FXD_IMG_REG                        0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_GFX1_OV_FXD_IMG                         0x0020

    #define     BA_Vpp_GFX1_OV_FXD_IMG_REG                     0x0020
    #define     B16Vpp_GFX1_OV_FXD_IMG_REG                     0x0020
    #define   LSb32Vpp_GFX1_OV_FXD_IMG_REG                        0
    #define   LSb16Vpp_GFX1_OV_FXD_IMG_REG                        0
    #define       bVpp_GFX1_OV_FXD_IMG_REG                     32
    #define   MSK32Vpp_GFX1_OV_FXD_IMG_REG                        0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_GFX2_OV_FXD_IMG                         0x0024

    #define     BA_Vpp_GFX2_OV_FXD_IMG_REG                     0x0024
    #define     B16Vpp_GFX2_OV_FXD_IMG_REG                     0x0024
    #define   LSb32Vpp_GFX2_OV_FXD_IMG_REG                        0
    #define   LSb16Vpp_GFX2_OV_FXD_IMG_REG                        0
    #define       bVpp_GFX2_OV_FXD_IMG_REG                     32
    #define   MSK32Vpp_GFX2_OV_FXD_IMG_REG                        0xFFFFFFFF
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_GFX0                                    0x0400
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_GFX1                                    0x1000
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_vidpl                                   0x1C00
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_tgWrap0                                 0x3400
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_cpcb0Clk                                0x34EC
    ///////////////////////////////////////////////////////////
    #define     RA_Vpp_asdClk                                  0x34F0
    ///////////////////////////////////////////////////////////

    typedef struct SIE_Vpp {
    ///////////////////////////////////////////////////////////
    #define   GET32Vpp_CTRL_GFX1_PLANE_CG_EN(r32)              _BFGET_(r32, 0, 0)
    #define   SET32Vpp_CTRL_GFX1_PLANE_CG_EN(r32,v)            _BFSET_(r32, 0, 0,v)
    #define   GET16Vpp_CTRL_GFX1_PLANE_CG_EN(r16)              _BFGET_(r16, 0, 0)
    #define   SET16Vpp_CTRL_GFX1_PLANE_CG_EN(r16,v)            _BFSET_(r16, 0, 0,v)

    #define   GET32Vpp_CTRL_GFX2_PLANE_CG_EN(r32)              _BFGET_(r32, 1, 1)
    #define   SET32Vpp_CTRL_GFX2_PLANE_CG_EN(r32,v)            _BFSET_(r32, 1, 1,v)
    #define   GET16Vpp_CTRL_GFX2_PLANE_CG_EN(r16)              _BFGET_(r16, 1, 1)
    #define   SET16Vpp_CTRL_GFX2_PLANE_CG_EN(r16,v)            _BFSET_(r16, 1, 1,v)

    #define   GET32Vpp_CTRL_auto_flush_en(r32)                 _BFGET_(r32, 2, 2)
    #define   SET32Vpp_CTRL_auto_flush_en(r32,v)               _BFSET_(r32, 2, 2,v)
    #define   GET16Vpp_CTRL_auto_flush_en(r16)                 _BFGET_(r16, 2, 2)
    #define   SET16Vpp_CTRL_auto_flush_en(r16,v)               _BFSET_(r16, 2, 2,v)

    #define   GET32Vpp_CTRL_MainPl_CG_En(r32)                  _BFGET_(r32, 3, 3)
    #define   SET32Vpp_CTRL_MainPl_CG_En(r32,v)                _BFSET_(r32, 3, 3,v)
    #define   GET16Vpp_CTRL_MainPl_CG_En(r16)                  _BFGET_(r16, 3, 3)
    #define   SET16Vpp_CTRL_MainPl_CG_En(r16,v)                _BFSET_(r16, 3, 3,v)

    #define     w32Vpp_CTRL                                    {\
            UNSG32 uCTRL_GFX1_PLANE_CG_EN                      :  1;\
            UNSG32 uCTRL_GFX2_PLANE_CG_EN                      :  1;\
            UNSG32 uCTRL_auto_flush_en                         :  1;\
            UNSG32 uCTRL_MainPl_CG_En                          :  1;\
            UNSG32 RSVDx0_b4                                   : 28;\
          }
    union { UNSG32 u32Vpp_CTRL;
            struct w32Vpp_CTRL;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Vpp_CPCB0_PL_EN_Main(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32Vpp_CPCB0_PL_EN_Main(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16Vpp_CPCB0_PL_EN_Main(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16Vpp_CPCB0_PL_EN_Main(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32Vpp_CPCB0_PL_EN_PIP(r32)                    _BFGET_(r32, 1, 1)
    #define   SET32Vpp_CPCB0_PL_EN_PIP(r32,v)                  _BFSET_(r32, 1, 1,v)
    #define   GET16Vpp_CPCB0_PL_EN_PIP(r16)                    _BFGET_(r16, 1, 1)
    #define   SET16Vpp_CPCB0_PL_EN_PIP(r16,v)                  _BFSET_(r16, 1, 1,v)

    #define   GET32Vpp_CPCB0_PL_EN_GFX1(r32)                   _BFGET_(r32, 2, 2)
    #define   SET32Vpp_CPCB0_PL_EN_GFX1(r32,v)                 _BFSET_(r32, 2, 2,v)
    #define   GET16Vpp_CPCB0_PL_EN_GFX1(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16Vpp_CPCB0_PL_EN_GFX1(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define   GET32Vpp_CPCB0_PL_EN_GFX2(r32)                   _BFGET_(r32, 3, 3)
    #define   SET32Vpp_CPCB0_PL_EN_GFX2(r32,v)                 _BFSET_(r32, 3, 3,v)
    #define   GET16Vpp_CPCB0_PL_EN_GFX2(r16)                   _BFGET_(r16, 3, 3)
    #define   SET16Vpp_CPCB0_PL_EN_GFX2(r16,v)                 _BFSET_(r16, 3, 3,v)

    #define   GET32Vpp_CPCB0_PL_EN_Cursor(r32)                 _BFGET_(r32, 4, 4)
    #define   SET32Vpp_CPCB0_PL_EN_Cursor(r32,v)               _BFSET_(r32, 4, 4,v)
    #define   GET16Vpp_CPCB0_PL_EN_Cursor(r16)                 _BFGET_(r16, 4, 4)
    #define   SET16Vpp_CPCB0_PL_EN_Cursor(r16,v)               _BFSET_(r16, 4, 4,v)

    #define     w32Vpp_CPCB0_PL_EN                             {\
            UNSG32 uCPCB0_PL_EN_Main                           :  1;\
            UNSG32 uCPCB0_PL_EN_PIP                            :  1;\
            UNSG32 uCPCB0_PL_EN_GFX1                           :  1;\
            UNSG32 uCPCB0_PL_EN_GFX2                           :  1;\
            UNSG32 uCPCB0_PL_EN_Cursor                         :  1;\
            UNSG32 RSVDx4_b5                                   : 27;\
          }
    union { UNSG32 u32Vpp_CPCB0_PL_EN;
            struct w32Vpp_CPCB0_PL_EN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Vpp_VPP_INTR_EN_vppVBI(r32)                 _BFGET_(r32, 0, 0)
    #define   SET32Vpp_VPP_INTR_EN_vppVBI(r32,v)               _BFSET_(r32, 0, 0,v)
    #define   GET16Vpp_VPP_INTR_EN_vppVBI(r16)                 _BFGET_(r16, 0, 0)
    #define   SET16Vpp_VPP_INTR_EN_vppVBI(r16,v)               _BFSET_(r16, 0, 0,v)

    #define   GET32Vpp_VPP_INTR_EN_vppOUT0(r32)                _BFGET_(r32, 1, 1)
    #define   SET32Vpp_VPP_INTR_EN_vppOUT0(r32,v)              _BFSET_(r32, 1, 1,v)
    #define   GET16Vpp_VPP_INTR_EN_vppOUT0(r16)                _BFGET_(r16, 1, 1)
    #define   SET16Vpp_VPP_INTR_EN_vppOUT0(r16,v)              _BFSET_(r16, 1, 1,v)

    #define   GET32Vpp_VPP_INTR_EN_vppOUT1(r32)                _BFGET_(r32, 2, 2)
    #define   SET32Vpp_VPP_INTR_EN_vppOUT1(r32,v)              _BFSET_(r32, 2, 2,v)
    #define   GET16Vpp_VPP_INTR_EN_vppOUT1(r16)                _BFGET_(r16, 2, 2)
    #define   SET16Vpp_VPP_INTR_EN_vppOUT1(r16,v)              _BFSET_(r16, 2, 2,v)

    #define   GET32Vpp_VPP_INTR_EN_vppOUT2(r32)                _BFGET_(r32, 3, 3)
    #define   SET32Vpp_VPP_INTR_EN_vppOUT2(r32,v)              _BFSET_(r32, 3, 3,v)
    #define   GET16Vpp_VPP_INTR_EN_vppOUT2(r16)                _BFGET_(r16, 3, 3)
    #define   SET16Vpp_VPP_INTR_EN_vppOUT2(r16,v)              _BFSET_(r16, 3, 3,v)

    #define   GET32Vpp_VPP_INTR_EN_vppOUT3(r32)                _BFGET_(r32, 4, 4)
    #define   SET32Vpp_VPP_INTR_EN_vppOUT3(r32,v)              _BFSET_(r32, 4, 4,v)
    #define   GET16Vpp_VPP_INTR_EN_vppOUT3(r16)                _BFGET_(r16, 4, 4)
    #define   SET16Vpp_VPP_INTR_EN_vppOUT3(r16,v)              _BFSET_(r16, 4, 4,v)

    #define   GET32Vpp_VPP_INTR_EN_vppVDE0(r32)                _BFGET_(r32, 5, 5)
    #define   SET32Vpp_VPP_INTR_EN_vppVDE0(r32,v)              _BFSET_(r32, 5, 5,v)
    #define   GET16Vpp_VPP_INTR_EN_vppVDE0(r16)                _BFGET_(r16, 5, 5)
    #define   SET16Vpp_VPP_INTR_EN_vppVDE0(r16,v)              _BFSET_(r16, 5, 5,v)

    #define   GET32Vpp_VPP_INTR_EN_bcmInvalidReq(r32)          _BFGET_(r32, 6, 6)
    #define   SET32Vpp_VPP_INTR_EN_bcmInvalidReq(r32,v)        _BFSET_(r32, 6, 6,v)
    #define   GET16Vpp_VPP_INTR_EN_bcmInvalidReq(r16)          _BFGET_(r16, 6, 6)
    #define   SET16Vpp_VPP_INTR_EN_bcmInvalidReq(r16,v)        _BFSET_(r16, 6, 6,v)

    #define   GET32Vpp_VPP_INTR_EN_vppOUT4(r32)                _BFGET_(r32, 7, 7)
    #define   SET32Vpp_VPP_INTR_EN_vppOUT4(r32,v)              _BFSET_(r32, 7, 7,v)
    #define   GET16Vpp_VPP_INTR_EN_vppOUT4(r16)                _BFGET_(r16, 7, 7)
    #define   SET16Vpp_VPP_INTR_EN_vppOUT4(r16,v)              _BFSET_(r16, 7, 7,v)

    #define   GET32Vpp_VPP_INTR_EN_vppOUT5(r32)                _BFGET_(r32, 8, 8)
    #define   SET32Vpp_VPP_INTR_EN_vppOUT5(r32,v)              _BFSET_(r32, 8, 8,v)
    #define   GET16Vpp_VPP_INTR_EN_vppOUT5(r16)                _BFGET_(r16, 8, 8)
    #define   SET16Vpp_VPP_INTR_EN_vppOUT5(r16,v)              _BFSET_(r16, 8, 8,v)

    #define   GET32Vpp_VPP_INTR_EN_vppOUT6(r32)                _BFGET_(r32, 9, 9)
    #define   SET32Vpp_VPP_INTR_EN_vppOUT6(r32,v)              _BFSET_(r32, 9, 9,v)
    #define   GET16Vpp_VPP_INTR_EN_vppOUT6(r16)                _BFGET_(r16, 9, 9)
    #define   SET16Vpp_VPP_INTR_EN_vppOUT6(r16,v)              _BFSET_(r16, 9, 9,v)

    #define   GET32Vpp_VPP_INTR_EN_vppOUT7(r32)                _BFGET_(r32,10,10)
    #define   SET32Vpp_VPP_INTR_EN_vppOUT7(r32,v)              _BFSET_(r32,10,10,v)
    #define   GET16Vpp_VPP_INTR_EN_vppOUT7(r16)                _BFGET_(r16,10,10)
    #define   SET16Vpp_VPP_INTR_EN_vppOUT7(r16,v)              _BFSET_(r16,10,10,v)

    #define   GET32Vpp_VPP_INTR_EN_vppOUT8(r32)                _BFGET_(r32,11,11)
    #define   SET32Vpp_VPP_INTR_EN_vppOUT8(r32,v)              _BFSET_(r32,11,11,v)
    #define   GET16Vpp_VPP_INTR_EN_vppOUT8(r16)                _BFGET_(r16,11,11)
    #define   SET16Vpp_VPP_INTR_EN_vppOUT8(r16,v)              _BFSET_(r16,11,11,v)

    #define   GET32Vpp_VPP_INTR_EN_vppOUT9(r32)                _BFGET_(r32,12,12)
    #define   SET32Vpp_VPP_INTR_EN_vppOUT9(r32,v)              _BFSET_(r32,12,12,v)
    #define   GET16Vpp_VPP_INTR_EN_vppOUT9(r16)                _BFGET_(r16,12,12)
    #define   SET16Vpp_VPP_INTR_EN_vppOUT9(r16,v)              _BFSET_(r16,12,12,v)

    #define   GET32Vpp_VPP_INTR_EN_vppOUT10(r32)               _BFGET_(r32,13,13)
    #define   SET32Vpp_VPP_INTR_EN_vppOUT10(r32,v)             _BFSET_(r32,13,13,v)
    #define   GET16Vpp_VPP_INTR_EN_vppOUT10(r16)               _BFGET_(r16,13,13)
    #define   SET16Vpp_VPP_INTR_EN_vppOUT10(r16,v)             _BFSET_(r16,13,13,v)

    #define     w32Vpp_VPP_INTR_EN                             {\
            UNSG32 uVPP_INTR_EN_vppVBI                         :  1;\
            UNSG32 uVPP_INTR_EN_vppOUT0                        :  1;\
            UNSG32 uVPP_INTR_EN_vppOUT1                        :  1;\
            UNSG32 uVPP_INTR_EN_vppOUT2                        :  1;\
            UNSG32 uVPP_INTR_EN_vppOUT3                        :  1;\
            UNSG32 uVPP_INTR_EN_vppVDE0                        :  1;\
            UNSG32 uVPP_INTR_EN_bcmInvalidReq                  :  1;\
            UNSG32 uVPP_INTR_EN_vppOUT4                        :  1;\
            UNSG32 uVPP_INTR_EN_vppOUT5                        :  1;\
            UNSG32 uVPP_INTR_EN_vppOUT6                        :  1;\
            UNSG32 uVPP_INTR_EN_vppOUT7                        :  1;\
            UNSG32 uVPP_INTR_EN_vppOUT8                        :  1;\
            UNSG32 uVPP_INTR_EN_vppOUT9                        :  1;\
            UNSG32 uVPP_INTR_EN_vppOUT10                       :  1;\
            UNSG32 RSVDx8_b14                                  : 18;\
          }
    union { UNSG32 u32Vpp_VPP_INTR_EN;
            struct w32Vpp_VPP_INTR_EN;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Vpp_rst_be_ss(r32)                          _BFGET_(r32, 0, 0)
    #define   SET32Vpp_rst_be_ss(r32,v)                        _BFSET_(r32, 0, 0,v)
    #define   GET16Vpp_rst_be_ss(r16)                          _BFGET_(r16, 0, 0)
    #define   SET16Vpp_rst_be_ss(r16,v)                        _BFSET_(r16, 0, 0,v)

    #define   GET32Vpp_rst_video_enc(r32)                      _BFGET_(r32, 1, 1)
    #define   SET32Vpp_rst_video_enc(r32,v)                    _BFSET_(r32, 1, 1,v)
    #define   GET16Vpp_rst_video_enc(r16)                      _BFGET_(r16, 1, 1)
    #define   SET16Vpp_rst_video_enc(r16,v)                    _BFSET_(r16, 1, 1,v)

    #define   GET32Vpp_rst_asd(r32)                            _BFGET_(r32, 2, 2)
    #define   SET32Vpp_rst_asd(r32,v)                          _BFSET_(r32, 2, 2,v)
    #define   GET16Vpp_rst_asd(r16)                            _BFGET_(r16, 2, 2)
    #define   SET16Vpp_rst_asd(r16,v)                          _BFSET_(r16, 2, 2,v)

    #define   GET32Vpp_rst_hdmi_tx(r32)                        _BFGET_(r32, 3, 3)
    #define   SET32Vpp_rst_hdmi_tx(r32,v)                      _BFSET_(r32, 3, 3,v)
    #define   GET16Vpp_rst_hdmi_tx(r16)                        _BFGET_(r16, 3, 3)
    #define   SET16Vpp_rst_hdmi_tx(r16,v)                      _BFSET_(r16, 3, 3,v)

    #define   GET32Vpp_rst_dns422_420(r32)                     _BFGET_(r32, 4, 4)
    #define   SET32Vpp_rst_dns422_420(r32,v)                   _BFSET_(r32, 4, 4,v)
    #define   GET16Vpp_rst_dns422_420(r16)                     _BFGET_(r16, 4, 4)
    #define   SET16Vpp_rst_dns422_420(r16,v)                   _BFSET_(r16, 4, 4,v)

    #define   GET32Vpp_rst_sbclk_adpscl(r32)                   _BFGET_(r32, 5, 5)
    #define   SET32Vpp_rst_sbclk_adpscl(r32,v)                 _BFSET_(r32, 5, 5,v)
    #define   GET16Vpp_rst_sbclk_adpscl(r16)                   _BFGET_(r16, 5, 5)
    #define   SET16Vpp_rst_sbclk_adpscl(r16,v)                 _BFSET_(r16, 5, 5,v)

    #define   GET32Vpp_rst_sbclk_gfx0(r32)                     _BFGET_(r32, 6, 6)
    #define   SET32Vpp_rst_sbclk_gfx0(r32,v)                   _BFSET_(r32, 6, 6,v)
    #define   GET16Vpp_rst_sbclk_gfx0(r16)                     _BFGET_(r16, 6, 6)
    #define   SET16Vpp_rst_sbclk_gfx0(r16,v)                   _BFSET_(r16, 6, 6,v)

    #define   GET32Vpp_rst_sbclk_gfx1(r32)                     _BFGET_(r32, 7, 7)
    #define   SET32Vpp_rst_sbclk_gfx1(r32,v)                   _BFSET_(r32, 7, 7,v)
    #define   GET16Vpp_rst_sbclk_gfx1(r16)                     _BFGET_(r16, 7, 7)
    #define   SET16Vpp_rst_sbclk_gfx1(r16,v)                   _BFSET_(r16, 7, 7,v)

    #define   GET32Vpp_rst_adp1dscl(r32)                       _BFGET_(r32, 8, 8)
    #define   SET32Vpp_rst_adp1dscl(r32,v)                     _BFSET_(r32, 8, 8,v)
    #define   GET16Vpp_rst_adp1dscl(r16)                       _BFGET_(r16, 8, 8)
    #define   SET16Vpp_rst_adp1dscl(r16,v)                     _BFSET_(r16, 8, 8,v)

    #define   GET32Vpp_rst_gfx0Scl(r32)                        _BFGET_(r32, 9, 9)
    #define   SET32Vpp_rst_gfx0Scl(r32,v)                      _BFSET_(r32, 9, 9,v)
    #define   GET16Vpp_rst_gfx0Scl(r16)                        _BFGET_(r16, 9, 9)
    #define   SET16Vpp_rst_gfx0Scl(r16,v)                      _BFSET_(r16, 9, 9,v)

    #define   GET32Vpp_rst_gfx1Scl(r32)                        _BFGET_(r32,10,10)
    #define   SET32Vpp_rst_gfx1Scl(r32,v)                      _BFSET_(r32,10,10,v)
    #define   GET16Vpp_rst_gfx1Scl(r16)                        _BFGET_(r16,10,10)
    #define   SET16Vpp_rst_gfx1Scl(r16,v)                      _BFSET_(r16,10,10,v)

    #define   GET32Vpp_rst_detileups420(r32)                   _BFGET_(r32,11,11)
    #define   SET32Vpp_rst_detileups420(r32,v)                 _BFSET_(r32,11,11,v)
    #define   GET16Vpp_rst_detileups420(r16)                   _BFGET_(r16,11,11)
    #define   SET16Vpp_rst_detileups420(r16,v)                 _BFSET_(r16,11,11,v)

    #define   GET32Vpp_rst_memlb_ups420(r32)                   _BFGET_(r32,12,12)
    #define   SET32Vpp_rst_memlb_ups420(r32,v)                 _BFSET_(r32,12,12,v)
    #define   GET16Vpp_rst_memlb_ups420(r16)                   _BFGET_(r16,12,12)
    #define   SET16Vpp_rst_memlb_ups420(r16,v)                 _BFSET_(r16,12,12,v)

    #define   GET32Vpp_rst_ups420_sp(r32)                      _BFGET_(r32,13,13)
    #define   SET32Vpp_rst_ups420_sp(r32,v)                    _BFSET_(r32,13,13,v)
    #define   GET16Vpp_rst_ups420_sp(r16)                      _BFGET_(r16,13,13)
    #define   SET16Vpp_rst_ups420_sp(r16,v)                    _BFSET_(r16,13,13,v)

    #define   GET32Vpp_rst_vmx_vm(r32)                         _BFGET_(r32,14,14)
    #define   SET32Vpp_rst_vmx_vm(r32,v)                       _BFSET_(r32,14,14,v)
    #define   GET16Vpp_rst_vmx_vm(r16)                         _BFGET_(r16,14,14)
    #define   SET16Vpp_rst_vmx_vm(r16,v)                       _BFSET_(r16,14,14,v)

    #define   GET32Vpp_rst_vopClk(r32)                         _BFGET_(r32,15,15)
    #define   SET32Vpp_rst_vopClk(r32,v)                       _BFSET_(r32,15,15,v)
    #define   GET16Vpp_rst_vopClk(r16)                         _BFGET_(r16,15,15)
    #define   SET16Vpp_rst_vopClk(r16,v)                       _BFSET_(r16,15,15,v)

    #define   GET32Vpp_rst_gtclk(r32)                          _BFGET_(r32,16,16)
    #define   SET32Vpp_rst_gtclk(r32,v)                        _BFSET_(r32,16,16,v)
    #define   GET16Vpp_rst_gtclk(r16)                          _BFGET_(r16, 0, 0)
    #define   SET16Vpp_rst_gtclk(r16,v)                        _BFSET_(r16, 0, 0,v)

    #define   GET32Vpp_rst_detileups420_elpipe(r32)            _BFGET_(r32,17,17)
    #define   SET32Vpp_rst_detileups420_elpipe(r32,v)          _BFSET_(r32,17,17,v)
    #define   GET16Vpp_rst_detileups420_elpipe(r16)            _BFGET_(r16, 1, 1)
    #define   SET16Vpp_rst_detileups420_elpipe(r16,v)          _BFSET_(r16, 1, 1,v)

    #define   GET32Vpp_rst_memlb_1dscl(r32)                    _BFGET_(r32,18,18)
    #define   SET32Vpp_rst_memlb_1dscl(r32,v)                  _BFSET_(r32,18,18,v)
    #define   GET16Vpp_rst_memlb_1dscl(r16)                    _BFGET_(r16, 2, 2)
    #define   SET16Vpp_rst_memlb_1dscl(r16,v)                  _BFSET_(r16, 2, 2,v)

    #define   GET32Vpp_rst_memlb_ups420_el(r32)                _BFGET_(r32,19,19)
    #define   SET32Vpp_rst_memlb_ups420_el(r32,v)              _BFSET_(r32,19,19,v)
    #define   GET16Vpp_rst_memlb_ups420_el(r16)                _BFGET_(r16, 3, 3)
    #define   SET16Vpp_rst_memlb_ups420_el(r16,v)              _BFSET_(r16, 3, 3,v)

    #define   GET32Vpp_rst_dvcomp_wrap(r32)                    _BFGET_(r32,20,20)
    #define   SET32Vpp_rst_dvcomp_wrap(r32,v)                  _BFSET_(r32,20,20,v)
    #define   GET16Vpp_rst_dvcomp_wrap(r16)                    _BFGET_(r16, 4, 4)
    #define   SET16Vpp_rst_dvcomp_wrap(r16,v)                  _BFSET_(r16, 4, 4,v)

    #define   GET32Vpp_rst_dv_rgb2ipt_mainpl(r32)              _BFGET_(r32,21,21)
    #define   SET32Vpp_rst_dv_rgb2ipt_mainpl(r32,v)            _BFSET_(r32,21,21,v)
    #define   GET16Vpp_rst_dv_rgb2ipt_mainpl(r16)              _BFGET_(r16, 5, 5)
    #define   SET16Vpp_rst_dv_rgb2ipt_mainpl(r16,v)            _BFSET_(r16, 5, 5,v)

    #define   GET32Vpp_rst_dv_cvm_mainpl(r32)                  _BFGET_(r32,22,22)
    #define   SET32Vpp_rst_dv_cvm_mainpl(r32,v)                _BFSET_(r32,22,22,v)
    #define   GET16Vpp_rst_dv_cvm_mainpl(r16)                  _BFGET_(r16, 6, 6)
    #define   SET16Vpp_rst_dv_cvm_mainpl(r16,v)                _BFSET_(r16, 6, 6,v)

    #define   GET32Vpp_rst_dv_rgb2ipt_gfx0(r32)                _BFGET_(r32,23,23)
    #define   SET32Vpp_rst_dv_rgb2ipt_gfx0(r32,v)              _BFSET_(r32,23,23,v)
    #define   GET16Vpp_rst_dv_rgb2ipt_gfx0(r16)                _BFGET_(r16, 7, 7)
    #define   SET16Vpp_rst_dv_rgb2ipt_gfx0(r16,v)              _BFSET_(r16, 7, 7,v)

    #define   GET32Vpp_rst_dv_cvm_gfx0(r32)                    _BFGET_(r32,24,24)
    #define   SET32Vpp_rst_dv_cvm_gfx0(r32,v)                  _BFSET_(r32,24,24,v)
    #define   GET16Vpp_rst_dv_cvm_gfx0(r16)                    _BFGET_(r16, 8, 8)
    #define   SET16Vpp_rst_dv_cvm_gfx0(r16,v)                  _BFSET_(r16, 8, 8,v)

    #define   GET32Vpp_rst_dv_rgb2ipt_gfx1(r32)                _BFGET_(r32,25,25)
    #define   SET32Vpp_rst_dv_rgb2ipt_gfx1(r32,v)              _BFSET_(r32,25,25,v)
    #define   GET16Vpp_rst_dv_rgb2ipt_gfx1(r16)                _BFGET_(r16, 9, 9)
    #define   SET16Vpp_rst_dv_rgb2ipt_gfx1(r16,v)              _BFSET_(r16, 9, 9,v)

    #define   GET32Vpp_rst_dv_cvm_gfx1(r32)                    _BFGET_(r32,26,26)
    #define   SET32Vpp_rst_dv_cvm_gfx1(r32,v)                  _BFSET_(r32,26,26,v)
    #define   GET16Vpp_rst_dv_cvm_gfx1(r16)                    _BFGET_(r16,10,10)
    #define   SET16Vpp_rst_dv_cvm_gfx1(r16,v)                  _BFSET_(r16,10,10,v)

    #define   GET32Vpp_rst_dv_ocsc(r32)                        _BFGET_(r32,27,27)
    #define   SET32Vpp_rst_dv_ocsc(r32,v)                      _BFSET_(r32,27,27,v)
    #define   GET16Vpp_rst_dv_ocsc(r16)                        _BFGET_(r16,11,11)
    #define   SET16Vpp_rst_dv_ocsc(r16,v)                      _BFSET_(r16,11,11,v)

    #define   GET32Vpp_rst_dv_dither(r32)                      _BFGET_(r32,28,28)
    #define   SET32Vpp_rst_dv_dither(r32,v)                    _BFSET_(r32,28,28,v)
    #define   GET16Vpp_rst_dv_dither(r16)                      _BFGET_(r16,12,12)
    #define   SET16Vpp_rst_dv_dither(r16,v)                    _BFSET_(r16,12,12,v)

    #define   GET32Vpp_rst_dv_mdata_over_HDMI(r32)             _BFGET_(r32,29,29)
    #define   SET32Vpp_rst_dv_mdata_over_HDMI(r32,v)           _BFSET_(r32,29,29,v)
    #define   GET16Vpp_rst_dv_mdata_over_HDMI(r16)             _BFGET_(r16,13,13)
    #define   SET16Vpp_rst_dv_mdata_over_HDMI(r16,v)           _BFSET_(r16,13,13,v)

    #define   GET32Vpp_rst_ldc(r32)                            _BFGET_(r32,30,30)
    #define   SET32Vpp_rst_ldc(r32,v)                          _BFSET_(r32,30,30,v)
    #define   GET16Vpp_rst_ldc(r16)                            _BFGET_(r16,14,14)
    #define   SET16Vpp_rst_ldc(r16,v)                          _BFSET_(r16,14,14,v)

    #define   GET32Vpp_rst_gamma(r32)                          _BFGET_(r32,31,31)
    #define   SET32Vpp_rst_gamma(r32,v)                        _BFSET_(r32,31,31,v)
    #define   GET16Vpp_rst_gamma(r16)                          _BFGET_(r16,15,15)
    #define   SET16Vpp_rst_gamma(r16,v)                        _BFSET_(r16,15,15,v)

    #define     w32Vpp_rst                                     {\
            UNSG32 urst_be_ss                                  :  1;\
            UNSG32 urst_video_enc                              :  1;\
            UNSG32 urst_asd                                    :  1;\
            UNSG32 urst_hdmi_tx                                :  1;\
            UNSG32 urst_dns422_420                             :  1;\
            UNSG32 urst_sbclk_adpscl                           :  1;\
            UNSG32 urst_sbclk_gfx0                             :  1;\
            UNSG32 urst_sbclk_gfx1                             :  1;\
            UNSG32 urst_adp1dscl                               :  1;\
            UNSG32 urst_gfx0Scl                                :  1;\
            UNSG32 urst_gfx1Scl                                :  1;\
            UNSG32 urst_detileups420                           :  1;\
            UNSG32 urst_memlb_ups420                           :  1;\
            UNSG32 urst_ups420_sp                              :  1;\
            UNSG32 urst_vmx_vm                                 :  1;\
            UNSG32 urst_vopClk                                 :  1;\
            UNSG32 urst_gtclk                                  :  1;\
            UNSG32 urst_detileups420_elpipe                    :  1;\
            UNSG32 urst_memlb_1dscl                            :  1;\
            UNSG32 urst_memlb_ups420_el                        :  1;\
            UNSG32 urst_dvcomp_wrap                            :  1;\
            UNSG32 urst_dv_rgb2ipt_mainpl                      :  1;\
            UNSG32 urst_dv_cvm_mainpl                          :  1;\
            UNSG32 urst_dv_rgb2ipt_gfx0                        :  1;\
            UNSG32 urst_dv_cvm_gfx0                            :  1;\
            UNSG32 urst_dv_rgb2ipt_gfx1                        :  1;\
            UNSG32 urst_dv_cvm_gfx1                            :  1;\
            UNSG32 urst_dv_ocsc                                :  1;\
            UNSG32 urst_dv_dither                              :  1;\
            UNSG32 urst_dv_mdata_over_HDMI                     :  1;\
            UNSG32 urst_ldc                                    :  1;\
            UNSG32 urst_gamma                                  :  1;\
          }
    union { UNSG32 u32Vpp_rst;
            struct w32Vpp_rst;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Vpp_rst1_vitmo_mainpl(r32)                  _BFGET_(r32, 0, 0)
    #define   SET32Vpp_rst1_vitmo_mainpl(r32,v)                _BFSET_(r32, 0, 0,v)
    #define   GET16Vpp_rst1_vitmo_mainpl(r16)                  _BFGET_(r16, 0, 0)
    #define   SET16Vpp_rst1_vitmo_mainpl(r16,v)                _BFSET_(r16, 0, 0,v)

    #define   GET32Vpp_rst1_gitm_gfx0(r32)                     _BFGET_(r32, 1, 1)
    #define   SET32Vpp_rst1_gitm_gfx0(r32,v)                   _BFSET_(r32, 1, 1,v)
    #define   GET16Vpp_rst1_gitm_gfx0(r16)                     _BFGET_(r16, 1, 1)
    #define   SET16Vpp_rst1_gitm_gfx0(r16,v)                   _BFSET_(r16, 1, 1,v)

    #define   GET32Vpp_rst1_gitm_gfx1(r32)                     _BFGET_(r32, 2, 2)
    #define   SET32Vpp_rst1_gitm_gfx1(r32,v)                   _BFSET_(r32, 2, 2,v)
    #define   GET16Vpp_rst1_gitm_gfx1(r16)                     _BFGET_(r16, 2, 2)
    #define   SET16Vpp_rst1_gitm_gfx1(r16,v)                   _BFSET_(r16, 2, 2,v)

    #define   GET32Vpp_rst1_ovpscl_sbrst_Y(r32)                _BFGET_(r32, 3, 3)
    #define   SET32Vpp_rst1_ovpscl_sbrst_Y(r32,v)              _BFSET_(r32, 3, 3,v)
    #define   GET16Vpp_rst1_ovpscl_sbrst_Y(r16)                _BFGET_(r16, 3, 3)
    #define   SET16Vpp_rst1_ovpscl_sbrst_Y(r16,v)              _BFSET_(r16, 3, 3,v)

    #define   GET32Vpp_rst1_ovpscl_sbrst_UV(r32)               _BFGET_(r32, 4, 4)
    #define   SET32Vpp_rst1_ovpscl_sbrst_UV(r32,v)             _BFSET_(r32, 4, 4,v)
    #define   GET16Vpp_rst1_ovpscl_sbrst_UV(r16)               _BFGET_(r16, 4, 4)
    #define   SET16Vpp_rst1_ovpscl_sbrst_UV(r16,v)             _BFSET_(r16, 4, 4,v)

    #define   GET32Vpp_rst1_ngptv(r32)                         _BFGET_(r32, 5, 5)
    #define   SET32Vpp_rst1_ngptv(r32,v)                       _BFSET_(r32, 5, 5,v)
    #define   GET16Vpp_rst1_ngptv(r16)                         _BFGET_(r16, 5, 5)
    #define   SET16Vpp_rst1_ngptv(r16,v)                       _BFSET_(r16, 5, 5,v)

    #define   GET32Vpp_rst1_ovpScl_ngptv(r32)                  _BFGET_(r32, 6, 6)
    #define   SET32Vpp_rst1_ovpScl_ngptv(r32,v)                _BFSET_(r32, 6, 6,v)
    #define   GET16Vpp_rst1_ovpScl_ngptv(r16)                  _BFGET_(r16, 6, 6)
    #define   SET16Vpp_rst1_ovpScl_ngptv(r16,v)                _BFSET_(r16, 6, 6,v)

    #define   GET32Vpp_rst1_mainpl_vdcm(r32)                   _BFGET_(r32, 7, 7)
    #define   SET32Vpp_rst1_mainpl_vdcm(r32,v)                 _BFSET_(r32, 7, 7,v)
    #define   GET16Vpp_rst1_mainpl_vdcm(r16)                   _BFGET_(r16, 7, 7)
    #define   SET16Vpp_rst1_mainpl_vdcm(r16,v)                 _BFSET_(r16, 7, 7,v)

    #define   GET32Vpp_rst1_mainpl_vitm_vdcm_linebuff(r32)     _BFGET_(r32, 8, 8)
    #define   SET32Vpp_rst1_mainpl_vitm_vdcm_linebuff(r32,v)   _BFSET_(r32, 8, 8,v)
    #define   GET16Vpp_rst1_mainpl_vitm_vdcm_linebuff(r16)     _BFGET_(r16, 8, 8)
    #define   SET16Vpp_rst1_mainpl_vitm_vdcm_linebuff(r16,v)   _BFSET_(r16, 8, 8,v)

    #define   GET32Vpp_rst1_detileups420_pipPl(r32)            _BFGET_(r32, 9, 9)
    #define   SET32Vpp_rst1_detileups420_pipPl(r32,v)          _BFSET_(r32, 9, 9,v)
    #define   GET16Vpp_rst1_detileups420_pipPl(r16)            _BFGET_(r16, 9, 9)
    #define   SET16Vpp_rst1_detileups420_pipPl(r16,v)          _BFSET_(r16, 9, 9,v)

    #define   GET32Vpp_rst1_memlb_ups420_pipPl(r32)            _BFGET_(r32,10,10)
    #define   SET32Vpp_rst1_memlb_ups420_pipPl(r32,v)          _BFSET_(r32,10,10,v)
    #define   GET16Vpp_rst1_memlb_ups420_pipPl(r16)            _BFGET_(r16,10,10)
    #define   SET16Vpp_rst1_memlb_ups420_pipPl(r16,v)          _BFSET_(r16,10,10,v)

    #define   GET32Vpp_rst1_gfx0pl_gdcm(r32)                   _BFGET_(r32,11,11)
    #define   SET32Vpp_rst1_gfx0pl_gdcm(r32,v)                 _BFSET_(r32,11,11,v)
    #define   GET16Vpp_rst1_gfx0pl_gdcm(r16)                   _BFGET_(r16,11,11)
    #define   SET16Vpp_rst1_gfx0pl_gdcm(r16,v)                 _BFSET_(r16,11,11,v)

    #define   GET32Vpp_rst1_gfx1pl_gdcm(r32)                   _BFGET_(r32,12,12)
    #define   SET32Vpp_rst1_gfx1pl_gdcm(r32,v)                 _BFSET_(r32,12,12,v)
    #define   GET16Vpp_rst1_gfx1pl_gdcm(r16)                   _BFGET_(r16,12,12)
    #define   SET16Vpp_rst1_gfx1pl_gdcm(r16,v)                 _BFSET_(r16,12,12,v)

    #define   GET32Vpp_rst1_memdlb_ups420(r32)                 _BFGET_(r32,13,13)
    #define   SET32Vpp_rst1_memdlb_ups420(r32,v)               _BFSET_(r32,13,13,v)
    #define   GET16Vpp_rst1_memdlb_ups420(r16)                 _BFGET_(r16,13,13)
    #define   SET16Vpp_rst1_memdlb_ups420(r16,v)               _BFSET_(r16,13,13,v)

    #define   GET32Vpp_rst1_memdlb_ups420_pipPl(r32)           _BFGET_(r32,14,14)
    #define   SET32Vpp_rst1_memdlb_ups420_pipPl(r32,v)         _BFSET_(r32,14,14,v)
    #define   GET16Vpp_rst1_memdlb_ups420_pipPl(r16)           _BFGET_(r16,14,14)
    #define   SET16Vpp_rst1_memdlb_ups420_pipPl(r16,v)         _BFSET_(r16,14,14,v)

    #define   GET32Vpp_rst1_mainpl_ovpSclwrap(r32)             _BFGET_(r32,15,15)
    #define   SET32Vpp_rst1_mainpl_ovpSclwrap(r32,v)           _BFSET_(r32,15,15,v)
    #define   GET16Vpp_rst1_mainpl_ovpSclwrap(r16)             _BFGET_(r16,15,15)
    #define   SET16Vpp_rst1_mainpl_ovpSclwrap(r16,v)           _BFSET_(r16,15,15,v)

    #define   GET32Vpp_rst1_mainpl_ovpSclY(r32)                _BFGET_(r32,16,16)
    #define   SET32Vpp_rst1_mainpl_ovpSclY(r32,v)              _BFSET_(r32,16,16,v)
    #define   GET16Vpp_rst1_mainpl_ovpSclY(r16)                _BFGET_(r16, 0, 0)
    #define   SET16Vpp_rst1_mainpl_ovpSclY(r16,v)              _BFSET_(r16, 0, 0,v)

    #define   GET32Vpp_rst1_mainpl_ovpSclUV(r32)               _BFGET_(r32,17,17)
    #define   SET32Vpp_rst1_mainpl_ovpSclUV(r32,v)             _BFSET_(r32,17,17,v)
    #define   GET16Vpp_rst1_mainpl_ovpSclUV(r16)               _BFGET_(r16, 1, 1)
    #define   SET16Vpp_rst1_mainpl_ovpSclUV(r16,v)             _BFSET_(r16, 1, 1,v)

    #define   GET32Vpp_rst1_mainpl_ovpSclY_memlb(r32)          _BFGET_(r32,18,18)
    #define   SET32Vpp_rst1_mainpl_ovpSclY_memlb(r32,v)        _BFSET_(r32,18,18,v)
    #define   GET16Vpp_rst1_mainpl_ovpSclY_memlb(r16)          _BFGET_(r16, 2, 2)
    #define   SET16Vpp_rst1_mainpl_ovpSclY_memlb(r16,v)        _BFSET_(r16, 2, 2,v)

    #define   GET32Vpp_rst1_mainpl_ovpSclUV_memlb(r32)         _BFGET_(r32,19,19)
    #define   SET32Vpp_rst1_mainpl_ovpSclUV_memlb(r32,v)       _BFSET_(r32,19,19,v)
    #define   GET16Vpp_rst1_mainpl_ovpSclUV_memlb(r16)         _BFGET_(r16, 3, 3)
    #define   SET16Vpp_rst1_mainpl_ovpSclUV_memlb(r16,v)       _BFSET_(r16, 3, 3,v)

    #define   GET32Vpp_rst1_mainpl_hdrlut(r32)                 _BFGET_(r32,20,20)
    #define   SET32Vpp_rst1_mainpl_hdrlut(r32,v)               _BFSET_(r32,20,20,v)
    #define   GET16Vpp_rst1_mainpl_hdrlut(r16)                 _BFGET_(r16, 4, 4)
    #define   SET16Vpp_rst1_mainpl_hdrlut(r16,v)               _BFSET_(r16, 4, 4,v)

    #define   GET32Vpp_rst1_gfx0_hdrlut(r32)                   _BFGET_(r32,21,21)
    #define   SET32Vpp_rst1_gfx0_hdrlut(r32,v)                 _BFSET_(r32,21,21,v)
    #define   GET16Vpp_rst1_gfx0_hdrlut(r16)                   _BFGET_(r16, 5, 5)
    #define   SET16Vpp_rst1_gfx0_hdrlut(r16,v)                 _BFSET_(r16, 5, 5,v)

    #define   GET32Vpp_rst1_gfx1_hdrlut(r32)                   _BFGET_(r32,22,22)
    #define   SET32Vpp_rst1_gfx1_hdrlut(r32,v)                 _BFSET_(r32,22,22,v)
    #define   GET16Vpp_rst1_gfx1_hdrlut(r16)                   _BFGET_(r16, 6, 6)
    #define   SET16Vpp_rst1_gfx1_hdrlut(r16,v)                 _BFSET_(r16, 6, 6,v)

    #define   GET32Vpp_rst1_mainPl_car(r32)                    _BFGET_(r32,23,23)
    #define   SET32Vpp_rst1_mainPl_car(r32,v)                  _BFSET_(r32,23,23,v)
    #define   GET16Vpp_rst1_mainPl_car(r16)                    _BFGET_(r16, 7, 7)
    #define   SET16Vpp_rst1_mainPl_car(r16,v)                  _BFSET_(r16, 7, 7,v)

    #define   GET32Vpp_rst1_mainPl_detEE(r32)                  _BFGET_(r32,24,24)
    #define   SET32Vpp_rst1_mainPl_detEE(r32,v)                _BFSET_(r32,24,24,v)
    #define   GET16Vpp_rst1_mainPl_detEE(r16)                  _BFGET_(r16, 8, 8)
    #define   SET16Vpp_rst1_mainPl_detEE(r16,v)                _BFSET_(r16, 8, 8,v)

    #define   GET32Vpp_rst1_mainPl_EETop(r32)                  _BFGET_(r32,25,25)
    #define   SET32Vpp_rst1_mainPl_EETop(r32,v)                _BFSET_(r32,25,25,v)
    #define   GET16Vpp_rst1_mainPl_EETop(r16)                  _BFGET_(r16, 9, 9)
    #define   SET16Vpp_rst1_mainPl_EETop(r16,v)                _BFSET_(r16, 9, 9,v)

    #define   GET32Vpp_rst1_mainPl_cmu(r32)                    _BFGET_(r32,26,26)
    #define   SET32Vpp_rst1_mainPl_cmu(r32,v)                  _BFSET_(r32,26,26,v)
    #define   GET16Vpp_rst1_mainPl_cmu(r16)                    _BFGET_(r16,10,10)
    #define   SET16Vpp_rst1_mainPl_cmu(r16,v)                  _BFSET_(r16,10,10,v)

    #define     w32Vpp_rst1                                    {\
            UNSG32 urst1_vitmo_mainpl                          :  1;\
            UNSG32 urst1_gitm_gfx0                             :  1;\
            UNSG32 urst1_gitm_gfx1                             :  1;\
            UNSG32 urst1_ovpscl_sbrst_Y                        :  1;\
            UNSG32 urst1_ovpscl_sbrst_UV                       :  1;\
            UNSG32 urst1_ngptv                                 :  1;\
            UNSG32 urst1_ovpScl_ngptv                          :  1;\
            UNSG32 urst1_mainpl_vdcm                           :  1;\
            UNSG32 urst1_mainpl_vitm_vdcm_linebuff             :  1;\
            UNSG32 urst1_detileups420_pipPl                    :  1;\
            UNSG32 urst1_memlb_ups420_pipPl                    :  1;\
            UNSG32 urst1_gfx0pl_gdcm                           :  1;\
            UNSG32 urst1_gfx1pl_gdcm                           :  1;\
            UNSG32 urst1_memdlb_ups420                         :  1;\
            UNSG32 urst1_memdlb_ups420_pipPl                   :  1;\
            UNSG32 urst1_mainpl_ovpSclwrap                     :  1;\
            UNSG32 urst1_mainpl_ovpSclY                        :  1;\
            UNSG32 urst1_mainpl_ovpSclUV                       :  1;\
            UNSG32 urst1_mainpl_ovpSclY_memlb                  :  1;\
            UNSG32 urst1_mainpl_ovpSclUV_memlb                 :  1;\
            UNSG32 urst1_mainpl_hdrlut                         :  1;\
            UNSG32 urst1_gfx0_hdrlut                           :  1;\
            UNSG32 urst1_gfx1_hdrlut                           :  1;\
            UNSG32 urst1_mainPl_car                            :  1;\
            UNSG32 urst1_mainPl_detEE                          :  1;\
            UNSG32 urst1_mainPl_EETop                          :  1;\
            UNSG32 urst1_mainPl_cmu                            :  1;\
            UNSG32 RSVDx10_b27                                 :  5;\
          }
    union { UNSG32 u32Vpp_rst1;
            struct w32Vpp_rst1;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Vpp_rst2_oclkx_hdmi(r32)                    _BFGET_(r32, 0, 0)
    #define   SET32Vpp_rst2_oclkx_hdmi(r32,v)                  _BFSET_(r32, 0, 0,v)
    #define   GET16Vpp_rst2_oclkx_hdmi(r16)                    _BFGET_(r16, 0, 0)
    #define   SET16Vpp_rst2_oclkx_hdmi(r16,v)                  _BFSET_(r16, 0, 0,v)

    #define     w32Vpp_rst2                                    {\
            UNSG32 urst2_oclkx_hdmi                            :  1;\
            UNSG32 RSVDx14_b1                                  : 31;\
          }
    union { UNSG32 u32Vpp_rst2;
            struct w32Vpp_rst2;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Vpp_OVERLAY_MUX_MAIN(r32)                   _BFGET_(r32, 0, 0)
    #define   SET32Vpp_OVERLAY_MUX_MAIN(r32,v)                 _BFSET_(r32, 0, 0,v)
    #define   GET16Vpp_OVERLAY_MUX_MAIN(r16)                   _BFGET_(r16, 0, 0)
    #define   SET16Vpp_OVERLAY_MUX_MAIN(r16,v)                 _BFSET_(r16, 0, 0,v)

    #define   GET32Vpp_OVERLAY_MUX_GFX1(r32)                   _BFGET_(r32, 1, 1)
    #define   SET32Vpp_OVERLAY_MUX_GFX1(r32,v)                 _BFSET_(r32, 1, 1,v)
    #define   GET16Vpp_OVERLAY_MUX_GFX1(r16)                   _BFGET_(r16, 1, 1)
    #define   SET16Vpp_OVERLAY_MUX_GFX1(r16,v)                 _BFSET_(r16, 1, 1,v)

    #define   GET32Vpp_OVERLAY_MUX_GFX2(r32)                   _BFGET_(r32, 2, 2)
    #define   SET32Vpp_OVERLAY_MUX_GFX2(r32,v)                 _BFSET_(r32, 2, 2,v)
    #define   GET16Vpp_OVERLAY_MUX_GFX2(r16)                   _BFGET_(r16, 2, 2)
    #define   SET16Vpp_OVERLAY_MUX_GFX2(r16,v)                 _BFSET_(r16, 2, 2,v)

    #define     w32Vpp_OVERLAY_MUX                             {\
            UNSG32 uOVERLAY_MUX_MAIN                           :  1;\
            UNSG32 uOVERLAY_MUX_GFX1                           :  1;\
            UNSG32 uOVERLAY_MUX_GFX2                           :  1;\
            UNSG32 RSVDx18_b3                                  : 29;\
          }
    union { UNSG32 u32Vpp_OVERLAY_MUX;
            struct w32Vpp_OVERLAY_MUX;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Vpp_MAIN_OV_FXD_IMG_REG(r32)                _BFGET_(r32,31, 0)
    #define   SET32Vpp_MAIN_OV_FXD_IMG_REG(r32,v)              _BFSET_(r32,31, 0,v)

    #define     w32Vpp_MAIN_OV_FXD_IMG                         {\
            UNSG32 uMAIN_OV_FXD_IMG_REG                        : 32;\
          }
    union { UNSG32 u32Vpp_MAIN_OV_FXD_IMG;
            struct w32Vpp_MAIN_OV_FXD_IMG;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Vpp_GFX1_OV_FXD_IMG_REG(r32)                _BFGET_(r32,31, 0)
    #define   SET32Vpp_GFX1_OV_FXD_IMG_REG(r32,v)              _BFSET_(r32,31, 0,v)

    #define     w32Vpp_GFX1_OV_FXD_IMG                         {\
            UNSG32 uGFX1_OV_FXD_IMG_REG                        : 32;\
          }
    union { UNSG32 u32Vpp_GFX1_OV_FXD_IMG;
            struct w32Vpp_GFX1_OV_FXD_IMG;
          };
    ///////////////////////////////////////////////////////////
    #define   GET32Vpp_GFX2_OV_FXD_IMG_REG(r32)                _BFGET_(r32,31, 0)
    #define   SET32Vpp_GFX2_OV_FXD_IMG_REG(r32,v)              _BFSET_(r32,31, 0,v)

    #define     w32Vpp_GFX2_OV_FXD_IMG                         {\
            UNSG32 uGFX2_OV_FXD_IMG_REG                        : 32;\
          }
    union { UNSG32 u32Vpp_GFX2_OV_FXD_IMG;
            struct w32Vpp_GFX2_OV_FXD_IMG;
          };
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx28                                     [984];
    ///////////////////////////////////////////////////////////
              SIE_GFX0                                         ie_GFX0;
    ///////////////////////////////////////////////////////////
              SIE_GFX1                                         ie_GFX1;
    ///////////////////////////////////////////////////////////
              SIE_vidpl                                        ie_vidpl;
    ///////////////////////////////////////////////////////////
              SIE_tgWrap                                       ie_tgWrap0;
    ///////////////////////////////////////////////////////////
              SIE_CLK                                          ie_cpcb0Clk;
    ///////////////////////////////////////////////////////////
              SIE_CLK                                          ie_asdClk;
    ///////////////////////////////////////////////////////////
             UNSG8 RSVDx34F4                                   [780];
    ///////////////////////////////////////////////////////////
    } SIE_Vpp;

    typedef union  T32Vpp_CTRL
          { UNSG32 u32;
            struct w32Vpp_CTRL;
                 } T32Vpp_CTRL;
    typedef union  T32Vpp_CPCB0_PL_EN
          { UNSG32 u32;
            struct w32Vpp_CPCB0_PL_EN;
                 } T32Vpp_CPCB0_PL_EN;
    typedef union  T32Vpp_VPP_INTR_EN
          { UNSG32 u32;
            struct w32Vpp_VPP_INTR_EN;
                 } T32Vpp_VPP_INTR_EN;
    typedef union  T32Vpp_rst
          { UNSG32 u32;
            struct w32Vpp_rst;
                 } T32Vpp_rst;
    typedef union  T32Vpp_rst1
          { UNSG32 u32;
            struct w32Vpp_rst1;
                 } T32Vpp_rst1;
    typedef union  T32Vpp_rst2
          { UNSG32 u32;
            struct w32Vpp_rst2;
                 } T32Vpp_rst2;
    typedef union  T32Vpp_OVERLAY_MUX
          { UNSG32 u32;
            struct w32Vpp_OVERLAY_MUX;
                 } T32Vpp_OVERLAY_MUX;
    typedef union  T32Vpp_MAIN_OV_FXD_IMG
          { UNSG32 u32;
            struct w32Vpp_MAIN_OV_FXD_IMG;
                 } T32Vpp_MAIN_OV_FXD_IMG;
    typedef union  T32Vpp_GFX1_OV_FXD_IMG
          { UNSG32 u32;
            struct w32Vpp_GFX1_OV_FXD_IMG;
                 } T32Vpp_GFX1_OV_FXD_IMG;
    typedef union  T32Vpp_GFX2_OV_FXD_IMG
          { UNSG32 u32;
            struct w32Vpp_GFX2_OV_FXD_IMG;
                 } T32Vpp_GFX2_OV_FXD_IMG;
    ///////////////////////////////////////////////////////////

    typedef union  TVpp_CTRL
          { UNSG32 u32[1];
            struct {
            struct w32Vpp_CTRL;
                   };
                 } TVpp_CTRL;
    typedef union  TVpp_CPCB0_PL_EN
          { UNSG32 u32[1];
            struct {
            struct w32Vpp_CPCB0_PL_EN;
                   };
                 } TVpp_CPCB0_PL_EN;
    typedef union  TVpp_VPP_INTR_EN
          { UNSG32 u32[1];
            struct {
            struct w32Vpp_VPP_INTR_EN;
                   };
                 } TVpp_VPP_INTR_EN;
    typedef union  TVpp_rst
          { UNSG32 u32[1];
            struct {
            struct w32Vpp_rst;
                   };
                 } TVpp_rst;
    typedef union  TVpp_rst1
          { UNSG32 u32[1];
            struct {
            struct w32Vpp_rst1;
                   };
                 } TVpp_rst1;
    typedef union  TVpp_rst2
          { UNSG32 u32[1];
            struct {
            struct w32Vpp_rst2;
                   };
                 } TVpp_rst2;
    typedef union  TVpp_OVERLAY_MUX
          { UNSG32 u32[1];
            struct {
            struct w32Vpp_OVERLAY_MUX;
                   };
                 } TVpp_OVERLAY_MUX;
    typedef union  TVpp_MAIN_OV_FXD_IMG
          { UNSG32 u32[1];
            struct {
            struct w32Vpp_MAIN_OV_FXD_IMG;
                   };
                 } TVpp_MAIN_OV_FXD_IMG;
    typedef union  TVpp_GFX1_OV_FXD_IMG
          { UNSG32 u32[1];
            struct {
            struct w32Vpp_GFX1_OV_FXD_IMG;
                   };
                 } TVpp_GFX1_OV_FXD_IMG;
    typedef union  TVpp_GFX2_OV_FXD_IMG
          { UNSG32 u32[1];
            struct {
            struct w32Vpp_GFX2_OV_FXD_IMG;
                   };
                 } TVpp_GFX2_OV_FXD_IMG;

    ///////////////////////////////////////////////////////////
     SIGN32 Vpp_drvrd(SIE_Vpp *p, UNSG32 base, SIGN32 mem, SIGN32 tst);
     SIGN32 Vpp_drvwr(SIE_Vpp *p, UNSG32 base, SIGN32 mem, SIGN32 tst, UNSG32 *pcmd);
       void Vpp_reset(SIE_Vpp *p);
     SIGN32 Vpp_cmp  (SIE_Vpp *p, SIE_Vpp *pie, char *pfx, void *hLOG, SIGN32 mem, SIGN32 tst);
    #define Vpp_check(p,pie,pfx,hLOG) Vpp_cmp(p,pie,pfx,(void*)(hLOG),0,0)
    #define Vpp_print(p,    pfx,hLOG) Vpp_cmp(p,0,  pfx,(void*)(hLOG),0,0)

#endif
//////
/// ENDOFINTERFACE: Vpp
////////////////////////////////////////////////////////////



#ifdef __cplusplus
  }
#endif
#pragma  pack()

#endif
//////
/// ENDOFFILE: vpp.h
////////////////////////////////////////////////////////////

