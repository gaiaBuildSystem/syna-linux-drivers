// SPDX-License-Identifier: GPL-2.0
/* Copyright 2017 Synopsys Inc. */
/* Copyright 2021 Synaptics Incorporated */

#ifndef ___HDMIRX_H__
#define ___HDMIRX_H__

#define HRX_MSG_DESTROY_ISR_TASK                1

/* id_mainunit Registers */
#define HDMI_CORE_ID				0x0000
#define HDMI_VER_NUMBER				0x0004
#define HDMI_VER_TYPE				0x0008
#define HDMI_CONFIG_REG				0x000C
#define HDMI_CORE_TIMESTAMP_HHMM		0x0014
#define HDMI_CORE_TIMESTAMP_MMDD		0x0018
#define HDMI_CORE_TIMESTAMP_YYYY		0x001C

/* id_reset_manager Registers */
#define HDMI_GLOBAL_SWRESET_REQUEST		0x0020
#define HDMI_GLOBAL_SWENABLE			0x0024

/* id_timer_base Registers */
#define HDMI_GLOBAL_TIMER_REF_BASE		0x0028

/* id_core Registers */
#define HDMI_CORE_CONFIG			0x0050

/* id_cmu Registers */
#define HDMI_CMU_CONFIG0			0x0060
#define HDMI_CMU_CONFIG3			0x006C
#define HDMI_CMU_CONFIG4			0x0070
#define HDMI_CMU_STATUS				0x007C
#define HDMI_CMU_AUDIO_COUNT			0x0080
#define HDMI_CMU_TMDSQP_COUNT			0x0084
#define HDMI_CMU_FRLCLK_FREQ			0x0098
#define HDMI_CMU_MAIN_CONFIG			0x00BC

/* id_phy_logic Registers */
#define HDMI_PHY_CONFIG				0x00C0
#define HDMI_PHY_STATUS				0x00C8
#define HDMI_PHY_JTAG_CONFIG			0x00CC
#define HDMI_PHY_JTAG_TAP_TCLK			0x00D0
#define HDMI_PHY_JTAG_TAP_IN			0x00D4
#define HDMI_PHY_JTAG_TAP_OUT			0x00D8
#define HDMI_PHY_JTAG_ADDR			0x00DC
#define HDMI_PHYCREG_CONFIG0			0x00E0
#define HDMI_PHYCREG_CONFIG1			0x00E4
#define HDMI_PHYCREG_CONFIG2			0x00E8
#define HDMI_PHYCREG_CONTROL			0x00F0
#define HDMI_PHYCREG_STATUS			0x00F4

/* id_main_unit_status Registers */
#ifndef HDMI_MAINUNIT_STATUS
#define HDMI_MAINUNIT_STATUS			0x150
#endif

/* id_i2c_slave Registers */
#define HDMI_I2C_SLAVE_CONFIG0			0x0160
#define HDMI_I2C_SLAVE_CONFIG1			0x0164

/* id_snps_audio_pll Registers */
#define SNPS_AUDPLL_CONFIG1                     0x0180
#define SNPS_AUDPLL_CONFIG2                     0x0184
#define SNPS_AUDPLL_CONFIG3                     0x0188
#define SNPS_AUDPLL_STATUS                      0x019C

/* id_descrambler Registers */
#define HDMI_DESCRAND_EN_CONTROL		0x0210
#define HDMI_DESCRAND_STATUS			0x0218

/* id_deframer Registers */
#define HDMI_DEFRAMER_CONFIG0			0x0270
#define HDMI_DEFRAMER_CONFIG1			0x0274
#define HDMI_DEFRAMER_VSYNC_CNT_CLEAR		0x0278
#define HDMI_DEFRAMER_STATUS			0x027C

/* id_hdcp14 Registers */
#define HDMI_HDCP14_CONFIG			0x0290
#define HDMI_HDCP14_WOO_CONFIG			0x0294
#define HDMI_HDCP14_KEY_SEED			0x02A0
#define HDMI_HDCP14_KEY_H			0x02A4
#define HDMI_HDCP14_KEY_L			0x02A8
#define HDMI_HDCP14_KEY_STATUS			0x02AC
#define HDMI_HDCP14_BKSV_H			0x02B0
#define HDMI_HDCP14_BKSV_L			0x02B4
#define HDMI_HDCP14_STATUS			0x02B8
#define HDMI_HDCP14_BSTATUS			0x02BC
#define HDMI_HDCP14_DDC_STATUS0			0x02C0
#define HDMI_HDCP14_DDC_STATUS1			0x02C4
#define HDMI_HDCP14_DDC_STATUS2			0x02C8
#define HDMI_HDCP14_DDC_STATUS3			0x02CC
#define HDMI_HDCP14_DDC_STATUS4			0x02D0
#define HDMI_HDCP14_RPT_KSV_H			0x02D4
#define HDMI_HDCP14_RPT_KSV_L			0x02D8
#define HDMI_HDCP14_RPT_CONTROL			0x02DC
#define HDMI_HDCP14_RPT_KSVFIFO			0x02E0
#define HDMI_HDCP14_RPT_STATUS			0x02E4

/* id_hdcp22 Registers */
#define HDMI_HDCP22_CONFIG			0x02F0
#define HDMI_HDCP22_STATUS			0x02F4
#define HDMI_HDCP22_ESM_GLB_OUT                 0x02FC
#define HDMI_HDCP22_ESM_PORT_OUT                0x0304

/* id_video_processor Registers */
#define HDMI_VIDEO_CD_CONFIG			0x0420
#define HDMI_VIDEO_PP_CONFIG			0x0424
#define HDMI_VIDEO_CONFIG1			0x0428
#define HDMI_VIDEO_CONFIG2			0x042C
#define HDMI_VIDEO_MUTE_VALUE_H			0x0430
#define HDMI_VIDEO_MUTE_VALUE_L			0x0434
#define HDMI_VIDEO_CONTROL			0x0438
#define HDMI_VIDEO_STATUS			0x043C

/* id_audio Registers */
#define HDMI_AUDIO_FIFO_CONFIG			0x0460
#define HDMI_AUDIO_FIFO_CONTROL			0x0464
#define HDMI_AUDIO_FIFO_THR_PASS		0x0468
#define HDMI_AUDIO_FIFO_THR			0x046C
#define HDMI_AUDIO_FIFO_MUTE_THR		0x0470
#define HDMI_AUDIO_FIFO_STATUS1			0x0474
#define HDMI_AUDIO_FIFO_STATUS2			0x0478

/* id_audio_processor Registers */
#define HDMI_AUDIO_PROC_CONFIG0			0x0480
#define HDMI_AUDIO_PROC_CONFIG1			0x0484
#define HDMI_AUDIO_PROC_CONFIG2			0x0488
#define HDMI_AUDIO_PROC_CONFIG3			0x048C
#define HDMI_AUDIO_PROC_STATUS1			0x0490
#define HDMI_AUDIO_PROC_STATUS2			0x0494

/* id_audio Registers */
#define HDMI_AUDIO_PROC_CHSTAT_SIZE		6
#define HDMI_AUDIO_PROC_CHSTAT_SP0_L(x)		(0x04A0 + ((x) * 4))
#define HDMI_AUDIO_PROC_CHSTAT_SP0_R(x)		(0x04B8 + ((x) * 4))
#define HDMI_AUDIO_PROC_CHSTAT_SP1_L(x)		(0x04D0 + ((x) * 4))
#define HDMI_AUDIO_PROC_CHSTAT_SP1_R(x)		(0x04E8 + ((x) * 4))
#define HDMI_AUDIO_PROC_CHSTAT_SP2_L(x)		(0x0500 + ((x) * 4))
#define HDMI_AUDIO_PROC_CHSTAT_SP2_R(x)		(0x0518 + ((x) * 4))
#define HDMI_AUDIO_PROC_CHSTAT_SP3_L(x)		(0x0530 + ((x) * 4))
#define HDMI_AUDIO_PROC_CHSTAT_SP3_R(x)		(0x0548 + ((x) * 4))

/* id_scdc Registers */
#define HDMI_SCDC_CONFIG			0x0580
#define HDMI_SCDC_CONTROL			0x0584
#define HDMI_SCDC_REGBANK_STATUS0		0x0588
#define HDMI_SCDC_REGBANK_STATUS1		0x058C
#define HDMI_SCDC_REGBANK_STATUS2		0x0590
#define HDMI_SCDC_REGBANK_STATUS3		0x0594
#define HDMI_SCDC_REGBANK_STATUS4		0x0598
#define HDMI_SCDC_REGBANK_STATUS5		0x059C
#define HDMI_SCDC_REGBANK_STATUS6		0x05A0
#define HDMI_SCDC_REGBANK_STATUS7		0x05A4
#define HDMI_SCDC_REGBANK_STATUS8		0x05A8
#define HDMI_SCDC_REGBANK_MS_STATUS0		0x05AC
#define HDMI_SCDC_REGBANK_MS_STATUS1		0x05B0
#define HDMI_SCDC_REGBANK_MS_STATUS2		0x05B4
#define HDMI_SCDC_REGBANK_MS_STATUS3		0x05B8
#define HDMI_SCDC_REGBANK_MS_STATUS4		0x05BC
#define HDMI_SCDC_REGBANK_CONFIG0		0x05C0
#define HDMI_SCDC_REGBANK_CONFIG1		0x05C4
#define HDMI_SCDC_REGBANK_CONFIG2		0x05C8
#define HDMI_SCDC_REGBANK_CONFIG3		0x05CC
#define HDMI_SCDC_REGBANK_CONFIG4		0x05D0
#define HDMI_SCDC_REGBANK_CONFIG5		0x05D4
#define HDMI_SCDC_REGBANK_CONFIG6		0x05D8
#define HDMI_SCDC_REGBANK_CONFIG7		0x05DC
#define HDMI_SCDC_REGBANK_CONFIG8		0x05E0

/* id_psvg Registers */
#define HDMI_PSVG_CONFIG0			0x0700
#define HDMI_PSVG_CONFIG1			0x0704
#define HDMI_PSVG_HAHB_CONFIG			0x0708
#define HDMI_PSVG_HDHW_CONFIG			0x070C
#define HDMI_PSVG_VAVB_CONFIG			0x0710
#define HDMI_PSVG_VDVW_CONFIG			0x0714
#define HDMI_PSVG_CB_LENGTH_CONFIG		0x0718
#define HDMI_PSVG_CB_COLORA_L			0x071C
#define HDMI_PSVG_CB_COLORA_H			0x0720
#define HDMI_PSVG_CB_COLORB_L			0x0724
#define HDMI_PSVG_CB_COLORB_H			0x0728

/* id_frl_ced Registers */
#define HDMI_FRL_CED_DYN_STATUS1		0x0790
#define HDMI_FRL_CED_DYN_STATUS2		0x0794

/* id_packet_extractor Registers */
#define HDMI_PKTEX_BCH_ERRCORR_CONFIG		0x07C0
#define HDMI_PKTEX_BCH_ERRFILT_CONFIG		0x07C4
#define HDMI_PKTEX_CHKSUM_ERRFILT_CONFIG	0x07C8
#define HDMI_PKTEX_BCHERR_ACC_STATUS		0x07CC
#define HDMI_PKTEX_FIELD_BCHERR_STATUS		0x07D0
#define HDMI_GENPKT_TYPE_CONFIG			0x07D4

/* id_frl_unpacker Registers */
#define HDMI_FRL_UNPACKER_CONTROL		0x0924
#define HDMI_FRL_UNPACKER_STATUS		0x0928

/* id_packet_decoder Registers */
#define HDMI_PKTDEC_ACR_CONFIG			0x1000
#define HDMI_PKTDEC_ACR_CTS_CONFIG		0x1004
#define HDMI_PKTDEC_ACR_N_CONFIG		0x1008
#define HDMI_PKTDEC_ACR_MAXMIN_CLEAR		0x100C
#define HDMI_PKTDEC_ACR_CTS_MAX_STATUS		0x1010
#define HDMI_PKTDEC_ACR_CTS_MIN_STATUS		0x1014
#define HDMI_PKTDEC_ACR_N_MAX_STATUS		0x1018
#define HDMI_PKTDEC_ACR_N_MIN_STATUS		0x101C
#define HDMI_PKTDEC_SP_VALID_CONFIG		0x1020
#define HDMI_PKTDEC_GCP_AVMUTE_CONFIG		0x1024
#define HDMI_PKTDEC_AVMUTE_DIS_CONTROL		0x1028
#define HDMI_PKTDEC_GCP_AVMUTE_STATUS		0x1030
#define HDMI_PKTDEC_SNAPSHOT_BYP_CONTROL	0x1040
#define HDMI_PKTDEC_ACR_PH			0x1100
#define HDMI_PKTDEC_ACR_PB(x)			(0x1104 + ((x) * 4))
#define HDMI_PKTDEC_GCP_PH			0x1120
#define HDMI_PKTDEC_GCP_PB(x)			(0x1124 + ((x) * 4))
#define HDMI_PKTDEC_ACP_PH			0x1140
#define HDMI_PKTDEC_ACP_PB(x)			(0x1144 + ((x) * 4))
#define HDMI_PKTDEC_ISRC1_PH			0x1160
#define HDMI_PKTDEC_ISRC1_PB(x)			(0x1164 + ((x) * 4))
#define HDMI_PKTDEC_ISRC2_PH			0x1180
#define HDMI_PKTDEC_ISRC2_PB(x)			(0x1184 + ((x) * 4))
#define HDMI_PKTDEC_GMD_PH			0x11A0
#define HDMI_PKTDEC_GMD_PB(x)			(0x11A4 + ((x) * 4))
#define HDMI_PKTDEC_AMD_PH			0x11C0
#define HDMI_PKTDEC_AMD_PB(x)			(0x11C4 + ((x) * 4))
#define HDMI_PKTDEC_VSIF_PH			0x11E0
#define HDMI_PKTDEC_VSIF_PB(x)			(0x11E4 + ((x) * 4))
#define HDMI_PKTDEC_VSIF_PBLEN			7
#define HDMI_PKTDEC_AVIIF_PH			0x1200
#define HDMI_PKTDEC_AVIIF_PB(x)			(0x1204 + ((x) * 4))
#define HDMI_PKTDEC_AVIIF_PBLEN			4
#define HDMI_PKTDEC_SRCPDIF_PH			0x1220
#define HDMI_PKTDEC_SRCPDIF_PB(x)		(0x1224 + ((x) * 4))
#define HDMI_PKTDEC_SRCPDIF_PBLEN		7
#define HDMI_PKTDEC_AUDIF_PH			0x1240
#define HDMI_PKTDEC_AUDIF_PB(x)			(0x1244 + ((x) * 4))
#define HDMI_PKTDEC_AUDIF_PBLEN			2
#define HDMI_PKTDEC_MPEGSIF_PH			0x1260
#define HDMI_PKTDEC_MPEGSIF_PB(x)		(0x1264 + ((x) * 4))
#define HDMI_PKTDEC_NTSCVBIIF_PH		0x1280
#define HDMI_PKTDEC_NTSCVBIIF_PB(x)		(0x1284 + ((x) * 4))
#define HDMI_PKTDEC_DRMIF_PH			0x12A0
#define HDMI_PKTDEC_DRMIF_PB(x)			(0x12A4 + ((x) * 4))
#define HDMI_PKTDEC_DRMIF_PBLEN			7
#define HDMI_PKTDEC_GENPKT0_PH			0x1480
#define HDMI_PKTDEC_GENPKT0_PB(x)		(0x1484 + ((x) * 4))
#define HDMI_PKTDEC_GENPKT1_PH			0x14A0
#define HDMI_PKTDEC_GENPKT1_PB(x)		(0x14A4 + ((x) * 4))

/* id_video_monitor Registers */
#define HDMI_VMON_CONTROL			0x1560
#define HDMI_VMON_STATUS1			0x1580
#define HDMI_VMON_STATUS2			0x1584
#define HDMI_VMON_STATUS3			0x1588
#define HDMI_VMON_STATUS4			0x158C
#define HDMI_VMON_STATUS5			0x1590
#define HDMI_VMON_STATUS6			0x1594
#define HDMI_VMON_STATUS7			0x1598

/* id_cec Registers */
#define HDMI_CEC_TX_CONTROL			0x2000
#define HDMI_CEC_STATUS				0x2004
#define HDMI_CEC_CONFIG				0x2008
#define HDMI_CEC_ADDR				0x200C
#define HDMI_CEC_TX_COUNT			0x2020
#define HDMI_CEC_TX_DATA(x)			(0x2024 + ((x) * 4))
#define HDMI_CEC_TX_DATA_MAX_LEN		4
#define HDMI_CEC_RX_COUNT_STATUS		0x2040
#define HDMI_CEC_RX_DATA(x)			(0x2044 + ((x) * 4))
#define HDMI_CEC_LOCK_CONTROL			0x2054
#define HDMI_CEC_RXQUAL_BITTIME_CONFIG		0x2060
#define HDMI_CEC_RX_BITTIME_CONFIG		0x2064
#define HDMI_CEC_TX_BITTIME_CONFIG		0x2068

/* id_main_unit Registers */
#define HDMI_MAINUNIT_INTVEC_INDEX		0x5000

/* id_main_unit_interrupt Registers */
#define HDMI_MAINUNIT_0_INT_STATUS      0x5010
#define HDMI_MAINUNIT_0_INT_MASK_N      0x5014
#define HDMI_MAINUNIT_0_INT_CLEAR       0x5018
#define HDMI_MAINUNIT_0_INT_FORCE       0x501C
#define HDMI_MAINUNIT_1_INT_STATUS      0x5020
#define HDMI_MAINUNIT_1_INT_MASK_N      0x5024
#define HDMI_MAINUNIT_1_INT_CLEAR       0x5028
#define HDMI_MAINUNIT_1_INT_FORCE       0x502C
#define HDMI_MAINUNIT_2_INT_STATUS      0x5030
#define HDMI_MAINUNIT_2_INT_MASK_N      0x5034
#define HDMI_MAINUNIT_2_INT_CLEAR       0x5038
#define HDMI_MAINUNIT_2_INT_FORCE       0x503C

/* id_avpunit_interrupt Registers */
#define HDMI_AVPUNIT_0_INT_STATUS       0x5040
#define HDMI_AVPUNIT_0_INT_MASK_N       0x5044
#define HDMI_AVPUNIT_0_INT_CLEAR        0x5048
#define HDMI_AVPUNIT_0_INT_FORCE        0x504C
#define HDMI_AVPUNIT_1_INT_STATUS       0x5050
#define HDMI_AVPUNIT_1_INT_MASK_N       0x5054
#define HDMI_AVPUNIT_1_INT_CLEAR        0x5058
#define HDMI_AVPUNIT_1_INT_FORCE        0x505C
#define HDMI_AVPUNIT_2_INT_MASK_N		0x5064

/* id_packet_interrupt Registers */
#define HDMI_PKT_0_INT_STATUS           0x5080
#define HDMI_PKT_0_INT_MASK_N           0x5084
#define HDMI_PKT_0_INT_CLEAR            0x5088
#define HDMI_PKT_0_INT_FORCE            0x508C
#define HDMI_PKT_1_INT_STATUS           0x5090
#define HDMI_PKT_1_INT_MASK_N           0x5094
#define HDMI_PKT_1_INT_CLEAR            0x5098
#define HDMI_PKT_1_INT_FORCE            0x509C

/* id_scdc_interrupt Registers */
#define HDMI_SCDC_INT_STATUS            0x50C0
#define HDMI_SCDC_INT_MASK_N            0x50C4
#define HDMI_SCDC_INT_CLEAR             0x50C8
#define HDMI_SCDC_INT_FORCE             0x50CC

/* id_hdcp_interrupt Registers */
#define HDMI_HDCP_INT_STATUS            0x50D0
#define HDMI_HDCP_INT_MASK_N            0x50D4
#define HDMI_HDCP_INT_CLEAR             0x50D8
#define HDMI_HDCP_INT_FORCE             0x50DC

/* id_cec_interrupt Registers */
#define HDMI_CEC_INT_STATUS             0x5100
#define HDMI_CEC_INT_MASK_N             0x5104
#define HDMI_CEC_INT_CLEAR              0x5108
#define HDMI_CEC_INT_FORCE              0x510C

#define RA_HDMI_RX_WRAP_PHY_SRAM_CTRL			0x0024
#define RA_HDMI_RX_WRAP_PHY_SRAM_CTRL_STATUS	0x0028
#define RA_HDMI_RX_WRAP_HDMI_CONTROLLER_STATUS	0x000C

#define MSK32HDMIRX_PIPE_INTR_EN_HDMIRX			0x00000002

#define CPU_ID 0
#define CPU_ID_1 1

#define HDMI_SAMPLE_FREQ_SOURCE_CHSTATUS	0
#define HDMI_SAMPLE_FREQ_SOURCE_N_AND_CTS	1

#define RA_HDMI_RX_WRAP_AUDIO_PLL_CTRL		0x0004

#define AVPUNIT1_INTR   ( \
	HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP3 | \
	HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP2 | \
	HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP1 | \
	HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP0 | \
	HDMI_AVPUNIT_1_INT_STATUS_AUD_MUTE         | \
	HDMI_AVPUNIT_1_INT_STATUS_AFIFO_UNDERFLOW  | \
	HDMI_AVPUNIT_1_INT_STATUS_AFIFO_OVERFLOW   | \
	HDMI_AVPUNIT_1_INT_STATUS_AFIFO_THR_PASS)

#define MAINUNIT_0_INTR          ( \
	HDMI_MAINUNIT_0_INT_STATUS_TIMER_BASE_LOCKED | \
	HDMI_MAINUNIT_0_INT_STATUS_TMDSQP_CK_OFF    | \
	HDMI_MAINUNIT_0_INT_STATUS_AUDIO_CK_OFF     | \
	HDMI_MAINUNIT_0_INT_STATUS_AUDIO_CK_LOCKED)

#define MAINUNIT_2_INTR          (\
	HDMI_MAINUNIT_2_INT_STATUS_TMDSVALID_STABLE | \
	HDMI_MAINUNIT_2_INT_STATUS_AUDPLL_LOCK_STABLE)

#define HDCP_INTR           (\
	HDMI_HDCP_INT_STATUS_ENCDIS | \
	HDMI_HDCP_INT_STATUS_ENCEN  | \
	HDMI_HDCP_INT_STATUS_AUTH)

#define PKT_0_INTR          (\
	HDMI_PKT_0_INT_STATUS_DRMIF | \
	HDMI_PKT_0_INT_STATUS_SRCPDIF | \
	HDMI_PKT_0_INT_STATUS_AVIIF   | \
	HDMI_PKT_0_INT_STATUS_VSIF)

#define PKT_0_ACR           (\
	HDMI_PKT_0_INT_STATUS_ACR_N | \
	HDMI_PKT_0_INT_STATUS_ACR_CTS)

enum {
/* --- id_mainunit --- */
	/* CORE_ID field values */
	HDMI_CORE_ID_VALUE = 0x48515258,
	/* CONFIG_REG field values */
	HDMI_CONFIG_REG_PHY_EXTERNAL = BIT(24),
	HDMI_CONFIG_REG_VESA_DSC = BIT(13),
	HDMI_CONFIG_REG_CEC = BIT(12),
	HDMI_CONFIG_REG_HDCP22_INTERFACE = BIT(6),
	HDMI_CONFIG_REG_HDCP14_EXTERNAL_DKSET = BIT(5),
	HDMI_CONFIG_REG_HDCP14_INTERNAL_DKSET = BIT(4),
	HDMI_CONFIG_REG_AUDIO_TRIPLE_INTERFACE = BIT(0),
/* --- id_reset_manager --- */
	/* GLOBAL_SWRESET_REQUEST field values */
	HDMI_GLOBAL_SWRESET_REQUEST_APB = BIT(17),
	HDMI_GLOBAL_SWRESET_REQUEST_CEC = BIT(16),
	HDMI_GLOBAL_SWRESET_REQUEST_DATAPATH = BIT(12),
	HDMI_GLOBAL_SWRESET_REQUEST_PKTFIFO = BIT(11),
	HDMI_GLOBAL_SWRESET_REQUEST_HDCP = BIT(10),
	HDMI_GLOBAL_SWRESET_REQUEST_AUDIO = BIT(9),
	HDMI_GLOBAL_SWRESET_REQUEST_AVPUNIT = BIT(8),
	HDMI_GLOBAL_SWRESET_REQUEST_MAIN = BIT(0),
	/* GLOBAL_SWENABLE field */
	HDMI_GLOBAL_SWENABLE_HDCP_ENABLE_MASK = BIT(10),
	HDMI_GLOBAL_SWENABLE_HDCP_ENABLE_OFFSET = 10,
	HDMI_GLOBAL_SWENABLE_PHYCTRL_ENABLE_MASK = BIT(21),
	HDMI_GLOBAL_SWENABLE_PHYCTRL_ENABLE_OFFSET = 21,
	HDMI_GLOBAL_SWENABLE_AUDIOPLL_ENABLE_MASK = BIT(25),
	HDMI_GLOBAL_SWENABLE_AUDIOPLL_ENABLE_OFFSET = 25,
/* --- id_timer_base --- */
	/* GLOBAL_TIMER_REF_BASE field values */
	HDMI_GLOBAL_TIMER_REF_BASE_MASK = GENMASK(28, 0),
/* --- id_pmu --- */
/* --- id_cmu --- */
	/* CORE_CONFIG field values */
	HDMI_CORE_CONFIG_HPD_MASK = GENMASK(3, 0),
	HDMI_CORE_CONFIG_HPD_OFFSET = 0,
	HDMI_CORE_CONFIG_HPD_D = BIT(3),
	HDMI_CORE_CONFIG_HPD_C = BIT(2),
	HDMI_CORE_CONFIG_HPD_B = BIT(1),
	HDMI_CORE_CONFIG_HPD_A = BIT(0),
	/* CMU_STATUS field values */
	HDMI_CMU_STATUS_TIMER_BASE_LOCKED = BIT(28),
	HDMI_CMU_STATUS_TMDSQP_CK_OFF = BIT(5),
	HDMI_CMU_STATUS_TMDSQP_CK_LOCKED = BIT(4),
	HDMI_CMU_STATUS_AUDIO_CK_OFF = BIT(1),
	HDMI_CMU_STATUS_AUDIO_CK_LOCKED = BIT(0),
/* --- id_phy_logic --- */
	/* PHY_CONFIG field values */
	HDMI_PHY_CONFIG_TMDS_CLOCK_RATIO_MASK = BIT(16),
	HDMI_PHY_CONFIG_TMDS_CLOCK_RATIO_OFFSET = 16,
	HDMI_PHY_CONFIG_RXDATA_WIDTH_MASK = BIT(15),
	HDMI_PHY_CONFIG_RXDATA_WIDTH_OFFSET = 15,
	HDMI_PHY_CONFIG_REFFREQ_SEL_MASK = GENMASK(11, 9),
	HDMI_PHY_CONFIG_REFFREQ_SEL_OFFSET = 9,
	HDMI_PHY_CONFIG_HDMI_DISABLE_MASK = BIT(8),
	HDMI_PHY_CONFIG_HDMI_DISABLE_OFFSET = 8,
	HDMI_PHY_CONFIG_SVSRET_MODEZ_MASK = BIT(6),
	HDMI_PHY_CONFIG_SVSRET_MODEZ_OFFSET = 6,
	HDMI_PHY_CONFIG_CFGCLK_FREQ_MASK = GENMASK(5, 4),
	HDMI_PHY_CONFIG_CFGCLK_FREQ_OFFSET = 4,
	HDMI_PHY_CONFIG_PORT_SELECT_MASK = GENMASK(3, 2),
	HDMI_PHY_CONFIG_PORT_SELECT_OFFSET = 2,
	HDMI_PHY_CONFIG_PDDQ_MASK = BIT(1),
	HDMI_PHY_CONFIG_PDDQ_OFFSET = 1,
	HDMI_PHY_CONFIG_RESET_MASK = BIT(0),
	HDMI_PHY_CONFIG_RESET_OFFSET = 0,
	/* PHY_STATUS field values */
	HDMI_PHY_STATUS_HDMI_DISABLE_ACK = BIT(1),
	HDMI_PHY_STATUS_PDDQ_ACK = BIT(0),
	/* PHY_JTAG_CONFIG field values */
	HDMI_PHY_JTAG_CONFIG_EARC_TRST_N_MASK = BIT(4),
	HDMI_PHY_JTAG_CONFIG_EARC_TRST_N_OFFSET = 4,
	HDMI_PHY_JTAG_CONFIG_TRST_N_MASK = BIT(0),
	HDMI_PHY_JTAG_CONFIG_TRST_N_OFFSET = 0,
	/* PHY_JTAG_TAP_TCLK field values */
	HDMI_PHY_JTAG_TAP_EARC_TCLK_MASK = BIT(4),
	HDMI_PHY_JTAG_TAP_EARC_TCLK_OFFSET = 4,
	HDMI_PHY_JTAG_TAP_TCLK_MASK = BIT(0),
	HDMI_PHY_JTAG_TAP_TCLK_OFFSET = 0,
	/* PHY_JTAG_TAP_IN field values */
	HDMI_PHY_JTAG_TAP_IN_EARC_TMS = BIT(12),
	HDMI_PHY_JTAG_TAP_IN_EARC_TDI = BIT(8),
	HDMI_PHY_JTAG_TAP_IN_TMS = BIT(4),
	HDMI_PHY_JTAG_TAP_IN_TDI = BIT(0),
	/* PHY_JTAG_TAP_OUT field values */
	HDMI_PHY_JTAG_TAP_OUT_EARC_TDO_EN = BIT(12),
	HDMI_PHY_JTAG_TAP_OUT_EARC_TDO = BIT(8),
	HDMI_PHY_JTAG_TAP_OUT_TDO_EN = BIT(4),
	HDMI_PHY_JTAG_TAP_OUT_TDO = BIT(0),
	/* PHYCREG_CONFIG0 field values*/
	HDMI_PHYCREG_CR_PARA_SELECTION_MODE_MASK = GENMASK(1, 0),
	HDMI_PHYCREG_CR_PARA_SELECTION_MODE_OFFSET = 0,
/* --- id_mhl_cdsense_status --- */
	/* MAINUNIT_STATUS field values */
	HDMI_MAINUNIT_STATUS_TMDSVALID_STABLE = BIT(1),
	HDMI_MAINUNIT_STATUS_AUDPLL_LOCK_STABLE = BIT(0),
/* --- id_i2c_slave --- */
	/* I2C_SLAVE_CONFIG0 field values */
	HDMI_I2C_SLAVE_CONFIG0_H22_SEL_ADDR_MASK = GENMASK(19, 12),
	HDMI_I2C_SLAVE_CONFIG0_H22_SEL_ADDR_OFFSET = 12,
	HDMI_I2C_SLAVE_CONFIG0_SPIKE_SUPPR_MASK = GENMASK(9, 8),
	HDMI_I2C_SLAVE_CONFIG0_SPIKE_SUPPR_OFFSET = 8,
	HDMI_I2C_SLAVE_CONFIG0_TIMEOUT_EN_MASK = BIT(4),
	HDMI_I2C_SLAVE_CONFIG0_TIMEOUT_EN_OFFSET = 4,
	HDMI_I2C_SLAVE_CONFIG0_TIMEOUT_CNT_MASK = GENMASK(2, 0),
	HDMI_I2C_SLAVE_CONFIG0_TIMEOUT_CNT_OFFSET = 0,
	/* I2C_SLAVE_CONFIG1 field values */
	HDMI_I2C_SLAVE_CONFIG1_SDA_OUT_HOLD_VALUE_MASK = GENMASK(15, 8),
	HDMI_I2C_SLAVE_CONFIG1_SDA_OUT_HOLD_VALUE_OFFSET = 8,
	HDMI_I2C_SLAVE_CONFIG1_SDA_IN_HOLD_VALUE_MASK = GENMASK(7, 0),
	HDMI_I2C_SLAVE_CONFIG1_SDA_IN_HOLD_VALUE_OFFSET = 0,
/* --- id_snps_audio_pll ---*/
	SNPS_AUDPLL_CONFIG1_NPIXEL_MODE_MASK = GENMASK(18, 16),
	SNPS_AUDPLL_CONFIG1_NPIXEL_MODE_OFFSET = 16,
	SNPS_AUDPLL_CONFIG1_TARG_FREF_MASK = GENMASK(9, 0),
	SNPS_AUDPLL_CONFIG1_TARG_FREF_OFFSET = 0,

	SNPS_AUDPLL_CONFIG2_REFCLK_CNT_MASK = GENMASK(10, 0),
	SNPS_AUDPLL_CONFIG2_REFCLK_CNT_OFFSET = 0,

	SNPS_AUDPLL_CONFIG3_VCOMODE_MASK = BIT(12),
	SNPS_AUDPLL_CONFIG3_VCOMODE_OFFSET = 12,
	SNPS_AUDPLL_CONFIG3_STANDBY_MASK = BIT(11),
	SNPS_AUDPLL_CONFIG3_STANDBY_OFFSET = 11,
	SNPS_AUDPLL_CONFIG3_RESIN_MASK = GENMASK(10, 7),
	SNPS_AUDPLL_CONFIG3_RESIN_OFFSET = 7,
	SNPS_AUDPLL_CONFIG3_PWRON_MASK = BIT(6),
	SNPS_AUDPLL_CONFIG3_PWRON_OFFSET = 6,
	SNPS_AUDPLL_CONFIG3_LOWFREQ_MASK = BIT(5),
	SNPS_AUDPLL_CONFIG3_LOWFREQ_OFFSET = 5,
	SNPS_AUDPLL_CONFIG3_GEAR_SHIFT_MASK = BIT(4),
	SNPS_AUDPLL_CONFIG3_GEAR_SHIFT_OFFSET = 4,
	SNPS_AUDPLL_CONFIG3_ENR_MASK = BIT(3),
	SNPS_AUDPLL_CONFIG3_ENR_OFFSET = 3,
	SNPS_AUDPLL_CONFIG3_ENP_MASK = BIT(2),
	SNPS_AUDPLL_CONFIG3_ENP_OFFSET = 2,
	SNPS_AUDPLL_CONFIG3_BYPASS_MASK = BIT(1),
	SNPS_AUDPLL_CONFIG3_BYPASS_OFFSET = 1,
	SNPS_AUDPLL_CONFIG3_REFPLLRST_N_MASK = BIT(0),
	SNPS_AUDPLL_CONFIG3_REFPLLRST_N_OFFSET = 0,
/* --- id_descrambler ---*/
	HDMI_DESCRAND_STATUS_FRL_SYNC = BIT(8),
	HDMI_DESCRAND_EN_CONTROL_SCRAMB_EN_MASK = BIT(0),
	HDMI_DESCRAND_EN_CONTROL_SCRAMB_EN_OFFSET = 0,
/* --- id_deframer --- */
	/* DEFRAMER_CONFIG0 field values */
	HDMI_DEFRAMER_CONFIG0_VS_CNT_THR_MASK = GENMASK(27, 20),
	HDMI_DEFRAMER_CONFIG0_VS_CNT_THR_OFFSET = 20,
	HDMI_DEFRAMER_CONFIG0_HS_POL_MASK = GENMASK(19, 18),
	HDMI_DEFRAMER_CONFIG0_HS_POL_OFFSET = 18,
	HDMI_DEFRAMER_CONFIG0_VS_POL_MASK = GENMASK(17, 16),
	HDMI_DEFRAMER_CONFIG0_VS_POL_OFFSET = 16,
	HDMI_DEFRAMER_CONFIG0_CTL_SPIKEFILTER_EN_MASK = BIT(12),
	HDMI_DEFRAMER_CONFIG0_CTL_SPIKEFILTER_EN_OFFSET = 12,
	HDMI_DEFRAMER_CONFIG0_VS_REMAPFILTER_EN_MASK = BIT(8),
	HDMI_DEFRAMER_CONFIG0_VS_REMAPFILTER_EN_OFFSET = 8,
	HDMI_DEFRAMER_CONFIG0_HS_FILTER_ORDER_MASK = GENMASK(3, 2),
	HDMI_DEFRAMER_CONFIG0_HS_FILTER_ORDER_OFFSET = 2,
	HDMI_DEFRAMER_CONFIG0_VS_FILTER_ORDER_MASK = GENMASK(1, 0),
	HDMI_DEFRAMER_CONFIG0_VS_FILTER_ORDER_OFFSET = 0,
	/* DEFRAMER_CONFIG1 field values */
	HDMI_DEFRAMER_CONFIG1_HDMI2DVI_THR_MASK = GENMASK(26, 24),
	HDMI_DEFRAMER_CONFIG1_HDMI2DVI_THR_OFFSET = 24,
	HDMI_DEFRAMER_CONFIG1_DVI2HDMI_THR_MASK = GENMASK(22, 20),
	HDMI_DEFRAMER_CONFIG1_DVI2HDMI_THR_OFFSET = 20,
	HDMI_DEFRAMER_CONFIG1_OPMODE_HDMI_MASK = GENMASK(17, 16),
	HDMI_DEFRAMER_CONFIG1_OPMODE_HDMI_OFFSET = 16,
	/* DEFRAMER_CONFIG1_OPMODE_HDMI possible values */
	HDMI_DEFRAMER_CONFIG1_OPMODE_AUTO = 0x0,
	HDMI_DEFRAMER_CONFIG1_OPMODE_DVI = 0x1,
	HDMI_DEFRAMER_CONFIG1_OPMODE_HDMI = 0x2,
	HDMI_DEFRAMER_CONFIG1_GB_ERR_THR_MASK = GENMASK(15, 8),
	HDMI_DEFRAMER_CONFIG1_GB_ERR_THR_OFFSET = 8,
	HDMI_DEFRAMER_CONFIG1_LAST_FRAME_GB_CHECK_MASK = GENMASK(7, 4),
	HDMI_DEFRAMER_CONFIG1_LAST_FRAME_GB_CHECK_OFFSET = 4,
	HDMI_DEFRAMER_CONFIG1_NUM_PREAMBLE_LOCK_MASK = GENMASK(3, 0),
	HDMI_DEFRAMER_CONFIG1_NUM_PREAMBLE_LOCK_OFFSET = 0,
	/* DEFRAMER_STATUS field values */
	HDMI_DEFRAMER_STATUS_OPMODE_MASK = GENMASK(6, 4),
	HDMI_DEFRAMER_STATUS_OPMODE_OFFSET = 4,
	HDMI_DEFRAMER_STATUS_AUTOHDMIDVI = BIT(0),
/* --- id_hdcp14 --- */
	/* HDMI_HDCP14_CONFIG field values */
	HDMI_HDCP14_CONFIG_REPEATER_MASK = BIT(28),
	HDMI_HDCP14_CONFIG_REPEATER_OFFSET = 28,
	HDMI_HDCP14_CONFIG_FASTREAUTH_MASK = BIT(27),
	HDMI_HDCP14_CONFIG_FASTREAUTH_OFFSET = 27,
	HDMI_HDCP14_CONFIG_FEATURES_1DOT1_MASK = BIT(26),
	HDMI_HDCP14_CONFIG_FEATURES_1DOT1_OFFSET = 26,
	HDMI_HDCP14_CONFIG_FASTI2C_MASK = BIT(25),
	HDMI_HDCP14_CONFIG_FASTI2C_OFFSET = 25,
	HDMI_HDCP14_CONFIG_HDMI_RSVD_MASK = BIT(24),
	HDMI_HDCP14_CONFIG_HDMI_RSVD_OFFSET = 24,
	HDMI_HDCP14_CONFIG_EESS_CTL_THR_MASK = GENMASK(19, 16),
	HDMI_HDCP14_CONFIG_EESS_CTL_THR_OFFSET = 16,
	HDMI_HDCP14_CONFIG_OESS_CTL3_THR_MASK = GENMASK(11, 8),
	HDMI_HDCP14_CONFIG_OESS_CTL3_THR_OFFSET = 8,
	HDMI_HDCP14_CONFIG_EESS_OESS_SEL_MASK = GENMASK(5, 4),
	HDMI_HDCP14_CONFIG_EESS_OESS_SEL_OFFSET = 4,
	HDMI_HDCP14_CONFIG_KEY_DECRYPT_EN_MASK = BIT(0),
	HDMI_HDCP14_CONFIG_KEY_DECRYPT_EN_OFFSET = 0,
	/* HDMI_HDCP14_WOO_CONFIG field values */
	HDMI_HDCP14_WOO_CONFIG_END_MASK = GENMASK(25, 16),
	HDMI_HDCP14_WOO_CONFIG_END_OFFSET = 16,
	HDMI_HDCP14_WOO_CONFIG_START_MASK = GENMASK(9, 0),
	HDMI_HDCP14_WOO_CONFIG_START_OFFSET = 0,
	/* HDMI_HDCP14_KEY_SEED field values */
	HDMI_HDCP14_KEY_SEED_MASK = GENMASK(15, 0),
	HDMI_HDCP14_KEY_SEED_OFFSET = 0,
	/* HDMI_HDCP14_KEY_STATUS field values */
	HDMI_HDCP14_KEY_STATUS_KEY_WR_OK = BIT(8),
	HDMI_HDCP14_KEY_STATUS_KEY_INDEX = GENMASK(5, 0),
	/* HDMI_HDCP14_STATUS field values */
	HDMI_HDCP14_STATUS_DECRYPT_ON = BIT(8),
	HDMI_HDCP14_STATUS_AUTH_CURSTATE_MASK = GENMASK(1, 0),
	HDMI_HDCP14_STATUS_AUTH_CURSTATE_OFFSET = 0,
	/* HDMI_HDCP14_BSTATUS field values */
	HDMI_HDCP14_BSTATUS_BSTATUS_MASK = GENMASK(15, 0),
	HDMI_HDCP14_BSTATUS_BSTATUS_OFFSET = 0,
	/* HDMI_HDCP14_RPT_KSV_H field values */
	HDMI_HDCP14_RPT_KSV_H_KSV_HIGH_MASK = GENMASK(7, 0),
	HDMI_HDCP14_RPT_KSV_H_KSV_HIGH_OFFSET = 0,
	/* HDMI_HDCP14_RPT_CONTROL field values */
	HDMI_HDCP14_RPT_CONTROL_LOSTAUTH_MASK = BIT(2),
	HDMI_HDCP14_RPT_CONTROL_LOSTAUTH_OFFSET = 2,
	HDMI_HDCP14_RPT_CONTROL_TIMEOUT_MASK = BIT(1),
	HDMI_HDCP14_RPT_CONTROL_TIMEOUT_OFFSET = 1,
	HDMI_HDCP14_RPT_CONTROL_KSVLISTREADY_MASK = BIT(0),
	HDMI_HDCP14_RPT_CONTROL_KSVLISTREADY_OFFSET = 0,
	/* HDMI_HDCP14_RPT_KSVFIFO field values */
	HDMI_HDCP14_RPT_KSVFIFO_KSV_INDEX_MASK = GENMASK(6, 0),
	HDMI_HDCP14_RPT_KSVFIFO_KSV_INDEX_OFFSET = 0,
	/* HDMI_HDCP14_RPT_STATUS field values */
	HDMI_HDCP14_RPT_STATUS_WAITINGKSV_MASK = BIT(8),
	HDMI_HDCP14_RPT_STATUS_WAITINGKSV_OFFSET = 8,
	HDMI_HDCP14_RPT_STATUS_KSVHOLD_MASK = BIT(4),
	HDMI_HDCP14_RPT_STATUS_KSVHOLD_OFFSET = 4,
	HDMI_HDCP14_RPT_STATUS_READY_MASK = BIT(0),
	HDMI_HDCP14_RPT_STATUS_READY_OFFSET = 0,
/* --- id_hdcp22 --- */
	/* HDCP22_CONFIG field values */
	HDMI_HDCP22_CONFIG_CD_OVR_VALUE_MASK = GENMASK(23, 20),
	HDMI_HDCP22_CONFIG_CD_OVR_VALUE_OFFSET = 20,
	HDMI_HDCP22_CONFIG_CD_OVR_EN_MASK = BIT(16),
	HDMI_HDCP22_CONFIG_CD_OVR_EN_OFFSET = 16,
	HDMI_HDCP22_CONFIG_HPD_MASK = BIT(12),
	HDMI_HDCP22_CONFIG_HPD_OFFSET = 12,
	HDMI_HDCP22_CONFIG_PKT_ERR_OVR_VALUE_MASK = BIT(9),
	HDMI_HDCP22_CONFIG_PKT_ERR_OVR_VALUE_OFFSET = 9,
	HDMI_HDCP22_CONFIG_PKT_ERR_OVR_EN_MASK = BIT(8),
	HDMI_HDCP22_CONFIG_PKT_ERR_OVR_EN_OFFSET = 8,
	HDMI_HDCP22_CONFIG_AVMUTE_OVR_VALUE_MASK = BIT(5),
	HDMI_HDCP22_CONFIG_AVMUTE_OVR_VALUE_OFFSET = 5,
	HDMI_HDCP22_CONFIG_AVMUTE_OVR_EN_MASK = BIT(4),
	HDMI_HDCP22_CONFIG_AVMUTE_OVR_EN_OFFSET = 4,
	HDMI_HDCP22_CONFIG_SWITCH_OVR_VALUE_MASK = BIT(2),
	HDMI_HDCP22_CONFIG_SWITCH_OVR_VALUE_OFFSET = 2,
	HDMI_HDCP22_CONFIG_SWITCH_OVR_EN_MASK = BIT(1),
	HDMI_HDCP22_CONFIG_SWITCH_OVR_EN_OFFSET = 1,
	HDMI_HDCP22_CONFIG_SWITCH_LCK_MASK = BIT(0),
	HDMI_HDCP22_CONFIG_SWITCH_LCK_OFFSET = 0,
	/* HDCP22_STATUS field values */
	HDMI_HDCP22_STATUS_CD_MASK = GENMASK(15, 12),
	HDMI_HDCP22_STATUS_CD_OFFSET = 12,
	HDMI_HDCP22_STATUS_AVMUTE = BIT(8),
	HDMI_HDCP22_STATUS_SWITCH_LCK = BIT(7),
	HDMI_HDCP22_STATUS_OVR_EN = BIT(6),
	HDMI_HDCP22_STATUS_OVR_VAL = BIT(5),
	HDMI_HDCP22_STATUS_TYPE_SEL = BIT(4),
	HDMI_HDCP22_STATUS_IN_AVMUTE = BIT(1),
	HDMI_HDCP22_STATUS_DECRYPTED = BIT(0),
/* --- id_video_processor --- */
	/* VIDEO_CONFIG2 field values */
	HDMI_VIDEO_CONFIG2_HSYNC_POL_OVR_EN_MASK = BIT(16),
	HDMI_VIDEO_CONFIG2_HSYNC_POL_OVR_EN_OFFSET = 16,
	HDMI_VIDEO_CONFIG2_HSYNC_POL_OVR_MASK = BIT(17),
	HDMI_VIDEO_CONFIG2_HSYNC_POL_OVR_OFFSET = 17,
	HDMI_VIDEO_CONFIG2_VSYNC_POL_OVR_EN_MASK = BIT(18),
	HDMI_VIDEO_CONFIG2_VSYNC_POL_OVR_EN_OFFSET = 18,
	HDMI_VIDEO_CONFIG2_VSYNC_POL_OVR_MASK = BIT(19),
	HDMI_VIDEO_CONFIG2_VSYNC_POL_OVR_OFFSET = 19,
	/* VIDEO_STATUS field values */
	HDMI_VIDEO_STATUS_PP_DIFF_CNT_MASK = GENMASK(15, 8),
	HDMI_VIDEO_STATUS_PP_DIFF_CNT_OFFSET = 8,
	HDMI_VIDEO_STATUS_PP_CURRENT_MASK = GENMASK(6, 4),
	HDMI_VIDEO_STATUS_PP_CURRENT_OFFSET = 4,
	HDMI_VIDEO_STATUS_CD_CURRENT_MASK = GENMASK(3, 0),
	HDMI_VIDEO_STATUS_CD_CURRENT_OFFSET = 0,
/* --- id_audio --- */
	/* AUDIO_FIFO_CONFIG field values */
	HDMI_AUDIO_FIFO_CONFIG_BYPASS_EN_MASK = BIT(2),
	HDMI_AUDIO_FIFO_CONFIG_BYPASS_EN_OFFSET = 2,
	HDMI_AUDIO_FIFO_CONFIG_FILL_STOP_MASK = BIT(1),
	HDMI_AUDIO_FIFO_CONFIG_FILL_STOP_OFFSET = 1,
	HDMI_AUDIO_FIFO_CONFIG_FILL_RESTART_MASK = BIT(0),
	HDMI_AUDIO_FIFO_CONFIG_FILL_RESTART_OFFSET = 0,
	/* AUDIO_FIFO_CONTROL field values */
	HDMI_AUDIO_FIFO_CONTROL_CLR_MAX_P_MASK = BIT(2),
	HDMI_AUDIO_FIFO_CONTROL_CLR_MAX_P_OFFSET = 2,
	HDMI_AUDIO_FIFO_CONTROL_CLR_MIN_P_MASK = BIT(1),
	HDMI_AUDIO_FIFO_CONTROL_CLR_MIN_P_OFFSET = 1,
	HDMI_AUDIO_FIFO_CONTROL_INIT_P_MASK = BIT(0),
	HDMI_AUDIO_FIFO_CONTROL_INIT_P_OFFSET = 0,

	/*AUDIO_FIFO_THR_PASS field values */
	HDMI_AUDIO_FIFO_THR_PASS_QST_MASK = GENMASK(9, 0),
	HDMI_AUDIO_FIFO_THR_PASS_QST_OFFSET = 0,

	/*AUDIO_FIFO_THR field values */
	HDMI_AUDIO_FIFO_THR_LOW_QST_MASK = GENMASK(25, 16),
	HDMI_AUDIO_FIFO_THR_LOW_QST_OFFSET = 0,
	HDMI_AUDIO_FIFO_THR_HIGH_QST_MASK = GENMASK(9, 0),
	HDMI_AUDIO_FIFO_THR_HIGH_QST_OFFSET = 0,

	/*AUDIO_FIFO_MUTE_THR field values */
	HDMI_AUDIO_FIFO_THR_MUTE_LOW_QST_MASK = GENMASK(25, 16),
	HDMI_AUDIO_FIFO_THR_MUTE_LOW_QST_OFFSET = 0,
	HDMI_AUDIO_FIFO_THR_MUTE_HIGH_QST_MASK = GENMASK(9, 0),
	HDMI_AUDIO_FIFO_THR_MUTE_HIGH_QST_OFFSET = 0,

	/* AUDIO_FIFO_STATUS1 field values */
	HDMI_AUDIO_FIFO_STATUS1_FILL_STATE_MAX_MASK = GENMASK(31, 16),
	HDMI_AUDIO_FIFO_STATUS1_FILL_STATE_MAX_OFFSET = 16,
	HDMI_AUDIO_FIFO_STATUS1_FILL_STATE_MIN_MASK = GENMASK(15, 0),
	HDMI_AUDIO_FIFO_STATUS1_FILL_STATE_MIN_OFFSET = 0,
	/* AUDIO_FIFO_STATUS2 field values */
	HDMI_AUDIO_FIFO_STATUS2_UNDERFLOW = BIT(25),
	HDMI_AUDIO_FIFO_STATUS2_OVERFLOW = BIT(24),
	HDMI_AUDIO_FIFO_STATUS2_FILL_STATE_MASK = GENMASK(15, 0),
	HDMI_AUDIO_FIFO_STATUS2_FILL_STATE_OFFSET = 0,
/* --- id_audio_processor --- */
	/* AUDIO_PROC_CONFIG0 field values */
	HDMI_AUDIO_PROC_CONFIG0_SPEAKER_ALLOC_OVR_VALUE_MASK = GENMASK(27, 20),
	HDMI_AUDIO_PROC_CONFIG0_SPEAKER_ALLOC_OVR_VALUE_OFFSET = 20,
	HDMI_AUDIO_PROC_CONFIG0_SPEAKER_ALLOC_OVR_EN_MASK = BIT(16),
	HDMI_AUDIO_PROC_CONFIG0_SPEAKER_ALLOC_OVR_EN_OFFSET = 16,
	HDMI_AUDIO_PROC_CONFIG0_MUTE_OVR_VALUE_MASK = BIT(13),
	HDMI_AUDIO_PROC_CONFIG0_MUTE_OVR_VALUE_OFFSET = 13,
	HDMI_AUDIO_PROC_CONFIG0_MUTE_OVR_EN_MASK = BIT(12),
	HDMI_AUDIO_PROC_CONFIG0_MUTE_OVR_EN_OFFSET = 12,
	HDMI_AUDIO_PROC_CONFIG0_CHAN_SPREAD_EN_MASK = BIT(5),
	HDMI_AUDIO_PROC_CONFIG0_CHAN_SPREAD_EN_OFFSET = 5,
	HDMI_AUDIO_PROC_CONFIG0_I2S_BPCUV_EN_MASK = BIT(4),
	HDMI_AUDIO_PROC_CONFIG0_I2S_BPCUV_EN_OFFSET = 4,
	HDMI_AUDIO_PROC_CONFIG0_SPDIF_EN_MASK = BIT(2),
	HDMI_AUDIO_PROC_CONFIG0_SPDIF_EN_OFFSET = 2,
	HDMI_AUDIO_PROC_CONFIG0_I2S_EN_MASK = BIT(1),
	HDMI_AUDIO_PROC_CONFIG0_I2S_EN_OFFSET = 1,
	HDMI_AUDIO_PROC_CONFIG0_PAO_EN_MASK = BIT(0),
	HDMI_AUDIO_PROC_CONFIG0_PAO_EN_OFFSET = 0,
	/* AUDIO_PROC_CONFIG1 field values */
	HDMI_AUDIO_PROC_CONFIG1_FORCE_PLL4X_EN_MASK = BIT(13),
	HDMI_AUDIO_PROC_CONFIG1_FORCE_PLL4X_EN_OFFSET = 13,
	HDMI_AUDIO_PROC_CONFIG1_CHSTATUS_SELECT_MASK = GENMASK(11, 10),
	HDMI_AUDIO_PROC_CONFIG1_CHSTATUS_SELECT_OFFSET = 10,
	HDMI_AUDIO_PROC_CONFIG1_DET_THR_MASK = GENMASK(8, 4),
	HDMI_AUDIO_PROC_CONFIG1_DET_THR_OFFSET = 4,
	HDMI_AUDIO_PROC_CONFIG1_LAYOUT_OVR_VALUE_MASK = BIT(1),
	HDMI_AUDIO_PROC_CONFIG1_LAYOUT_OVR_VALUE_OFFSET = 1,
	HDMI_AUDIO_PROC_CONFIG1_LAYOUT_OVR_EN_MASK = BIT(0),
	HDMI_AUDIO_PROC_CONFIG1_LAYOUT_OVR_EN_OFFSET = 0,
	/* AUDIO_PROC_CONFIG2 field values */
	HDMI_AUDIO_PROC_CONFIG2_AFIFO_THR_PASS_DEMUTEMASK_EN_MASK = BIT(24),
	HDMI_AUDIO_PROC_CONFIG2_AFIFO_THR_PASS_DEMUTEMASK_EN_OFFSET = 24,
	HDMI_AUDIO_PROC_CONFIG2_SAMPLE_FLAT_DEMUTEMASK_EN_MASK = GENMASK(23, 20),
	HDMI_AUDIO_PROC_CONFIG2_SAMPLE_FLAT_DEMUTEMASK_EN_OFFSET = 20,
	HDMI_AUDIO_PROC_CONFIG2_AVMUTE_DEMUTEMASK_EN_MASK = BIT(16),
	HDMI_AUDIO_PROC_CONFIG2_AVMUTE_DEMUTEMASK_EN_OFFSET = 16,
	HDMI_AUDIO_PROC_CONFIG2_AFIFO_THR_MUTE_LOW_MUTEMASK_EN_MASK = BIT(9),
	HDMI_AUDIO_PROC_CONFIG2_AFIFO_THR_MUTE_LOW_MUTEMASK_EN_OFFSET = 9,
	HDMI_AUDIO_PROC_CONFIG2_AFIFO_THR_MUTE_HIGH_MUTEMASK_EN_MASK = BIT(8),
	HDMI_AUDIO_PROC_CONFIG2_AFIFO_THR_MUTE_HIGH_MUTEMASK_EN_OFFSET = 8,
	HDMI_AUDIO_PROC_CONFIG2_SAMPLE_FLAT_MUTEMASK_EN_MASK = GENMASK(7, 4),
	HDMI_AUDIO_PROC_CONFIG2_SAMPLE_FLAT_MUTEMASK_EN_OFFSET = 4,
	HDMI_AUDIO_PROC_CONFIG2_AUD_FMT_CHG_MUTEMASK_N_MASK = BIT(1),
	HDMI_AUDIO_PROC_CONFIG2_AUD_FMT_CHG_MUTEMASK_N_OFFSET = 1,
	HDMI_AUDIO_PROC_CONFIG2_AVMUTE_MUTEMASK_EN_MASK = BIT(0),
	HDMI_AUDIO_PROC_CONFIG2_AVMUTE_MUTEMASK_EN_OFFSET = 0,
	/* AUDIO_PROC_STATUS1 field values */
	HDMI_AUDIO_PROC_STATUS1_SPEAKER_ALLOC_MASK = GENMASK(31, 24),
	HDMI_AUDIO_PROC_STATUS1_SPEAKER_ALLOC_OFFSET = 24,
	HDMI_AUDIO_PROC_STATUS1_SAMPLE_PRESENT_MASK = GENMASK(20, 17),
	HDMI_AUDIO_PROC_STATUS1_SAMPLE_PRESENT_OFFSET = 17,
	HDMI_AUDIO_PROC_STATUS1_SAMPLE_FLAT_MASK = GENMASK(16, 13),
	HDMI_AUDIO_PROC_STATUS1_SAMPLE_FLAT_OFFSET = 13,
	HDMI_AUDIO_PROC_STATUS1_MUTE = BIT(8),
	HDMI_AUDIO_PROC_STATUS1_LAYOUT_MASK = BIT(3),
	HDMI_AUDIO_PROC_STATUS1_LAYOUT_OFFSET = 3,
	HDMI_AUDIO_PROC_STATUS1_FMT_MASK = GENMASK(2, 0),
	HDMI_AUDIO_PROC_STATUS1_FMT_OFFSET = 0,
	/* AUDIO_PROC_STATUS2 field values */
	HDMI_AUDIO_PROC_STATUS2_SAMPLE_PRESENT_MASK = GENMASK(7, 4),
	HDMI_AUDIO_PROC_STATUS2_SAMPLE_PRESENT_OFFSET = 4,
	HDMI_AUDIO_PROC_STATUS2_SAMPLE_FLAT_MASK = GENMASK(3, 0),
	HDMI_AUDIO_PROC_STATUS2_SAMPLE_FLAT_OFFSET = 0,
/* --- id_scdc --- */
	/* SCDC_CONFIG field values */
	HDMI_SCDC_CONFIG_RR_IFFLAGS_ALREADYSET_MASK = BIT(5),
	HDMI_SCDC_CONFIG_RR_IFFLAGS_ALREADYSET_OFFSET = 5,
	HDMI_SCDC_CONFIG_HPDLOW_MASK = BIT(1),
	HDMI_SCDC_CONFIG_HPDLOW_OFFSET = 1,
	HDMI_SCDC_CONFIG_POWERPROVIDED_MASK = BIT(0),
	HDMI_SCDC_CONFIG_POWERPROVIDED_OFFSET = 0,
	/* SCDC_REGBANK_STATUS0 field values */
	HDMI_SCDC_REGBANK_STATUS0_FRL_START_STS = BIT(28),
	HDMI_SCDC_REGBANK_STATUS0_RSED_UPDATE = BIT(14),
	HDMI_SCDC_REGBANK_STATUS0_FLT_UPDATE = BIT(13),
	HDMI_SCDC_REGBANK_STATUS0_FRL_START = BIT(12),
	HDMI_SCDC_REGBANK_STATUS0_SOURCE_TEST_UPDATE = BIT(11),
	HDMI_SCDC_REGBANK_STATUS0_RRTEST = BIT(10),
	HDMI_SCDC_REGBANK_STATUS0_CEDUPDATE = BIT(9),
	HDMI_SCDC_REGBANK_STATUS0_STATUSUPDATE = BIT(8),
	HDMI_SCDC_REGBANK_STATUS0_SOURCEVERSION_MASK = GENMASK(7, 0),
	HDMI_SCDC_REGBANK_STATUS0_SOURCEVERSION_OFFSET = 0,
	/* SCDC_REGBANK_STATUS1 field values */
	HDMI_SCDC_REGBANK_STATUS1_SCRAMB_STATUS = BIT(8),
	HDMI_SCDC_REGBANK_STATUS1_TMDSBITCLKRATIO = BIT(1),
	HDMI_SCDC_REGBANK_STATUS1_SCRAMB_EN = BIT(0),
	/* SCDC_REGBANK_STATUS2 field values */
	HDMI_SCDC_REGBANK_STATUS2_FFE_LEVELS_MASK = GENMASK(15, 12),
	HDMI_SCDC_REGBANK_STATUS2_FFE_LEVELS_OFFSET = 12,
	HDMI_SCDC_REGBANK_STATUS2_FRL_RATE_MASK = GENMASK(11, 8),
	HDMI_SCDC_REGBANK_STATUS2_FRL_RATE_OFFSET = 8,
	HDMI_SCDC_REGBANK_STATUS2_FLT_NO_RETRAIN = BIT(1),
	HDMI_SCDC_REGBANK_STATUS2_RRENABLE = BIT(0),
	/* SCDC_REGBANK_STATUS3 field values */
	HDMI_SCDC_REGBANK_STATUS3_FLT_LN3_LTP_REQ_MASK = GENMASK(31, 28),
	HDMI_SCDC_REGBANK_STATUS3_FLT_LN3_LTP_REQ_OFFSET = 28,
	HDMI_SCDC_REGBANK_STATUS3_FLT_LN2_LTP_REQ_MASK = GENMASK(27, 24),
	HDMI_SCDC_REGBANK_STATUS3_FLT_LN2_LTP_REQ_OFFSET = 24,
	HDMI_SCDC_REGBANK_STATUS3_FLT_LN1_LTP_REQ_MASK = GENMASK(23, 20),
	HDMI_SCDC_REGBANK_STATUS3_FLT_LN1_LTP_REQ_OFFSET = 20,
	HDMI_SCDC_REGBANK_STATUS3_FLT_LN0_LTP_REQ_MASK = GENMASK(19, 16),
	HDMI_SCDC_REGBANK_STATUS3_FLT_LN0_LTP_REQ_OFFSET = 16,
	HDMI_SCDC_REGBANK_STATUS3_FLT_READY = BIT(14),
	HDMI_SCDC_REGBANK_STATUS3_LN3LOCKED = BIT(12),
	HDMI_SCDC_REGBANK_STATUS3_LN2LOCKED = BIT(11),
	HDMI_SCDC_REGBANK_STATUS3_LN1LOCKED = BIT(10),
	HDMI_SCDC_REGBANK_STATUS3_LN0LOCKED = BIT(9),
	HDMI_SCDC_REGBANK_STATUS3_CH2LOCKED = BIT(3),
	HDMI_SCDC_REGBANK_STATUS3_CH1LOCKED = BIT(2),
	HDMI_SCDC_REGBANK_STATUS3_CH0LOCKED = BIT(1),
	HDMI_SCDC_REGBANK_STATUS3_CLOCKDETECTED = BIT(0),
	/* SCDC_REGBANK_STATUS4 field values */
	HDMI_SCDC_REGBANK_STATUS4_ERR_DET1_VALID = BIT(31),
	HDMI_SCDC_REGBANK_STATUS4_ERR_DET1_MASK = GENMASK(30, 16),
	HDMI_SCDC_REGBANK_STATUS4_ERR_DET1_OFFSET = 16,
	HDMI_SCDC_REGBANK_STATUS4_ERR_DET0_VALID = BIT(15),
	HDMI_SCDC_REGBANK_STATUS4_ERR_DET0_MASK = GENMASK(14, 0),
	HDMI_SCDC_REGBANK_STATUS4_ERR_DET0_OFFSET = 0,
	/* SCDC_REGBANK_STATUS5 field values */
	HDMI_SCDC_REGBANK_STATUS5_ERDET_LANE0_VALID = BIT(31),
	HDMI_SCDC_REGBANK_STATUS5_ERDET_LANE0_MASK = GENMASK(30, 16),
	HDMI_SCDC_REGBANK_STATUS5_ERDET_LANE0_OFFSET = 16,
	HDMI_SCDC_REGBANK_STATUS5_ERR_DET2_VALID = BIT(15),
	HDMI_SCDC_REGBANK_STATUS5_ERR_DET2_MASK = GENMASK(14, 0),
	HDMI_SCDC_REGBANK_STATUS5_ERR_DET2_OFFSET = 0,
	/* SCDC_REGBANK_STATUS6 field values */
	HDMI_SCDC_REGBANK_STATUS6_ERDET_LANE2_VALID = BIT(31),
	HDMI_SCDC_REGBANK_STATUS6_ERDET_LANE2_MASK = GENMASK(30, 16),
	HDMI_SCDC_REGBANK_STATUS6_ERDET_LANE2_OFFSET = 16,
	HDMI_SCDC_REGBANK_STATUS6_ERDET_LANE1_VALID = BIT(15),
	HDMI_SCDC_REGBANK_STATUS6_ERDET_LANE1_MASK = GENMASK(14, 0),
	HDMI_SCDC_REGBANK_STATUS6_ERDET_LANE1_OFFSET = 0,
	/* SCDC_REGBANK_STATUS7 field values */
	HDMI_SCDC_REGBANK_STATUS7_RSFEC_CERDET_VALID = BIT(31),
	HDMI_SCDC_REGBANK_STATUS7_RSFEC_CERDET_MASK = GENMASK(30, 16),
	HDMI_SCDC_REGBANK_STATUS7_RSFEC_CERDET_OFFSET = 16,
	HDMI_SCDC_REGBANK_STATUS7_ERDET_LANE3_VALID = BIT(15),
	HDMI_SCDC_REGBANK_STATUS7_ERDET_LANE3_MASK = GENMASK(14, 0),
	HDMI_SCDC_REGBANK_STATUS7_ERDET_LANE3_OFFSET = 0,
	/* SCDC_REGBANK_CONFIG0 field values */
	HDMI_SCDC_REGBANK_CONFIG0_SINKVERSION_QST_MASK = GENMASK(7, 0),
	HDMI_SCDC_REGBANK_CONFIG0_SINKVERSION_QST_OFFSET = 0,
/* --- id_psvg --- */
	/* PSVG_CONFIG0 field values */
	HDMI_PSVG_CONFIG0_CONNECTION_SEL_QST_MASK = GENMASK(29, 28),
	HDMI_PSVG_CONFIG0_CONNECTION_SEL_QST_OFFSET = 28,
	HDMI_PSVG_CONFIG0_COLORRANGE_QST_MASK = BIT(24),
	HDMI_PSVG_CONFIG0_COLORRANGE_QST_OFFSET = 24,
	HDMI_PSVG_CONFIG0_COLORDEPTH_QST_MASK = GENMASK(23, 20),
	HDMI_PSVG_CONFIG0_COLORDEPTH_QST_OFFSET = 20,
	HDMI_PSVG_CONFIG0_PREPETITION_QST_MASK = GENMASK(19, 16),
	HDMI_PSVG_CONFIG0_PREPETITION_QST_OFFSET = 16,
	HDMI_PSVG_CONFIG0_COLORIMETRY_QST_MASK = GENMASK(14, 12),
	HDMI_PSVG_CONFIG0_COLORIMETRY_QST_OFFSET = 12,
	HDMI_PSVG_CONFIG0_VBLANKOSC_QST_MASK = BIT(9),
	HDMI_PSVG_CONFIG0_VBLANKOSC_QST_OFFSET = 9,
	HDMI_PSVG_CONFIG0_ILACE_QST_MASK = BIT(8),
	HDMI_PSVG_CONFIG0_ILACE_QST_OFFSET = 8,
	HDMI_PSVG_CONFIG0_VS_POL_QST_MASK = BIT(6),
	HDMI_PSVG_CONFIG0_VS_POL_QST_OFFSET = 6,
	HDMI_PSVG_CONFIG0_HS_POL_QST_MASK = BIT(5),
	HDMI_PSVG_CONFIG0_HS_POL_QST_OFFSET = 5,
	HDMI_PSVG_CONFIG0_DE_POL_QST_MASK = BIT(4),
	HDMI_PSVG_CONFIG0_DE_POL_QST_OFFSET = 4,
	HDMI_PSVG_CONFIG0_EN_MASK = BIT(0),
	HDMI_PSVG_CONFIG0_EN_OFFSET = 0,
	/* PSVG_CONFIG1 field values */
	HDMI_PSVG_CONFIG1_PATT_MODE_QST_MASK = GENMASK(17, 16),
	HDMI_PSVG_CONFIG1_PATT_MODE_QST_OFFSET = 16,
	HDMI_PSVG_CONFIG1_3D_STRUCT_QST_MASK = GENMASK(7, 4),
	HDMI_PSVG_CONFIG1_3D_STRUCT_QST_OFFSET = 4,
	HDMI_PSVG_CONFIG1_3D_FRAMESEQ_QST_MASK = BIT(1),
	HDMI_PSVG_CONFIG1_3D_FRAMESEQ_QST_OFFSET = 1,
	HDMI_PSVG_CONFIG1_3D_EN_QST_MASK = BIT(0),
	HDMI_PSVG_CONFIG1_3D_EN_QST_OFFSET = 0,
/* --- id_frl_ced --- */
	/* FRL_CED_DYN_STATUS1 field values */
	HDMI_FRL_CED_DYN_STATUS1_ERRCNT_LANE1_MASK = GENMASK(30, 16),
	HDMI_FRL_CED_DYN_STATUS1_ERRCNT_LANE1_OFFSET = 16,
	HDMI_FRL_CED_DYN_STATUS1_ERRCNT_LANE0_MASK = GENMASK(14, 0),
	HDMI_FRL_CED_DYN_STATUS1_ERRCNT_LANE0_OFFSET = 0,
	/* FRL_CED_DYN_STATUS2 field values */
	HDMI_FRL_CED_DYN_STATUS2_ERRCNT_LANE3_MASK = GENMASK(30, 16),
	HDMI_FRL_CED_DYN_STATUS2_ERRCNT_LANE3_OFFSET = 16,
	HDMI_FRL_CED_DYN_STATUS2_ERRCNT_LANE2_MASK = GENMASK(14, 0),
	HDMI_FRL_CED_DYN_STATUS2_ERRCNT_LANE2_OFFSET = 0,
/* --- id_packet_extractor --- */
	/* PKTEX_BCHERR_ACC_STATUS field values */
	HDMI_PKTEX_BCHERR_ACC_STATUS_AUDERR_MASK = GENMASK(31, 16),
	HDMI_PKTEX_BCHERR_ACC_STATUS_AUDERR_OFFSET = 16,
	HDMI_PKTEX_BCHERR_ACC_STATUS_ERR_MASK = GENMASK(15, 0),
	HDMI_PKTEX_BCHERR_ACC_STATUS_ERR_OFFSET = 0,
/* --- id_frl_unpacker --- */
	/* FRL_UNPACKER_STATUS field values */
	HDMI_FRL_UNPACKER_STATUS_TYPE_ERR_CNT_MASK = GENMASK(23, 16),
	HDMI_FRL_UNPACKER_STATUS_TYPE_ERR_CNT_OFFSET = 16,
	HDMI_FRL_UNPACKER_STATUS_LENGTH_ERR_CNT_MASK = GENMASK(7, 0),
	HDMI_FRL_UNPACKER_STATUS_LENGTH_ERR_CNT_OFFSET = 0,
/* --- id_packet_decoder --- */
	/* PKTDEC_ACR_CONFIG field values */
	HDMI_PKTDEC_ACR_CONFIG_DELTACTS_THR_MASK = GENMASK(6, 4),
	HDMI_PKTDEC_ACR_CONFIG_DELTACTS_THR_OFFSET = 4,
	HDMI_PKTDEC_ACR_CONFIG_CTS_N_OVR_EN_MASK = BIT(0),
	HDMI_PKTDEC_ACR_CONFIG_CTS_N_OVR_EN_OFFSET = 0,
/* --- id_video_monitor --- */
	/* HDMI_VMON_CONTROL field values */
	HDMI_VMON_CONTROL_SOURCE_SEL_MASK = GENMASK(30, 28),
	HDMI_VMON_CONTROL_SOURCE_SEL_OFFSET = 28,
	/* HDMI_VMON_STATUS1 field values */
	HDMI_VMON_STATUS1_HSYNCWIDTH_MASK = GENMASK(31, 16),
	HDMI_VMON_STATUS1_HSYNCWIDTH_OFFSET = 16,
	HDMI_VMON_STATUS1_HFRONT_MASK = GENMASK(15, 0),
	HDMI_VMON_STATUS1_HFRONT_OFFSET = 0,
	/* HDMI_VMON_STATUS2 field values */
	HDMI_VMON_STATUS2_HBLANK_MASK = GENMASK(31, 16),
	HDMI_VMON_STATUS2_HBLANK_OFFSET = 16,
	HDMI_VMON_STATUS2_HBACK_MASK = GENMASK(15, 0),
	HDMI_VMON_STATUS2_HBACK_OFFSET = 0,
	/* HDMI_VMON_STATUS3 field values */
	HDMI_VMON_STATUS3_HTOTAL_MASK = GENMASK(31, 16),
	HDMI_VMON_STATUS3_HTOTAL_OFFSET = 16,
	HDMI_VMON_STATUS3_HACTIVE_MASK = GENMASK(15, 0),
	HDMI_VMON_STATUS3_HACTIVE_OFFSET = 0,
	/* HDMI_VMON_STATUS4 field values */
	HDMI_VMON_STATUS4_VSYNCWIDTH_MASK = GENMASK(31, 16),
	HDMI_VMON_STATUS4_VSYNCWIDTH_OFFSET = 16,
	HDMI_VMON_STATUS4_VFRONT_MASK = GENMASK(15, 0),
	HDMI_VMON_STATUS4_VFRONT_OFFSET = 0,
	/* HDMI_VMON_STATUS5 field values */
	HDMI_VMON_STATUS5_VBLANK_MASK = GENMASK(31, 16),
	HDMI_VMON_STATUS5_VBLANK_OFFSET = 16,
	HDMI_VMON_STATUS5_VBACK_MASK = GENMASK(15, 0),
	HDMI_VMON_STATUS5_VBACK_OFFSET = 0,
	/* HDMI_VMON_STATUS6 field values */
	HDMI_VMON_STATUS6_VTOTAL_MASK = GENMASK(31, 16),
	HDMI_VMON_STATUS6_VTOTAL_OFFSET = 16,
	HDMI_VMON_STATUS6_VACTIVE_MASK = GENMASK(15, 0),
	HDMI_VMON_STATUS6_VACTIVE_OFFSET = 0,
	/* HDMI_VMON_STATUS7 field values */
	HDMI_VMON_STATUS7_ALT_DETECT = BIT(8),
	HDMI_VMON_STATUS7_ILACE_DETECT = BIT(4),
	HDMI_VMON_STATUS7_FIELD_DETECT = BIT(0),
/* --- id_cec --- */
	/* HDMI_CEC_STATUS field values */
	HDMI_CEC_STATUS_TX_BUSY = BIT(8),
	HDMI_CEC_STATUS_RX_BUSY = BIT(4),
	HDMI_CEC_STATUS_FRAME_SEND_PENDING = BIT(0),
	/* HDMI_CEC_CONFIG field values */
	HDMI_CEC_CONFIG_RX_AUTOMATIC_DRIVE_ACKNOWLEDGE_MASK = BIT(9),
	HDMI_CEC_CONFIG_RX_AUTOMATIC_DRIVE_ACKNOWLEDGE_OFFSET = 9,
	HDMI_CEC_CONFIG_CECFILTER_MASK = BIT(8),
	HDMI_CEC_CONFIG_CECFILTER_OFFSET = 8,
	HDMI_CEC_CONFIG_FRAME_NRETRANS_MASK = GENMASK(5, 4),
	HDMI_CEC_CONFIG_FRAME_NRETRANS_OFFSET = 4,
	HDMI_CEC_CONFIG_BROADCAST_NACK_MASK = BIT(1),
	HDMI_CEC_CONFIG_BROADCAST_NACK_OFFSET = 1,
	HDMI_CEC_CONFIG_TXREQ_DISCARD_IF_RXBUSY_MASK = BIT(0),
	HDMI_CEC_CONFIG_TXREQ_DISCARD_IF_RXBUSY_OFFSET = 0,
	/* HDMI_CEC_ADDR field values */
	HDMI_CEC_ADDR_FOLLOWER_ADDR_MASK = GENMASK(14, 0),
	HDMI_CEC_ADDR_FOLLOWER_ADDR_OFFSET = 0,
/* --- id_main_unit_interrupt --- */
	/* MAINUNIT_0_INT_STATUS field values */
	HDMI_MAINUNIT_0_INT_STATUS_REGBANK_READY = BIT(31),
	HDMI_MAINUNIT_0_INT_STATUS_APB_IF_READY = BIT(30),
	HDMI_MAINUNIT_0_INT_STATUS_TIMER_BASE_LOCKED = BIT(26),
	HDMI_MAINUNIT_0_INT_STATUS_TMDSQP_CK_OFF = BIT(5),
	HDMI_MAINUNIT_0_INT_STATUS_TMDSQP_CK_LOCKED = BIT(4),
	HDMI_MAINUNIT_0_INT_STATUS_AUDIO_CK_OFF = BIT(1),
	HDMI_MAINUNIT_0_INT_STATUS_AUDIO_CK_LOCKED = BIT(0),
	/* MAINUNIT_0_INT_MASK_N field values */
	HDMI_MAINUNIT_0_INT_MASK_N_REGBANK_READY_MASK = BIT(31),
	HDMI_MAINUNIT_0_INT_MASK_N_REGBANK_READY_OFFSET = 31,
	HDMI_MAINUNIT_0_INT_MASK_N_APB_IF_READY_MASK = BIT(30),
	HDMI_MAINUNIT_0_INT_MASK_N_APB_IF_READY_OFFSET = 30,
	HDMI_MAINUNIT_0_INT_MASK_N_TIMER_BASE_LOCKED_MASK = BIT(26),
	HDMI_MAINUNIT_0_INT_MASK_N_TIMER_BASE_LOCKED_OFFSET = 26,
	HDMI_MAINUNIT_0_INT_MASK_N_TMDSQP_CK_OFF_MASK = BIT(5),
	HDMI_MAINUNIT_0_INT_MASK_N_TMDSQP_CK_OFF_OFFSET = 5,
	HDMI_MAINUNIT_0_INT_MASK_N_TMDSQP_CK_LOCKED_MASK = BIT(4),
	HDMI_MAINUNIT_0_INT_MASK_N_TMDSQP_CK_LOCKED_OFFSET = 4,
	HDMI_MAINUNIT_0_INT_MASK_N_AUDIO_CK_OFF_MASK = BIT(1),
	HDMI_MAINUNIT_0_INT_MASK_N_AUDIO_CK_OFF_OFFSET = 1,
	HDMI_MAINUNIT_0_INT_MASK_N_AUDIO_CK_LOCKED_MASK = BIT(0),
	HDMI_MAINUNIT_0_INT_MASK_N_AUDIO_CK_LOCKED_OFFSET = 0,
	/* MAINUNIT_0_INT_CLEAR field values */
	HDMI_MAINUNIT_0_INT_CLEAR_REGBANK_READY_MASK = BIT(31),
	HDMI_MAINUNIT_0_INT_CLEAR_REGBANK_READY_OFFSET = 31,
	HDMI_MAINUNIT_0_INT_CLEAR_APB_IF_READY_MASK = BIT(30),
	HDMI_MAINUNIT_0_INT_CLEAR_APB_IF_READY_OFFSET = 30,
	HDMI_MAINUNIT_0_INT_CLEAR_TIMER_BASE_LOCKED_MASK = BIT(26),
	HDMI_MAINUNIT_0_INT_CLEAR_TIMER_BASE_LOCKED_OFFSET = 26,
	HDMI_MAINUNIT_0_INT_CLEAR_TMDSQP_CK_OFF_MASK = BIT(5),
	HDMI_MAINUNIT_0_INT_CLEAR_TMDSQP_CK_OFF_OFFSET = 5,
	HDMI_MAINUNIT_0_INT_CLEAR_TMDSQP_CK_LOCKED_MASK = BIT(4),
	HDMI_MAINUNIT_0_INT_CLEAR_TMDSQP_CK_LOCKED_OFFSET = 4,
	HDMI_MAINUNIT_0_INT_CLEAR_AUDIO_CK_OFF_MASK = BIT(1),
	HDMI_MAINUNIT_0_INT_CLEAR_AUDIO_CK_OFF_OFFSET = 1,
	HDMI_MAINUNIT_0_INT_CLEAR_AUDIO_CK_LOCKED_MASK = BIT(0),
	HDMI_MAINUNIT_0_INT_CLEAR_AUDIO_CK_LOCKED_OFFSET = 0,
	/* MAINUNIT_1_INT_STATUS field values */
	HDMI_MAINUNIT_1_INT_STATUS_CEC_POWERED_DOWN = BIT(13),
	HDMI_MAINUNIT_1_INT_STATUS_CEC_POWERED_UP = BIT(12),
	HDMI_MAINUNIT_1_INT_STATUS_AVPUNIT_POWERED_DOWN = BIT(1),
	HDMI_MAINUNIT_1_INT_STATUS_AVPUNIT_POWERED_UP = BIT(0),
	/* MAINUNIT_1_INT_MASK_N field values */
	HDMI_MAINUNIT_1_INT_MASK_N_CEC_POWERED_DOWN_MASK = BIT(13),
	HDMI_MAINUNIT_1_INT_MASK_N_CEC_POWERED_DOWN_OFFSET = 13,
	HDMI_MAINUNIT_1_INT_MASK_N_CEC_POWERED_UP_MASK = BIT(12),
	HDMI_MAINUNIT_1_INT_MASK_N_CEC_POWERED_UP_OFFSET = 12,
	HDMI_MAINUNIT_1_INT_MASK_N_AVPUNIT_POWERED_DOWN_MASK = BIT(1),
	HDMI_MAINUNIT_1_INT_MASK_N_AVPUNIT_POWERED_DOWN_OFFSET = 1,
	HDMI_MAINUNIT_1_INT_MASK_N_AVPUNIT_POWERED_UP_MASK = BIT(0),
	HDMI_MAINUNIT_1_INT_MASK_N_AVPUNIT_POWERED_UP_OFFSET = 0,
	/* MAINUNIT_1_INT_CLEAR field values */
	HDMI_MAINUNIT_1_INT_CLEAR_CEC_POWERED_DOWN_MASK = BIT(13),
	HDMI_MAINUNIT_1_INT_CLEAR_CEC_POWERED_DOWN_OFFSET = 13,
	HDMI_MAINUNIT_1_INT_CLEAR_CEC_POWERED_UP_MASK = BIT(12),
	HDMI_MAINUNIT_1_INT_CLEAR_CEC_POWERED_UP_OFFSET = 12,
	HDMI_MAINUNIT_1_INT_CLEAR_AVPUNIT_POWERED_DOWN_MASK = BIT(1),
	HDMI_MAINUNIT_1_INT_CLEAR_AVPUNIT_POWERED_DOWN_OFFSET = 1,
	HDMI_MAINUNIT_1_INT_CLEAR_AVPUNIT_POWERED_UP_MASK = BIT(0),
	HDMI_MAINUNIT_1_INT_CLEAR_AVPUNIT_POWERED_UP_OFFSET = 0,
	/* MAINUNIT_2_INT_STATUS field values */
	HDMI_MAINUNIT_2_STATUS_PHYCREG_CR_TIMEOUT_MASK = BIT(12),
	HDMI_MAINUNIT_2_STATUS_PHYCREG_CR_TIMEOUT_OFFSET = 12,
	HDMI_MAINUNIT_2_STATUS_PHYCREG_CR_READ_DONE_MASK = BIT(11),
	HDMI_MAINUNIT_2_STATUS_PHYCREG_CR_READ_DONE_OFFSET = 11,
	HDMI_MAINUNIT_2_STATUS_PHYCREG_CR_WRITE_DONE_MASK = BIT(10),
	HDMI_MAINUNIT_2_STATUS_PHYCREG_CR_WRITE_DONE_OFFSET = 10,
	HDMI_MAINUNIT_2_STATUS_PHYCREG_CR_SELECTIONMODE_DONE_MASK = BIT(8),
	HDMI_MAINUNIT_2_STATUS_PHYCREG_CR_SELECTIONMODE_DONE_OFFSET = 8,
	HDMI_MAINUNIT_2_INT_STATUS_TMDSVALID_STABLE = BIT(1),
	HDMI_MAINUNIT_2_INT_STATUS_AUDPLL_LOCK_STABLE = BIT(0),
	/* MAINUNIT_2_INT_MASK_N field values */
	HDMI_MAINUNIT_2_INT_MASK_N_PHYCREG_CR_TIMEOUT_MASK = BIT(12),
	HDMI_MAINUNIT_2_INT_MASK_N_PHYCREG_CR_TIMEOUT_OFFSET = 12,
	HDMI_MAINUNIT_2_INT_MASK_N_PHYCREG_CR_READ_DONE_MASK = BIT(11),
	HDMI_MAINUNIT_2_INT_MASK_N_PHYCREG_CR_READ_DONE_OFFSET = 11,
	HDMI_MAINUNIT_2_INT_MASK_N_PHYCREG_CR_WRITE_DONE_MASK = BIT(10),
	HDMI_MAINUNIT_2_INT_MASK_N_PHYCREG_CR_WRITE_DONE_OFFSET = 10,
	HDMI_MAINUNIT_2_INT_MASK_N_PHYCREG_CR_SELECTIONMODE_DONE_MASK = BIT(8),
	HDMI_MAINUNIT_2_INT_MASK_N_PHYCREG_CR_SELECTIONMODE_DONE_OFFSET = 8,
	HDMI_MAINUNIT_2_INT_MASK_N_TMDSVALID_STABLE_MASK = BIT(1),
	HDMI_MAINUNIT_2_INT_MASK_N_TMDSVALID_STABLE_OFFSET = 1,
	HDMI_MAINUNIT_2_INT_MASK_N_AUDPLL_LOCK_STABLE_MASK = BIT(0),
	HDMI_MAINUNIT_2_INT_MASK_N_AUDPLL_LOCK_STABLE_OFFSET = 0,
	/* MAINUNIT_2_INT_CLEAR field values */
	HDMI_MAINUNIT_2_CLEAR_PHYCREG_CR_TIMEOUT_MASK = BIT(12),
	HDMI_MAINUNIT_2_CLEAR_PHYCREG_CR_TIMEOUT_OFFSET = 12,
	HDMI_MAINUNIT_2_CLEAR_PHYCREG_CR_READ_DONE_MASK = BIT(11),
	HDMI_MAINUNIT_2_CLEAR_PHYCREG_CR_READ_DONE_OFFSET = 11,
	HDMI_MAINUNIT_2_CLEAR_PHYCREG_CR_WRITE_DONE_MASK = BIT(10),
	HDMI_MAINUNIT_2_CLEAR_PHYCREG_CR_WRITE_DONE_OFFSET = 10,
	HDMI_MAINUNIT_2_CLEAR_PHYCREG_CR_SELECTIONMODE_DONE_MASK = BIT(8),
	HDMI_MAINUNIT_2_CLEAR_PHYCREG_CR_SELECTIONMODE_DONE_OFFSET = 8,
	HDMI_MAINUNIT_2_INT_CLEAR_TMDSVALID_STABLE_MASK = BIT(1),
	HDMI_MAINUNIT_2_INT_CLEAR_TMDSVALID_STABLE_OFFSET = 1,
	HDMI_MAINUNIT_2_INT_CLEAR_AUDPLL_LOCK_STABLE_MASK = BIT(0),
	HDMI_MAINUNIT_2_INT_CLEAR_AUDPLL_LOCK_STABLE_OFFSET = 0,
/* --- id_avpunit_interrupt --- */
	/* AVPUNIT_1_INT_STATUS field values */
	HDMI_AVPUNIT_1_INT_STATUS_VMON_VMEAS = BIT(31),
	HDMI_AVPUNIT_1_INT_STATUS_VMON_HMEAS = BIT(30),
	HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP3 = BIT(24),
	HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP2 = BIT(23),
	HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP1 = BIT(22),
	HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP0 = BIT(21),
	HDMI_AVPUNIT_1_INT_STATUS_AUD_MUTE = BIT(20),
	HDMI_AVPUNIT_1_INT_STATUS_AFIFO_UNDERFLOW = BIT(19),
	HDMI_AVPUNIT_1_INT_STATUS_AFIFO_OVERFLOW = BIT(18),
	HDMI_AVPUNIT_1_INT_STATUS_AFIFO_THR_PASS = BIT(13),
	HDMI_AVPUNIT_1_INT_STATUS_AUD_FMT_CHG = BIT(12),
	HDMI_AVPUNIT_1_INT_STATUS_DEFRAMER_DVIHDMI_CHG = BIT(3),
	HDMI_AVPUNIT_1_INT_STATUS_DEFRAMER_GBDET_ERR = BIT(2),
	/* AVPUNIT_1_INT_MASK_N field values */
	HDMI_AVPUNIT_1_INT_MASK_N_VMON_VMEAS_MASK = BIT(31),
	HDMI_AVPUNIT_1_INT_MASK_N_VMON_VMEAS_OFFSET = 31,
	HDMI_AVPUNIT_1_INT_MASK_N_VMON_HMEAS_MASK = BIT(30),
	HDMI_AVPUNIT_1_INT_MASK_N_VMON_HMEAS_OFFSET = 30,
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_CHSTATUS_SP3_MASK = BIT(24),
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_CHSTATUS_SP3_OFFSET = 24,
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_CHSTATUS_SP2_MASK = BIT(23),
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_CHSTATUS_SP2_OFFSET = 23,
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_CHSTATUS_SP1_MASK = BIT(22),
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_CHSTATUS_SP1_OFFSET = 22,
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_CHSTATUS_SP0_MASK = BIT(21),
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_CHSTATUS_SP0_OFFSET = 21,
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_MUTE_MASK = BIT(20),
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_MUTE_OFFSET = 20,
	HDMI_AVPUNIT_1_INT_MASK_N_AFIFO_UNDERFLOW_MASK = BIT(19),
	HDMI_AVPUNIT_1_INT_MASK_N_AFIFO_UNDERFLOW_OFFSET = 19,
	HDMI_AVPUNIT_1_INT_MASK_N_AFIFO_THR_PASS_MASK = BIT(13),
	HDMI_AVPUNIT_1_INT_MASK_N_AFIFO_THR_PASS_OFFSET = 13,
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_FMT_CHG_MASK = BIT(12),
	HDMI_AVPUNIT_1_INT_MASK_N_AUD_FMT_CHG_OFFSET = 12,
	HDMI_AVPUNIT_1_INT_MASK_N_AFIFO_OVERFLOW_MASK = BIT(18),
	HDMI_AVPUNIT_1_INT_MASK_N_AFIFO_OVERFLOW_OFFSET = 18,
	HDMI_AVPUNIT_1_INT_MASK_N_DEFRAMER_DVIHDMI_CHG_MASK = BIT(3),
	HDMI_AVPUNIT_1_INT_MASK_N_DEFRAMER_DVIHDMI_CHG_OFFSET = 3,
	HDMI_AVPUNIT_1_INT_MASK_N_DEFRAMER_GBDET_ERR_MASK = BIT(2),
	HDMI_AVPUNIT_1_INT_MASK_N_DEFRAMER_GBDET_ERR_OFFSET = 2,
	HDMI_AVPUNIT_1_INT_MASK_N_DEFRAMER_VSYNC_MASK = BIT(0),
	HDMI_AVPUNIT_1_INT_MASK_N_DEFRAMER_VSYNC_OFFSET = 0,
	/* AVPUNIT_1_INT_CLEAR field values */
	HDMI_AVPUNIT_1_INT_CLEAR_VMON_VMEAS_MASK = BIT(31),
	HDMI_AVPUNIT_1_INT_CLEAR_VMON_VMEAS_OFFSET = 31,
	HDMI_AVPUNIT_1_INT_CLEAR_VMON_HMEAS_MASK = BIT(30),
	HDMI_AVPUNIT_1_INT_CLEAR_VMON_HMEAS_OFFSET = 30,
	HDMI_AVPUNIT_1_INT_CLEAR_AUD_CHSTATUS_SP3_MASK = BIT(24),
	HDMI_AVPUNIT_1_INT_CLEAR_AUD_CHSTATUS_SP3_OFFSET = 24,
	HDMI_AVPUNIT_1_INT_CLEAR_AUD_CHSTATUS_SP2_MASK = BIT(23),
	HDMI_AVPUNIT_1_INT_CLEAR_AUD_CHSTATUS_SP2_OFFSET = 23,
	HDMI_AVPUNIT_1_INT_CLEAR_AUD_CHSTATUS_SP1_MASK = BIT(22),
	HDMI_AVPUNIT_1_INT_CLEAR_AUD_CHSTATUS_SP1_OFFSET = 22,
	HDMI_AVPUNIT_1_INT_CLEAR_AUD_CHSTATUS_SP0_MASK = BIT(21),
	HDMI_AVPUNIT_1_INT_CLEAR_AUD_CHSTATUS_SP0_OFFSET = 21,
	HDMI_AVPUNIT_1_INT_CLEAR_AUD_MUTE_MASK = BIT(20),
	HDMI_AVPUNIT_1_INT_CLEAR_AUD_MUTE_OFFSET = 20,
	HDMI_AVPUNIT_1_INT_CLEAR_AFIFO_UNDERFLOW_MASK = BIT(19),
	HDMI_AVPUNIT_1_INT_CLEAR_AFIFO_UNDERFLOW_OFFSET = 19,
	HDMI_AVPUNIT_1_INT_CLEAR_AFIFO_OVERFLOW_MASK = BIT(18),
	HDMI_AVPUNIT_1_INT_CLEAR_AFIFO_OVERFLOW_OFFSET = 18,
	HDMI_AVPUNIT_1_INT_CLEAR_DEFRAMER_DVIHDMI_CHG_MASK = BIT(3),
	HDMI_AVPUNIT_1_INT_CLEAR_DEFRAMER_DVIHDMI_CHG_OFFSET = 3,
	HDMI_AVPUNIT_1_INT_CLEAR_DEFRAMER_GBDET_ERR_MASK = BIT(2),
	HDMI_AVPUNIT_1_INT_CLEAR_DEFRAMER_GBDET_ERR_OFFSET = 2,
/* --- id_packet_interrupt --- */
	/* PKT_0_INT_STATUS field values */
	HDMI_PKT_0_INT_STATUS_GENPKT1 = BIT(18),
	HDMI_PKT_0_INT_STATUS_GENPKT0 = BIT(17),
	HDMI_PKT_0_INT_STATUS_DRMIF = BIT(16),
	HDMI_PKT_0_INT_STATUS_NTSCVBIIF = BIT(15),
	HDMI_PKT_0_INT_STATUS_AUDIF = BIT(13),
	HDMI_PKT_0_INT_STATUS_SRCPDIF = BIT(12),
	HDMI_PKT_0_INT_STATUS_AVIIF = BIT(11),
	HDMI_PKT_0_INT_STATUS_VSIF = BIT(10),
	HDMI_PKT_0_INT_STATUS_AMD = BIT(9),
	HDMI_PKT_0_INT_STATUS_GMD = BIT(8),
	HDMI_PKT_0_INT_STATUS_ISRC2 = BIT(7),
	HDMI_PKT_0_INT_STATUS_ISRC1 = BIT(6),
	HDMI_PKT_0_INT_STATUS_ACP = BIT(5),
	HDMI_PKT_0_INT_STATUS_GCP = BIT(4),
	HDMI_PKT_0_INT_STATUS_ACR = BIT(3),
	HDMI_PKT_0_INT_STATUS_ACP_TIMEOUT = BIT(2),
	HDMI_PKT_0_INT_STATUS_ACR_N = BIT(1),
	HDMI_PKT_0_INT_STATUS_ACR_CTS = BIT(0),
	/* PKT_0_INT_MASK_N field values */
	HDMI_PKT_0_INT_MASK_N_GENPKT1_MASK = BIT(18),
	HDMI_PKT_0_INT_MASK_N_GENPKT1_OFFSET = 18,
	HDMI_PKT_0_INT_MASK_N_GENPKT0_MASK = BIT(17),
	HDMI_PKT_0_INT_MASK_N_GENPKT0_OFFSET = 17,
	HDMI_PKT_0_INT_MASK_N_DRMIF_MASK = BIT(16),
	HDMI_PKT_0_INT_MASK_N_DRMIF_OFFSET = 16,
	HDMI_PKT_0_INT_MASK_N_NTSCVBIIF_MASK = BIT(15),
	HDMI_PKT_0_INT_MASK_N_NTSCVBIIF_OFFSET = 15,
	HDMI_PKT_0_INT_MASK_N_AUDIF_MASK = BIT(13),
	HDMI_PKT_0_INT_MASK_N_AUDIF_OFFSET = 13,
	HDMI_PKT_0_INT_MASK_N_SRCPDIF_MASK = BIT(12),
	HDMI_PKT_0_INT_MASK_N_SRCPDIF_OFFSET = 12,
	HDMI_PKT_0_INT_MASK_N_AVIIF_MASK = BIT(11),
	HDMI_PKT_0_INT_MASK_N_AVIIF_OFFSET = 11,
	HDMI_PKT_0_INT_MASK_N_VSIF_MASK = BIT(10),
	HDMI_PKT_0_INT_MASK_N_VSIF_OFFSET = 10,
	HDMI_PKT_0_INT_MASK_N_AMD_MASK = BIT(9),
	HDMI_PKT_0_INT_MASK_N_AMD_OFFSET = 9,
	HDMI_PKT_0_INT_MASK_N_GMD_MASK = BIT(8),
	HDMI_PKT_0_INT_MASK_N_GMD_OFFSET = 8,
	HDMI_PKT_0_INT_MASK_N_ISRC2_MASK = BIT(7),
	HDMI_PKT_0_INT_MASK_N_ISRC2_OFFSET = 7,
	HDMI_PKT_0_INT_MASK_N_ISRC1_MASK = BIT(6),
	HDMI_PKT_0_INT_MASK_N_ISRC1_OFFSET = 6,
	HDMI_PKT_0_INT_MASK_N_ACP_MASK = BIT(5),
	HDMI_PKT_0_INT_MASK_N_ACP_OFFSET = 5,
	HDMI_PKT_0_INT_MASK_N_GCP_MASK = BIT(4),
	HDMI_PKT_0_INT_MASK_N_GCP_OFFSET = 4,
	HDMI_PKT_0_INT_MASK_N_ACR_MASK = BIT(3),
	HDMI_PKT_0_INT_MASK_N_ACR_OFFSET = 3,
	HDMI_PKT_0_INT_MASK_N_ACP_TIMEOUT_MASK = BIT(2),
	HDMI_PKT_0_INT_MASK_N_ACP_TIMEOUT_OFFSET = 2,
	HDMI_PKT_0_INT_MASK_N_ACR_N_MASK = BIT(1),
	HDMI_PKT_0_INT_MASK_N_ACR_N_OFFSET = 1,
	HDMI_PKT_0_INT_MASK_N_ACR_CTS_MASK = BIT(0),
	HDMI_PKT_0_INT_MASK_N_ACR_CTS_OFFSET = 0,
	/* PKT_0_INT_CLEAR field values */
	HDMI_PKT_0_INT_CLEAR_GENPKT1_MASK = BIT(18),
	HDMI_PKT_0_INT_CLEAR_GENPKT1_OFFSET = 18,
	HDMI_PKT_0_INT_CLEAR_GENPKT0_MASK = BIT(17),
	HDMI_PKT_0_INT_CLEAR_GENPKT0_OFFSET = 17,
	HDMI_PKT_0_INT_CLEAR_DRMIF_MASK = BIT(16),
	HDMI_PKT_0_INT_CLEAR_DRMIF_OFFSET = 16,
	HDMI_PKT_0_INT_CLEAR_NTSCVBIIF_MASK = BIT(15),
	HDMI_PKT_0_INT_CLEAR_NTSCVBIIF_OFFSET = 15,
	HDMI_PKT_0_INT_CLEAR_AUDIF_MASK = BIT(13),
	HDMI_PKT_0_INT_CLEAR_AUDIF_OFFSET = 13,
	HDMI_PKT_0_INT_CLEAR_SRCPDIF_MASK = BIT(12),
	HDMI_PKT_0_INT_CLEAR_SRCPDIF_OFFSET = 12,
	HDMI_PKT_0_INT_CLEAR_AVIIF_MASK = BIT(11),
	HDMI_PKT_0_INT_CLEAR_AVIIF_OFFSET = 11,
	HDMI_PKT_0_INT_CLEAR_VSIF_MASK = BIT(10),
	HDMI_PKT_0_INT_CLEAR_VSIF_OFFSET = 10,
	HDMI_PKT_0_INT_CLEAR_AMD_MASK = BIT(9),
	HDMI_PKT_0_INT_CLEAR_AMD_OFFSET = 9,
	HDMI_PKT_0_INT_CLEAR_GMD_MASK = BIT(8),
	HDMI_PKT_0_INT_CLEAR_GMD_OFFSET = 8,
	HDMI_PKT_0_INT_CLEAR_ISRC2_MASK = BIT(7),
	HDMI_PKT_0_INT_CLEAR_ISRC2_OFFSET = 7,
	HDMI_PKT_0_INT_CLEAR_ISRC1_MASK = BIT(6),
	HDMI_PKT_0_INT_CLEAR_ISRC1_OFFSET = 6,
	HDMI_PKT_0_INT_CLEAR_ACP_MASK = BIT(5),
	HDMI_PKT_0_INT_CLEAR_ACP_OFFSET = 5,
	HDMI_PKT_0_INT_CLEAR_GCP_MASK = BIT(4),
	HDMI_PKT_0_INT_CLEAR_GCP_OFFSET = 4,
	HDMI_PKT_0_INT_CLEAR_ACR_MASK = BIT(3),
	HDMI_PKT_0_INT_CLEAR_ACR_OFFSET = 3,
	HDMI_PKT_0_INT_CLEAR_ACP_TIMEOUT_MASK = BIT(2),
	HDMI_PKT_0_INT_CLEAR_ACP_TIMEOUT_OFFSET = 2,
	HDMI_PKT_0_INT_CLEAR_ACR_N_MASK = BIT(1),
	HDMI_PKT_0_INT_CLEAR_ACR_N_OFFSET = 1,
	HDMI_PKT_0_INT_CLEAR_ACR_CTS_MASK = BIT(0),
	HDMI_PKT_0_INT_CLEAR_ACR_CTS_OFFSET = 0,
	/* PKT_1_INT_STATUS field values */
	HDMI_PKT_1_INT_STATUS_NEW_ENTRY = BIT(6),
	HDMI_PKT_1_INT_STATUS_OVERFLOW = BIT(5),
	HDMI_PKT_1_INT_STATUS_UNDERFLOW = BIT(4),
	HDMI_PKT_1_INT_STATUS_THR_HIGH = BIT(2),
	HDMI_PKT_1_INT_STATUS_THR_PASS = BIT(1),
	HDMI_PKT_1_INT_STATUS_THR_LOW = BIT(0),
	/* PKT_1_INT_MASK_N field values */
	HDMI_PKT_1_INT_MASK_N_NEW_ENTRY_MASK = BIT(6),
	HDMI_PKT_1_INT_MASK_N_NEW_ENTRY_OFFSET = 6,
	HDMI_PKT_1_INT_MASK_N_OVERFLOW_MASK = BIT(5),
	HDMI_PKT_1_INT_MASK_N_OVERFLOW_OFFSET = 5,
	HDMI_PKT_1_INT_MASK_N_UNDERFLOW_MASK = BIT(4),
	HDMI_PKT_1_INT_MASK_N_UNDERFLOW_OFFSET = 4,
	HDMI_PKT_1_INT_MASK_N_THR_HIGH_MASK = BIT(2),
	HDMI_PKT_1_INT_MASK_N_THR_HIGH_OFFSET = 2,
	HDMI_PKT_1_INT_MASK_N_THR_PASS_MASK = BIT(1),
	HDMI_PKT_1_INT_MASK_N_THR_PASS_OFFSET = 1,
	HDMI_PKT_1_INT_MASK_N_THR_LOW_MASK = BIT(0),
	HDMI_PKT_1_INT_MASK_N_THR_LOW_OFFSET = 0,
	/* PKT_1_INT_CLEAR field values */
	HDMI_PKT_1_INT_CLEAR_NEW_ENTRY_MASK = BIT(6),
	HDMI_PKT_1_INT_CLEAR_NEW_ENTRY_OFFSET = 6,
	HDMI_PKT_1_INT_CLEAR_OVERFLOW_MASK = BIT(5),
	HDMI_PKT_1_INT_CLEAR_OVERFLOW_OFFSET = 5,
	HDMI_PKT_1_INT_CLEAR_UNDERFLOW_MASK = BIT(4),
	HDMI_PKT_1_INT_CLEAR_UNDERFLOW_OFFSET = 4,
	HDMI_PKT_1_INT_CLEAR_THR_HIGH_MASK = BIT(2),
	HDMI_PKT_1_INT_CLEAR_THR_HIGH_OFFSET = 2,
	HDMI_PKT_1_INT_CLEAR_THR_PASS_MASK = BIT(1),
	HDMI_PKT_1_INT_CLEAR_THR_PASS_OFFSET = 1,
	HDMI_PKT_1_INT_CLEAR_THR_LOW_MASK = BIT(0),
	HDMI_PKT_1_INT_CLEAR_THR_LOW_OFFSET = 0,
/* --- id_scdc_interrupt --- */
	/* SCDC_INT_STATUS field values */
	HDMI_SCDC_INT_STATUS_FRL_RATE_FFE_LEVELS_WR = BIT(4),
	HDMI_SCDC_INT_STATUS_TMDS_CFG = BIT(2),
	HDMI_SCDC_INT_STATUS_SC = BIT(1),
	HDMI_SCDC_INT_STATUS_CFG = BIT(0),
	/* SCDC_INT_MASK_N field values */
	HDMI_SCDC_INT_MASK_N_FRL_RATE_FFE_LEVELS_WR_MASK = BIT(4),
	HDMI_SCDC_INT_MASK_N_FRL_RATE_FFE_LEVELS_WR_OFFSET = 4,
	HDMI_SCDC_INT_MASK_N_TMDS_CFG_MASK = BIT(2),
	HDMI_SCDC_INT_MASK_N_TMDS_CFG_OFFSET = 2,
	HDMI_SCDC_INT_MASK_N_SC_MASK = BIT(1),
	HDMI_SCDC_INT_MASK_N_SC_OFFSET = 1,
	HDMI_SCDC_INT_MASK_N_CFG_MASK = BIT(0),
	HDMI_SCDC_INT_MASK_N_CFG_OFFSET = 0,
	/* SCDC_INT_CLEAR field values */
	HDMI_SCDC_INT_CLEAR_FRL_RATE_FFE_LEVELS_WR_MASK = BIT(4),
	HDMI_SCDC_INT_CLEAR_FRL_RATE_FFE_LEVELS_WR_OFFSET = 4,
	HDMI_SCDC_INT_CLEAR_TMDS_CFG_MASK = BIT(2),
	HDMI_SCDC_INT_CLEAR_TMDS_CFG_OFFSET = 2,
	HDMI_SCDC_INT_CLEAR_SC_MASK = BIT(1),
	HDMI_SCDC_INT_CLEAR_SC_OFFSET = 1,
	HDMI_SCDC_INT_CLEAR_CFG_MASK = BIT(0),
	HDMI_SCDC_INT_CLEAR_CFG_OFFSET = 0,
/* --- id_hdcp_interrupt --- */
	/* HDCP_INT_STATUS field values */
	HDMI_HDCP_INT_STATUS_ENCDIS = BIT(8),
	HDMI_HDCP_INT_STATUS_ENCEN = BIT(7),
	HDMI_HDCP_INT_STATUS_AUTH = BIT(6),
	HDMI_HDCP_INT_STATUS_AKSV_RCV = BIT(0),
	/* HDCP_INT_MASK_N field values */
	HDMI_HDCP_INT_MASK_N_ENCDIS_MASK = BIT(8),
	HDMI_HDCP_INT_MASK_N_ENCDIS_OFFSET = 8,
	HDMI_HDCP_INT_MASK_N_ENCEN_MASK = BIT(7),
	HDMI_HDCP_INT_MASK_N_ENCEN_OFFSET = 7,
	HDMI_HDCP_INT_MASK_N_AUTH_MASK = BIT(6),
	HDMI_HDCP_INT_MASK_N_AUTH_OFFSET = 6,
	HDMI_HDCP_INT_MASK_N_AKSV_RCV_MASK = BIT(0),
	HDMI_HDCP_INT_MASK_N_AKSV_RCV_OFFSET = 0,

	/* HDCP_INT_CLEAR field values */
	HDMI_HDCP_INT_CLEAR_ENCDIS_MASK = BIT(8),
	HDMI_HDCP_INT_CLEAR_ENCDIS_OFFSET = 8,
	HDMI_HDCP_INT_CLEAR_ENCEN_MASK = BIT(7),
	HDMI_HDCP_INT_CLEAR_ENCEN_OFFSET = 7,
	HDMI_HDCP_INT_CLEAR_AUTH_MASK = BIT(6),
	HDMI_HDCP_INT_CLEAR_AUTH_OFFSET = 6,
	HDMI_HDCP_INT_CLEAR_AKSV_RCV_MASK = BIT(0),
	HDMI_HDCP_INT_CLEAR_AKSV_RCV_OFFSET = 0,
/* --- id_cec_interrupt --- */
	/* HDMI_CEC_INT_STATUS field values */
	HDMI_CEC_INT_STATUS_RX_NOTIFY_ERR = BIT(12),
	HDMI_CEC_INT_STATUS_RX_EOM = BIT(11),
	HDMI_CEC_INT_STATUS_TX_DRIVE_ERR = BIT(10),
	HDMI_CEC_INT_STATUS_RX_BUSY = BIT(9),
	HDMI_CEC_INT_STATUS_TX_BUSY = BIT(8),
	HDMI_CEC_INT_STATUS_TX_FRAME_DISCARDED = BIT(5),
	HDMI_CEC_INT_STATUS_TX_NRETRANSMIT_FAIL = BIT(4),
	HDMI_CEC_INT_STATUS_TX_LINE_ERR = BIT(3),
	HDMI_CEC_INT_STATUS_TX_ARBLOST = BIT(2),
	HDMI_CEC_INT_STATUS_TX_NACK = BIT(1),
	HDMI_CEC_INT_STATUS_TX_DONE = BIT(0),
	/* HDMI_CEC_INT_MASK_N field values */
	HDMI_CEC_INT_MASK_N_RX_NOTIFY_ERR_MASK = BIT(12),
	HDMI_CEC_INT_MASK_N_RX_NOTIFY_ERR_OFFSET = 12,
	HDMI_CEC_INT_MASK_N_RX_EOM_MASK = BIT(11),
	HDMI_CEC_INT_MASK_N_RX_EOM_OFFSET = 11,
	HDMI_CEC_INT_MASK_N_TX_DRIVE_ERR_MASK = BIT(10),
	HDMI_CEC_INT_MASK_N_TX_DRIVE_ERR_OFFSET = 10,
	HDMI_CEC_INT_MASK_N_RX_BUSY_MASK = BIT(9),
	HDMI_CEC_INT_MASK_N_RX_BUSY_OFFSET = 9,
	HDMI_CEC_INT_MASK_N_TX_BUSY_MASK = BIT(8),
	HDMI_CEC_INT_MASK_N_TX_BUSY_OFFSET = 8,
	HDMI_CEC_INT_MASK_N_TX_FRAME_DISCARDED_MASK = BIT(5),
	HDMI_CEC_INT_MASK_N_TX_FRAME_DISCARDED_OFFSET = 5,
	HDMI_CEC_INT_MASK_N_TX_NRETRANSMIT_FAIL_MASK = BIT(4),
	HDMI_CEC_INT_MASK_N_TX_NRETRANSMIT_FAIL_OFFSET = 4,
	HDMI_CEC_INT_MASK_N_TX_LINE_ERR_MASK = BIT(3),
	HDMI_CEC_INT_MASK_N_TX_LINE_ERR_OFFSET = 3,
	HDMI_CEC_INT_MASK_N_TX_ARBLOST_MASK = BIT(2),
	HDMI_CEC_INT_MASK_N_TX_ARBLOST_OFFSET = 2,
	HDMI_CEC_INT_MASK_N_TX_NACK_MASK = BIT(1),
	HDMI_CEC_INT_MASK_N_TX_NACK_OFFSET = 1,
	HDMI_CEC_INT_MASK_N_TX_DONE_MASK = BIT(0),
	HDMI_CEC_INT_MASK_N_TX_DONE_OFFSET = 0,
	/* HDMI_CEC_INT_CLEAR field values */
	HDMI_CEC_INT_CLEAR_RX_NOTIFY_ERR_MASK = BIT(12),
	HDMI_CEC_INT_CLEAR_RX_NOTIFY_ERR_OFFSET = 12,
	HDMI_CEC_INT_CLEAR_RX_EOM_MASK = BIT(11),
	HDMI_CEC_INT_CLEAR_RX_EOM_OFFSET = 11,
	HDMI_CEC_INT_CLEAR_TX_DRIVE_ERR_MASK = BIT(10),
	HDMI_CEC_INT_CLEAR_TX_DRIVE_ERR_OFFSET = 10,
	HDMI_CEC_INT_CLEAR_RX_BUSY_MASK = BIT(9),
	HDMI_CEC_INT_CLEAR_RX_BUSY_OFFSET = 9,
	HDMI_CEC_INT_CLEAR_TX_BUSY_MASK = BIT(8),
	HDMI_CEC_INT_CLEAR_TX_BUSY_OFFSET = 8,
	HDMI_CEC_INT_CLEAR_TX_FRAME_DISCARDED_MASK = BIT(5),
	HDMI_CEC_INT_CLEAR_TX_FRAME_DISCARDED_OFFSET = 5,
	HDMI_CEC_INT_CLEAR_TX_NRETRANSMIT_FAIL_MASK = BIT(4),
	HDMI_CEC_INT_CLEAR_TX_NRETRANSMIT_FAIL_OFFSET = 4,
	HDMI_CEC_INT_CLEAR_TX_LINE_ERR_MASK = BIT(3),
	HDMI_CEC_INT_CLEAR_TX_LINE_ERR_OFFSET = 3,
	HDMI_CEC_INT_CLEAR_TX_ARBLOST_MASK = BIT(2),
	HDMI_CEC_INT_CLEAR_TX_ARBLOST_OFFSET = 2,
	HDMI_CEC_INT_CLEAR_TX_NACK_MASK = BIT(1),
	HDMI_CEC_INT_CLEAR_TX_NACK_OFFSET = 1,
	HDMI_CEC_INT_CLEAR_TX_DONE_MASK = BIT(0),
	HDMI_CEC_INT_CLEAR_TX_DONE_OFFSET = 0,
};

/* Interrupts flags */
#define HDMI_IRQ_IF_FLAG				(\
				HDMI_PKT_0_INT_STATUS_AVIIF | \
				HDMI_PKT_0_INT_STATUS_SRCPDIF | \
				HDMI_PKT_0_INT_STATUS_AUDIF | \
				HDMI_PKT_0_INT_STATUS_VSIF | \
				HDMI_PKT_0_INT_STATUS_DRMIF)
#define HDMI_IRQ_AUDIO_AVP1_FLAG		(\
				HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP3 | \
				HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP2 | \
				HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP1 | \
				HDMI_AVPUNIT_1_INT_STATUS_AUD_CHSTATUS_SP0 | \
				HDMI_AVPUNIT_1_INT_STATUS_AFIFO_UNDERFLOW | \
				HDMI_AVPUNIT_1_INT_STATUS_AFIFO_OVERFLOW | \
				HDMI_AVPUNIT_1_INT_STATUS_AFIFO_THR_PASS | \
				HDMI_AVPUNIT_1_INT_STATUS_AUD_MUTE)
#define HDMI_IRQ_AUDIO_PKT0_FLAG		(\
				HDMI_PKT_0_INT_STATUS_ACR_N | \
				HDMI_PKT_0_INT_STATUS_ACR_CTS)
				//HDMI_PKT_0_INT_STATUS_GCP)
#define HDMI_IRQ_VIDEO_CHG_FLAG			(\
				HDMI_AVPUNIT_1_INT_STATUS_VMON_VMEAS | \
				HDMI_AVPUNIT_1_INT_STATUS_VMON_HMEAS)

#define HDMIRX_INTR_SYNC						0x01
#define HDMIRX_INTR_HDCP						0x02
#define HDMIRX_INTR_EDID						0x03
#define HDMIRX_INTR_PKT							0x04
#define HDMIRX_INTR_AVMUTE						0x05
#define HDMIRX_INTR_TMDS						0x06
#define HDMIRX_INTR_CHNL_STS					0x07
#define HDMIRX_INTR_CLR_DEPTH					0x08
#define HDMIRX_INTR_VSI_STOP					0x09
#define HDMIRX_INTR_GMD_PKT						0x0A
#define HDMIRX_INTR_HDCP_2X						0x0B
#define HDMIRX_INTR_PRT							0x0C
#define HDMIRX_INTR_WAKEUP						0x0D

#define w32HDMI_RX_PHYCREG_CONFIG1			{\
		u32 uPHYCREG_CONFIG1_cr_para_addr	: 16;\
		u32 RSVD							: 16;\
											}

#define w32HDMI_RX_PHYCREG_CONFIG2			{\
		u32 uPHYCREG_CONFIG2_cr_para_wr_data: 16;\
		u32 RSVD							: 16;\
											}

#define w32HDMI_RX_PHYCREG_CONTROL			{\
		u32 uPHYCREG_CONTROL_cr_para_READ_P	: 1;\
		u32 uPHYCREG_CONTROL_cr_para_WRITE_P: 1;\
		u32 RSVD							: 30;\
											}

#define w32HDMI_RX_PHYCREG_STATUS			{\
	u32 uPHYCREG_STATUS_cr_para_rd_data		: 16;\
	u32 RSVD1								: 8;\
	u32 uPHYCREG_STATUS_cr_para_datavalid	: 1;\
	u32 RSVD2								: 7;\
											}

#define w32HDMI_RX_WRAP_PHY_SRAM_CTRL_STATUS	{\
	u32 uPHY_SRAM_CTRL_STATUS_sram_init_done	:  1;\
	u32 RSVDx28_b1								: 31;\
												}
#define w32HDMI_RX_WRAP_PHY_CTRL_STATUS			{\
	u32 uPHY_CTRL_STATUS_dtb_out				: 10;\
	u32 uPHY_CTRL_STATUS_oext_hdmi_disable_ack	:  1;\
	u32 uPHY_CTRL_STATUS_oext_pddq_ack			:  1;\
	u32 RSVDx20_b12								: 20;\
												}

#define w32HDMI_RX_WRAP_PHY_SRAM_CTRL			{\
	u32 uPHY_SRAM_CTRL_sram_bypass				:  1;\
	u32 uPHY_SRAM_CTRL_sram_ext_ld_done			:  1;\
	u32 RSVDx24_b2								: 30;\
												}

#define w32HDMI_RX_WRAP_HDMI_CONTROLLER_STATUS			{\
	UNSG32 uHDMI_CONTROLLER_STATUS_oavmute				:  1;\
	UNSG32 uHDMI_CONTROLLER_STATUS_tmdsvalid			:  1;\
	UNSG32 uHDMI_CONTROLLER_STATUS_opvo_type			:  2;\
	UNSG32 uHDMI_CONTROLLER_STATUS_opvo_color_depth		:  4;\
	UNSG32 uHDMI_CONTROLLER_STATUS_opvo_format			:  3;\
	UNSG32 uHDMI_CONTROLLER_STATUS_opvo_field			:  2;\
	UNSG32 uHDMI_CONTROLLER_STATUS_ocfg_avmute_sts		:  1;\
	UNSG32 uHDMI_CONTROLLER_STATUS_ocfg_amd_chg_p		:  1;\
	UNSG32 RSVDxC_b15									: 17;\
}

#define w32HDMI_RX_WRAP_AUDIO_PLL_CTRL				{\
	u32 uAUDIO_PLL_CTRL_hdmiRxAudPLL_itest_data_i	:  8;\
	u32 uAUDIO_PLL_CTRL_hdmiRxAudPLL_itest_rd_en		:  1;\
	u32 uAUDIO_PLL_CTRL_hdmiRxAudPLL_itest_rst_n		:  1;\
	u32 uAUDIO_PLL_CTRL_hdmiRxAudPLL_itest_sel		:  6;\
	u32 uAUDIO_PLL_CTRL_hdmiRxAudPLL_itest_wr_en		:  1;\
	u32 RSVDx4_b17									: 15;\
}
typedef union T32HDMI_RX_PHYCREG_CONFIG1 {
	u32 reg;
	struct w32HDMI_RX_PHYCREG_CONFIG1;
} T32HDMI_RX_PHYCREG_CONFIG1;
typedef union T32HDMI_RX_PHYCREG_CONFIG2 {
	u32 reg;
	struct w32HDMI_RX_PHYCREG_CONFIG2;
} T32HDMI_RX_PHYCREG_CONFIG2;
typedef union T32HDMI_RX_PHYCREG_CONTROL {
	u32 reg;
	struct w32HDMI_RX_PHYCREG_CONTROL;
} T32HDMI_RX_PHYCREG_CONTROL;
typedef union T32HDMI_RX_PHYCREG_STATUS {
	u32 reg;
	struct w32HDMI_RX_PHYCREG_STATUS;
} T32HDMI_RX_PHYCREG_STATUS;

typedef union T32HDMI_RX_WRAP_PHY_SRAM_CTRL_STATUS {
	u32 reg;
	struct w32HDMI_RX_WRAP_PHY_SRAM_CTRL_STATUS;
} T32HDMI_RX_WRAP_PHY_SRAM_CTRL_STATUS;

typedef union T32HDMI_RX_WRAP_PHY_CTRL_STATUS {
	u32 reg;
	struct w32HDMI_RX_WRAP_PHY_CTRL_STATUS;
} T32HDMI_RX_WRAP_PHY_CTRL_STATUS;

typedef union T32HDMI_RX_WRAP_PHY_SRAM_CTRL {
	u32 reg;
	struct w32HDMI_RX_WRAP_PHY_SRAM_CTRL;
} T32HDMI_RX_WRAP_PHY_SRAM_CTRL;

typedef union  T32HDMI_RX_WRAP_HDMI_CONTROLLER_STATUS {
	u32 reg;
	struct w32HDMI_RX_WRAP_HDMI_CONTROLLER_STATUS;
} T32HDMI_RX_WRAP_HDMI_CONTROLLER_STATUS;

typedef union  T32HDMI_RX_WRAP_AUDIO_PLL_CTRL {
	u32 reg;
	struct w32HDMI_RX_WRAP_AUDIO_PLL_CTRL;
} T32HDMI_RX_WRAP_AUDIO_PLL_CTRL;

struct hrx_infoframe_cfg {
	const char *desc;
	int type;
	u8 header[3];
	u32 header_addr;
	u32 payload_addr;
	u32 payload_len;
	void *frame;
	u32 frame_size;
};

typedef enum HRX_HDCP_VERSION_T {
	HRX_HDCP_VERSION_NONE = 0x00,
	HRX_HDCP_VERSION_14,
	HRX_HDCP_VERSION_22,
	HRX_HDCP_VERSION_AUTO,
} HRX_HDCP_VERSION;


enum hdmi_infoframe_type {
	HDMI_INFOFRAME_TYPE_VENDOR = 0x81,
	HDMI_INFOFRAME_TYPE_AVI = 0x82,
	HDMI_INFOFRAME_TYPE_SPD = 0x83,
	HDMI_INFOFRAME_TYPE_AUDIO = 0x84,
	HDMI_INFOFRAME_TYPE_HDR = 0x87,
};

#define HDMI_IEEE_OUI 0x000c03
#define HDMI_DV_IEEE_OUI 0x00d046
#define HDMI_FORUM_IEEE_OUI 0xc45dd8
#define HDMI_INFOFRAME_HEADER_SIZE  4
#define HDMI_AVI_INFOFRAME_SIZE    13
#define HDMI_SPD_INFOFRAME_SIZE    25
#define HDMI_AUDIO_INFOFRAME_SIZE  10

#define HDMI_INFOFRAME_SIZE(type)	\
	(HDMI_INFOFRAME_HEADER_SIZE + HDMI_ ## type ## _INFOFRAME_SIZE)

struct hdmi_any_infoframe {
	enum hdmi_infoframe_type type;
	u8 version;
	u8 length;
};

enum hdmi_colorspace {
	HDMI_COLORSPACE_RGB,
	HDMI_COLORSPACE_YUV422,
	HDMI_COLORSPACE_YUV444,
	HDMI_COLORSPACE_YUV420,
	HDMI_COLORSPACE_RESERVED4,
	HDMI_COLORSPACE_RESERVED5,
	HDMI_COLORSPACE_RESERVED6,
	HDMI_COLORSPACE_IDO_DEFINED,
};

enum hdmi_scan_mode {
	HDMI_SCAN_MODE_NONE,
	HDMI_SCAN_MODE_OVERSCAN,
	HDMI_SCAN_MODE_UNDERSCAN,
	HDMI_SCAN_MODE_RESERVED,
};

enum hdmi_colorimetry {
	HDMI_COLORIMETRY_NONE,
	HDMI_COLORIMETRY_ITU_601,
	HDMI_COLORIMETRY_ITU_709,
	HDMI_COLORIMETRY_EXTENDED,
};

enum hdmi_picture_aspect {
	HDMI_PICTURE_ASPECT_NONE,
	HDMI_PICTURE_ASPECT_4_3,
	HDMI_PICTURE_ASPECT_16_9,
	HDMI_PICTURE_ASPECT_64_27,
	HDMI_PICTURE_ASPECT_256_135,
	HDMI_PICTURE_ASPECT_RESERVED,
};

enum hdmi_active_aspect {
	HDMI_ACTIVE_ASPECT_16_9_TOP = 2,
	HDMI_ACTIVE_ASPECT_14_9_TOP = 3,
	HDMI_ACTIVE_ASPECT_16_9_CENTER = 4,
	HDMI_ACTIVE_ASPECT_PICTURE = 8,
	HDMI_ACTIVE_ASPECT_4_3 = 9,
	HDMI_ACTIVE_ASPECT_16_9 = 10,
	HDMI_ACTIVE_ASPECT_14_9 = 11,
	HDMI_ACTIVE_ASPECT_4_3_SP_14_9 = 13,
	HDMI_ACTIVE_ASPECT_16_9_SP_14_9 = 14,
	HDMI_ACTIVE_ASPECT_16_9_SP_4_3 = 15,
};

enum hdmi_extended_colorimetry {
	HDMI_EXTENDED_COLORIMETRY_XV_YCC_601,
	HDMI_EXTENDED_COLORIMETRY_XV_YCC_709,
	HDMI_EXTENDED_COLORIMETRY_S_YCC_601,
	HDMI_EXTENDED_COLORIMETRY_ADOBE_YCC_601,
	HDMI_EXTENDED_COLORIMETRY_ADOBE_RGB,

	/* The following EC values are only defined in CEA-861-F. */
	HDMI_EXTENDED_COLORIMETRY_BT2020_CONST_LUM,
	HDMI_EXTENDED_COLORIMETRY_BT2020,
	HDMI_EXTENDED_COLORIMETRY_RESERVED,
};

enum hdmi_quantization_range {
	HDMI_QUANTIZATION_RANGE_DEFAULT,
	HDMI_QUANTIZATION_RANGE_LIMITED,
	HDMI_QUANTIZATION_RANGE_FULL,
	HDMI_QUANTIZATION_RANGE_RESERVED,
};

/* non-uniform picture scaling */
enum hdmi_nups {
	HDMI_NUPS_UNKNOWN,
	HDMI_NUPS_HORIZONTAL,
	HDMI_NUPS_VERTICAL,
	HDMI_NUPS_BOTH,
};

enum hdmi_ycc_quantization_range {
	HDMI_YCC_QUANTIZATION_RANGE_LIMITED,
	HDMI_YCC_QUANTIZATION_RANGE_FULL,
};

enum hdmi_content_type {
	HDMI_CONTENT_TYPE_GRAPHICS,
	HDMI_CONTENT_TYPE_PHOTO,
	HDMI_CONTENT_TYPE_CINEMA,
	HDMI_CONTENT_TYPE_GAME,
};

struct hdmi_avi_infoframe {
	enum hdmi_infoframe_type type;
	u8 version;
	u8 length;
	enum hdmi_colorspace colorspace;
	enum hdmi_scan_mode scan_mode;
	enum hdmi_colorimetry colorimetry;
	enum hdmi_picture_aspect picture_aspect;
	enum hdmi_active_aspect active_aspect;
	u8 itc;
	enum hdmi_extended_colorimetry extended_colorimetry;
	enum hdmi_quantization_range quantization_range;
	enum hdmi_nups nups;
	u8 video_code;
	enum hdmi_ycc_quantization_range ycc_quantization_range;
	enum hdmi_content_type content_type;
	u8 pixel_repeat;
	u16 top_bar;
	u16 bottom_bar;
	u16 left_bar;
	u16 right_bar;
};

enum hdmi_spd_sdi {
	HDMI_SPD_SDI_UNKNOWN,
	HDMI_SPD_SDI_DSTB,
	HDMI_SPD_SDI_DVDP,
	HDMI_SPD_SDI_DVHS,
	HDMI_SPD_SDI_HDDVR,
	HDMI_SPD_SDI_DVC,
	HDMI_SPD_SDI_DSC,
	HDMI_SPD_SDI_VCD,
	HDMI_SPD_SDI_GAME,
	HDMI_SPD_SDI_PC,
	HDMI_SPD_SDI_BD,
	HDMI_SPD_SDI_SACD,
	HDMI_SPD_SDI_HDDVD,
	HDMI_SPD_SDI_PMP,
};

struct hdmi_spd_infoframe {
	enum hdmi_infoframe_type type;
	u8 version;
	u8 length;
	char vendor[8];
	char product[16];
	enum hdmi_spd_sdi sdi;
};

enum hdmi_audio_coding_type {
	HDMI_AUDIO_CODING_TYPE_STREAM,
	HDMI_AUDIO_CODING_TYPE_PCM,
	HDMI_AUDIO_CODING_TYPE_AC3,
	HDMI_AUDIO_CODING_TYPE_MPEG1,
	HDMI_AUDIO_CODING_TYPE_MP3,
	HDMI_AUDIO_CODING_TYPE_MPEG2,
	HDMI_AUDIO_CODING_TYPE_AAC_LC,
	HDMI_AUDIO_CODING_TYPE_DTS,
	HDMI_AUDIO_CODING_TYPE_ATRAC,
	HDMI_AUDIO_CODING_TYPE_DSD,
	HDMI_AUDIO_CODING_TYPE_EAC3,
	HDMI_AUDIO_CODING_TYPE_DTS_HD,
	HDMI_AUDIO_CODING_TYPE_MLP,
	HDMI_AUDIO_CODING_TYPE_DST,
	HDMI_AUDIO_CODING_TYPE_WMA_PRO,
	HDMI_AUDIO_CODING_TYPE_CXT,
};

enum hdmi_audio_sample_size {
	HDMI_AUDIO_SAMPLE_SIZE_STREAM,
	HDMI_AUDIO_SAMPLE_SIZE_16,
	HDMI_AUDIO_SAMPLE_SIZE_20,
	HDMI_AUDIO_SAMPLE_SIZE_24,
};

enum hdmi_audio_sample_frequency {
	HDMI_AUDIO_SAMPLE_FREQUENCY_STREAM,
	HDMI_AUDIO_SAMPLE_FREQUENCY_32000,
	HDMI_AUDIO_SAMPLE_FREQUENCY_44100,
	HDMI_AUDIO_SAMPLE_FREQUENCY_48000,
	HDMI_AUDIO_SAMPLE_FREQUENCY_88200,
	HDMI_AUDIO_SAMPLE_FREQUENCY_96000,
	HDMI_AUDIO_SAMPLE_FREQUENCY_176400,
	HDMI_AUDIO_SAMPLE_FREQUENCY_192000,
};

enum hdmi_audio_coding_type_ext {
	/* Refer to Audio Coding Type (CT) field in Data Byte 1 */
	HDMI_AUDIO_CODING_TYPE_EXT_CT,

	/*
	 * The next three CXT values are defined in CEA-861-E only.
	 * They do not exist in older versions, and in CEA-861-F they are
	 * defined as 'Not in use'.
	 */
	HDMI_AUDIO_CODING_TYPE_EXT_HE_AAC,
	HDMI_AUDIO_CODING_TYPE_EXT_HE_AAC_V2,
	HDMI_AUDIO_CODING_TYPE_EXT_MPEG_SURROUND,

	/* The following CXT values are only defined in CEA-861-F. */
	HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC,
	HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC_V2,
	HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_AAC_LC,
	HDMI_AUDIO_CODING_TYPE_EXT_DRA,
	HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_HE_AAC_SURROUND,
	HDMI_AUDIO_CODING_TYPE_EXT_MPEG4_AAC_LC_SURROUND = 10,
};

struct hdmi_audio_infoframe {
	enum hdmi_infoframe_type type;
	u8 version;
	u8 length;
	u8 channels;
	enum hdmi_audio_coding_type coding_type;
	enum hdmi_audio_sample_size sample_size;
	enum hdmi_audio_sample_frequency sample_frequency;
	enum hdmi_audio_coding_type_ext coding_type_ext;
	u8 channel_allocation;
	u8 level_shift_value;
	u8 downmix_inhibit;
};

enum hdmi_3d_structure {
	HDMI_3D_STRUCTURE_INVALID = -1,
	HDMI_3D_STRUCTURE_FRAME_PACKING = 0,
	HDMI_3D_STRUCTURE_FIELD_ALTERNATIVE,
	HDMI_3D_STRUCTURE_LINE_ALTERNATIVE,
	HDMI_3D_STRUCTURE_SIDE_BY_SIDE_FULL,
	HDMI_3D_STRUCTURE_L_DEPTH,
	HDMI_3D_STRUCTURE_L_DEPTH_GFX_GFX_DEPTH,
	HDMI_3D_STRUCTURE_TOP_AND_BOTTOM,
	HDMI_3D_STRUCTURE_SIDE_BY_SIDE_HALF = 8,
};


struct hdmi_vendor_infoframe {
	enum hdmi_infoframe_type type;
	u8 version;
	u8 length;
	unsigned int oui;
	u8 vic;
	enum hdmi_3d_structure s3d_struct;
	unsigned int s3d_ext_data;

	/*VS Info Dolby*/
	u8 DoViSignal;
	u8 LowLatency;
	u8 BkLt_MD_Present;
	u8 Aux_MD_Present;
	u8 Eff_tmax_PQ_hi;
	u8 Eff_tmax_PQ_low;
	u8 Aux_runmode;
	u8 Aux_runversion;
	u8 Aux_debug;
};

union hdmi_vendor_any_infoframe {
	struct {
		enum hdmi_infoframe_type type;
		u8 version;
		u8 length;
		unsigned int oui;
	} any;
	struct hdmi_vendor_infoframe hdmi;
};

enum hdmi_hdr_eotf {
	HDMI_HDR_EOTF_SDR = 0,
	HDMI_HDR_EOTF_HDR,
	HDMI_HDR_EOTF_SMPTE,
	HDMI_HDR_EOTF_HLG = 3,
	HDMI_HDR_EOTF_NONE = 8,
};

enum hdmi_hdr_metadata_type {
	HDMI_HDR_METADATA_INVALID = -1,
	HDMI_HDR_METADATA_TYPE1 = 0,
};

struct hdmi_hdr_infoframe {
	enum hdmi_infoframe_type type;
	u8 version;
	u8 length;
	enum hdmi_hdr_eotf eotf;
	enum hdmi_hdr_metadata_type metadata_type;
	u16 display_prim_x[3];
	u16 display_prim_y[3];
	u16 white_point_x;
	u16 white_point_y;
	u16 max_dml;
	u16 min_dml;
	u16 max_cll;
	u16 max_fll;
};

/**
 * union hdmi_infoframe - overall union of all abstract infoframe representations
 * @any: generic infoframe
 * @avi: avi infoframe
 * @spd: spd infoframe
 * @vendor: union of all vendor infoframes
 * @audio: audio infoframe
 *
 * This is used by the generic pack function. This works since all infoframes
 * have the same header which also indicates which type of infoframe should be
 * packed.
 */
union hdmi_infoframe {
	struct hdmi_any_infoframe any;
	struct hdmi_avi_infoframe avi;
	struct hdmi_spd_infoframe spd;
	union hdmi_vendor_any_infoframe vendor;
	struct hdmi_audio_infoframe audio;
	struct hdmi_hdr_infoframe hdr;
};

struct hrx_hdr_infoframe {
	u8 raw_data[35];
	u8 version;
	u8 length;
	u8 eotf;
	u8 metadata_type;
	u16 display_prim_x[3];
	u16 display_prim_y[3];
	u16 white_point_x;
	u16 white_point_y;
	u16 max_dml;
	u16 min_dml;
	u16 max_cll;
	u16 max_fll;
};


struct hrx_infoframe {
	unsigned int valid;
	unsigned int type;
	union {
	union hdmi_infoframe general;
	struct hrx_hdr_infoframe hdr;
	} infoframe;
};

/* Infoframe type */
#define HDMI_INFOFRAME_TYPE_GENERAL 0
#define HDMI_INFOFRAME_TYPE_HDRIF     1

/* id_packet_decoder Registers */
#define HDMI_PKTDEC_ACR_CONFIG                  0x1000
#define HDMI_PKTDEC_ACR_CTS_CONFIG              0x1004
#define HDMI_PKTDEC_ACR_N_CONFIG                0x1008
#define HDMI_PKTDEC_ACR_MAXMIN_CLEAR            0x100C
#define HDMI_PKTDEC_ACR_CTS_MAX_STATUS          0x1010
#define HDMI_PKTDEC_ACR_CTS_MIN_STATUS          0x1014
#define HDMI_PKTDEC_ACR_N_MAX_STATUS            0x1018
#define HDMI_PKTDEC_ACR_N_MIN_STATUS            0x101C
#define HDMI_PKTDEC_SP_VALID_CONFIG             0x1020
#define HDMI_PKTDEC_GCP_AVMUTE_CONFIG           0x1024
#define HDMI_PKTDEC_AVMUTE_DIS_CONTROL          0x1028
#define HDMI_PKTDEC_GCP_AVMUTE_STATUS           0x1030
#define HDMI_PKTDEC_SNAPSHOT_BYP_CONTROL        0x1040
#define HDMI_PKTDEC_ACR_PH                      0x1100
#define HDMI_PKTDEC_ACR_PB(x)                   (0x1104 + ((x) * 4))
#define HDMI_PKTDEC_GCP_PH                      0x1120
#define HDMI_PKTDEC_GCP_PB(x)                   (0x1124 + ((x) * 4))
#define HDMI_PKTDEC_ACP_PH                      0x1140
#define HDMI_PKTDEC_ACP_PB(x)                   (0x1144 + ((x) * 4))
#define HDMI_PKTDEC_ISRC1_PH                    0x1160
#define HDMI_PKTDEC_ISRC1_PB(x)                 (0x1164 + ((x) * 4))
#define HDMI_PKTDEC_ISRC2_PH                    0x1180
#define HDMI_PKTDEC_ISRC2_PB(x)                 (0x1184 + ((x) * 4))
#define HDMI_PKTDEC_GMD_PH                      0x11A0
#define HDMI_PKTDEC_GMD_PB(x)                   (0x11A4 + ((x) * 4))
#define HDMI_PKTDEC_AMD_PH                      0x11C0
#define HDMI_PKTDEC_AMD_PB(x)                   (0x11C4 + ((x) * 4))
#define HDMI_PKTDEC_VSIF_PH                     0x11E0
#define HDMI_PKTDEC_VSIF_PB(x)                  (0x11E4 + ((x) * 4))
#define HDMI_PKTDEC_VSIF_PBLEN                  7
#define HDMI_PKTDEC_AVIIF_PH                    0x1200
#define HDMI_PKTDEC_AVIIF_PB(x)                 (0x1204 + ((x) * 4))
#define HDMI_PKTDEC_AVIIF_PBLEN                 4
#define HDMI_PKTDEC_SRCPDIF_PH                  0x1220
#define HDMI_PKTDEC_SRCPDIF_PB(x)               (0x1224 + ((x) * 4))
#define HDMI_PKTDEC_SRCPDIF_PBLEN               7
#define HDMI_PKTDEC_AUDIF_PH                    0x1240
#define HDMI_PKTDEC_AUDIF_PB(x)                 (0x1244 + ((x) * 4))
#define HDMI_PKTDEC_AUDIF_PBLEN                 2
#define HDMI_PKTDEC_MPEGSIF_PH                  0x1260
#define HDMI_PKTDEC_MPEGSIF_PB(x)               (0x1264 + ((x) * 4))
#define HDMI_PKTDEC_NTSCVBIIF_PH                0x1280
#define HDMI_PKTDEC_NTSCVBIIF_PB(x)             (0x1284 + ((x) * 4))
#define HDMI_PKTDEC_DRMIF_PH                    0x12A0
#define HDMI_PKTDEC_DRMIF_PB(x)                 (0x12A4 + ((x) * 4))
#define HDMI_PKTDEC_DRMIF_PBLEN                 7
#define HDMI_PKTDEC_GENPKT0_PH                  0x1480
#define HDMI_PKTDEC_GENPKT0_PB(x)               (0x1484 + ((x) * 4))
#define HDMI_PKTDEC_GENPKT1_PH                  0x14A0
#define HDMI_PKTDEC_GENPKT1_PB(x)               (0x14A4 + ((x) * 4))


/* VIP registers */

/* maximum number of VIP objects */
#ifdef MAX_NUM_VIP_OBJECTS
#error "duplicated MACRO definition of MAX_NUM_VIP_OBJECTS."
#else
#define MAX_NUM_VIP_OBJECTS  1
#endif

/* maximum number of frames in VIP frame buffer queue */
#ifdef MAX_NUM_VIP_FRAMES
#error "duplicated MACRO definition of MAX_NUM_VIP_FRAMES."
#else
#define MAX_NUM_VIP_FRAMES         8
#endif

/* maximum number of commands in VIP ISR task command queue */
#ifdef MAX_NUM_VIP_CMDS
#error "duplicated MACRO definition of MAX_NUM_VIP_CMDS."
#else
#define MAX_NUM_VIP_CMDS      100
#endif

/* VIP BCM buffer size */
#ifdef VIP_BCM_BUFFER_SIZE
#error "duplicated MACRO definition of VIP_BCM_BUFFER_SIZE."
#else
#define VIP_BCM_BUFFER_SIZE   0x2000//8K
#ifdef FIX_LATER
#define VIP_BCM_BUFFER_SIZE   (16*8)//16 BCMP commands data + address
#endif
#endif

/* VIP DHUB cmdQ size */
#ifdef VIP_DHUB_CFGQ_SIZE
#error "duplicated MACRO definition of VIP_DHUB_CFGQ_SIZE."
#else
/* TODO: Check size */
#define VIP_DHUB_CFGQ_SIZE   (16 * 8 * 32)
#endif

/* definition of input mode */
typedef enum {
	VIP_IMODE_INVALID = -1,
	VIP_IMODE0_8BIT_YCBCR = 0, /* YCBCR 444 8 bit */
	VIP_IMODE1_10BIT_YCBCR, /* YCBCR 444 10 bit */
	VIP_IMODE2_12BIT_YCBCR, /* YCBCR 444 12 bit */
	VIP_IMODE3_8BIT_YC, /* YCBCR 422 8 bit */
	VIP_IMODE4_10BIT_YC, /* YCBCR 422 10 bit */
	VIP_IMODE5_12BIT_YC, /* YCBCR 422 12 bit */
	VIP_IMODE6_8BIT_RGB,
	VIP_IMODE7_10BIT_RGB,
	VIP_IMODE8_12BIT_RGB,
	VIP_IMODE9_8BIT_YUV420,
	VIP_IMODE10_10BIT_YUV420,
	VIP_IMODE11_12BIT_YUV420,
	MAX_NUM_VIP_IMODE,
} ENUM_VIP_IMODE;

/* definition of output mode */
typedef enum {
	VIP_OMODE_INVALID = -1,
	VIP_OMODE0_8BIT_YC = 0, /* YCBCR 422 8 bit */
	VIP_OMODE1_10BIT_YC, /* YCBCR 422 10 bit */
	VIP_OMODE2_8BIT_YUV420,
	VIP_OMODE3_10BIT_YUV420,
	VIP_OMODE4_12BIT_YUV420,
	VIP_OMODE5_8BIT_YCBCR,
	VIP_OMODE6_10BIT_YCBCR,
	VIP_OMODE7_12BIT_YCBCR,
	VIP_OMODE8_8BIT_RGB,
	VIP_OMODE9_10BIT_RGB,
	VIP_OMODE10_12BIT_RGB,
	VIP_OMODE11_12BIT_YC,
	MAX_NUM_VIP_OMODE,
} ENUM_VIP_OMODE;

/* definition of VIP status */
typedef enum {
	VIP_STATUS_INACTIVE			= 0, /* VIP object is not configured */
	VIP_STATUS_ACTIVE			= 1, /* VIP object is configured */
	VIP_STATUS_START			= 2, /* VIP object is started to buffering frames/data */
	VIP_STATUS_STOP				= 3, /* VIP object is stopped to buffering frames/data */
	VIP_STATUS_EXIT				= 4, /* VIP object is destroyed */
} ENUM_VIP_STATUS;

/* definition of DVI signal status */
typedef enum {
	VIP_SIGNAL_UNSTABLE			= 0, /* DVI signal unstable */
	VIP_SIGNAL_INTERMEDIATE		= 1, /* DVI signal intermediate: HS stable; VS unstable */
	VIP_SIGNAL_STABLE			= 2, /* DVI signal stable */
} ENUM_VIP_SIGNAL_STATUS;

/*Enums for CSC mode.*/
typedef enum VIP_CSC_MODES {
	VIP_CSC_BYPASS_MODE = 0,
	VIP_CSC_601_TO_709,
	VIP_CSC_709_TO_601,
	VIP_CSC_RGB_TO_YUV_709,
	VIP_CSC_YUV_709_TO_RGB,
	VIP_CSC_RGB_TO_YUV_601,
	VIP_CSC_YUV_601_TO_RGB,
	VIP_CSC_sRGB_TO_YUV_709,
	VIP_CSC_YUV_709_TO_sRGB,
	VIP_CSC_sRGB_TO_YUV_601,
	VIP_CSC_YUV_601_TO_sRGB,
	VIP_CSC_UV_SWAP,
	VIP_CSC_CUSTOM,
	VIP_CSC_MODES_NO_CHANGE,
	VIP_CSC_MAX_MODES = VIP_CSC_MODES_NO_CHANGE
} VIP_CSC_MODES;

typedef enum VIP_DITHER_USER {
	VIP_DITHER_HDMIRX_PIPE = 0,
	VIP_DITHER_OVPSCL_Y,
	VIP_DITHER_OVPSCL_UV,
} VIP_DITHER_USER;

typedef enum VIP_DITHER_YCMODE {
	VIP_DITHER_YCMODE_422_420 = 0,
	VIP_DITHER_YCMODE_444,
} VIP_DITHER_YCMODE;

typedef enum VIP_DITHER_MODE {
	VIP_DITHER_TRUNCATE = 0,
	VIP_DITHER_ROUND,
	VIP_DITHER_1D_ERR_DIFFUSION_TRUNCATE,
	VIP_DITHER_1D_ERR_DIFFUSION_ROUND,
} VIP_DITHER_MODE;

typedef enum {
	VIP_INPUT_8BIT    = 0,
	VIP_INPUT_10BIT,
	VIP_INPUT_12BIT,
} ENUM_VIP_OUTPUT_BIT_DEPTH;

typedef enum {
	VIP_OUTPUT_8BIT = 0,
	VIP_OUTPUT_10BIT,
	VIP_OUTPUT_12BIT,
} ENUM_VIP_INPUT_BIT_DEPTH;

typedef enum {
	VIP_SI_RESET = 0,
	VIP_SI_UNSTABLE = 1,
	VIP_SI_STABLE = 2,
	VIP_SI_ABSENT = 3,
} ENUM_VIP_SI_STATUS;

typedef enum {
	DVI_VDE_INTR = 0,
	SD_WRE_INTR = 1,
	SD_RDE_INTR = 2,
	VBI_VDE_INTR = 3
} VIP_ENUM_INTR;

typedef enum {
	VIP_INT_HDMIRX = 0,
} VIP_ENUM_INT_SRC;

/*Enum for FRC SCL unit number*/
typedef enum VIP_FRC_SCL_NUM {
	VIP_FRC_SCL_Y = 0,
	VIP_FRC_SCL_UV,
	VIP_FRC_SCL_MAX
} VIP_FRC_SCL_NUM;

/*Enum for FRC SCL unit number*/
typedef enum VPP_FRC_SCL_NUM {
	VPP_FRC_SCL_MAIN = 0,
	VPP_FRC_SCL_PIP,
	VPP_FRC_SCL_OSD,
	VPP_FRC_SCL_GFX2,
	VPP_FRC_SCL_VIP_Y,
	VPP_FRC_SCL_VIP_UV,
	VPP_FRC_SCL_OVP_Y,
	VPP_FRC_SCL_OVP_UV,
	VPP_FRC_SCL_DET,
	VPP_FRC_SCL_MAX
} VPP_FRC_SCL_NUM;


/**********************************************************************
 *macro definitions for FRC scaler                                                                           *
 **********************************************************************
 */

/*register number in a FRC_SCL unit, neglect those useless*/
#define FRC_SCL_REG_NUM 73//register number in local buffer

/*maximum address in the line buffer*/
#define VIP_SCL_LINE_BUF_ADDR_MAX 1279


/*scaler tap number restrictions*/
#define VIP_SCL_HTAP_NUM_MIN 1
#define VIP_SCL_HTAP_NUM_MAX 8
#define VIP_SCL_VTAP_NUM_MIN 1
#define VIP_SCL_VTAP_NUM_MAX 6

/*max allowable expension ratio in non linear*/
#define VIP_SCL_MAX_EXP 4
/*max allowable reduction ratio in non linear*/
#define VIP_SCL_MAX_RED 3

/*CSC coefficient and offset number*/
#define VIP_SCL_MAX_COL_COEFF_INDEX   9
#define VIP_SCL_MAX_COL_OFFSET_INDEX  3

/*CPCB FRC_SCL unit number validation*/
#define CHECK_FRC_SCL_NUM(UnitNum)\
do {\
	if ((UnitNum < VIP_FRC_SCL_Y) || (UnitNum >= VIP_FRC_SCL_MAX))\
		return -1;\
} while (0)

#define CHECK_VIP_SCL_RETVAL(cmd)\
do {\
	ret = cmd;\
	if (ret != 0)\
		return ret;\
} while (0)

#define VPP_BASE_ADDRESS_VIPSCL (MEMMAP_AVIO_REG_BASE + AVIO_MEMMAP_AVIO_HDMIRXPIPE_REG_BASE)
#define VPP_BASE_ADDRESS_VIPSCLTOP (VPP_BASE_ADDRESS_VIPSCL + RA_HDMIRX_PIPE_VIPSCLTOP)
#define VPP_BASE_ADDRESS_VIPSCL_Y  (VPP_BASE_ADDRESS_VIPSCLTOP + RA_VIPSCLTOP_OVPSCL_Y)
#define VPP_BASE_ADDRESS_VIPSCL_UV (VPP_BASE_ADDRESS_VIPSCLTOP + RA_VIPSCLTOP_OVPSCL_UV)

/*scaler input and output resolution*/
typedef struct VIP_SCL_RES_T {
	u32 IVRes;
	u32 IHRes;
	u32 OVRes;
	u32 OHRes;
} VIP_SCL_RES, *PVIP_SCL_RES;

/*data structure for scaler control*/
typedef struct VIP_SCL_CTRL_T {
	u8  NLEn;       //enable non linear scaler
	u8  DynamicLoad; // 1: dynamically load coefficient table, 0: don't load coefficient table dynamically.
	u8  ForceSel; // 0: secect coefficients by scaling ratio.1:force selection scaler H coeff, 2:force selection scaler V coeff, 3:force selection both
	int  HSclMode; //if set ForceSel to 1, HSclMode should be set
	int  VSclMode; //if set ForceSel to 1, VSclMode should be set
	u8  CenterFrac; //used when enable NL scaling
	u8  CenterRatio;//used when enable NL scaling
	//cropping related variables
	u8  leftCrop;        //for odd start x
	u8  rightCrop;       //for odd width
	u32 uncrop_IHRes;    //complete/uncropped resolution input to SCL - used for lsize calculation
	u8  uiUVswapEn;
} VIP_SCL_CTRL, *PVIP_SCL_CTRL;

/**********************************************************************
 *data structure definition for FRC SCL block driver                                                  *
 **********************************************************************
 */

/*Enum for horizontal scaler position*/
typedef enum VIP_SCL_HSCALER_POS {
	VIP_SCL_HSCALE_ABSENT = 0,
	VIP_SCL_HSCALE_BEFORE = 2,
	VIP_SCL_HSCALE_AFTER,
	VIP_SCL_HSCALE_AUTO
} VIP_SCL_HSCALER_POS;

/*Enum for input and  output bit mode*/
typedef enum VIP_SCL_IO_BITMODE {
	VIP_SCL_16IN_16OUT = 0,
	VIP_SCL_24IN_16OUT,
	VIP_SCL_16IN_24OUT,
	VIP_SCL_24IN_24OUT
} VIP_SCL_IO_BITMODE;

/*Enum for CSC mode in OSD formatter*/
typedef enum VIP_SCL_CSC_MODES {
	VIP_SCL_CSC_BYPASS_MODE = 0,
	VIP_SCL_CSC_RGB_TO_YUV_709,
	VIP_SCL_CSC_RGB_TO_YUV_601,
	VIP_SCL_CSC_sRGB_TO_YUV_709,
	VIP_SCL_CSC_sRGB_TO_YUV_601,
	VIP_SCL_CSC_MAX_MODES
} VIP_SCL_CSC_MODES;

/*Enum for input data format of OSD formatter*/
typedef enum VIP_SCL_OSD_CTRL {
	VIP_SCL_32BIT_8888_OSD = 2,
	VIP_SCL_24BIT_888_OSD = 8,
	VIP_SCL_OSD_CTRL_MAX
} VIP_SCL_OSD_CTRL;

/*Enum for scaler to CPCB switch*/
typedef enum VIP_SCL_BE_SWITCH {
	VIP_SCL_BE_CPCB0_PATH0 = 0,
	VIP_SCL_BE_CPCB0_PATH1,
	VIP_SCL_BE_CPCB0_PATH2,
	VIP_SCL_BE_CPCB0_PATH3,
	VIP_SCL_BE_CPCB1_PATH0,
	VIP_SCL_BE_CPCB1_PATH1,
	VIP_SCL_BE_CPCB1_PATH2,
	VIP_SCL_BE_CPCB1_PATH3,
	VIP_SCL_BE_CPCB2_PATH0,
	VIP_SCL_BE_CPCB2_PATH1,
	VIP_SCL_BE_SWITCH_MAX
} VIP_SCL_BE_SWITCH;

/*Enum for FRC SCL phase */
typedef enum VIP_FRC_SCL_PHASE_HV {
	VIP_FRC_SCL_PHASE_HORIZONTAL = 0,
	VIP_FRC_SCL_PHASE_VERTICAL
} VIP_FRC_SCL_PHASE_HV;

/*sacler coefficient mode*/
typedef enum VIP_FRC_SCL_COEFF_MODE_T {
	FIRST_SCL_COEFF =  0,
	COEFF_MAIN_MIN = 0,
	COEFF_H_MAIN_ADP_HLUT_CS = COEFF_MAIN_MIN,
	COEFF_H_MAIN_1D_HLUT_BLK5,
	COEFF_H_MAIN_1D_HLUT_PH8,
	COEFF_H_MAIN_1D_HLUT_PH8_SOFT,
	COEFF_V_MAIN_ADP_HLUT_BS,
	COEFF_V_MAIN_1D_VLUT_DBG1,
	COEFF_V_MAIN_1D_VLUT_2TAP,
	COEFF_V_MAIN_1D_VLUT_3TAP_CUBIC_1DSCL,
	COEFF_V_MAIN_1D_VLUT_BLK5,
	COEFF_V_MAIN_1D_VLUT_6TAP,
	COEFF_MAIN_MAX = COEFF_V_MAIN_1D_VLUT_6TAP,
	COEFF_GFX_MIN,
	COEFF_H_GFX_HLUT_BLK5_GFX = COEFF_GFX_MIN,
	COEFF_H_GFX_HLUT_PV8,
	COEFF_V_GFX_VLUT_CS_4TAP,
	COEFF_V_GFX_VLUT_3TAP_CUBIC,
	COEFF_V_GFX_VLUT_1TAP,
	COEFF_GFX_MAX = COEFF_V_GFX_VLUT_1TAP,
	COEFF_MAX
} VIP_FRC_SCL_COEFF_MODE, *PVIP_FRC_SCL_COEFF_MODE;


typedef union VIP_SCL_CTRL0_T {
	u8 uch8;
	struct {
	u8 uchAvg4FiltSel:2;
	u8 uchCscEn:1;
	u8 uchHnlEn:1;
	u8 uchUpsEn:1;
	u8 uchDnsEn:1;
	u8 uchDgnlEn:1;
	u8 uchDemoModeEn:1;
	};
} VIP_SCL_CTRL0;

typedef union VIP_SCL_CTRL1_T {
	u8 uch8;
	struct {
	u8 uchSel_1D_adp:1;
	u8 uchUp_down:1;
	u8 uchVSclInUpsEn:1;
	u8 uchVSclOutUpsEn:1;
	u8 uchVSclInUpsCoeff:1;
	};
} VIP_SCL_CTRL1;

typedef union VIP_FRC_CTRL0_0_T {
	u8 uch8;
	struct {
	u8 uchFrcMode:2;
	u8 uchMosiacMode:1;
	u8 uchBitMode_16_24:1;
	u8 uchSpMode:4;
	};
} VIP_FRC_CTRL0_0;
typedef union VIP_FRC_CTRL0_1_T {
	u8 uch8;
	struct {
	u8 uchLoadRead:1;
	u8 uchLoadWrite:1;
	u8 uchReadCtrl:1;
	u8 uchWriteCtrl:1;
	u8 uchFreeze:1;
	u8 uchInvFeFld:1;
	u8 uchInvBeFld:1;
	u8 uchBeFrstResetEn:1;
	};
} VIP_FRC_CTRL0_1;

typedef union VIP_FRC_CTRL1_2_T {
	u8 uch8;
	struct {
	u8 uchTreaLessReadCtrl:4;
	u8 uchTreaLessWriteCtrl:4;
	};
} VIP_FRC_CTRL1_2;

/*FRC input resolution*/
typedef struct VIP_FRC_RES_T {
	u32  HRes;
	u32  VRes;
} VIP_FRC_RES, *PVIP_FRC_RES;

typedef struct VIP_SCL_NL_PARAM_T {
	VIP_SCL_RES     IORes;
	u8         CenterFrac;
} VIP_SCL_NL_PARAM;

typedef struct VIP_SCL_CTRL_PARAM_T {
	VIP_SCL_RES        IORes;
	VIP_SCL_CTRL    SclCtrl;
} VIP_SCL_CTRL_PARAM;

typedef union VPP_VDO_SCL_REG_T {
	VIP_SCL_CTRL_PARAM    SCLCtrlparam;
	VIP_SCL_NL_PARAM    SCLNLParam;
} VPP_VDO_SCL_REG;

/* definition of all the horizontal and vertical scaling coefficient modes */
typedef enum {
	VIP_SCALAR_COEFF_INVALID                            = -1,
	VIP_FIRST_SCALAR_COEFF                              = 0,
	VIP_SCALAR_COEFF_MAIN_MIN                           = 0,
	VIP_SCALAR_COEFF_H_MAIN_ADP_HLUT_CS                 = 0,
	VIP_SCALAR_COEFF_H_MAIN_1D_HLUT_BLK5                = 1,
	VIP_SCALAR_COEFF_H_MAIN_1D_HLUT_PH8                 = 2,
	VIP_SCALAR_COEFF_H_MAIN_1D_HLUT_PH8_SOFT            = 3,
	VIP_SCALAR_COEFF_V_MAIN_ADP_HLUT_BS                 = 4,
	VIP_SCALAR_COEFF_V_MAIN_1D_VLUT_DBG1                = 5,
	VIP_SCALAR_COEFF_V_MAIN_1D_VLUT_2TAP                = 6,
	VIP_SCALAR_COEFF_V_MAIN_1D_VLUT_3TAP_CUBIC_1DSCL    = 7,
	VIP_SCALAR_COEFF_V_MAIN_1D_VLUT_BLK5                = 8,
	VIP_SCALAR_COEFF_V_MAIN_1D_VLUT_6TAP                = 9,
	VIP_SCALAR_COEFF_MAIN_MAX                           = 9,
	VIP_MAX_NUM_PREDEFINED_COEFFS                       = 10,
	VIP_SCALAR_COEFF_AUTO                               = 10,
	VIP_MAX_NUM_SCALAR_COEFF_MODES
} VIP_ENUM_SCALAR_COEFF_MODE;

/* definition of HV scaling coeff selection */
enum {
	VIP_MODE_COEFF_SEL_AUTO      = 0,
	VIP_MODE_COEFF_SEL_FORCE_H   = 1,
	VIP_MODE_COEFF_SEL_FORCE_V   = 2,
	VIP_MODE_COEFF_SEL_FORCE_HV  = 3,
};

#define VIP_FRC_SCL_MAIN_LAY_MAX 1 /* Main only */
#define VIP_FRC_SCL_LAY_MAX      2 /* Max among all the scalers */
#define VIP_FRC_SCL_NUM_OF_PHASES 17
#define VIP_FRC_SCL_NUM_OF_COEFF  8
#define VIP_FRC_SCL_COEFF_TAB_SIZE  (VIP_FRC_SCL_NUM_OF_PHASES * \
									VIP_FRC_SCL_NUM_OF_COEFF * \
									sizeof(u16))

/* size if calculated as 7 values, 7 address and sizeof(u32) for each of them */
#define VIP_FRC_COEFFTAB_BCMBUF_NUM_OF_PAIRS_PERPHASE (7 * 2)
#define VIP_FRC_COEFFTAB_BCMBUF_NUM_OF_PAIRS \
			(VIP_FRC_COEFFTAB_BCMBUF_NUM_OF_PAIRS_PERPHASE * \
			VIP_FRC_SCL_NUM_OF_PHASES)
#define VIP_FRC_COEFFTAB_BCMBUF_SIZE_PERPHASE \
			(VIP_FRC_COEFFTAB_BCMBUF_NUM_OF_PAIRS_PERPHASE * sizeof(u32))
#define VIP_FRC_COEFFTAB_BCMBUF_SIZE \
			(VIP_FRC_COEFFTAB_BCMBUF_SIZE_PERPHASE * \
			VIP_FRC_SCL_NUM_OF_PHASES)

/* VPP SCL Coeff Macros */
#define VPP_FRC_SCL_MAIN_LAY_MAX 6 /* Main(1SCL), Detail(1SCL), VIP(2SCL) & OVP(2SCL)*/
#define VPP_FRC_SCL_GFX_LAY_MAX  3 /* PIP , OSD & GFX2 */
#define VPP_FRC_SCL_LAY_MAX      6 /* Max among all the scalers */
#define VPP_FRC_SCL_NUM_OF_PHASES 17
#define VPP_FRC_SCL_NUM_OF_COEFF  8
#define VPP_FRC_SCL_COEFF_TAB_SIZE  (VPP_FRC_SCL_NUM_OF_PHASES * VPP_FRC_SCL_NUM_OF_COEFF * sizeof(u16))

/* size if calculated as 7 values, 7 address and sizeof(u32) for each of them */
#define VPP_FRC_COEFFTAB_BCMBUF_NUM_OF_PAIRS_PERPHASE (7*2)
#define VPP_FRC_COEFFTAB_BCMBUF_NUM_OF_PAIRS (VPP_FRC_COEFFTAB_BCMBUF_NUM_OF_PAIRS_PERPHASE * VPP_FRC_SCL_NUM_OF_PHASES)
#define VPP_FRC_COEFFTAB_BCMBUF_SIZE_PERPHASE (VPP_FRC_COEFFTAB_BCMBUF_NUM_OF_PAIRS_PERPHASE*sizeof(u32))
#define VPP_FRC_COEFFTAB_BCMBUF_SIZE (VPP_FRC_COEFFTAB_BCMBUF_SIZE_PERPHASE * VPP_FRC_SCL_NUM_OF_PHASES)


typedef struct tag_VIP_TG_PARAMS {
	/* HDE start point in terms of pixels starting from incoming Hsync */
	unsigned int start_x;
	/* HDE end point in terms of pixels starting from incoming Hsync */
	unsigned int end_x;
	/* VDE start point in terms of lines starting from incoming Vsync */
	unsigned int start_y;
	/* VDE end point in terms of lines starting from incoming Vsync */
	unsigned int end_y;
	/* VDE start point in terms of pixels
	 * starting from previous incoming Hsync
	 */
	unsigned int vsamp;

	unsigned int htotal;
	unsigned int vtotal;
	unsigned int width;
	unsigned int height;

	unsigned int vsw;
	unsigned int hsw;
	unsigned int hvsync_negative;

	int field_flag;     //1 - indicate interlace mode
	int mode_3d;        //1 - 3D mode
	int sync_type;      //0 - H/V sync; 1 - H/V DE
	unsigned int    pixel_freq;
	unsigned int    refresh_rate;

	/*
	 * unsigned int    hTot;
	 * unsigned int    vTot;
	 * unsigned int    hActive;
	 * unsigned int        vActive;
	 * int hActiveStart;
	 * int vActiveStart;
	 */
} VIP_TG_PARAMS;

/**********************************************************************
 *macro definitions for backend VOP                                                                       *
 **********************************************************************
 */

/*CSC coeff index*/
#define VIP_CSC_MAX_COEFF_INDEX  10

/*CSC offset index*/
#define VIP_CSC_MAX_OFFSET_INDEX 3
#define RA_HDMIRX_PIPE_CTRL						0x0000
#define RA_HDMIRX_PIPE_BYPASS_CTRL				0x0008
#define RA_HDMIRX_PIPE_INTR_EN					0x0048
#define RA_HDMIRX_PIPE_VIP_WR					0x005C
#define RA_HDMIRX_PIPE_VIP_CRCH_WR				0x006C
#define RA_HDMIRX_PIPE_VIP_METADATA_WR			0x007C
#define RA_HDMIRX_PIPE_VIP_TG					0x008C
#define RA_HDMIRX_PIPE_VIPSCLTOP				0x00CC
#define RA_HDMIRX_PIPE_VIP_CSC					0x02A8
#define RA_HDMIRX_PIPE_VIP_DITHER				0x02E4
#define RA_HDMIRX_PIPE_VIP_UPS420_HDMI			0x02E8
#define RA_HDMIRX_PIPE_VIP_PATGEN				0x030C
#define RA_HDMIRX_PIPE_VIPSTS					0x0334
#define RA_HDMIRX_PIPE_VIP_OTG					0x0380
#define RA_HDMIRX_PIPE_SRAMPWR_UPS420_HDMI		0x03C0
#define RA_HDMIRX_PIPE_SRAMPWR_Y				0x03C4
#define RA_HDMIRX_PIPE_SRAMPWR_UV				0x03C8
#define RA_HDMIRX_PIPE_SRAMPWR_Y_HLUT			0x03CC
#define RA_HDMIRX_PIPE_SRAMPWR_Y_VLUT			0x03D0
#define RA_HDMIRX_PIPE_SRAMPWR_C_HLUT			0x03D4
#define RA_HDMIRX_PIPE_SRAMPWR_C_VLUT			0x03D8
#define RA_HDMIRX_PIPE_SRAMPWR_UFP_FIFO		0x03DC
#define RA_HDMIRX_PIPE_EDR_HDMIRX				0x03E0

#define RA_CSC_C17O24_CFG0						0x0000

#define HRX_AIP_OK            0
#define HRX_AIP_ENODEV        -1
#define HRX_AIP_EBADPARAM     -2
#define HRX_AIP_EBADCALL      -3
#define HRX_AIP_EUNSUPPORT    -4
#define HRX_AIP_EIOFAIL       -5
#define HRX_AIP_EUNCONFIG     -6
#define HRX_AIP_ECMDQFULL     -7
#define HRX_AIP_EFRAMEQFULL   -8
#define HRX_AIP_EFRAMEQEMPTY  -9
#define HRX_AIP_ENOMEM        -10
#define HRX_AIP_EOVERFLOW     -11
#define HRX_AIP_ENOSPACE      -12
#define HRX_AIP_EEMPTY        -13
#define HRX_AIP_ENOTREADY     -14
#define HRX_AIP_EWRONGSTATE   -15
#define HRX_AIP_EUNKNOW       -16

typedef enum {
	AIP_MONO_UNDEF = 0,
	AIP_MONO_LEFT = 1,
	AIP_MONO_RGHT = 2,
	AIP_STEREO    = 3,
	AIP_MONO_MAX,
} ENUM_AIP_MONO_MODE;

typedef enum {
	AIP_STATUS_INACTIVE,
	AIP_STATUS_ACTIVE,
	AIP_STATUS_START,
	AIP_STATUS_STOP,
	AIP_STATUS_CLOSE,
} AIP_OBJ_STATUS;

typedef enum {
	AIP_SIGNAL_STATUS_STABLE,
	AIP_SIGNAL_STATUS_UNSTABLE,
} AIP_SIGNAL_STATUS;

struct aip_shm {
    struct dma_buf *buf;
    void *p;
};

#define DEFAULT_BURST_SIZE		(AIP_DEFAULT_CHUNK_SIZE << 3)
#define PCM_BURST_SIZE			(1024 << 3)
#define DOLBY_AC3_BURST_SIZE	(1536 << 3)
#define DOLBY_PLUS_BURST_SIZE	(6144 << 3)
#define DOLBY_MAT_BURST_SIZE	(7680 << 3)
#define DTS_TYPE1_BURST_SIZE	(512  << 3)
#define DTS_TYPE2_BURST_SIZE	(1024 << 3)
#define DTS_TYPE3_BURST_SIZE	(2048 << 3)

#endif
